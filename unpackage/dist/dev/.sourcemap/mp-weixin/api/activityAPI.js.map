{"version":3,"file":"activityAPI.js","sources":["api/activityAPI.js"],"sourcesContent":["// activityAPI.js\r\nimport request from '../util/request';\r\nimport { alertFail } from '../util/showMessages';\r\nimport { useActivityStore } from '../store/activityStore';\r\nimport { ref, watch } from 'vue';\r\nimport { useUserStore } from '../store/userStore';\r\n\r\n/**\r\n * 发起活动\r\n * @param {Object} data - 活动数据\r\n * @returns {Promise} - 返回发起结果\r\n */\r\nexport const launchActivity = async (data) => {\r\n    try {\r\n        let res = await request.post('/activity/launch', data);\r\n        await getUserActivity();\r\n        \r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(launchActivity.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 上传图片\r\n * @param {Object} data - 图片数据\r\n * @returns {Promise} - 返回上传结果\r\n */\r\nexport const postImage = async (data) => {\r\n    try {\r\n        let res = await request.post('/user/public/avatar', data);\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(postImage.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 删除图片\r\n * @param {string} fileName - 图片文件名\r\n * @returns {Promise} - 返回删除结果\r\n */\r\nexport const deleteImage = async (fileName) => {\r\n    try {\r\n        let res = await request.delete(`/user/public/avatar/${fileName}`);\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(deleteImage.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 获取城市与活动分类\r\n * @returns {Promise} - 返回城市和分类数据\r\n */\r\nexport const getCityAndCategory = async () => {\r\n    try {\r\n        let res = await request.get('/activity/public/city-category');\r\n        res = res?.data;\r\n        const activeStore = useActivityStore();\r\n        activeStore.setCityList(res?.data.cities);\r\n        activeStore.setCategoryList(res?.data?.categories);\r\n        return res;\r\n    } catch (e) {\r\n        alertFail(getCityAndCategory.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 获取活动列表\r\n * @param {Ref} selectedCategory - 选择的分类ID\r\n * @param {Ref} page - 页码\r\n * @param {Ref} keyword - 搜索关键词\r\n * @param {Ref} isLoading - 加载状态\r\n * @returns {Ref} - 返回活动列表的Ref对象\r\n */\r\nexport const getActivityList = (\r\n    selectedCategory = ref(0),\r\n    page = ref(1),\r\n    keyword = ref(\"\"),\r\n    isLoading = ref(false)\r\n) => {\r\n    const activities = ref();\r\n    \r\n    watch([selectedCategory, page, keyword], async () => {\r\n        try {\r\n            isLoading.value = true;\r\n            let res = await request.get('/activity/public/activity-list', {\r\n                categoryId: selectedCategory.value || 0,\r\n                page: 1,\r\n                pageSize: 4 * page.value || 4,\r\n                keyword: keyword.value || '',\r\n            });\r\n            isLoading.value = false;\r\n            activities.value = res?.data?.data;\r\n        } catch (e) {\r\n            alertFail(getActivityList.name, e?.message);\r\n        }\r\n    }, {\r\n        immediate: true\r\n    });\r\n    \r\n    return activities;\r\n};\r\n\r\n/**\r\n * 获取活动详情\r\n * @param {string} id - 活动ID\r\n * @returns {Promise} - 返回活动详情\r\n */\r\nexport const getActivityDetail = async (id) => {\r\n    try {\r\n        let res = await request.get('/activity/public/activity-detail', {\r\n            id: id\r\n        });\r\n        return res?.data?.data;\r\n    } catch (e) {\r\n        alertFail(getActivityDetail.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 获取参与的活动\r\n * @returns {Promise} - 返回参与的活动列表\r\n */\r\nexport const getJoinedActivity = async () => {\r\n    try {\r\n        let res = await request.get('/activity/activity-joined');\r\n        const userStore = useUserStore();\r\n        userStore.setParticipation(res?.data?.data ?? []);\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(getJoinedActivity.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 参加活动\r\n * @param {string} activityId - 活动ID\r\n * @returns {Promise} - 返回参加结果\r\n */\r\nexport const joinActivity = async (activityId) => {\r\n    try {\r\n        let res = await request.post('/activity/activity-join', activityId, {\r\n            header: { 'Content-Type': 'application/json' }\r\n        });\r\n        await getJoinedActivity();\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(joinActivity.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 取消报名\r\n * @param {string} activityId - 活动ID\r\n * @returns {Promise} - 返回取消结果\r\n */\r\nexport const cancelJoinActivity = async (activityId) => {\r\n    try {\r\n        let res = await request.post('/activity/activity-join-cancel', activityId, {\r\n            header: { 'Content-Type': 'application/json' }\r\n        });\r\n        await getJoinedActivity();\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(cancelJoinActivity.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 获取用户发起的活动\r\n * @param {string|null} userId - 用户ID，为null时获取当前用户发起的活动\r\n * @returns {Promise} - 返回用户发起的活动列表\r\n */\r\nexport const getUserActivity = async (userId = null) => {\r\n    try {\r\n        let res = await request.get('/activity/list', {\r\n            userId: userId\r\n        });\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(getUserActivity.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 取消活动\r\n * @param {string} activityId - 活动ID\r\n * @returns {Promise} - 返回取消结果\r\n */\r\nexport const cancelActivity = async (activityId) => {\r\n    try {\r\n        let res = await request.post('/activity/activity-cancel', activityId, {\r\n            header: { 'Content-Type': 'application/json' }\r\n        });\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(cancelActivity.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 发表活动评论\r\n * @param {Object} data - 评论数据\r\n * @returns {Promise} - 返回评论结果\r\n */\r\nexport const postActivityComment = async (data) => {\r\n    try {\r\n        let res = await request.post('/activity/activity-comment', data);\r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(postActivityComment.name, e?.message);\r\n    }\r\n};\r\n\r\n/**\r\n * 获取热门活动\r\n * @param {number} num - 获取的数量\r\n * @returns {Promise} - 返回热门活动列表\r\n */\r\nexport const getTopActivity = async (num = 3) => {\r\n    try {\r\n        let res = await request.get(`/activity/top-activity`, {\r\n            num: num\r\n        });\r\n        \r\n        return res?.data;\r\n    } catch (e) {\r\n        alertFail(getTopActivity.name, e?.message);\r\n    }\r\n}; "],"names":["request","useActivityStore","alertFail","ref","watch","useUserStore"],"mappings":";;;;;;AAuDY,MAAC,qBAAqB,YAAY;;AAC1C,MAAI;AACA,QAAI,MAAM,MAAMA,aAAAA,QAAQ,IAAI,gCAAgC;AAC5D,UAAM,2BAAK;AACX,UAAM,cAAcC,oBAAAA;AACpB,gBAAY,YAAY,2BAAK,KAAK,MAAM;AACxC,gBAAY,iBAAgB,gCAAK,SAAL,mBAAW,UAAU;AACjD,WAAO;AAAA,EACV,SAAQ,GAAG;AACRC,sBAAAA,UAAU,mBAAmB,MAAM,uBAAG,OAAO;AAAA,EAChD;AACL;AAUY,MAAC,kBAAkB,CAC3B,mBAAmBC,cAAG,IAAC,CAAC,GACxB,OAAOA,cAAG,IAAC,CAAC,GACZ,UAAUA,cAAG,IAAC,EAAE,GAChB,YAAYA,cAAG,IAAC,KAAK,MACpB;AACD,QAAM,aAAaA,cAAAA;AAEnBC,gBAAAA,MAAM,CAAC,kBAAkB,MAAM,OAAO,GAAG,YAAY;;AACjD,QAAI;AACA,gBAAU,QAAQ;AAClB,UAAI,MAAM,MAAMJ,qBAAQ,IAAI,kCAAkC;AAAA,QAC1D,YAAY,iBAAiB,SAAS;AAAA,QACtC,MAAM;AAAA,QACN,UAAU,IAAI,KAAK,SAAS;AAAA,QAC5B,SAAS,QAAQ,SAAS;AAAA,MAC1C,CAAa;AACD,gBAAU,QAAQ;AAClB,iBAAW,SAAQ,gCAAK,SAAL,mBAAW;AAAA,IACjC,SAAQ,GAAG;AACRE,wBAAAA,UAAU,gBAAgB,MAAM,uBAAG,OAAO;AAAA,IAC7C;AAAA,EACT,GAAO;AAAA,IACC,WAAW;AAAA,EACnB,CAAK;AAED,SAAO;AACX;AAsBY,MAAC,oBAAoB,YAAY;;AACzC,MAAI;AACA,QAAI,MAAM,MAAMF,aAAAA,QAAQ,IAAI,2BAA2B;AACvD,UAAM,YAAYK,gBAAAA;AAClB,cAAU,mBAAiB,gCAAK,SAAL,mBAAW,SAAQ,CAAE,CAAA;AAChD,WAAO,2BAAK;AAAA,EACf,SAAQ,GAAG;AACRH,sBAAAA,UAAU,kBAAkB,MAAM,uBAAG,OAAO;AAAA,EAC/C;AACL;AAyCY,MAAC,kBAAkB,OAAO,SAAS,SAAS;AACpD,MAAI;AACA,QAAI,MAAM,MAAMF,qBAAQ,IAAI,kBAAkB;AAAA,MAC1C;AAAA,IACZ,CAAS;AACD,WAAO,2BAAK;AAAA,EACf,SAAQ,GAAG;AACRE,sBAAAA,UAAU,gBAAgB,MAAM,uBAAG,OAAO;AAAA,EAC7C;AACL;AAqCY,MAAC,iBAAiB,OAAO,MAAM,MAAM;AAC7C,MAAI;AACA,QAAI,MAAM,MAAMF,aAAAA,QAAQ,IAAI,0BAA0B;AAAA,MAClD;AAAA,IACZ,CAAS;AAED,WAAO,2BAAK;AAAA,EACf,SAAQ,GAAG;AACRE,sBAAAA,UAAU,eAAe,MAAM,uBAAG,OAAO;AAAA,EAC5C;AACL;;;;;;"}