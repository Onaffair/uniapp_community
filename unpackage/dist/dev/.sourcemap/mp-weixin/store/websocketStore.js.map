{"version":3,"file":"websocketStore.js","sources":["store/websocketStore.js"],"sourcesContent":["// websocketStore.js\r\nimport { defineStore } from 'pinia'\r\nimport { ref, watch } from 'vue'\r\nimport { useUserStore } from './userStore'\r\nimport { wsUrl } from '../util/basic-data'\r\nimport { WebSocketUtils } from '../util'\r\n\r\nexport const useWebSocketStore = defineStore('websocket', () => {\r\n    const userStore = useUserStore()\r\n    const wsInstance = ref(null)\r\n    const isConnected = ref(false)\r\n    const lastError = ref(null)\r\n    const reconnectTimer = ref(null) // 重连定时器\r\n\r\n    // 初始化WebSocket连接\r\n    const initWebSocket = () => {\r\n        if (!userStore.isLogin || wsInstance.value) return\r\n\r\n        try {\r\n            // 使用WebSocketUtils创建连接\r\n            wsInstance.value = new WebSocketUtils(\r\n                wsUrl,\r\n                userStore.token\r\n            )\r\n            setupEventHandlers()\r\n            wsInstance.value.connect()\r\n        } catch (error) {\r\n            console.error('WebSocket初始化错误', error)\r\n            lastError.value = error\r\n            scheduleReconnect()\r\n        }\r\n    }\r\n\r\n    // 设置事件处理器\r\n    const setupEventHandlers = () => {\r\n        // 连接打开事件\r\n        wsInstance.value.setOnOpenCallback(() => {\r\n            isConnected.value = true\r\n            lastError.value = null\r\n            clearReconnectTimer()\r\n            console.log('WebSocket连接已打开')\r\n        })\r\n\r\n        // 连接关闭事件\r\n        wsInstance.value.setOnCloseCallback(() => {\r\n            isConnected.value = false\r\n            cleanup()\r\n            scheduleReconnect()\r\n            console.log('WebSocket连接已关闭')\r\n        })\r\n\r\n        // 连接错误事件\r\n        wsInstance.value.setOnErrorCallback((error) => {\r\n            lastError.value = error\r\n            isConnected.value = false\r\n            cleanup()\r\n            scheduleReconnect()\r\n            console.error('WebSocket连接发生错误', error)\r\n        })\r\n\r\n        // 接收消息事件\r\n        wsInstance.value.setOnMessageCallback(async (data) => {\r\n            try {\r\n                const parsedData = JSON.parse(data)\r\n                console.log('收到WebSocket消息:', parsedData)\r\n                \r\n                if (parsedData.hasOwnProperty('friendMessageId')) {\r\n                    let friend = userStore.getFriend().find(item => \r\n                        item.account === parsedData.sender || \r\n                        item.account === parsedData.receiver\r\n                    )\r\n                    \r\n                    if (!friend) {\r\n                        // 如果找不到好友信息，可能需要重新获取好友列表\r\n                        // 这里需要调用相应的API获取好友列表\r\n                        try {\r\n                            // 示例：从API获取好友列表\r\n                            // 实际使用时需要根据你的API进行调整\r\n                            const result = await uni.request({\r\n                                url: '/api/friend/list',\r\n                                header: {\r\n                                    'Authorization': 'Bearer ' + userStore.token\r\n                                }\r\n                            });\r\n                            if (result.statusCode === 200) {\r\n                                userStore.setFriend(result.data)\r\n                                friend = userStore.getFriend().find(item => \r\n                                    item.account === parsedData.sender || \r\n                                    item.account === parsedData.receiver\r\n                                )\r\n                                if (!friend) return;\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('获取好友列表失败:', error);\r\n                            return;\r\n                        }\r\n                    }\r\n                    \r\n                    friend.chat.push(parsedData)\r\n                } else if (parsedData.hasOwnProperty('friendRequestId')) {\r\n                    userStore.getSystemInfo().push(parsedData)\r\n                } else if (parsedData.hasOwnProperty('groupMessageId')) {\r\n                    let group = userStore.getGroup().find(item => \r\n                        item.group.groupId === parsedData.groupId\r\n                    )\r\n                    \r\n                    if (!group) return\r\n                    group.chat.push(parsedData)\r\n                }\r\n            } catch (error) {\r\n                console.error('消息解析失败:', error)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 清理资源\r\n    const cleanup = () => {\r\n        if (wsInstance.value) {\r\n            wsInstance.value.close()\r\n            wsInstance.value = null\r\n        }\r\n    }\r\n    \r\n    // 清除重连定时器\r\n    const clearReconnectTimer = () => {\r\n        if (reconnectTimer.value) {\r\n            clearTimeout(reconnectTimer.value)\r\n            reconnectTimer.value = null\r\n        }\r\n    }\r\n\r\n    // 调度重连\r\n    const scheduleReconnect = () => {\r\n        if (userStore.isLogin && !reconnectTimer.value) {\r\n            reconnectTimer.value = setTimeout(() => {\r\n                reconnectTimer.value = null\r\n                initWebSocket()\r\n            }, 3000)\r\n        }\r\n    }\r\n    \r\n    // 发送消息\r\n    const sendMessage = (message) => {\r\n        if (wsInstance.value && isConnected.value) {\r\n            wsInstance.value.sendMessage(JSON.stringify(message))\r\n        } else {\r\n            console.warn('WebSocket未连接，无法发送消息')\r\n        }\r\n    }\r\n\r\n    // 监听用户登录状态变化\r\n    watch(() => userStore.isLogin, (newVal) => {\r\n        if (newVal) {\r\n            initWebSocket()\r\n        } else {\r\n            cleanup()\r\n        }\r\n    }, {immediate: true})\r\n\r\n    return {\r\n        isConnected,\r\n        lastError,\r\n        sendMessage,\r\n        initWebSocket,\r\n        cleanup\r\n    }\r\n}) "],"names":["defineStore","useUserStore","ref","WebSocketUtils","wsUrl","uni","watch"],"mappings":"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"}