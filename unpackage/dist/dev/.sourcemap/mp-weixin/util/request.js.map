{"version":3,"file":"request.js","sources":["util/request.js"],"sourcesContent":["// request.js\r\n// UniApp适配版本的请求工具，替代原_axios.js\r\nimport { backUrl } from './basic-data';\r\nimport { useUserStore } from '../store/userStore';\r\n\r\n/**\r\n * 封装uni.request的请求类\r\n */\r\nclass Request {\r\n    constructor() {\r\n        this.baseURL = backUrl;\r\n        this.timeout = 10000;\r\n    }\r\n\r\n    /**\r\n     * 发送请求的核心方法\r\n     * @param {Object} options - 请求选项\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    request(options) {\r\n        return new Promise((resolve, reject) => {\r\n            const userStore = useUserStore();\r\n            const token = userStore.getToken();\r\n\r\n            // 处理请求头\r\n            const header = options.header || {};\r\n            header['Authorization'] = 'Bearer ' + token;\r\n            \r\n            // 根据不同的请求类型设置Content-Type\r\n            if (options.url.includes('/avatar') || options.isUpload) {\r\n                // 图片上传\r\n                header['Content-Type'] = 'multipart/form-data';\r\n            } else {\r\n                header['Content-Type'] = 'application/json';\r\n            }\r\n\r\n            // 发送请求\r\n            uni.request({\r\n                url: this.baseURL + options.url,\r\n                method: options.method || 'GET',\r\n                data: options.data,\r\n                header: header,\r\n                timeout: this.timeout,\r\n                success: (res) => {\r\n                    // 请求成功，返回数据\r\n                    resolve(res);\r\n                },\r\n                fail: (err) => {\r\n                    // 请求失败，返回错误\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * GET请求\r\n     * @param {string} url - 请求地址\r\n     * @param {Object} params - 请求参数\r\n     * @param {Object} header - 请求头\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    get(url, params = {}, header = {}) {\r\n        return this.request({\r\n            url,\r\n            method: 'GET',\r\n            data: params,\r\n            header\r\n        });\r\n    }\r\n\r\n    /**\r\n     * POST请求\r\n     * @param {string} url - 请求地址\r\n     * @param {Object} data - 请求数据\r\n     * @param {Object} header - 请求头\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    post(url, data = {}, header = {}) {\r\n        return this.request({\r\n            url,\r\n            method: 'POST',\r\n            data,\r\n            header\r\n        });\r\n    }\r\n\r\n    /**\r\n     * PUT请求\r\n     * @param {string} url - 请求地址\r\n     * @param {Object} data - 请求数据\r\n     * @param {Object} header - 请求头\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    put(url, data = {}, header = {}) {\r\n        return this.request({\r\n            url,\r\n            method: 'PUT',\r\n            data,\r\n            header\r\n        });\r\n    }\r\n\r\n    /**\r\n     * DELETE请求\r\n     * @param {string} url - 请求地址\r\n     * @param {Object} data - 请求数据\r\n     * @param {Object} header - 请求头\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    delete(url, data = {}, header = {}) {\r\n        return this.request({\r\n            url,\r\n            method: 'DELETE',\r\n            data,\r\n            header\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 上传文件\r\n     * @param {string} url - 上传地址\r\n     * @param {string} filePath - 文件路径\r\n     * @param {string} name - 文件对应的key\r\n     * @param {Object} formData - 附加的表单数据\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    upload(url, filePath, name = 'file', formData = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            const userStore = useUserStore();\r\n            const token = userStore.getToken();\r\n\r\n            uni.uploadFile({\r\n                url: this.baseURL + url,\r\n                filePath: filePath,\r\n                name: name,\r\n                formData: formData,\r\n                header: {\r\n                    'Authorization': 'Bearer ' + token\r\n                },\r\n                success: (res) => {\r\n                    // 上传成功\r\n                    if (typeof res.data === 'string') {\r\n                        // 尝试解析JSON\r\n                        try {\r\n                            res.data = JSON.parse(res.data);\r\n                        } catch (e) {\r\n                            // 解析失败不处理\r\n                        }\r\n                    }\r\n                    resolve(res);\r\n                },\r\n                fail: (err) => {\r\n                    // 上传失败\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nconst request = new Request();\r\nexport default request; "],"names":["backUrl","useUserStore","uni"],"mappings":";;;;AAQA,MAAM,QAAQ;AAAA,EACV,cAAc;AACV,SAAK,UAAUA;AACf,SAAK,UAAU;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,QAAQ,SAAS;AACb,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,YAAM,YAAYC,gBAAAA;AAClB,YAAM,QAAQ,UAAU;AAGxB,YAAM,SAAS,QAAQ,UAAU;AACjC,aAAO,eAAe,IAAI,YAAY;AAGtC,UAAI,QAAQ,IAAI,SAAS,SAAS,KAAK,QAAQ,UAAU;AAErD,eAAO,cAAc,IAAI;AAAA,MACzC,OAAmB;AACH,eAAO,cAAc,IAAI;AAAA,MAC5B;AAGDC,oBAAAA,MAAI,QAAQ;AAAA,QACR,KAAK,KAAK,UAAU,QAAQ;AAAA,QAC5B,QAAQ,QAAQ,UAAU;AAAA,QAC1B,MAAM,QAAQ;AAAA,QACd;AAAA,QACA,SAAS,KAAK;AAAA,QACd,SAAS,CAAC,QAAQ;AAEd,kBAAQ,GAAG;AAAA,QACd;AAAA,QACD,MAAM,CAAC,QAAQ;AAEX,iBAAO,GAAG;AAAA,QACb;AAAA,MACjB,CAAa;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,IAAI,KAAK,SAAS,CAAA,GAAI,SAAS,CAAA,GAAI;AAC/B,WAAO,KAAK,QAAQ;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,MACR,MAAM;AAAA,MACN;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,KAAK,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAC9B,WAAO,KAAK,QAAQ;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,IAAI,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAC7B,WAAO,KAAK,QAAQ;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,KAAK,OAAO,CAAA,GAAI,SAAS,CAAA,GAAI;AAChC,WAAO,KAAK,QAAQ;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,OAAO,KAAK,UAAU,OAAO,QAAQ,WAAW,IAAI;AAChD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,YAAM,YAAYD,gBAAAA;AAClB,YAAM,QAAQ,UAAU;AAExBC,oBAAAA,MAAI,WAAW;AAAA,QACX,KAAK,KAAK,UAAU;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ;AAAA,UACJ,iBAAiB,YAAY;AAAA,QAChC;AAAA,QACD,SAAS,CAAC,QAAQ;AAEd,cAAI,OAAO,IAAI,SAAS,UAAU;AAE9B,gBAAI;AACA,kBAAI,OAAO,KAAK,MAAM,IAAI,IAAI;AAAA,YACjC,SAAQ,GAAG;AAAA,YAEX;AAAA,UACJ;AACD,kBAAQ,GAAG;AAAA,QACd;AAAA,QACD,MAAM,CAAC,QAAQ;AAEX,iBAAO,GAAG;AAAA,QACb;AAAA,MACjB,CAAa;AAAA,IACb,CAAS;AAAA,EACJ;AACL;AAEK,MAAC,UAAU,IAAI,QAAO;;"}