{"version":3,"file":"crypto.js","sources":["util/crypto.js"],"sourcesContent":["// crypto.js\r\nimport CryptoJS from 'crypto-js';\r\n\r\n// 加密密钥（必须为 16、24 或 32 位字符）\r\nconst SECRET_KEY = 'onaffaironaffair';\r\n\r\n/**\r\n * 加密数据（幂等）\r\n * @param {string} data - 需要加密的数据\r\n * @returns {string} - 返回加密后的字符串\r\n */\r\nexport function encrypt(data) {\r\n    if (!data) return null;\r\n\r\n    // 将密钥转换为 CryptoJS 的 WordArray 格式\r\n    const key = CryptoJS.enc.Utf8.parse(SECRET_KEY);\r\n\r\n    // 使用 AES + ECB 模式（无随机 IV，确保幂等）\r\n    const encrypted = CryptoJS.AES.encrypt(data, key, {\r\n        mode: CryptoJS.mode.ECB,       // 使用 ECB 模式\r\n        padding: CryptoJS.pad.Pkcs7    // 明确填充方案\r\n    });\r\n\r\n    // 返回 Base64 编码的密文\r\n    return encrypted.toString();\r\n}\r\n\r\n/**\r\n * 解密数据\r\n * @param {string} encryptedData - 需要解密的数据\r\n * @returns {string} - 返回解密后的原始数据\r\n */\r\nexport function decrypt(encryptedData) {\r\n    if (!encryptedData) return null;\r\n\r\n    // 将密钥转换为 CryptoJS 的 WordArray 格式\r\n    const key = CryptoJS.enc.Utf8.parse(SECRET_KEY);\r\n\r\n    // 使用相同配置解密\r\n    const bytes = CryptoJS.AES.decrypt(encryptedData, key, {\r\n        mode: CryptoJS.mode.ECB,\r\n        padding: CryptoJS.pad.Pkcs7\r\n    });\r\n\r\n    // 返回 UTF-8 解码的原始数据\r\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n    return decrypted;\r\n} "],"names":["CryptoJS"],"mappings":";;AAIA,MAAM,aAAa;AAOZ,SAAS,QAAQ,MAAM;AAC1B,MAAI,CAAC;AAAM,WAAO;AAGlB,QAAM,MAAMA,cAAAA,SAAS,IAAI,KAAK,MAAM,UAAU;AAG9C,QAAM,YAAYA,cAAAA,SAAS,IAAI,QAAQ,MAAM,KAAK;AAAA,IAC9C,MAAMA,cAAAA,SAAS,KAAK;AAAA;AAAA,IACpB,SAASA,cAAAA,SAAS,IAAI;AAAA;AAAA,EAC9B,CAAK;AAGD,SAAO,UAAU;AACrB;;"}