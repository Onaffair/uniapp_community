"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
/**
* @vue/shared v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
var _a;
function makeMap(str, expectsLowerCase) {
  const set2 = new Set(str.split(","));
  return expectsLowerCase ? (val) => set2.has(val.toLowerCase()) : (val) => set2.has(val);
}
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = () => {
};
const NO = () => false;
const isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
const hasOwn$1 = (val, key) => hasOwnProperty$2.call(val, key);
const isArray = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject$1 = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return (isObject$1(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject$1 = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
const cacheStringFunction = (fn) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction((str) => {
  const s2 = str ? `on${capitalize(str)}` : ``;
  return s2;
});
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns$1 = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
const def$1 = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber = (val) => {
  const n2 = isString(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value) || isObject$1(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$1(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
const toDisplayString = (val) => {
  return isString(val) ? val : val == null ? "" : isArray(val) || isObject$1(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce(
        (entries2, [key, val2], i) => {
          entries2[stringifySymbol(key, i) + " =>"] = val2;
          return entries2;
        },
        {}
      )
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()].map((v) => stringifySymbol(v))
    };
  } else if (isSymbol(val)) {
    return stringifySymbol(val);
  } else if (isObject$1(val) && !isArray(val) && !isPlainObject$1(val)) {
    return String(val);
  }
  return val;
};
const stringifySymbol = (v, i = "") => {
  var _a2;
  return isSymbol(v) ? `Symbol(${(_a2 = v.description) != null ? _a2 : i})` : v;
};
const isObject = (val) => val !== null && typeof val === "object";
const defaultDelimiters = ["{", "}"];
class BaseFormatter {
  constructor() {
    this._caches = /* @__PURE__ */ Object.create(null);
  }
  interpolate(message, values, delimiters = defaultDelimiters) {
    if (!values) {
      return [message];
    }
    let tokens = this._caches[message];
    if (!tokens) {
      tokens = parse(message, delimiters);
      this._caches[message] = tokens;
    }
    return compile$1(tokens, values);
  }
}
const RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
const RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
function parse(format, [startDelimiter, endDelimiter]) {
  const tokens = [];
  let position = 0;
  let text2 = "";
  while (position < format.length) {
    let char = format[position++];
    if (char === startDelimiter) {
      if (text2) {
        tokens.push({ type: "text", value: text2 });
      }
      text2 = "";
      let sub = "";
      char = format[position++];
      while (char !== void 0 && char !== endDelimiter) {
        sub += char;
        char = format[position++];
      }
      const isClosed = char === endDelimiter;
      const type = RE_TOKEN_LIST_VALUE.test(sub) ? "list" : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? "named" : "unknown";
      tokens.push({ value: sub, type });
    } else {
      text2 += char;
    }
  }
  text2 && tokens.push({ type: "text", value: text2 });
  return tokens;
}
function compile$1(tokens, values) {
  const compiled = [];
  let index2 = 0;
  const mode = Array.isArray(values) ? "list" : isObject(values) ? "named" : "unknown";
  if (mode === "unknown") {
    return compiled;
  }
  while (index2 < tokens.length) {
    const token = tokens[index2];
    switch (token.type) {
      case "text":
        compiled.push(token.value);
        break;
      case "list":
        compiled.push(values[parseInt(token.value, 10)]);
        break;
      case "named":
        if (mode === "named") {
          compiled.push(values[token.value]);
        } else {
          {
            console.warn(`Type of token '${token.type}' and format of value '${mode}' don't match!`);
          }
        }
        break;
      case "unknown":
        {
          console.warn(`Detect 'unknown' type of token!`);
        }
        break;
    }
    index2++;
  }
  return compiled;
}
const LOCALE_ZH_HANS = "zh-Hans";
const LOCALE_ZH_HANT = "zh-Hant";
const LOCALE_EN = "en";
const LOCALE_FR = "fr";
const LOCALE_ES = "es";
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const defaultFormatter = new BaseFormatter();
function include(str, parts) {
  return !!parts.find((part) => str.indexOf(part) !== -1);
}
function startsWith(str, parts) {
  return parts.find((part) => str.indexOf(part) === 0);
}
function normalizeLocale(locale, messages) {
  if (!locale) {
    return;
  }
  locale = locale.trim().replace(/_/g, "-");
  if (messages && messages[locale]) {
    return locale;
  }
  locale = locale.toLowerCase();
  if (locale === "chinese") {
    return LOCALE_ZH_HANS;
  }
  if (locale.indexOf("zh") === 0) {
    if (locale.indexOf("-hans") > -1) {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf("-hant") > -1) {
      return LOCALE_ZH_HANT;
    }
    if (include(locale, ["-tw", "-hk", "-mo", "-cht"])) {
      return LOCALE_ZH_HANT;
    }
    return LOCALE_ZH_HANS;
  }
  let locales = [LOCALE_EN, LOCALE_FR, LOCALE_ES];
  if (messages && Object.keys(messages).length > 0) {
    locales = Object.keys(messages);
  }
  const lang = startsWith(locale, locales);
  if (lang) {
    return lang;
  }
}
class I18n {
  constructor({ locale, fallbackLocale, messages, watcher, formater: formater2 }) {
    this.locale = LOCALE_EN;
    this.fallbackLocale = LOCALE_EN;
    this.message = {};
    this.messages = {};
    this.watchers = [];
    if (fallbackLocale) {
      this.fallbackLocale = fallbackLocale;
    }
    this.formater = formater2 || defaultFormatter;
    this.messages = messages || {};
    this.setLocale(locale || LOCALE_EN);
    if (watcher) {
      this.watchLocale(watcher);
    }
  }
  setLocale(locale) {
    const oldLocale = this.locale;
    this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
    if (!this.messages[this.locale]) {
      this.messages[this.locale] = {};
    }
    this.message = this.messages[this.locale];
    if (oldLocale !== this.locale) {
      this.watchers.forEach((watcher) => {
        watcher(this.locale, oldLocale);
      });
    }
  }
  getLocale() {
    return this.locale;
  }
  watchLocale(fn) {
    const index2 = this.watchers.push(fn) - 1;
    return () => {
      this.watchers.splice(index2, 1);
    };
  }
  add(locale, message, override = true) {
    const curMessages = this.messages[locale];
    if (curMessages) {
      if (override) {
        Object.assign(curMessages, message);
      } else {
        Object.keys(message).forEach((key) => {
          if (!hasOwn(curMessages, key)) {
            curMessages[key] = message[key];
          }
        });
      }
    } else {
      this.messages[locale] = message;
    }
  }
  f(message, values, delimiters) {
    return this.formater.interpolate(message, values, delimiters).join("");
  }
  t(key, locale, values) {
    let message = this.message;
    if (typeof locale === "string") {
      locale = normalizeLocale(locale, this.messages);
      locale && (message = this.messages[locale]);
    } else {
      values = locale;
    }
    if (!hasOwn(message, key)) {
      console.warn(`Cannot translate the value of keypath ${key}. Use the value of keypath as default.`);
      return key;
    }
    return this.formater.interpolate(message[key], values).join("");
  }
}
function watchAppLocale(appVm, i18n) {
  if (appVm.$watchLocale) {
    appVm.$watchLocale((newLocale) => {
      i18n.setLocale(newLocale);
    });
  } else {
    appVm.$watch(() => appVm.$locale, (newLocale) => {
      i18n.setLocale(newLocale);
    });
  }
}
function getDefaultLocale() {
  if (typeof index !== "undefined" && index.getLocale) {
    return index.getLocale();
  }
  if (typeof global !== "undefined" && global.getLocale) {
    return global.getLocale();
  }
  return LOCALE_EN;
}
function initVueI18n(locale, messages = {}, fallbackLocale, watcher) {
  if (typeof locale !== "string") {
    const options = [
      messages,
      locale
    ];
    locale = options[0];
    messages = options[1];
  }
  if (typeof locale !== "string") {
    locale = getDefaultLocale();
  }
  if (typeof fallbackLocale !== "string") {
    fallbackLocale = typeof __uniConfig !== "undefined" && __uniConfig.fallbackLocale || LOCALE_EN;
  }
  const i18n = new I18n({
    locale,
    fallbackLocale,
    messages,
    watcher
  });
  let t2 = (key, values) => {
    if (typeof getApp !== "function") {
      t2 = function(key2, values2) {
        return i18n.t(key2, values2);
      };
    } else {
      let isWatchedAppLocale = false;
      t2 = function(key2, values2) {
        const appVm = getApp().$vm;
        if (appVm) {
          appVm.$locale;
          if (!isWatchedAppLocale) {
            isWatchedAppLocale = true;
            watchAppLocale(appVm, i18n);
          }
        }
        return i18n.t(key2, values2);
      };
    }
    return t2(key, values);
  };
  return {
    i18n,
    f(message, values, delimiters) {
      return i18n.f(message, values, delimiters);
    },
    t(key, values) {
      return t2(key, values);
    },
    add(locale2, message, override = true) {
      return i18n.add(locale2, message, override);
    },
    watch(fn) {
      return i18n.watchLocale(fn);
    },
    getLocale() {
      return i18n.getLocale();
    },
    setLocale(newLocale) {
      return i18n.setLocale(newLocale);
    }
  };
}
const SLOT_DEFAULT_NAME = "d";
const ON_SHOW = "onShow";
const ON_HIDE = "onHide";
const ON_LAUNCH = "onLaunch";
const ON_ERROR = "onError";
const ON_THEME_CHANGE = "onThemeChange";
const ON_PAGE_NOT_FOUND = "onPageNotFound";
const ON_UNHANDLE_REJECTION = "onUnhandledRejection";
const ON_EXIT = "onExit";
const ON_LOAD = "onLoad";
const ON_READY = "onReady";
const ON_UNLOAD = "onUnload";
const ON_INIT = "onInit";
const ON_SAVE_EXIT_STATE = "onSaveExitState";
const ON_RESIZE = "onResize";
const ON_BACK_PRESS = "onBackPress";
const ON_PAGE_SCROLL = "onPageScroll";
const ON_TAB_ITEM_TAP = "onTabItemTap";
const ON_REACH_BOTTOM = "onReachBottom";
const ON_PULL_DOWN_REFRESH = "onPullDownRefresh";
const ON_SHARE_TIMELINE = "onShareTimeline";
const ON_SHARE_CHAT = "onShareChat";
const ON_ADD_TO_FAVORITES = "onAddToFavorites";
const ON_SHARE_APP_MESSAGE = "onShareAppMessage";
const ON_NAVIGATION_BAR_BUTTON_TAP = "onNavigationBarButtonTap";
const ON_NAVIGATION_BAR_SEARCH_INPUT_CLICKED = "onNavigationBarSearchInputClicked";
const ON_NAVIGATION_BAR_SEARCH_INPUT_CHANGED = "onNavigationBarSearchInputChanged";
const ON_NAVIGATION_BAR_SEARCH_INPUT_CONFIRMED = "onNavigationBarSearchInputConfirmed";
const ON_NAVIGATION_BAR_SEARCH_INPUT_FOCUS_CHANGED = "onNavigationBarSearchInputFocusChanged";
const VIRTUAL_HOST_STYLE = "virtualHostStyle";
const VIRTUAL_HOST_CLASS = "virtualHostClass";
const VIRTUAL_HOST_HIDDEN = "virtualHostHidden";
const VIRTUAL_HOST_ID = "virtualHostId";
function hasLeadingSlash(str) {
  return str.indexOf("/") === 0;
}
function addLeadingSlash(str) {
  return hasLeadingSlash(str) ? str : "/" + str;
}
const invokeArrayFns = (fns, arg) => {
  let ret;
  for (let i = 0; i < fns.length; i++) {
    ret = fns[i](arg);
  }
  return ret;
};
function once(fn, ctx = null) {
  let res;
  return (...args) => {
    if (fn) {
      res = fn.apply(ctx, args);
      fn = null;
    }
    return res;
  };
}
function getValueByDataPath(obj, path) {
  if (!isString(path)) {
    return;
  }
  path = path.replace(/\[(\d+)\]/g, ".$1");
  const parts = path.split(".");
  let key = parts[0];
  if (!obj) {
    obj = {};
  }
  if (parts.length === 1) {
    return obj[key];
  }
  return getValueByDataPath(obj[key], parts.slice(1).join("."));
}
function sortObject(obj) {
  let sortObj = {};
  if (isPlainObject$1(obj)) {
    Object.keys(obj).sort().forEach((key) => {
      const _key = key;
      sortObj[_key] = obj[_key];
    });
  }
  return !Object.keys(sortObj) ? obj : sortObj;
}
const customizeRE = /:/g;
function customizeEvent(str) {
  return camelize(str.replace(customizeRE, "-"));
}
const encode = encodeURIComponent;
function stringifyQuery(obj, encodeStr = encode) {
  const res = obj ? Object.keys(obj).map((key) => {
    let val = obj[key];
    if (typeof val === void 0 || val === null) {
      val = "";
    } else if (isPlainObject$1(val)) {
      val = JSON.stringify(val);
    }
    return encodeStr(key) + "=" + encodeStr(val);
  }).filter((x) => x.length > 0).join("&") : null;
  return res ? `?${res}` : "";
}
const PAGE_HOOKS = [
  ON_INIT,
  ON_LOAD,
  ON_SHOW,
  ON_HIDE,
  ON_UNLOAD,
  ON_BACK_PRESS,
  ON_PAGE_SCROLL,
  ON_TAB_ITEM_TAP,
  ON_REACH_BOTTOM,
  ON_PULL_DOWN_REFRESH,
  ON_SHARE_TIMELINE,
  ON_SHARE_APP_MESSAGE,
  ON_SHARE_CHAT,
  ON_ADD_TO_FAVORITES,
  ON_SAVE_EXIT_STATE,
  ON_NAVIGATION_BAR_BUTTON_TAP,
  ON_NAVIGATION_BAR_SEARCH_INPUT_CLICKED,
  ON_NAVIGATION_BAR_SEARCH_INPUT_CHANGED,
  ON_NAVIGATION_BAR_SEARCH_INPUT_CONFIRMED,
  ON_NAVIGATION_BAR_SEARCH_INPUT_FOCUS_CHANGED
];
function isRootHook(name) {
  return PAGE_HOOKS.indexOf(name) > -1;
}
const UniLifecycleHooks = [
  ON_SHOW,
  ON_HIDE,
  ON_LAUNCH,
  ON_ERROR,
  ON_THEME_CHANGE,
  ON_PAGE_NOT_FOUND,
  ON_UNHANDLE_REJECTION,
  ON_EXIT,
  ON_INIT,
  ON_LOAD,
  ON_READY,
  ON_UNLOAD,
  ON_RESIZE,
  ON_BACK_PRESS,
  ON_PAGE_SCROLL,
  ON_TAB_ITEM_TAP,
  ON_REACH_BOTTOM,
  ON_PULL_DOWN_REFRESH,
  ON_SHARE_TIMELINE,
  ON_ADD_TO_FAVORITES,
  ON_SHARE_APP_MESSAGE,
  ON_SHARE_CHAT,
  ON_SAVE_EXIT_STATE,
  ON_NAVIGATION_BAR_BUTTON_TAP,
  ON_NAVIGATION_BAR_SEARCH_INPUT_CLICKED,
  ON_NAVIGATION_BAR_SEARCH_INPUT_CHANGED,
  ON_NAVIGATION_BAR_SEARCH_INPUT_CONFIRMED,
  ON_NAVIGATION_BAR_SEARCH_INPUT_FOCUS_CHANGED
];
const MINI_PROGRAM_PAGE_RUNTIME_HOOKS = /* @__PURE__ */ (() => {
  return {
    onPageScroll: 1,
    onShareAppMessage: 1 << 1,
    onShareTimeline: 1 << 2
  };
})();
function isUniLifecycleHook(name, value, checkType = true) {
  if (checkType && !isFunction(value)) {
    return false;
  }
  if (UniLifecycleHooks.indexOf(name) > -1) {
    return true;
  } else if (name.indexOf("on") === 0) {
    return true;
  }
  return false;
}
let vueApp;
const createVueAppHooks = [];
function onCreateVueApp(hook) {
  if (vueApp) {
    return hook(vueApp);
  }
  createVueAppHooks.push(hook);
}
function invokeCreateVueAppHook(app) {
  vueApp = app;
  createVueAppHooks.forEach((hook) => hook(app));
}
const invokeCreateErrorHandler = once((app, createErrorHandler2) => {
  return createErrorHandler2(app);
});
const E = function() {
};
E.prototype = {
  _id: 1,
  on: function(name, callback, ctx) {
    var e2 = this.e || (this.e = {});
    (e2[name] || (e2[name] = [])).push({
      fn: callback,
      ctx,
      _id: this._id
    });
    return this._id++;
  },
  once: function(name, callback, ctx) {
    var self2 = this;
    function listener() {
      self2.off(name, listener);
      callback.apply(ctx, arguments);
    }
    listener._ = callback;
    return this.on(name, listener, ctx);
  },
  emit: function(name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;
    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }
    return this;
  },
  off: function(name, event) {
    var e2 = this.e || (this.e = {});
    var evts = e2[name];
    var liveEvents = [];
    if (evts && event) {
      for (var i = evts.length - 1; i >= 0; i--) {
        if (evts[i].fn === event || evts[i].fn._ === event || evts[i]._id === event) {
          evts.splice(i, 1);
          break;
        }
      }
      liveEvents = evts;
    }
    liveEvents.length ? e2[name] = liveEvents : delete e2[name];
    return this;
  }
};
var E$1 = E;
/**
* @dcloudio/uni-mp-vue v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
function warn$2(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else {
      warn$2(`cannot run an inactive effect scope.`);
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  } else {
    warn$2(
      `onScopeDispose() is called when there is no active effect scope to be associated with.`
    );
  }
}
let activeEffect;
class ReactiveEffect {
  constructor(fn, trigger2, scheduler, scope) {
    this.fn = fn;
    this.trigger = trigger2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this._dirtyLevel = 4;
    this._trackId = 0;
    this._runnings = 0;
    this._shouldSchedule = false;
    this._depsLength = 0;
    recordEffectScope(this, scope);
  }
  get dirty() {
    if (this._dirtyLevel === 2 || this._dirtyLevel === 3) {
      this._dirtyLevel = 1;
      pauseTracking();
      for (let i = 0; i < this._depsLength; i++) {
        const dep = this.deps[i];
        if (dep.computed) {
          triggerComputed(dep.computed);
          if (this._dirtyLevel >= 4) {
            break;
          }
        }
      }
      if (this._dirtyLevel === 1) {
        this._dirtyLevel = 0;
      }
      resetTracking();
    }
    return this._dirtyLevel >= 4;
  }
  set dirty(v) {
    this._dirtyLevel = v ? 4 : 0;
  }
  run() {
    this._dirtyLevel = 0;
    if (!this.active) {
      return this.fn();
    }
    let lastShouldTrack = shouldTrack;
    let lastEffect = activeEffect;
    try {
      shouldTrack = true;
      activeEffect = this;
      this._runnings++;
      preCleanupEffect(this);
      return this.fn();
    } finally {
      postCleanupEffect(this);
      this._runnings--;
      activeEffect = lastEffect;
      shouldTrack = lastShouldTrack;
    }
  }
  stop() {
    var _a2;
    if (this.active) {
      preCleanupEffect(this);
      postCleanupEffect(this);
      (_a2 = this.onStop) == null ? void 0 : _a2.call(this);
      this.active = false;
    }
  }
}
function triggerComputed(computed2) {
  return computed2.value;
}
function preCleanupEffect(effect2) {
  effect2._trackId++;
  effect2._depsLength = 0;
}
function postCleanupEffect(effect2) {
  if (effect2.deps.length > effect2._depsLength) {
    for (let i = effect2._depsLength; i < effect2.deps.length; i++) {
      cleanupDepEffect(effect2.deps[i], effect2);
    }
    effect2.deps.length = effect2._depsLength;
  }
}
function cleanupDepEffect(dep, effect2) {
  const trackId = dep.get(effect2);
  if (trackId !== void 0 && effect2._trackId !== trackId) {
    dep.delete(effect2);
    if (dep.size === 0) {
      dep.cleanup();
    }
  }
}
let shouldTrack = true;
let pauseScheduleStack = 0;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function pauseScheduling() {
  pauseScheduleStack++;
}
function resetScheduling() {
  pauseScheduleStack--;
  while (!pauseScheduleStack && queueEffectSchedulers.length) {
    queueEffectSchedulers.shift()();
  }
}
function trackEffect(effect2, dep, debuggerEventExtraInfo) {
  var _a2;
  if (dep.get(effect2) !== effect2._trackId) {
    dep.set(effect2, effect2._trackId);
    const oldDep = effect2.deps[effect2._depsLength];
    if (oldDep !== dep) {
      if (oldDep) {
        cleanupDepEffect(oldDep, effect2);
      }
      effect2.deps[effect2._depsLength++] = dep;
    } else {
      effect2._depsLength++;
    }
    {
      (_a2 = effect2.onTrack) == null ? void 0 : _a2.call(effect2, extend({ effect: effect2 }, debuggerEventExtraInfo));
    }
  }
}
const queueEffectSchedulers = [];
function triggerEffects(dep, dirtyLevel, debuggerEventExtraInfo) {
  var _a2;
  pauseScheduling();
  for (const effect2 of dep.keys()) {
    let tracking;
    if (effect2._dirtyLevel < dirtyLevel && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
      effect2._shouldSchedule || (effect2._shouldSchedule = effect2._dirtyLevel === 0);
      effect2._dirtyLevel = dirtyLevel;
    }
    if (effect2._shouldSchedule && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
      {
        (_a2 = effect2.onTrigger) == null ? void 0 : _a2.call(effect2, extend({ effect: effect2 }, debuggerEventExtraInfo));
      }
      effect2.trigger();
      if ((!effect2._runnings || effect2.allowRecurse) && effect2._dirtyLevel !== 2) {
        effect2._shouldSchedule = false;
        if (effect2.scheduler) {
          queueEffectSchedulers.push(effect2.scheduler);
        }
      }
    }
  }
  resetScheduling();
}
const createDep = (cleanup, computed2) => {
  const dep = /* @__PURE__ */ new Map();
  dep.cleanup = cleanup;
  dep.computed = computed2;
  return dep;
};
const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol("iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep(() => depsMap.delete(key)));
    }
    trackEffect(
      activeEffect,
      dep,
      {
        target,
        type,
        key
      }
    );
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || !isSymbol(key2) && key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  pauseScheduling();
  for (const dep of deps) {
    if (dep) {
      triggerEffects(
        dep,
        4,
        {
          target,
          type,
          key,
          newValue,
          oldValue,
          oldTarget
        }
      );
    }
  }
  resetScheduling();
}
function getDepFromReactive(object, key) {
  var _a2;
  return (_a2 = targetMap.get(object)) == null ? void 0 : _a2.get(key);
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      pauseScheduling();
      const res = toRaw(this)[key].apply(this, args);
      resetScheduling();
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty(key) {
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
class BaseReactiveHandler {
  constructor(_isReadonly = false, _isShallow = false) {
    this._isReadonly = _isReadonly;
    this._isShallow = _isShallow;
  }
  get(target, key, receiver) {
    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return isShallow2;
    } else if (key === "__v_raw") {
      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the reciever is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn$1(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (isShallow2) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject$1(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
}
class MutableReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(false, isShallow2);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (!this._isShallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value;
          return true;
        }
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn$1(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = hasOwn$1(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      isArray(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(true, isShallow2);
  }
  set(target, key) {
    {
      warn$2(
        `Set operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
  deleteProperty(target, key) {
    {
      warn$2(
        `Delete operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(
  true
);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      warn$2(
        `${capitalize(type)} operation ${key}failed: target is readonly.`,
        toRaw(this)
      );
    }
    return type === "delete" ? false : type === "clear" ? void 0 : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$1(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$1(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = [
    "keys",
    "values",
    "entries",
    Symbol.iterator
  ];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn$1(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    warn$2(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$1(target)) {
    {
      warn$2(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  if (Object.isExtensible(value)) {
    def$1(value, "__v_skip", true);
  }
  return value;
}
const toReactive = (value) => isObject$1(value) ? reactive(value) : value;
const toReadonly = (value) => isObject$1(value) ? readonly(value) : value;
const COMPUTED_SIDE_EFFECT_WARN = `Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free`;
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this.getter = getter;
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this.effect = new ReactiveEffect(
      () => getter(this._value),
      () => triggerRefValue(
        this,
        this.effect._dirtyLevel === 2 ? 2 : 3
      )
    );
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    if ((!self2._cacheable || self2.effect.dirty) && hasChanged(self2._value, self2._value = self2.effect.run())) {
      triggerRefValue(self2, 4);
    }
    trackRefValue(self2);
    if (self2.effect._dirtyLevel >= 2) {
      if (this._warnRecursive) {
        warn$2(COMPUTED_SIDE_EFFECT_WARN, `

getter: `, this.getter);
      }
      triggerRefValue(self2, 2);
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
  // #region polyfill _dirty for backward compatibility third party code for Vue <= 3.3.x
  get _dirty() {
    return this.effect.dirty;
  }
  set _dirty(v) {
    this.effect.dirty = v;
  }
  // #endregion
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      warn$2("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
function trackRefValue(ref2) {
  var _a2;
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    trackEffect(
      activeEffect,
      (_a2 = ref2.dep) != null ? _a2 : ref2.dep = createDep(
        () => ref2.dep = void 0,
        ref2 instanceof ComputedRefImpl ? ref2 : void 0
      ),
      {
        target: ref2,
        type: "get",
        key: "value"
      }
    );
  }
}
function triggerRefValue(ref2, dirtyLevel = 4, newVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    triggerEffects(
      dep,
      dirtyLevel,
      {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      }
    );
  }
}
function isRef(r2) {
  return !!(r2 && r2.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this, 4, newVal);
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
function toRefs(object) {
  if (!isProxy(object)) {
    warn$2(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = propertyToRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction(source)) {
    return new GetterRefImpl(source);
  } else if (isObject$1(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);
}
const stack = [];
function pushWarningContext(vnode) {
  stack.push(vnode);
}
function popWarningContext() {
  stack.pop();
}
function warn$1(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        msg + args.map((a) => {
          var _a2, _b;
          return (_b = (_a2 = a.toString) == null ? void 0 : _a2.call(a)) != null ? _b : JSON.stringify(a);
        }).join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i) => {
    logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
const ErrorTypeStrings = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core ."
};
function callWithErrorHandling(fn, instance, type, args) {
  try {
    return args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type);
  }
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
  if (isFunction(fn)) {
    const res = callWithErrorHandling(fn, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn.length; i++) {
    values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings[type] || type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(
        appErrorHandler,
        null,
        10,
        [err, exposedInstance, errorInfo]
      );
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings[type] || type;
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      console.error(err);
    } else {
      console.error(err);
    }
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue$1 = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick$1(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
}
function findInsertionIndex(id) {
  let start = flushIndex + 1;
  let end = queue$1.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJob = queue$1[middle];
    const middleJobId = getId(middleJob);
    if (middleJobId < id || middleJobId === id && middleJob.pre) {
      start = middle + 1;
    } else {
      end = middle;
    }
  }
  return start;
}
function queueJob(job) {
  if (!queue$1.length || !queue$1.includes(
    job,
    isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
  )) {
    if (job.id == null) {
      queue$1.push(job);
    } else {
      queue$1.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function hasQueueJob(job) {
  return queue$1.indexOf(job) > -1;
}
function invalidateJob(job) {
  const i = queue$1.indexOf(job);
  if (i > flushIndex) {
    queue$1.splice(i, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(
      cb,
      cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
    )) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(instance, seen, i = isFlushing ? flushIndex + 1 : 0) {
  {
    seen = seen || /* @__PURE__ */ new Map();
  }
  for (; i < queue$1.length; i++) {
    const cb = queue$1[i];
    if (cb && cb.pre) {
      if (checkRecursiveUpdates(seen, cb)) {
        continue;
      }
      queue$1.splice(i, 1);
      i--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)].sort(
      (a, b) => getId(a) - getId(b)
    );
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    {
      seen = seen || /* @__PURE__ */ new Map();
    }
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {
        continue;
      }
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a, b) => {
  const diff2 = getId(a) - getId(b);
  if (diff2 === 0) {
    if (a.pre && !b.pre)
      return -1;
    if (b.pre && !a.pre)
      return 1;
  }
  return diff2;
};
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  {
    seen = seen || /* @__PURE__ */ new Map();
  }
  queue$1.sort(comparator);
  const check = (job) => checkRecursiveUpdates(seen, job);
  try {
    for (flushIndex = 0; flushIndex < queue$1.length; flushIndex++) {
      const job = queue$1[flushIndex];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue$1.length = 0;
    flushPostFlushCbs(seen);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue$1.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
function checkRecursiveUpdates(seen, fn) {
  if (!seen.has(fn)) {
    seen.set(fn, 1);
  } else {
    const count = seen.get(fn);
    if (count > RECURSION_LIMIT) {
      const instance = fn.ownerInstance;
      const componentName = instance && getComponentName(instance.type);
      handleError(
        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,
        null,
        10
      );
      return true;
    } else {
      seen.set(fn, count + 1);
    }
  }
}
let devtools;
let buffer = [];
let devtoolsNotInstalled = false;
function emit$1(event, ...args) {
  if (devtools) {
    devtools.emit(event, ...args);
  } else if (!devtoolsNotInstalled) {
    buffer.push({ event, args });
  }
}
function setDevtoolsHook(hook, target) {
  var _a2, _b;
  devtools = hook;
  if (devtools) {
    devtools.enabled = true;
    buffer.forEach(({ event, args }) => devtools.emit(event, ...args));
    buffer = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a2 = window.navigator) == null ? void 0 : _a2.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook(newHook, target);
    });
    setTimeout(() => {
      if (!devtools) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled = true;
        buffer = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled = true;
    buffer = [];
  }
}
function devtoolsInitApp(app, version2) {
  emit$1("app:init", app, version2, {
    Fragment,
    Text,
    Comment,
    Static
  });
}
const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:added"
  /* COMPONENT_ADDED */
);
const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:updated"
  /* COMPONENT_UPDATED */
);
const _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:removed"
  /* COMPONENT_REMOVED */
);
const devtoolsComponentRemoved = (component) => {
  if (devtools && typeof devtools.cleanupBuffer === "function" && // remove the component if it wasn't buffered
  !devtools.cleanupBuffer(component)) {
    _devtoolsComponentRemoved(component);
  }
};
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function createDevtoolsComponentHook(hook) {
  return (component) => {
    emit$1(
      hook,
      component.appContext.app,
      component.uid,
      // fixed by xxxxxx
      // 为 0 是 App，无 parent 是 Page 指向 App
      component.uid === 0 ? void 0 : component.parent ? component.parent.uid : 0,
      component
    );
  };
}
const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:start"
  /* PERFORMANCE_START */
);
const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:end"
  /* PERFORMANCE_END */
);
function createDevtoolsPerformanceHook(hook) {
  return (component, type, time) => {
    emit$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit(component, event, params) {
  emit$1(
    "component:emit",
    component.appContext.app,
    component,
    event,
    params
  );
}
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  {
    const {
      emitsOptions,
      propsOptions: [propsOptions]
    } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
          warn$1(
            `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(event)}" prop.`
          );
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction(validator)) {
          const isValid = validator(...rawArgs);
          if (!isValid) {
            warn$1(
              `Invalid event arguments: event validation failed for event "${event}".`
            );
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a) => isString(a) ? a.trim() : a);
    }
    if (number) {
      args = rawArgs.map(looseToNumber);
    }
  }
  {
    devtoolsComponentEmit(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
      warn$1(
        `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
          instance,
          instance.type
        )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(
          event
        )}" instead of "${event}".`
      );
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$1(comp)) {
      cache.set(comp, null);
    }
    return null;
  }
  if (isArray(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  if (isObject$1(comp)) {
    cache.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn$1(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$1(options, hyphenate(key)) || hasOwn$1(options, key);
}
let currentRenderingInstance = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  instance && instance.type.__scopeId || null;
  return prev;
}
const COMPONENTS = "components";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component2 = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(
        Component2,
        false
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component2;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component2[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component2;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$1(
      `resolve${capitalize(type.slice(0, -1))} can only be used in render() or setup().`
    );
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (!isFunction(cb)) {
    warn$1(
      `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
    );
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, {
  immediate,
  deep,
  flush,
  once: once2,
  onTrack,
  onTrigger
} = EMPTY_OBJ) {
  if (cb && once2) {
    const _cb = cb;
    cb = (...args) => {
      _cb(...args);
      unwatch();
    };
  }
  if (deep !== void 0 && typeof deep === "number") {
    warn$1(
      `watch() "deep" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.`
    );
  }
  if (!cb) {
    if (immediate !== void 0) {
      warn$1(
        `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (deep !== void 0) {
      warn$1(
        `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (once2 !== void 0) {
      warn$1(
        `watch() "once" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
  }
  const warnInvalidSource = (s2) => {
    warn$1(
      `Invalid watch source: `,
      s2,
      `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
    );
  };
  const instance = currentInstance;
  const reactiveGetter = (source2) => deep === true ? source2 : (
    // for deep: false, only traverse root-level properties
    traverse(source2, deep === false ? 1 : void 0)
  );
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => reactiveGetter(source);
    forceTrigger = true;
  } else if (isArray(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s2) => isReactive(s2) || isShallow(s2));
    getter = () => source.map((s2) => {
      if (isRef(s2)) {
        return s2.value;
      } else if (isReactive(s2)) {
        return reactiveGetter(s2);
      } else if (isFunction(s2)) {
        return callWithErrorHandling(s2, instance, 2);
      } else {
        warnInvalidSource(s2);
      }
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(
          source,
          instance,
          3,
          [onCleanup]
        );
      };
    }
  } else {
    getter = NOOP;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
      cleanup = effect2.onStop = void 0;
    };
  };
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active || !effect2.dirty) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect$1(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect2 = new ReactiveEffect(getter, NOOP, scheduler);
  const scope = getCurrentScope();
  const unwatch = () => {
    effect2.stop();
    if (scope) {
      remove(scope.effects, effect2);
    }
  };
  {
    effect2.onTrack = onTrack;
    effect2.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect$1(
      effect2.run.bind(effect2),
      instance && instance.suspense
    );
  } else {
    effect2.run();
  }
  return unwatch;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const reset = setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  reset();
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function traverse(value, depth, currentDepth = 0, seen) {
  if (!isObject$1(value) || value["__v_skip"]) {
    return value;
  }
  if (depth && depth > 0) {
    if (currentDepth >= depth) {
      return value;
    }
    currentDepth++;
  }
  seen = seen || /* @__PURE__ */ new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef(value)) {
    traverse(value.value, depth, currentDepth, seen);
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], depth, currentDepth, seen);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v) => {
      traverse(v, depth, currentDepth, seen);
    });
  } else if (isPlainObject$1(value)) {
    for (const key in value) {
      traverse(value[key], depth, currentDepth, seen);
    }
  }
  return value;
}
function validateDirectiveName(name) {
  if (isBuiltInDirective(name)) {
    warn$1("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction(rootComponent)) {
      rootComponent = extend({}, rootComponent);
    }
    if (rootProps != null && !isObject$1(rootProps)) {
      warn$1(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
        {
          warn$1(
            `app.config cannot be replaced. Modify individual options instead.`
          );
        }
      },
      use(plugin2, ...options) {
        if (installedPlugins.has(plugin2)) {
          warn$1(`Plugin has already been applied to target app.`);
        } else if (plugin2 && isFunction(plugin2.install)) {
          installedPlugins.add(plugin2);
          plugin2.install(app, ...options);
        } else if (isFunction(plugin2)) {
          installedPlugins.add(plugin2);
          plugin2(app, ...options);
        } else {
          warn$1(
            `A plugin must either be a function or an object with an "install" function.`
          );
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$1(
              "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
            );
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$1(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$1(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      // fixed by xxxxxx
      mount() {
      },
      // fixed by xxxxxx
      unmount() {
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$1(
            `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
          );
        }
        context.provides[key] = value;
        return app;
      },
      runWithContext(fn) {
        const lastApp = currentApp;
        currentApp = app;
        try {
          return fn();
        } finally {
          currentApp = lastApp;
        }
      }
    };
    return app;
  };
}
let currentApp = null;
function provide(key, value) {
  if (!currentInstance) {
    {
      warn$1(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
    if (currentInstance.type.mpType === "app") {
      currentInstance.appContext.app.provide(key, value);
    }
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else {
      warn$1(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$1(`inject() can only be used inside setup() or functional components.`);
  }
}
function hasInjectionContext() {
  return !!(currentInstance || currentRenderingInstance || currentApp);
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    if (isRootHook(type)) {
      target = target.root;
    }
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      const reset = setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      reset();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey(
      (ErrorTypeStrings[type] || type.replace(/^on/, "")).replace(/ hook$/, "")
    );
    warn$1(
      `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().`
    );
  }
}
const createHook$1 = (lifecycle) => (hook, target = currentInstance) => (
  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
  (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target)
);
const onBeforeMount = createHook$1("bm");
const onMounted = createHook$1("m");
const onBeforeUpdate = createHook$1("bu");
const onUpdated = createHook$1("u");
const onBeforeUnmount = createHook$1("bum");
const onUnmounted = createHook$1("um");
const onServerPrefetch = createHook$1("sp");
const onRenderTriggered = createHook$1(
  "rtg"
);
const onRenderTracked = createHook$1(
  "rtc"
);
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
const getPublicInstance = (i) => {
  if (!i)
    return null;
  if (isStatefulComponent(i))
    return getExposeProxy(i) || i.proxy;
  return getPublicInstance(i.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
    $: (i) => i,
    // fixed by xxxxxx vue-i18n 在 dev 模式，访问了 $el，故模拟一个假的
    // $el: i => i.vnode.el,
    $el: (i) => i.__$el || (i.__$el = {}),
    $data: (i) => i.data,
    $props: (i) => shallowReadonly(i.props),
    $attrs: (i) => shallowReadonly(i.attrs),
    $slots: (i) => shallowReadonly(i.slots),
    $refs: (i) => shallowReadonly(i.refs),
    $parent: (i) => getPublicInstance(i.parent),
    $root: (i) => getPublicInstance(i.root),
    $emit: (i) => i.emit,
    $options: (i) => resolveMergedOptions(i),
    $forceUpdate: (i) => i.f || (i.f = () => {
      i.effect.dirty = true;
      queueJob(i.update);
    }),
    // $nextTick: i => i.n || (i.n = nextTick.bind(i.proxy!)),// fixed by xxxxxx
    $watch: (i) => instanceWatch.bind(i)
  })
);
const isReservedPrefix = (key) => key === "_" || key === "$";
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn$1(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn$1(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
      } else if (key === "$slots") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn$1(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance && (!isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
    // to infinite warning loop
    key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ && isReservedPrefix(key[0]) && hasOwn$1(data, key)) {
        warn$1(
          `Property ${JSON.stringify(
            key
          )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
        );
      } else if (instance === currentRenderingInstance) {
        warn$1(
          `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
        );
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn$1(setupState, key)) {
      warn$1(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ && hasOwn$1(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn$1(instance.props, key)) {
      warn$1(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$1(
        `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
      );
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn$1(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$1(normalizedProps, key) || hasOwn$1(ctx, key) || hasOwn$1(publicPropertiesMap, key) || hasOwn$1(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn$1(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers.ownKeys = (target) => {
    warn$1(
      `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
    );
    return Reflect.ownKeys(target);
  };
}
function createDevRenderContext(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP
    });
  });
  return target;
}
function exposePropsOnRenderContext(instance) {
  const {
    ctx,
    propsOptions: [propsOptions]
  } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP
      });
    });
  }
}
function exposeSetupStateOnRenderContext(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix(key[0])) {
        warn$1(
          `setup() return property ${JSON.stringify(
            key
          )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
        );
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP
      });
    }
  });
}
function normalizePropsOrEmits(props) {
  return isArray(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
function createDuplicateChecker() {
  const cache = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache[key]) {
      warn$1(`${type} property "${key}" is already defined in ${cache[key]}.`);
    } else {
      cache[key] = type;
    }
  };
}
let shouldCacheAccess = true;
function applyOptions$1(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  function initInjections() {
    if (injectOptions) {
      resolveInjections(injectOptions, ctx, checkDuplicateProperties);
    }
  }
  {
    initInjections();
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$1(
          `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
        );
      }
    }
  }
  if (dataOptions) {
    if (!isFunction(dataOptions)) {
      warn$1(
        `The data option must be a function. Plain object usage is no longer supported.`
      );
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise(data)) {
      warn$1(
        `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
      );
    }
    if (!isObject$1(data)) {
      warn$1(`data() should return an object.`);
    } else {
      instance.data = reactive(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP
            });
          }
        }
      }
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (get2 === NOOP) {
        warn$1(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$1(
          `Write operation failed: computed property "${key}" is readonly.`
        );
      };
      const c2 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v) => c2.value = v
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  function initProvides() {
    if (provideOptions) {
      const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
      Reflect.ownKeys(provides).forEach((key) => {
        provide(key, provides[key]);
      });
    }
  }
  {
    initProvides();
  }
  {
    if (created) {
      callHook$1(created, instance, "c");
    }
  }
  function registerLifecycleHook(register, hook) {
    if (isArray(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render && instance.render === NOOP) {
    instance.render = render;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives)
    instance.directives = directives;
  if (instance.ctx.$onApplyOptions) {
    instance.ctx.$onApplyOptions(options, instance, publicThis);
  }
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$1(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v) => injected.value = v
      });
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1(hook, instance, type) {
  callWithAsyncErrorHandling(
    isArray(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      watch(getter, handler);
    } else {
      warn$1(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$1(raw)) {
    if (isArray(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      } else {
        warn$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$1(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m2) => mergeOptions(resolved, m2, optionMergeStrategies, true)
      );
    }
    mergeOptions(resolved, base, optionMergeStrategies);
  }
  if (isObject$1(base)) {
    cache.set(base, resolved);
  }
  return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions(to, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m2) => mergeOptions(to, m2, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$1(
        `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
      );
    } else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
  }
  return to;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray$1,
  created: mergeAsArray$1,
  beforeMount: mergeAsArray$1,
  mounted: mergeAsArray$1,
  beforeUpdate: mergeAsArray$1,
  updated: mergeAsArray$1,
  beforeDestroy: mergeAsArray$1,
  beforeUnmount: mergeAsArray$1,
  destroyed: mergeAsArray$1,
  unmounted: mergeAsArray$1,
  activated: mergeAsArray$1,
  deactivated: mergeAsArray$1,
  errorCaptured: mergeAsArray$1,
  serverPrefetch: mergeAsArray$1,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to, from) {
  if (!from) {
    return to;
  }
  if (!to) {
    return from;
  }
  return function mergedDataFn() {
    return extend(
      isFunction(to) ? to.call(this, this) : to,
      isFunction(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to, from) {
  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray$1(to, from) {
  return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
  return to ? extend(/* @__PURE__ */ Object.create(null), to, from) : from;
}
function mergeEmitsOrPropsOptions(to, from) {
  if (to) {
    if (isArray(to) && isArray(from)) {
      return [.../* @__PURE__ */ new Set([...to, ...from])];
    }
    return extend(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to, from) {
  if (!to)
    return from;
  if (!from)
    return to;
  const merged = extend(/* @__PURE__ */ Object.create(null), to);
  for (const key in from) {
    merged[key] = mergeAsArray$1(to[key], from[key]);
  }
  return merged;
}
function initProps$1(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext(instance) {
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !isInHmrContext() && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn$1(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue$1(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn$1(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn$1(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue$1(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn$1(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn$1(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue$1(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn$1(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue$1(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn$1(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          const reset = setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          reset();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$1(comp)) {
      cache.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray(raw)) {
    for (let i = 0; i < raw.length; i++) {
      if (!isString(raw[i])) {
        warn$1(`props must be strings when using array syntax.`, raw[i]);
      }
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (!isObject$1(raw)) {
      warn$1(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? { type: opt } : extend({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[
            0
            /* shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn$1(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$1(comp)) {
    cache.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$" && !isReservedProp(key)) {
    return true;
  } else {
    warn$1(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType$1(ctor) {
  if (ctor === null) {
    return "null";
  }
  if (typeof ctor === "function") {
    return ctor.name || "";
  } else if (typeof ctor === "object") {
    const name = ctor.constructor && ctor.constructor.name;
    return name || "";
  }
  return "";
}
function isSameType(a, b) {
  return getType$1(a) === getType$1(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray(expectedTypes)) {
    return expectedTypes.findIndex((t2) => isSameType(t2, type));
  } else if (isFunction(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps(rawProps, props, instance) {
  const resolvedValues = toRaw(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp$1(
      key,
      resolvedValues[key],
      opt,
      shallowReadonly(resolvedValues),
      !hasOwn$1(rawProps, key) && !hasOwn$1(rawProps, hyphenate(key))
    );
  }
}
function validateProp$1(name, value, prop, props, isAbsent) {
  const { type, required, validator, skipCheck } = prop;
  if (required && isAbsent) {
    warn$1('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !required) {
    return;
  }
  if (type != null && type !== true && !skipCheck) {
    let isValid = false;
    const types = isArray(type) ? type : [type];
    const expectedTypes = [];
    for (let i = 0; i < types.length && !isValid; i++) {
      const { valid, expectedType } = assertType$1(value, types[i]);
      expectedTypes.push(expectedType || "");
      isValid = valid;
    }
    if (!isValid) {
      warn$1(getInvalidTypeMessage$1(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value, props)) {
    warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType$1 = /* @__PURE__ */ makeMap(
  "String,Number,Boolean,Function,Symbol,BigInt"
);
function assertType$1(value, type) {
  let valid;
  const expectedType = getType$1(type);
  if (isSimpleType$1(expectedType)) {
    const t2 = typeof value;
    valid = t2 === expectedType.toLowerCase();
    if (!valid && t2 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject$1(value);
  } else if (expectedType === "Array") {
    valid = isArray(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage$1(name, value, expectedTypes) {
  if (expectedTypes.length === 0) {
    return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
  }
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue$1(value, expectedType);
  const receivedValue = styleValue$1(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable$1(expectedType) && !isBoolean$1(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable$1(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue$1(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable$1(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean$1(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
let supported;
let perf;
function startMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    perf.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
  }
}
function endMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf.mark(endTag);
    perf.measure(
      `<${formatComponentName(instance, instance.type)}> ${type}`,
      startTag,
      endTag
    );
    perf.clearMarks(startTag);
    perf.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
  }
}
function isSupported() {
  if (supported !== void 0) {
    return supported;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported = true;
    perf = window.performance;
  } else {
    supported = false;
  }
  return supported;
}
const queuePostRenderEffect$1 = queuePostFlushCb;
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
const InternalObjectKey = `__vInternal`;
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend({}, props) : props;
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    attrsProxy: null,
    slotsProxy: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null,
    // fixed by xxxxxx 用于存储uni-app的元素缓存
    $uniElements: /* @__PURE__ */ new Map(),
    $templateUniElementRefs: [],
    $templateUniElementStyles: {},
    $eS: {},
    $eA: {}
  };
  {
    instance.ctx = createDevRenderContext(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
  internalSetCurrentInstance = (i) => {
    currentInstance = i;
  };
  setInSSRSetupState = (v) => {
    isInSSRComponentSetup = v;
  };
}
const setCurrentInstance = (instance) => {
  const prev = currentInstance;
  internalSetCurrentInstance(instance);
  instance.scope.on();
  return () => {
    instance.scope.off();
    internalSetCurrentInstance(prev);
  };
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
const isBuiltInTag = /* @__PURE__ */ makeMap("slot,component");
function validateComponentName(name, { isNativeTag }) {
  if (isBuiltInTag(name) || isNativeTag(name)) {
    warn$1(
      "Do not use built-in or reserved HTML elements as component id: " + name
    );
  }
}
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isSSR && setInSSRSetupState(isSSR);
  const {
    props
    /*, children*/
  } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps$1(instance, props, isStateful, isSSR);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isSSR && setInSSRSetupState(false);
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component2 = instance.type;
  {
    if (Component2.name) {
      validateComponentName(Component2.name, instance.appContext.config);
    }
    if (Component2.components) {
      const names = Object.keys(Component2.components);
      for (let i = 0; i < names.length; i++) {
        validateComponentName(names[i], instance.appContext.config);
      }
    }
    if (Component2.directives) {
      const names = Object.keys(Component2.directives);
      for (let i = 0; i < names.length; i++) {
        validateDirectiveName(names[i]);
      }
    }
    if (Component2.compilerOptions && isRuntimeOnly()) {
      warn$1(
        `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
      );
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  {
    exposePropsOnRenderContext(instance);
  }
  const { setup } = Component2;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    const reset = setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [
        shallowReadonly(instance.props),
        setupContext
      ]
    );
    resetTracking();
    reset();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      {
        warn$1(
          `setup() returned a Promise, but the version of Vue you are using does not support it yet.`
        );
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    {
      instance.render = setupResult;
    }
  } else if (isObject$1(setupResult)) {
    if (isVNode(setupResult)) {
      warn$1(
        `setup() should not return VNodes directly - return a render function instead.`
      );
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (setupResult !== void 0) {
    warn$1(
      `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
    );
  }
  finishComponentSetup(instance, isSSR);
}
let compile;
const isRuntimeOnly = () => !compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component2 = instance.type;
  if (!instance.render) {
    instance.render = Component2.render || NOOP;
  }
  {
    const reset = setCurrentInstance(instance);
    pauseTracking();
    try {
      applyOptions$1(instance);
    } finally {
      resetTracking();
      reset();
    }
  }
  if (!Component2.render && instance.render === NOOP && !isSSR) {
    if (Component2.template) {
      warn$1(
        `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
      );
    } else {
      warn$1(`Component is missing template or render function.`);
    }
  }
}
function getAttrsProxy(instance) {
  return instance.attrsProxy || (instance.attrsProxy = new Proxy(
    instance.attrs,
    {
      get(target, key) {
        track(instance, "get", "$attrs");
        return target[key];
      },
      set() {
        warn$1(`setupContext.attrs is readonly.`);
        return false;
      },
      deleteProperty() {
        warn$1(`setupContext.attrs is readonly.`);
        return false;
      }
    }
  ));
}
function getSlotsProxy(instance) {
  return instance.slotsProxy || (instance.slotsProxy = new Proxy(instance.slots, {
    get(target, key) {
      track(instance, "get", "$slots");
      return target[key];
    }
  }));
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$1(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray(exposed)) {
            exposedType = "array";
          } else if (isRef(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$1(
            `expose() should be passed a plain object, received ${exposedType}.`
          );
        }
      }
    }
    instance.exposed = exposed || {};
  };
  {
    return Object.freeze({
      get attrs() {
        return getAttrsProxy(instance);
      },
      get slots() {
        return getSlotsProxy(instance);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        }
        return instance.proxy[key];
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component2, includeInferred = true) {
  return isFunction(Component2) ? Component2.displayName || Component2.name : Component2.name || includeInferred && Component2.__name;
}
function formatComponentName(instance, Component2, isRoot = false) {
  let name = getComponentName(Component2);
  if (!name && Component2.__file) {
    const match = Component2.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component2) {
          return key;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
const computed = (getterOrOptions, debugOptions) => {
  const c2 = computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
  {
    const i = getCurrentInstance();
    if (i && i.appContext.config.warnRecursiveComputed) {
      c2._warnRecursive = true;
    }
  }
  return c2;
};
const version = "3.4.21";
const warn = warn$1;
function unwrapper(target) {
  return unref(target);
}
const ARRAYTYPE = "[object Array]";
const OBJECTTYPE = "[object Object]";
function diff(current, pre) {
  const result = {};
  syncKeys(current, pre);
  _diff(current, pre, "", result);
  return result;
}
function syncKeys(current, pre) {
  current = unwrapper(current);
  if (current === pre)
    return;
  const rootCurrentType = toTypeString(current);
  const rootPreType = toTypeString(pre);
  if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {
    for (let key in pre) {
      const currentValue = current[key];
      if (currentValue === void 0) {
        current[key] = null;
      } else {
        syncKeys(currentValue, pre[key]);
      }
    }
  } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {
    if (current.length >= pre.length) {
      pre.forEach((item, index2) => {
        syncKeys(current[index2], item);
      });
    }
  }
}
function _diff(current, pre, path, result) {
  current = unwrapper(current);
  if (current === pre)
    return;
  const rootCurrentType = toTypeString(current);
  const rootPreType = toTypeString(pre);
  if (rootCurrentType == OBJECTTYPE) {
    if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {
      setResult(result, path, current);
    } else {
      for (let key in current) {
        const currentValue = unwrapper(current[key]);
        const preValue = pre[key];
        const currentType = toTypeString(currentValue);
        const preType = toTypeString(preValue);
        if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {
          if (currentValue != preValue) {
            setResult(
              result,
              (path == "" ? "" : path + ".") + key,
              currentValue
            );
          }
        } else if (currentType == ARRAYTYPE) {
          if (preType != ARRAYTYPE) {
            setResult(
              result,
              (path == "" ? "" : path + ".") + key,
              currentValue
            );
          } else {
            if (currentValue.length < preValue.length) {
              setResult(
                result,
                (path == "" ? "" : path + ".") + key,
                currentValue
              );
            } else {
              currentValue.forEach((item, index2) => {
                _diff(
                  item,
                  preValue[index2],
                  (path == "" ? "" : path + ".") + key + "[" + index2 + "]",
                  result
                );
              });
            }
          }
        } else if (currentType == OBJECTTYPE) {
          if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {
            setResult(
              result,
              (path == "" ? "" : path + ".") + key,
              currentValue
            );
          } else {
            for (let subKey in currentValue) {
              _diff(
                currentValue[subKey],
                preValue[subKey],
                (path == "" ? "" : path + ".") + key + "." + subKey,
                result
              );
            }
          }
        }
      }
    }
  } else if (rootCurrentType == ARRAYTYPE) {
    if (rootPreType != ARRAYTYPE) {
      setResult(result, path, current);
    } else {
      if (current.length < pre.length) {
        setResult(result, path, current);
      } else {
        current.forEach((item, index2) => {
          _diff(item, pre[index2], path + "[" + index2 + "]", result);
        });
      }
    }
  } else {
    setResult(result, path, current);
  }
}
function setResult(result, k, v) {
  result[k] = v;
}
function hasComponentEffect(instance) {
  return queue$1.includes(instance.update);
}
function flushCallbacks(instance) {
  const ctx = instance.ctx;
  const callbacks = ctx.__next_tick_callbacks;
  if (callbacks && callbacks.length) {
    const copies = callbacks.slice(0);
    callbacks.length = 0;
    for (let i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }
}
function nextTick(instance, fn) {
  const ctx = instance.ctx;
  if (!ctx.__next_tick_pending && !hasComponentEffect(instance)) {
    return nextTick$1(fn && fn.bind(instance.proxy));
  }
  let _resolve;
  if (!ctx.__next_tick_callbacks) {
    ctx.__next_tick_callbacks = [];
  }
  ctx.__next_tick_callbacks.push(() => {
    if (fn) {
      callWithErrorHandling(
        fn.bind(instance.proxy),
        instance,
        14
      );
    } else if (_resolve) {
      _resolve(instance.proxy);
    }
  });
  return new Promise((resolve2) => {
    _resolve = resolve2;
  });
}
function clone$1(src, seen) {
  src = unwrapper(src);
  const type = typeof src;
  if (type === "object" && src !== null) {
    let copy = seen.get(src);
    if (typeof copy !== "undefined") {
      return copy;
    }
    if (isArray(src)) {
      const len = src.length;
      copy = new Array(len);
      seen.set(src, copy);
      for (let i = 0; i < len; i++) {
        copy[i] = clone$1(src[i], seen);
      }
    } else {
      copy = {};
      seen.set(src, copy);
      for (const name in src) {
        if (hasOwn$1(src, name)) {
          copy[name] = clone$1(src[name], seen);
        }
      }
    }
    return copy;
  }
  if (type !== "symbol") {
    return src;
  }
}
function deepCopy(src) {
  return clone$1(src, typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : /* @__PURE__ */ new Map());
}
function getMPInstanceData(instance, keys) {
  const data = instance.data;
  const ret = /* @__PURE__ */ Object.create(null);
  keys.forEach((key) => {
    ret[key] = data[key];
  });
  return ret;
}
function patch(instance, data, oldData) {
  if (!data) {
    return;
  }
  data = deepCopy(data);
  data.$eS = instance.$eS || {};
  data.$eA = instance.$eA || {};
  const ctx = instance.ctx;
  const mpType = ctx.mpType;
  if (mpType === "page" || mpType === "component") {
    data.r0 = 1;
    const mpInstance = ctx.$scope;
    const keys = Object.keys(data);
    const diffData = diff(data, oldData || getMPInstanceData(mpInstance, keys));
    if (Object.keys(diffData).length) {
      ctx.__next_tick_pending = true;
      mpInstance.setData(diffData, () => {
        ctx.__next_tick_pending = false;
        flushCallbacks(instance);
      });
      flushPreFlushCbs();
    } else {
      flushCallbacks(instance);
    }
  }
}
function initAppConfig(appConfig) {
  appConfig.globalProperties.$nextTick = function $nextTick(fn) {
    return nextTick(this.$, fn);
  };
}
function onApplyOptions(options, instance, publicThis) {
  instance.appContext.config.globalProperties.$applyOptions(
    options,
    instance,
    publicThis
  );
  const computedOptions = options.computed;
  if (computedOptions) {
    const keys = Object.keys(computedOptions);
    if (keys.length) {
      const ctx = instance.ctx;
      if (!ctx.$computedKeys) {
        ctx.$computedKeys = [];
      }
      ctx.$computedKeys.push(...keys);
    }
  }
  delete instance.ctx.$onApplyOptions;
}
function setRef$1(instance, isUnmount = false) {
  const {
    setupState,
    $templateRefs,
    $templateUniElementRefs,
    ctx: { $scope, $mpPlatform }
  } = instance;
  if ($mpPlatform === "mp-alipay") {
    return;
  }
  if (!$scope || !$templateRefs && !$templateUniElementRefs) {
    return;
  }
  if (isUnmount) {
    $templateRefs && $templateRefs.forEach(
      (templateRef) => setTemplateRef(templateRef, null, setupState)
    );
    $templateUniElementRefs && $templateUniElementRefs.forEach(
      (templateRef) => setTemplateRef(templateRef, null, setupState)
    );
    return;
  }
  const check = $mpPlatform === "mp-baidu" || $mpPlatform === "mp-toutiao";
  const doSetByRefs = (refs) => {
    if (refs.length === 0) {
      return [];
    }
    const mpComponents = (
      // 字节小程序 selectAllComponents 可能返回 null
      // https://github.com/dcloudio/uni-app/issues/3954
      ($scope.selectAllComponents(".r") || []).concat(
        $scope.selectAllComponents(".r-i-f") || []
      )
    );
    return refs.filter((templateRef) => {
      const refValue = findComponentPublicInstance(mpComponents, templateRef.i);
      if (check && refValue === null) {
        return true;
      }
      setTemplateRef(templateRef, refValue, setupState);
      return false;
    });
  };
  const doSet = () => {
    if ($templateRefs) {
      const refs = doSetByRefs($templateRefs);
      if (refs.length && instance.proxy && instance.proxy.$scope) {
        instance.proxy.$scope.setData({ r1: 1 }, () => {
          doSetByRefs(refs);
        });
      }
    }
  };
  if ($templateUniElementRefs && $templateUniElementRefs.length) {
    nextTick(instance, () => {
      $templateUniElementRefs.forEach((templateRef) => {
        if (isArray(templateRef.v)) {
          templateRef.v.forEach((v) => {
            setTemplateRef(templateRef, v, setupState);
          });
        } else {
          setTemplateRef(templateRef, templateRef.v, setupState);
        }
      });
    });
  }
  if ($scope._$setRef) {
    $scope._$setRef(doSet);
  } else {
    nextTick(instance, doSet);
  }
}
function toSkip(value) {
  if (isObject$1(value)) {
    markRaw(value);
  }
  return value;
}
function findComponentPublicInstance(mpComponents, id) {
  const mpInstance = mpComponents.find(
    (com) => com && (com.properties || com.props).uI === id
  );
  if (mpInstance) {
    const vm = mpInstance.$vm;
    if (vm) {
      return getExposeProxy(vm.$) || vm;
    }
    return toSkip(mpInstance);
  }
  return null;
}
function setTemplateRef({ r: r2, f: f2 }, refValue, setupState) {
  if (isFunction(r2)) {
    r2(refValue, {});
  } else {
    const _isString = isString(r2);
    const _isRef = isRef(r2);
    if (_isString || _isRef) {
      if (f2) {
        if (!_isRef) {
          return;
        }
        if (!isArray(r2.value)) {
          r2.value = [];
        }
        const existing = r2.value;
        if (existing.indexOf(refValue) === -1) {
          existing.push(refValue);
          if (!refValue) {
            return;
          }
          if (refValue.$) {
            onBeforeUnmount(() => remove(existing, refValue), refValue.$);
          }
        }
      } else if (_isString) {
        if (hasOwn$1(setupState, r2)) {
          setupState[r2] = refValue;
        }
      } else if (isRef(r2)) {
        r2.value = refValue;
      } else {
        warnRef(r2);
      }
    } else {
      warnRef(r2);
    }
  }
}
function warnRef(ref2) {
  warn("Invalid template ref type:", ref2, `(${typeof ref2})`);
}
const queuePostRenderEffect = queuePostFlushCb;
function mountComponent(initialVNode, options) {
  const instance = initialVNode.component = createComponentInstance(initialVNode, options.parentComponent, null);
  {
    instance.ctx.$onApplyOptions = onApplyOptions;
    instance.ctx.$children = [];
  }
  if (options.mpType === "app") {
    instance.render = NOOP;
  }
  if (options.onBeforeSetup) {
    options.onBeforeSetup(instance, options);
  }
  {
    pushWarningContext(initialVNode);
    startMeasure(instance, `mount`);
  }
  {
    startMeasure(instance, `init`);
  }
  setupComponent(instance);
  {
    endMeasure(instance, `init`);
  }
  {
    if (options.parentComponent && instance.proxy) {
      options.parentComponent.ctx.$children.push(getExposeProxy(instance) || instance.proxy);
    }
  }
  setupRenderEffect(instance);
  {
    popWarningContext();
    endMeasure(instance, `mount`);
  }
  return instance.proxy;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
function renderComponentRoot(instance) {
  const {
    type: Component2,
    vnode,
    proxy,
    withProxy,
    props,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render,
    renderCache,
    data,
    setupState,
    ctx,
    uid: uid2,
    appContext: {
      app: {
        config: {
          globalProperties: { pruneComponentPropsCache: pruneComponentPropsCache2 }
        }
      }
    },
    inheritAttrs
  } = instance;
  instance.$uniElementIds = /* @__PURE__ */ new Map();
  instance.$templateRefs = [];
  instance.$templateUniElementRefs = [];
  instance.$templateUniElementStyles = {};
  instance.$ei = 0;
  pruneComponentPropsCache2(uid2);
  instance.__counter = instance.__counter === 0 ? 1 : 0;
  let result;
  const prev = setCurrentRenderingInstance(instance);
  try {
    if (vnode.shapeFlag & 4) {
      fallthroughAttrs(inheritAttrs, props, propsOptions, attrs);
      const proxyToUse = withProxy || proxy;
      result = render.call(
        proxyToUse,
        proxyToUse,
        renderCache,
        props,
        setupState,
        data,
        ctx
      );
    } else {
      fallthroughAttrs(
        inheritAttrs,
        props,
        propsOptions,
        Component2.props ? attrs : getFunctionalFallthrough(attrs)
      );
      const render2 = Component2;
      result = render2.length > 1 ? render2(props, { attrs, slots, emit: emit2 }) : render2(
        props,
        null
        /* we know it doesn't need it */
      );
    }
  } catch (err) {
    handleError(err, instance, 1);
    result = false;
  }
  setRef$1(instance);
  setCurrentRenderingInstance(prev);
  return result;
}
function fallthroughAttrs(inheritAttrs, props, propsOptions, fallthroughAttrs2) {
  if (props && fallthroughAttrs2 && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs2).filter(
      (key) => key !== "class" && key !== "style"
    );
    if (!keys.length) {
      return;
    }
    if (propsOptions && keys.some(isModelListener)) {
      keys.forEach((key) => {
        if (!isModelListener(key) || !(key.slice(9) in propsOptions)) {
          props[key] = fallthroughAttrs2[key];
        }
      });
    } else {
      keys.forEach((key) => props[key] = fallthroughAttrs2[key]);
    }
  }
}
const updateComponentPreRender = (instance) => {
  pauseTracking();
  flushPreFlushCbs();
  resetTracking();
};
function componentUpdateScopedSlotsFn() {
  const scopedSlotsData = this.$scopedSlotsData;
  if (!scopedSlotsData || scopedSlotsData.length === 0) {
    return;
  }
  const mpInstance = this.ctx.$scope;
  const oldData = mpInstance.data;
  const diffData = /* @__PURE__ */ Object.create(null);
  scopedSlotsData.forEach(({ path, index: index2, data }) => {
    const oldScopedSlotData = getValueByDataPath(oldData, path);
    const diffPath = isString(index2) ? `${path}.${index2}` : `${path}[${index2}]`;
    if (typeof oldScopedSlotData === "undefined" || typeof oldScopedSlotData[index2] === "undefined") {
      diffData[diffPath] = data;
    } else {
      const diffScopedSlotData = diff(
        data,
        oldScopedSlotData[index2]
      );
      Object.keys(diffScopedSlotData).forEach((name) => {
        diffData[diffPath + "." + name] = diffScopedSlotData[name];
      });
    }
  });
  scopedSlotsData.length = 0;
  if (Object.keys(diffData).length) {
    mpInstance.setData(diffData);
  }
}
function toggleRecurse({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function setupRenderEffect(instance) {
  const updateScopedSlots = componentUpdateScopedSlotsFn.bind(
    instance
  );
  instance.$updateScopedSlots = () => nextTick$1(() => queueJob(updateScopedSlots));
  const componentUpdateFn = () => {
    if (!instance.isMounted) {
      onBeforeUnmount(() => {
        setRef$1(instance, true);
      }, instance);
      {
        startMeasure(instance, `patch`);
      }
      patch(instance, renderComponentRoot(instance));
      {
        endMeasure(instance, `patch`);
      }
      {
        devtoolsComponentAdded(instance);
      }
    } else {
      const { next, bu, u } = instance;
      {
        pushWarningContext(next || instance.vnode);
      }
      toggleRecurse(instance, false);
      updateComponentPreRender();
      if (bu) {
        invokeArrayFns$1(bu);
      }
      toggleRecurse(instance, true);
      {
        startMeasure(instance, `patch`);
      }
      patch(instance, renderComponentRoot(instance));
      {
        endMeasure(instance, `patch`);
      }
      if (u) {
        queuePostRenderEffect(u);
      }
      {
        devtoolsComponentUpdated(instance);
      }
      {
        popWarningContext();
      }
    }
  };
  const effect2 = instance.effect = new ReactiveEffect(
    componentUpdateFn,
    NOOP,
    () => queueJob(update),
    instance.scope
    // track it in component's effect scope
  );
  const update = instance.update = () => {
    if (effect2.dirty) {
      effect2.run();
    }
  };
  update.id = instance.uid;
  toggleRecurse(instance, true);
  {
    effect2.onTrack = instance.rtc ? (e2) => invokeArrayFns$1(instance.rtc, e2) : void 0;
    effect2.onTrigger = instance.rtg ? (e2) => invokeArrayFns$1(instance.rtg, e2) : void 0;
    update.ownerInstance = instance;
  }
  {
    update();
  }
}
function unmountComponent(instance) {
  const { bum, scope, update, um } = instance;
  if (bum) {
    invokeArrayFns$1(bum);
  }
  {
    const parentInstance = instance.parent;
    if (parentInstance) {
      const $children = parentInstance.ctx.$children;
      const target = getExposeProxy(instance) || instance.proxy;
      const index2 = $children.indexOf(target);
      if (index2 > -1) {
        $children.splice(index2, 1);
      }
    }
  }
  scope.stop();
  if (update) {
    update.active = false;
  }
  if (um) {
    queuePostRenderEffect(um);
  }
  queuePostRenderEffect(() => {
    instance.isUnmounted = true;
  });
  {
    devtoolsComponentRemoved(instance);
  }
}
const oldCreateApp = createAppAPI();
function getTarget() {
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof my !== "undefined") {
    return my;
  }
}
function createVueApp(rootComponent, rootProps = null) {
  const target = getTarget();
  target.__VUE__ = true;
  {
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const app = oldCreateApp(rootComponent, rootProps);
  const appContext = app._context;
  initAppConfig(appContext.config);
  const createVNode2 = (initialVNode) => {
    initialVNode.appContext = appContext;
    initialVNode.shapeFlag = 6;
    return initialVNode;
  };
  const createComponent2 = function createComponent22(initialVNode, options) {
    return mountComponent(createVNode2(initialVNode), options);
  };
  const destroyComponent = function destroyComponent2(component) {
    return component && unmountComponent(component.$);
  };
  app.mount = function mount() {
    rootComponent.render = NOOP;
    const instance = mountComponent(
      createVNode2({ type: rootComponent }),
      {
        mpType: "app",
        mpInstance: null,
        parentComponent: null,
        slots: [],
        props: null
      }
    );
    app._instance = instance.$;
    {
      devtoolsInitApp(app, version);
    }
    instance.$app = app;
    instance.$createComponent = createComponent2;
    instance.$destroyComponent = destroyComponent;
    appContext.$appInstance = instance;
    return instance;
  };
  app.unmount = function unmount() {
    warn(`Cannot unmount an app.`);
  };
  return app;
}
function injectLifecycleHook(name, hook, publicThis, instance) {
  if (isFunction(hook)) {
    injectHook(name, hook.bind(publicThis), instance);
  }
}
function initHooks$1(options, instance, publicThis) {
  const mpType = options.mpType || publicThis.$mpType;
  if (!mpType || mpType === "component") {
    return;
  }
  Object.keys(options).forEach((name) => {
    if (isUniLifecycleHook(name, options[name], false)) {
      const hooks = options[name];
      if (isArray(hooks)) {
        hooks.forEach((hook) => injectLifecycleHook(name, hook, publicThis, instance));
      } else {
        injectLifecycleHook(name, hooks, publicThis, instance);
      }
    }
  });
}
function applyOptions$2(options, instance, publicThis) {
  initHooks$1(options, instance, publicThis);
}
function set$2(target, key, val) {
  return target[key] = val;
}
function $callMethod(method, ...args) {
  const fn = this[method];
  if (fn) {
    return fn(...args);
  }
  console.error(`method ${method} not found`);
  return null;
}
function createErrorHandler(app) {
  const userErrorHandler = app.config.errorHandler;
  return function errorHandler(err, instance, info) {
    if (userErrorHandler) {
      userErrorHandler(err, instance, info);
    }
    const appInstance = app._instance;
    if (!appInstance || !appInstance.proxy) {
      throw err;
    }
    if (appInstance[ON_ERROR]) {
      {
        appInstance.proxy.$callHook(ON_ERROR, err);
      }
    } else {
      logError(err, info, instance ? instance.$.vnode : null, false);
    }
  };
}
function mergeAsArray(to, from) {
  return to ? [...new Set([].concat(to, from))] : from;
}
function initOptionMergeStrategies(optionMergeStrategies) {
  UniLifecycleHooks.forEach((name) => {
    optionMergeStrategies[name] = mergeAsArray;
  });
}
let realAtob;
const b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
const b64re = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
if (typeof atob !== "function") {
  realAtob = function(str) {
    str = String(str).replace(/[\t\n\f\r ]+/g, "");
    if (!b64re.test(str)) {
      throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
    }
    str += "==".slice(2 - (str.length & 3));
    var bitmap;
    var result = "";
    var r1;
    var r2;
    var i = 0;
    for (; i < str.length; ) {
      bitmap = b64.indexOf(str.charAt(i++)) << 18 | b64.indexOf(str.charAt(i++)) << 12 | (r1 = b64.indexOf(str.charAt(i++))) << 6 | (r2 = b64.indexOf(str.charAt(i++)));
      result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255) : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255) : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);
    }
    return result;
  };
} else {
  realAtob = atob;
}
function b64DecodeUnicode(str) {
  return decodeURIComponent(realAtob(str).split("").map(function(c2) {
    return "%" + ("00" + c2.charCodeAt(0).toString(16)).slice(-2);
  }).join(""));
}
function getCurrentUserInfo() {
  const token = index.getStorageSync("uni_id_token") || "";
  const tokenArr = token.split(".");
  if (!token || tokenArr.length !== 3) {
    return {
      uid: null,
      role: [],
      permission: [],
      tokenExpired: 0
    };
  }
  let userInfo;
  try {
    userInfo = JSON.parse(b64DecodeUnicode(tokenArr[1]));
  } catch (error) {
    throw new Error("获取当前用户信息出错，详细错误信息为：" + error.message);
  }
  userInfo.tokenExpired = userInfo.exp * 1e3;
  delete userInfo.exp;
  delete userInfo.iat;
  return userInfo;
}
function uniIdMixin(globalProperties) {
  globalProperties.uniIDHasRole = function(roleId) {
    const { role } = getCurrentUserInfo();
    return role.indexOf(roleId) > -1;
  };
  globalProperties.uniIDHasPermission = function(permissionId) {
    const { permission } = getCurrentUserInfo();
    return this.uniIDHasRole("admin") || permission.indexOf(permissionId) > -1;
  };
  globalProperties.uniIDTokenValid = function() {
    const { tokenExpired } = getCurrentUserInfo();
    return tokenExpired > Date.now();
  };
}
function initApp(app) {
  const appConfig = app.config;
  appConfig.errorHandler = invokeCreateErrorHandler(app, createErrorHandler);
  initOptionMergeStrategies(appConfig.optionMergeStrategies);
  const globalProperties = appConfig.globalProperties;
  {
    uniIdMixin(globalProperties);
  }
  {
    globalProperties.$set = set$2;
    globalProperties.$applyOptions = applyOptions$2;
    globalProperties.$callMethod = $callMethod;
  }
  {
    index.invokeCreateVueAppHook(app);
  }
}
const propsCaches = /* @__PURE__ */ Object.create(null);
function renderProps(props) {
  const { uid: uid2, __counter } = getCurrentInstance();
  const propsId = (propsCaches[uid2] || (propsCaches[uid2] = [])).push(guardReactiveProps(props)) - 1;
  return uid2 + "," + propsId + "," + __counter;
}
function pruneComponentPropsCache(uid2) {
  delete propsCaches[uid2];
}
function findComponentPropsData(up) {
  if (!up) {
    return;
  }
  const [uid2, propsId] = up.split(",");
  if (!propsCaches[uid2]) {
    return;
  }
  return propsCaches[uid2][parseInt(propsId)];
}
var plugin = {
  install(app) {
    initApp(app);
    app.config.globalProperties.pruneComponentPropsCache = pruneComponentPropsCache;
    const oldMount = app.mount;
    app.mount = function mount(rootContainer) {
      const instance = oldMount.call(app, rootContainer);
      const createApp2 = getCreateApp();
      if (createApp2) {
        createApp2(instance);
      } else {
        if (typeof createMiniProgramApp !== "undefined") {
          createMiniProgramApp(instance);
        }
      }
      return instance;
    };
  }
};
function getCreateApp() {
  const method = "createApp";
  if (typeof global !== "undefined" && typeof global[method] !== "undefined") {
    return global[method];
  } else if (typeof my !== "undefined") {
    return my[method];
  }
}
function stringifyStyle(value) {
  if (isString(value)) {
    return value;
  }
  return stringify(normalizeStyle(value));
}
function stringify(styles) {
  let ret = "";
  if (!styles || isString(styles)) {
    return ret;
  }
  for (const key in styles) {
    ret += `${key.startsWith(`--`) ? key : hyphenate(key)}:${styles[key]};`;
  }
  return ret;
}
function vOn(value, key) {
  const instance = getCurrentInstance();
  const ctx = instance.ctx;
  const extraKey = typeof key !== "undefined" && (ctx.$mpPlatform === "mp-weixin" || ctx.$mpPlatform === "mp-qq" || ctx.$mpPlatform === "mp-xhs") && (isString(key) || typeof key === "number") ? "_" + key : "";
  const name = "e" + instance.$ei++ + extraKey;
  const mpInstance = ctx.$scope;
  if (!value) {
    delete mpInstance[name];
    return name;
  }
  const existingInvoker = mpInstance[name];
  if (existingInvoker) {
    existingInvoker.value = value;
  } else {
    mpInstance[name] = createInvoker(value, instance);
  }
  return name;
}
function createInvoker(initialValue, instance) {
  const invoker = (e2) => {
    patchMPEvent(e2);
    let args = [e2];
    if (instance && instance.ctx.$getTriggerEventDetail) {
      if (typeof e2.detail === "number") {
        e2.detail = instance.ctx.$getTriggerEventDetail(e2.detail);
      }
    }
    if (e2.detail && e2.detail.__args__) {
      args = e2.detail.__args__;
    }
    const eventValue = invoker.value;
    const invoke = () => callWithAsyncErrorHandling(patchStopImmediatePropagation(e2, eventValue), instance, 5, args);
    const eventTarget = e2.target;
    const eventSync = eventTarget ? eventTarget.dataset ? String(eventTarget.dataset.eventsync) === "true" : false : false;
    if (bubbles.includes(e2.type) && !eventSync) {
      setTimeout(invoke);
    } else {
      const res = invoke();
      if (e2.type === "input" && (isArray(res) || isPromise(res))) {
        return;
      }
      return res;
    }
  };
  invoker.value = initialValue;
  return invoker;
}
const bubbles = [
  // touch事件暂不做延迟，否则在 Android 上会影响性能，比如一些拖拽跟手手势等
  // 'touchstart',
  // 'touchmove',
  // 'touchcancel',
  // 'touchend',
  "tap",
  "longpress",
  "longtap",
  "transitionend",
  "animationstart",
  "animationiteration",
  "animationend",
  "touchforcechange"
];
function patchMPEvent(event, instance) {
  if (event.type && event.target) {
    event.preventDefault = NOOP;
    event.stopPropagation = NOOP;
    event.stopImmediatePropagation = NOOP;
    if (!hasOwn$1(event, "detail")) {
      event.detail = {};
    }
    if (hasOwn$1(event, "markerId")) {
      event.detail = typeof event.detail === "object" ? event.detail : {};
      event.detail.markerId = event.markerId;
    }
    if (isPlainObject$1(event.detail) && hasOwn$1(event.detail, "checked") && !hasOwn$1(event.detail, "value")) {
      event.detail.value = event.detail.checked;
    }
    if (isPlainObject$1(event.detail)) {
      event.target = extend({}, event.target, event.detail);
    }
  }
}
function patchStopImmediatePropagation(e2, value) {
  if (isArray(value)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop && originalStop.call(e2);
      e2._stopped = true;
    };
    return value.map((fn) => (e3) => !e3._stopped && fn(e3));
  } else {
    return value;
  }
}
function vFor(source, renderItem) {
  let ret;
  if (isArray(source) || isString(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem(source[i], i, i);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn(`The v-for range expect an integer value but got ${source}.`);
      return [];
    }
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem(i + 1, i, i);
    }
  } else if (isObject$1(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, (item, i) => renderItem(item, i, i));
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i = 0, l = keys.length; i < l; i++) {
        const key = keys[i];
        ret[i] = renderItem(source[key], key, i);
      }
    }
  } else {
    ret = [];
  }
  return ret;
}
function setRef(ref2, id, opts = {}) {
  const { $templateRefs } = getCurrentInstance();
  $templateRefs.push({ i: id, r: ref2, k: opts.k, f: opts.f });
}
function withModelModifiers(fn, { number, trim }, isComponent = false) {
  if (isComponent) {
    return (...args) => {
      if (trim) {
        args = args.map((a) => a.trim());
      } else if (number) {
        args = args.map(toNumber);
      }
      return fn(...args);
    };
  }
  return (event) => {
    const value = event.detail.value;
    if (trim) {
      event.detail.value = value.trim();
    } else if (number) {
      event.detail.value = toNumber(value);
    }
    return fn(event);
  };
}
const o = (value, key) => vOn(value, key);
const f = (source, renderItem) => vFor(source, renderItem);
const s = (value) => stringifyStyle(value);
const e = (target, ...sources) => extend(target, ...sources);
const n = (value) => normalizeClass(value);
const t = (val) => toDisplayString(val);
const p = (props) => renderProps(props);
const sr = (ref2, id, opts) => setRef(ref2, id, opts);
const m = (fn, modifiers, isComponent = false) => withModelModifiers(fn, modifiers, isComponent);
function createApp$1(rootComponent, rootProps = null) {
  rootComponent && (rootComponent.mpType = "app");
  return createVueApp(rootComponent, rootProps).use(plugin);
}
const createSSRApp = createApp$1;
function getLocaleLanguage$1() {
  var _a2;
  let localeLanguage = "";
  {
    const appBaseInfo = ((_a2 = wx.getAppBaseInfo) === null || _a2 === void 0 ? void 0 : _a2.call(wx)) || wx.getSystemInfoSync();
    const language = appBaseInfo && appBaseInfo.language ? appBaseInfo.language : LOCALE_EN;
    localeLanguage = normalizeLocale(language) || LOCALE_EN;
  }
  return localeLanguage;
}
function validateProtocolFail(name, msg) {
  console.warn(`${name}: ${msg}`);
}
function validateProtocol(name, data, protocol, onFail) {
  if (!onFail) {
    onFail = validateProtocolFail;
  }
  for (const key in protocol) {
    const errMsg = validateProp(key, data[key], protocol[key], !hasOwn$1(data, key));
    if (isString(errMsg)) {
      onFail(name, errMsg);
    }
  }
}
function validateProtocols(name, args, protocol, onFail) {
  if (!protocol) {
    return;
  }
  if (!isArray(protocol)) {
    return validateProtocol(name, args[0] || /* @__PURE__ */ Object.create(null), protocol, onFail);
  }
  const len = protocol.length;
  const argsLen = args.length;
  for (let i = 0; i < len; i++) {
    const opts = protocol[i];
    const data = /* @__PURE__ */ Object.create(null);
    if (argsLen > i) {
      data[opts.name] = args[i];
    }
    validateProtocol(name, data, { [opts.name]: opts }, onFail);
  }
}
function validateProp(name, value, prop, isAbsent) {
  if (!isPlainObject$1(prop)) {
    prop = { type: prop };
  }
  const { type, required, validator } = prop;
  if (required && isAbsent) {
    return 'Missing required args: "' + name + '"';
  }
  if (value == null && !required) {
    return;
  }
  if (type != null) {
    let isValid = false;
    const types = isArray(type) ? type : [type];
    const expectedTypes = [];
    for (let i = 0; i < types.length && !isValid; i++) {
      const { valid, expectedType } = assertType(value, types[i]);
      expectedTypes.push(expectedType || "");
      isValid = valid;
    }
    if (!isValid) {
      return getInvalidTypeMessage(name, value, expectedTypes);
    }
  }
  if (validator) {
    return validator(value);
  }
}
const isSimpleType = /* @__PURE__ */ makeMap("String,Number,Boolean,Function,Symbol");
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (isSimpleType(expectedType)) {
    const t2 = typeof value;
    valid = t2 === expectedType.toLowerCase();
    if (!valid && t2 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject$1(value);
  } else if (expectedType === "Array") {
    valid = isArray(value);
  } else {
    {
      valid = value instanceof type;
    }
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  let message = `Invalid args: type check failed for args "${name}". Expected ${expectedTypes.map(capitalize).join(", ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : "";
}
function styleValue(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
function tryCatch(fn) {
  return function() {
    try {
      return fn.apply(fn, arguments);
    } catch (e2) {
      console.error(e2);
    }
  };
}
let invokeCallbackId = 1;
const invokeCallbacks = {};
function addInvokeCallback(id, name, callback, keepAlive = false) {
  invokeCallbacks[id] = {
    name,
    keepAlive,
    callback
  };
  return id;
}
function invokeCallback(id, res, extras) {
  if (typeof id === "number") {
    const opts = invokeCallbacks[id];
    if (opts) {
      if (!opts.keepAlive) {
        delete invokeCallbacks[id];
      }
      return opts.callback(res, extras);
    }
  }
  return res;
}
const API_SUCCESS = "success";
const API_FAIL = "fail";
const API_COMPLETE = "complete";
function getApiCallbacks(args) {
  const apiCallbacks = {};
  for (const name in args) {
    const fn = args[name];
    if (isFunction(fn)) {
      apiCallbacks[name] = tryCatch(fn);
      delete args[name];
    }
  }
  return apiCallbacks;
}
function normalizeErrMsg(errMsg, name) {
  if (!errMsg || errMsg.indexOf(":fail") === -1) {
    return name + ":ok";
  }
  return name + errMsg.substring(errMsg.indexOf(":fail"));
}
function createAsyncApiCallback(name, args = {}, { beforeAll, beforeSuccess } = {}) {
  if (!isPlainObject$1(args)) {
    args = {};
  }
  const { success, fail, complete } = getApiCallbacks(args);
  const hasSuccess = isFunction(success);
  const hasFail = isFunction(fail);
  const hasComplete = isFunction(complete);
  const callbackId = invokeCallbackId++;
  addInvokeCallback(callbackId, name, (res) => {
    res = res || {};
    res.errMsg = normalizeErrMsg(res.errMsg, name);
    isFunction(beforeAll) && beforeAll(res);
    if (res.errMsg === name + ":ok") {
      isFunction(beforeSuccess) && beforeSuccess(res, args);
      hasSuccess && success(res);
    } else {
      hasFail && fail(res);
    }
    hasComplete && complete(res);
  });
  return callbackId;
}
const HOOK_SUCCESS = "success";
const HOOK_FAIL = "fail";
const HOOK_COMPLETE = "complete";
const globalInterceptors = {};
const scopedInterceptors = {};
function wrapperHook(hook, params) {
  return function(data) {
    return hook(data, params) || data;
  };
}
function queue(hooks, data, params) {
  let promise = false;
  for (let i = 0; i < hooks.length; i++) {
    const hook = hooks[i];
    if (promise) {
      promise = Promise.resolve(wrapperHook(hook, params));
    } else {
      const res = hook(data, params);
      if (isPromise(res)) {
        promise = Promise.resolve(res);
      }
      if (res === false) {
        return {
          then() {
          },
          catch() {
          }
        };
      }
    }
  }
  return promise || {
    then(callback) {
      return callback(data);
    },
    catch() {
    }
  };
}
function wrapperOptions(interceptors2, options = {}) {
  [HOOK_SUCCESS, HOOK_FAIL, HOOK_COMPLETE].forEach((name) => {
    const hooks = interceptors2[name];
    if (!isArray(hooks)) {
      return;
    }
    const oldCallback = options[name];
    options[name] = function callbackInterceptor(res) {
      queue(hooks, res, options).then((res2) => {
        return isFunction(oldCallback) && oldCallback(res2) || res2;
      });
    };
  });
  return options;
}
function wrapperReturnValue(method, returnValue) {
  const returnValueHooks = [];
  if (isArray(globalInterceptors.returnValue)) {
    returnValueHooks.push(...globalInterceptors.returnValue);
  }
  const interceptor = scopedInterceptors[method];
  if (interceptor && isArray(interceptor.returnValue)) {
    returnValueHooks.push(...interceptor.returnValue);
  }
  returnValueHooks.forEach((hook) => {
    returnValue = hook(returnValue) || returnValue;
  });
  return returnValue;
}
function getApiInterceptorHooks(method) {
  const interceptor = /* @__PURE__ */ Object.create(null);
  Object.keys(globalInterceptors).forEach((hook) => {
    if (hook !== "returnValue") {
      interceptor[hook] = globalInterceptors[hook].slice();
    }
  });
  const scopedInterceptor = scopedInterceptors[method];
  if (scopedInterceptor) {
    Object.keys(scopedInterceptor).forEach((hook) => {
      if (hook !== "returnValue") {
        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);
      }
    });
  }
  return interceptor;
}
function invokeApi(method, api, options, params) {
  const interceptor = getApiInterceptorHooks(method);
  if (interceptor && Object.keys(interceptor).length) {
    if (isArray(interceptor.invoke)) {
      const res = queue(interceptor.invoke, options);
      return res.then((options2) => {
        return api(wrapperOptions(getApiInterceptorHooks(method), options2), ...params);
      });
    } else {
      return api(wrapperOptions(interceptor, options), ...params);
    }
  }
  return api(options, ...params);
}
function hasCallback(args) {
  if (isPlainObject$1(args) && [API_SUCCESS, API_FAIL, API_COMPLETE].find((cb) => isFunction(args[cb]))) {
    return true;
  }
  return false;
}
function handlePromise(promise) {
  return promise;
}
function promisify$1(name, fn) {
  return (args = {}, ...rest) => {
    if (hasCallback(args)) {
      return wrapperReturnValue(name, invokeApi(name, fn, args, rest));
    }
    return wrapperReturnValue(name, handlePromise(new Promise((resolve2, reject) => {
      invokeApi(name, fn, extend(args, { success: resolve2, fail: reject }), rest);
    })));
  };
}
function formatApiArgs(args, options) {
  args[0];
  {
    return;
  }
}
function invokeSuccess(id, name, res) {
  const result = {
    errMsg: name + ":ok"
  };
  return invokeCallback(id, extend(res || {}, result));
}
function invokeFail(id, name, errMsg, errRes = {}) {
  const errMsgPrefix = name + ":fail";
  let apiErrMsg = "";
  if (!errMsg) {
    apiErrMsg = errMsgPrefix;
  } else if (errMsg.indexOf(errMsgPrefix) === 0) {
    apiErrMsg = errMsg;
  } else {
    apiErrMsg = errMsgPrefix + " " + errMsg;
  }
  {
    delete errRes.errCode;
  }
  let res = extend({ errMsg: apiErrMsg }, errRes);
  return invokeCallback(id, res);
}
function beforeInvokeApi(name, args, protocol, options) {
  {
    validateProtocols(name, args, protocol);
  }
  const errMsg = formatApiArgs(args);
  if (errMsg) {
    return errMsg;
  }
}
function parseErrMsg(errMsg) {
  if (!errMsg || isString(errMsg)) {
    return errMsg;
  }
  if (errMsg.stack) {
    if (typeof globalThis === "undefined" || !globalThis.harmonyChannel) {
      console.error(errMsg.message + "\n" + errMsg.stack);
    }
    return errMsg.message;
  }
  return errMsg;
}
function wrapperTaskApi(name, fn, protocol, options) {
  return (args) => {
    const id = createAsyncApiCallback(name, args, options);
    const errMsg = beforeInvokeApi(name, [args], protocol);
    if (errMsg) {
      return invokeFail(id, name, errMsg);
    }
    return fn(args, {
      resolve: (res) => invokeSuccess(id, name, res),
      reject: (errMsg2, errRes) => invokeFail(id, name, parseErrMsg(errMsg2), errRes)
    });
  };
}
function wrapperSyncApi(name, fn, protocol, options) {
  return (...args) => {
    const errMsg = beforeInvokeApi(name, args, protocol);
    if (errMsg) {
      throw new Error(errMsg);
    }
    return fn.apply(null, args);
  };
}
function wrapperAsyncApi(name, fn, protocol, options) {
  return wrapperTaskApi(name, fn, protocol, options);
}
function defineSyncApi(name, fn, protocol, options) {
  return wrapperSyncApi(name, fn, protocol);
}
function defineAsyncApi(name, fn, protocol, options) {
  return promisify$1(name, wrapperAsyncApi(name, fn, protocol, options));
}
const API_UPX2PX = "upx2px";
const Upx2pxProtocol = [
  {
    name: "upx",
    type: [Number, String],
    required: true
  }
];
const EPS = 1e-4;
const BASE_DEVICE_WIDTH = 750;
let isIOS = false;
let deviceWidth = 0;
let deviceDPR = 0;
function checkDeviceWidth() {
  var _a2, _b;
  let windowWidth, pixelRatio, platform;
  {
    const windowInfo = ((_a2 = wx.getWindowInfo) === null || _a2 === void 0 ? void 0 : _a2.call(wx)) || wx.getSystemInfoSync();
    const deviceInfo = ((_b = wx.getDeviceInfo) === null || _b === void 0 ? void 0 : _b.call(wx)) || wx.getSystemInfoSync();
    windowWidth = windowInfo.windowWidth;
    pixelRatio = windowInfo.pixelRatio;
    platform = deviceInfo.platform;
  }
  deviceWidth = windowWidth;
  deviceDPR = pixelRatio;
  isIOS = platform === "ios";
}
const upx2px = defineSyncApi(API_UPX2PX, (number, newDeviceWidth) => {
  if (deviceWidth === 0) {
    checkDeviceWidth();
  }
  number = Number(number);
  if (number === 0) {
    return 0;
  }
  let width = newDeviceWidth || deviceWidth;
  let result = number / BASE_DEVICE_WIDTH * width;
  if (result < 0) {
    result = -result;
  }
  result = Math.floor(result + EPS);
  if (result === 0) {
    if (deviceDPR === 1 || !isIOS) {
      result = 1;
    } else {
      result = 0.5;
    }
  }
  return number < 0 ? -result : result;
}, Upx2pxProtocol);
function __f__(type, filename, ...args) {
  if (filename) {
    args.push(filename);
  }
  console[type].apply(console, args);
}
const API_ADD_INTERCEPTOR = "addInterceptor";
const API_REMOVE_INTERCEPTOR = "removeInterceptor";
const AddInterceptorProtocol = [
  {
    name: "method",
    type: [String, Object],
    required: true
  }
];
const RemoveInterceptorProtocol = AddInterceptorProtocol;
function mergeInterceptorHook(interceptors2, interceptor) {
  Object.keys(interceptor).forEach((hook) => {
    if (isFunction(interceptor[hook])) {
      interceptors2[hook] = mergeHook(interceptors2[hook], interceptor[hook]);
    }
  });
}
function removeInterceptorHook(interceptors2, interceptor) {
  if (!interceptors2 || !interceptor) {
    return;
  }
  Object.keys(interceptor).forEach((name) => {
    const hooks = interceptors2[name];
    const hook = interceptor[name];
    if (isArray(hooks) && isFunction(hook)) {
      remove(hooks, hook);
    }
  });
}
function mergeHook(parentVal, childVal) {
  const res = childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks) {
  const res = [];
  for (let i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res;
}
const addInterceptor = defineSyncApi(API_ADD_INTERCEPTOR, (method, interceptor) => {
  if (isString(method) && isPlainObject$1(interceptor)) {
    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), interceptor);
  } else if (isPlainObject$1(method)) {
    mergeInterceptorHook(globalInterceptors, method);
  }
}, AddInterceptorProtocol);
const removeInterceptor = defineSyncApi(API_REMOVE_INTERCEPTOR, (method, interceptor) => {
  if (isString(method)) {
    if (isPlainObject$1(interceptor)) {
      removeInterceptorHook(scopedInterceptors[method], interceptor);
    } else {
      delete scopedInterceptors[method];
    }
  } else if (isPlainObject$1(method)) {
    removeInterceptorHook(globalInterceptors, method);
  }
}, RemoveInterceptorProtocol);
const interceptors = {};
const API_ON = "$on";
const OnProtocol = [
  {
    name: "event",
    type: String,
    required: true
  },
  {
    name: "callback",
    type: Function,
    required: true
  }
];
const API_ONCE = "$once";
const OnceProtocol = OnProtocol;
const API_OFF = "$off";
const OffProtocol = [
  {
    name: "event",
    type: [String, Array]
  },
  {
    name: "callback",
    type: [Function, Number]
  }
];
const API_EMIT = "$emit";
const EmitProtocol = [
  {
    name: "event",
    type: String,
    required: true
  }
];
class EventBus {
  constructor() {
    this.$emitter = new E$1();
  }
  on(name, callback) {
    return this.$emitter.on(name, callback);
  }
  once(name, callback) {
    return this.$emitter.once(name, callback);
  }
  off(name, callback) {
    if (!name) {
      this.$emitter.e = {};
      return;
    }
    this.$emitter.off(name, callback);
  }
  emit(name, ...args) {
    this.$emitter.emit(name, ...args);
  }
}
const eventBus = new EventBus();
const $on = defineSyncApi(API_ON, (name, callback) => {
  eventBus.on(name, callback);
  return () => eventBus.off(name, callback);
}, OnProtocol);
const $once = defineSyncApi(API_ONCE, (name, callback) => {
  eventBus.once(name, callback);
  return () => eventBus.off(name, callback);
}, OnceProtocol);
const $off = defineSyncApi(API_OFF, (name, callback) => {
  if (!isArray(name))
    name = name ? [name] : [];
  name.forEach((n2) => {
    eventBus.off(n2, callback);
  });
}, OffProtocol);
const $emit = defineSyncApi(API_EMIT, (name, ...args) => {
  eventBus.emit(name, ...args);
}, EmitProtocol);
let cid;
let cidErrMsg;
let enabled;
function normalizePushMessage(message) {
  try {
    return JSON.parse(message);
  } catch (e2) {
  }
  return message;
}
function invokePushCallback(args) {
  if (args.type === "enabled") {
    enabled = true;
  } else if (args.type === "clientId") {
    cid = args.cid;
    cidErrMsg = args.errMsg;
    invokeGetPushCidCallbacks(cid, args.errMsg);
  } else if (args.type === "pushMsg") {
    const message = {
      type: "receive",
      data: normalizePushMessage(args.message)
    };
    for (let i = 0; i < onPushMessageCallbacks.length; i++) {
      const callback = onPushMessageCallbacks[i];
      callback(message);
      if (message.stopped) {
        break;
      }
    }
  } else if (args.type === "click") {
    onPushMessageCallbacks.forEach((callback) => {
      callback({
        type: "click",
        data: normalizePushMessage(args.message)
      });
    });
  }
}
const getPushCidCallbacks = [];
function invokeGetPushCidCallbacks(cid2, errMsg) {
  getPushCidCallbacks.forEach((callback) => {
    callback(cid2, errMsg);
  });
  getPushCidCallbacks.length = 0;
}
const API_GET_PUSH_CLIENT_ID = "getPushClientId";
const getPushClientId = defineAsyncApi(API_GET_PUSH_CLIENT_ID, (_, { resolve: resolve2, reject }) => {
  Promise.resolve().then(() => {
    if (typeof enabled === "undefined") {
      enabled = false;
      cid = "";
      cidErrMsg = "uniPush is not enabled";
    }
    getPushCidCallbacks.push((cid2, errMsg) => {
      if (cid2) {
        resolve2({ cid: cid2 });
      } else {
        reject(errMsg);
      }
    });
    if (typeof cid !== "undefined") {
      invokeGetPushCidCallbacks(cid, cidErrMsg);
    }
  });
});
const onPushMessageCallbacks = [];
const onPushMessage = (fn) => {
  if (onPushMessageCallbacks.indexOf(fn) === -1) {
    onPushMessageCallbacks.push(fn);
  }
};
const offPushMessage = (fn) => {
  if (!fn) {
    onPushMessageCallbacks.length = 0;
  } else {
    const index2 = onPushMessageCallbacks.indexOf(fn);
    if (index2 > -1) {
      onPushMessageCallbacks.splice(index2, 1);
    }
  }
};
const SYNC_API_RE = /^\$|__f__|getLocale|setLocale|sendNativeEvent|restoreGlobal|requireGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|rpx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64|getDeviceInfo|getAppBaseInfo|getWindowInfo|getSystemSetting|getAppAuthorizeSetting/;
const CONTEXT_API_RE = /^create|Manager$/;
const CONTEXT_API_RE_EXC = ["createBLEConnection"];
const TASK_APIS = ["request", "downloadFile", "uploadFile", "connectSocket"];
const ASYNC_API = ["createBLEConnection"];
const CALLBACK_API_RE = /^on|^off/;
function isContextApi(name) {
  return CONTEXT_API_RE.test(name) && CONTEXT_API_RE_EXC.indexOf(name) === -1;
}
function isSyncApi(name) {
  return SYNC_API_RE.test(name) && ASYNC_API.indexOf(name) === -1;
}
function isCallbackApi(name) {
  return CALLBACK_API_RE.test(name) && name !== "onPush";
}
function isTaskApi(name) {
  return TASK_APIS.indexOf(name) !== -1;
}
function shouldPromise(name) {
  if (isContextApi(name) || isSyncApi(name) || isCallbackApi(name)) {
    return false;
  }
  return true;
}
if (!Promise.prototype.finally) {
  Promise.prototype.finally = function(onfinally) {
    const promise = this.constructor;
    return this.then((value) => promise.resolve(onfinally && onfinally()).then(() => value), (reason) => promise.resolve(onfinally && onfinally()).then(() => {
      throw reason;
    }));
  };
}
function promisify(name, api) {
  if (!shouldPromise(name)) {
    return api;
  }
  if (!isFunction(api)) {
    return api;
  }
  return function promiseApi(options = {}, ...rest) {
    if (isFunction(options.success) || isFunction(options.fail) || isFunction(options.complete)) {
      return wrapperReturnValue(name, invokeApi(name, api, options, rest));
    }
    return wrapperReturnValue(name, handlePromise(new Promise((resolve2, reject) => {
      invokeApi(name, api, extend({}, options, {
        success: resolve2,
        fail: reject
      }), rest);
    })));
  };
}
const CALLBACKS = ["success", "fail", "cancel", "complete"];
function initWrapper(protocols2) {
  function processCallback(methodName, method, returnValue) {
    return function(res) {
      return method(processReturnValue(methodName, res, returnValue));
    };
  }
  function processArgs(methodName, fromArgs, argsOption = {}, returnValue = {}, keepFromArgs = false) {
    if (isPlainObject$1(fromArgs)) {
      const toArgs = keepFromArgs === true ? fromArgs : {};
      if (isFunction(argsOption)) {
        argsOption = argsOption(fromArgs, toArgs) || {};
      }
      for (const key in fromArgs) {
        if (hasOwn$1(argsOption, key)) {
          let keyOption = argsOption[key];
          if (isFunction(keyOption)) {
            keyOption = keyOption(fromArgs[key], fromArgs, toArgs);
          }
          if (!keyOption) {
            console.warn(`微信小程序 ${methodName} 暂不支持 ${key}`);
          } else if (isString(keyOption)) {
            toArgs[keyOption] = fromArgs[key];
          } else if (isPlainObject$1(keyOption)) {
            toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;
          }
        } else if (CALLBACKS.indexOf(key) !== -1) {
          const callback = fromArgs[key];
          if (isFunction(callback)) {
            toArgs[key] = processCallback(methodName, callback, returnValue);
          }
        } else {
          if (!keepFromArgs && !hasOwn$1(toArgs, key)) {
            toArgs[key] = fromArgs[key];
          }
        }
      }
      return toArgs;
    } else if (isFunction(fromArgs)) {
      if (isFunction(argsOption)) {
        argsOption(fromArgs, {});
      }
      fromArgs = processCallback(methodName, fromArgs, returnValue);
    }
    return fromArgs;
  }
  function processReturnValue(methodName, res, returnValue, keepReturnValue = false) {
    if (isFunction(protocols2.returnValue)) {
      res = protocols2.returnValue(methodName, res);
    }
    const realKeepReturnValue = keepReturnValue || false;
    return processArgs(methodName, res, returnValue, {}, realKeepReturnValue);
  }
  return function wrapper(methodName, method) {
    const hasProtocol = hasOwn$1(protocols2, methodName);
    if (!hasProtocol && typeof wx[methodName] !== "function") {
      return method;
    }
    const needWrapper = hasProtocol || isFunction(protocols2.returnValue) || isContextApi(methodName) || isTaskApi(methodName);
    const hasMethod = hasProtocol || isFunction(method);
    if (!hasProtocol && !method) {
      return function() {
        console.error(`微信小程序 暂不支持${methodName}`);
      };
    }
    if (!needWrapper || !hasMethod) {
      return method;
    }
    const protocol = protocols2[methodName];
    return function(arg1, arg2) {
      let options = protocol || {};
      if (isFunction(protocol)) {
        options = protocol(arg1);
      }
      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);
      const args = [arg1];
      if (typeof arg2 !== "undefined") {
        args.push(arg2);
      }
      const returnValue = wx[options.name || methodName].apply(wx, args);
      if (isContextApi(methodName) || isTaskApi(methodName)) {
        if (returnValue && !returnValue.__v_skip) {
          returnValue.__v_skip = true;
        }
      }
      if (isSyncApi(methodName)) {
        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));
      }
      return returnValue;
    };
  };
}
const getLocale = () => {
  const app = isFunction(getApp) && getApp({ allowDefault: true });
  if (app && app.$vm) {
    return app.$vm.$locale;
  }
  return getLocaleLanguage$1();
};
const setLocale = (locale) => {
  const app = isFunction(getApp) && getApp();
  if (!app) {
    return false;
  }
  const oldLocale = app.$vm.$locale;
  if (oldLocale !== locale) {
    app.$vm.$locale = locale;
    onLocaleChangeCallbacks.forEach((fn) => fn({ locale }));
    return true;
  }
  return false;
};
const onLocaleChangeCallbacks = [];
const onLocaleChange = (fn) => {
  if (onLocaleChangeCallbacks.indexOf(fn) === -1) {
    onLocaleChangeCallbacks.push(fn);
  }
};
if (typeof global !== "undefined") {
  global.getLocale = getLocale;
}
const UUID_KEY = "__DC_STAT_UUID";
let deviceId;
function useDeviceId(global2 = wx) {
  return function addDeviceId(_, toRes) {
    deviceId = deviceId || global2.getStorageSync(UUID_KEY);
    if (!deviceId) {
      deviceId = Date.now() + "" + Math.floor(Math.random() * 1e7);
      wx.setStorage({
        key: UUID_KEY,
        data: deviceId
      });
    }
    toRes.deviceId = deviceId;
  };
}
function addSafeAreaInsets(fromRes, toRes) {
  if (fromRes.safeArea) {
    const safeArea = fromRes.safeArea;
    toRes.safeAreaInsets = {
      top: safeArea.top,
      left: safeArea.left,
      right: fromRes.windowWidth - safeArea.right,
      bottom: fromRes.screenHeight - safeArea.bottom
    };
  }
}
function getOSInfo(system, platform) {
  let osName = "";
  let osVersion = "";
  if (platform && false) {
    osName = platform;
    osVersion = system;
  } else {
    osName = system.split(" ")[0] || platform;
    osVersion = system.split(" ")[1] || "";
  }
  osName = osName.toLocaleLowerCase();
  switch (osName) {
    case "harmony":
    case "ohos":
    case "openharmony":
      osName = "harmonyos";
      break;
    case "iphone os":
      osName = "ios";
      break;
    case "mac":
    case "darwin":
      osName = "macos";
      break;
    case "windows_nt":
      osName = "windows";
      break;
  }
  return {
    osName,
    osVersion
  };
}
function populateParameters(fromRes, toRes) {
  const { brand = "", model = "", system = "", language = "", theme, version: version2, platform, fontSizeSetting, SDKVersion, pixelRatio, deviceOrientation } = fromRes;
  const { osName, osVersion } = getOSInfo(system, platform);
  let hostVersion = version2;
  let deviceType = getGetDeviceType(fromRes, model);
  let deviceBrand = getDeviceBrand(brand);
  let _hostName = getHostName(fromRes);
  let _deviceOrientation = deviceOrientation;
  let _devicePixelRatio = pixelRatio;
  let _SDKVersion = SDKVersion;
  const hostLanguage = (language || "").replace(/_/g, "-");
  const parameters = {
    appId: "",
    appName: "uni1",
    appVersion: "1.0.0",
    appVersionCode: "100",
    appLanguage: getAppLanguage(hostLanguage),
    uniCompileVersion: "4.64",
    uniCompilerVersion: "4.64",
    uniRuntimeVersion: "4.64",
    uniPlatform: "mp-weixin",
    deviceBrand,
    deviceModel: model,
    deviceType,
    devicePixelRatio: _devicePixelRatio,
    deviceOrientation: _deviceOrientation,
    osName,
    osVersion,
    hostTheme: theme,
    hostVersion,
    hostLanguage,
    hostName: _hostName,
    hostSDKVersion: _SDKVersion,
    hostFontSizeSetting: fontSizeSetting,
    windowTop: 0,
    windowBottom: 0,
    // TODO
    osLanguage: void 0,
    osTheme: void 0,
    ua: void 0,
    hostPackageName: void 0,
    browserName: void 0,
    browserVersion: void 0,
    isUniAppX: false
  };
  extend(toRes, parameters);
}
function getGetDeviceType(fromRes, model) {
  let deviceType = fromRes.deviceType || "phone";
  {
    const deviceTypeMaps = {
      ipad: "pad",
      windows: "pc",
      mac: "pc"
    };
    const deviceTypeMapsKeys = Object.keys(deviceTypeMaps);
    const _model = model.toLocaleLowerCase();
    for (let index2 = 0; index2 < deviceTypeMapsKeys.length; index2++) {
      const _m = deviceTypeMapsKeys[index2];
      if (_model.indexOf(_m) !== -1) {
        deviceType = deviceTypeMaps[_m];
        break;
      }
    }
  }
  return deviceType;
}
function getDeviceBrand(brand) {
  let deviceBrand = brand;
  if (deviceBrand) {
    deviceBrand = deviceBrand.toLocaleLowerCase();
  }
  return deviceBrand;
}
function getAppLanguage(defaultLanguage) {
  return getLocale ? getLocale() : defaultLanguage;
}
function getHostName(fromRes) {
  const _platform = "WeChat";
  let _hostName = fromRes.hostName || _platform;
  {
    if (fromRes.environment) {
      _hostName = fromRes.environment;
    } else if (fromRes.host && fromRes.host.env) {
      _hostName = fromRes.host.env;
    }
  }
  return _hostName;
}
const getSystemInfo = {
  returnValue: (fromRes, toRes) => {
    addSafeAreaInsets(fromRes, toRes);
    useDeviceId()(fromRes, toRes);
    populateParameters(fromRes, toRes);
  }
};
const getSystemInfoSync = getSystemInfo;
const redirectTo = {};
const previewImage = {
  args(fromArgs, toArgs) {
    let currentIndex = parseInt(fromArgs.current);
    if (isNaN(currentIndex)) {
      return;
    }
    const urls = fromArgs.urls;
    if (!isArray(urls)) {
      return;
    }
    const len = urls.length;
    if (!len) {
      return;
    }
    if (currentIndex < 0) {
      currentIndex = 0;
    } else if (currentIndex >= len) {
      currentIndex = len - 1;
    }
    if (currentIndex > 0) {
      toArgs.current = urls[currentIndex];
      toArgs.urls = urls.filter((item, index2) => index2 < currentIndex ? item !== urls[currentIndex] : true);
    } else {
      toArgs.current = urls[0];
    }
    return {
      indicator: false,
      loop: false
    };
  }
};
const showActionSheet = {
  args(fromArgs, toArgs) {
    toArgs.alertText = fromArgs.title;
  }
};
const getDeviceInfo = {
  returnValue: (fromRes, toRes) => {
    const { brand, model, system = "", platform = "" } = fromRes;
    let deviceType = getGetDeviceType(fromRes, model);
    let deviceBrand = getDeviceBrand(brand);
    useDeviceId()(fromRes, toRes);
    const { osName, osVersion } = getOSInfo(system, platform);
    toRes = sortObject(extend(toRes, {
      deviceType,
      deviceBrand,
      deviceModel: model,
      osName,
      osVersion
    }));
  }
};
const getAppBaseInfo = {
  returnValue: (fromRes, toRes) => {
    const { version: version2, language, SDKVersion, theme } = fromRes;
    let _hostName = getHostName(fromRes);
    let hostLanguage = (language || "").replace(/_/g, "-");
    const parameters = {
      hostVersion: version2,
      hostLanguage,
      hostName: _hostName,
      hostSDKVersion: SDKVersion,
      hostTheme: theme,
      appId: "",
      appName: "uni1",
      appVersion: "1.0.0",
      appVersionCode: "100",
      appLanguage: getAppLanguage(hostLanguage),
      isUniAppX: false,
      uniPlatform: "mp-weixin",
      uniCompileVersion: "4.64",
      uniCompilerVersion: "4.64",
      uniRuntimeVersion: "4.64"
    };
    extend(toRes, parameters);
  }
};
const getWindowInfo = {
  returnValue: (fromRes, toRes) => {
    addSafeAreaInsets(fromRes, toRes);
    toRes = sortObject(extend(toRes, {
      windowTop: 0,
      windowBottom: 0
    }));
  }
};
const getAppAuthorizeSetting = {
  returnValue: function(fromRes, toRes) {
    const { locationReducedAccuracy } = fromRes;
    toRes.locationAccuracy = "unsupported";
    if (locationReducedAccuracy === true) {
      toRes.locationAccuracy = "reduced";
    } else if (locationReducedAccuracy === false) {
      toRes.locationAccuracy = "full";
    }
  }
};
const onError = {
  args(fromArgs) {
    const app = getApp({ allowDefault: true }) || {};
    if (!app.$vm) {
      if (!wx.$onErrorHandlers) {
        wx.$onErrorHandlers = [];
      }
      wx.$onErrorHandlers.push(fromArgs);
    } else {
      injectHook(ON_ERROR, fromArgs, app.$vm.$);
    }
  }
};
const offError = {
  args(fromArgs) {
    const app = getApp({ allowDefault: true }) || {};
    if (!app.$vm) {
      if (!wx.$onErrorHandlers) {
        return;
      }
      const index2 = wx.$onErrorHandlers.findIndex((fn) => fn === fromArgs);
      if (index2 !== -1) {
        wx.$onErrorHandlers.splice(index2, 1);
      }
    } else if (fromArgs.__weh) {
      const onErrors = app.$vm.$[ON_ERROR];
      if (onErrors) {
        const index2 = onErrors.indexOf(fromArgs.__weh);
        if (index2 > -1) {
          onErrors.splice(index2, 1);
        }
      }
    }
  }
};
const onSocketOpen = {
  args() {
    if (wx.__uni_console__) {
      if (wx.__uni_console_warned__) {
        return;
      }
      wx.__uni_console_warned__ = true;
      console.warn(`开发模式下小程序日志回显会使用 socket 连接，为了避免冲突，建议使用 SocketTask 的方式去管理 WebSocket 或手动关闭日志回显功能。[详情](https://uniapp.dcloud.net.cn/tutorial/run/mp-log.html)`);
    }
  }
};
const onSocketMessage = onSocketOpen;
const baseApis = {
  $on,
  $off,
  $once,
  $emit,
  upx2px,
  rpx2px: upx2px,
  interceptors,
  addInterceptor,
  removeInterceptor,
  onCreateVueApp,
  invokeCreateVueAppHook,
  getLocale,
  setLocale,
  onLocaleChange,
  getPushClientId,
  onPushMessage,
  offPushMessage,
  invokePushCallback,
  __f__
};
function initUni(api, protocols2, platform = wx) {
  const wrapper = initWrapper(protocols2);
  const UniProxyHandlers = {
    get(target, key) {
      if (hasOwn$1(target, key)) {
        return target[key];
      }
      if (hasOwn$1(api, key)) {
        return promisify(key, api[key]);
      }
      if (hasOwn$1(baseApis, key)) {
        return promisify(key, baseApis[key]);
      }
      return promisify(key, wrapper(key, platform[key]));
    }
  };
  return new Proxy({}, UniProxyHandlers);
}
function initGetProvider(providers) {
  return function getProvider2({ service, success, fail, complete }) {
    let res;
    if (providers[service]) {
      res = {
        errMsg: "getProvider:ok",
        service,
        provider: providers[service]
      };
      isFunction(success) && success(res);
    } else {
      res = {
        errMsg: "getProvider:fail:服务[" + service + "]不存在"
      };
      isFunction(fail) && fail(res);
    }
    isFunction(complete) && complete(res);
  };
}
const objectKeys = [
  "qy",
  "env",
  "error",
  "version",
  "lanDebug",
  "cloud",
  "serviceMarket",
  "router",
  "worklet",
  "__webpack_require_UNI_MP_PLUGIN__"
];
const singlePageDisableKey = ["lanDebug", "router", "worklet"];
const launchOption = wx.getLaunchOptionsSync ? wx.getLaunchOptionsSync() : null;
function isWxKey(key) {
  if (launchOption && launchOption.scene === 1154 && singlePageDisableKey.includes(key)) {
    return false;
  }
  return objectKeys.indexOf(key) > -1 || typeof wx[key] === "function";
}
function initWx() {
  const newWx = {};
  for (const key in wx) {
    if (isWxKey(key)) {
      newWx[key] = wx[key];
    }
  }
  if (typeof globalThis !== "undefined" && typeof requireMiniProgram === "undefined") {
    globalThis.wx = newWx;
  }
  return newWx;
}
const mocks$1 = ["__route__", "__wxExparserNodeId__", "__wxWebviewId__"];
const getProvider = initGetProvider({
  oauth: ["weixin"],
  share: ["weixin"],
  payment: ["wxpay"],
  push: ["weixin"]
});
function initComponentMocks(component) {
  const res = /* @__PURE__ */ Object.create(null);
  mocks$1.forEach((name) => {
    res[name] = component[name];
  });
  return res;
}
function createSelectorQuery() {
  const query = wx$2.createSelectorQuery();
  const oldIn = query.in;
  query.in = function newIn(component) {
    if (component.$scope) {
      return oldIn.call(this, component.$scope);
    }
    return oldIn.call(this, initComponentMocks(component));
  };
  return query;
}
const wx$2 = initWx();
if (!wx$2.canIUse("getAppBaseInfo")) {
  wx$2.getAppBaseInfo = wx$2.getSystemInfoSync;
}
if (!wx$2.canIUse("getWindowInfo")) {
  wx$2.getWindowInfo = wx$2.getSystemInfoSync;
}
if (!wx$2.canIUse("getDeviceInfo")) {
  wx$2.getDeviceInfo = wx$2.getSystemInfoSync;
}
let baseInfo = wx$2.getAppBaseInfo && wx$2.getAppBaseInfo();
if (!baseInfo) {
  baseInfo = wx$2.getSystemInfoSync();
}
const host = baseInfo ? baseInfo.host : null;
const shareVideoMessage = host && host.env === "SAAASDK" ? wx$2.miniapp.shareVideoMessage : wx$2.shareVideoMessage;
var shims = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  createSelectorQuery,
  getProvider,
  shareVideoMessage
});
const compressImage = {
  args(fromArgs, toArgs) {
    if (fromArgs.compressedHeight && !toArgs.compressHeight) {
      toArgs.compressHeight = fromArgs.compressedHeight;
    }
    if (fromArgs.compressedWidth && !toArgs.compressWidth) {
      toArgs.compressWidth = fromArgs.compressedWidth;
    }
  }
};
var protocols = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  compressImage,
  getAppAuthorizeSetting,
  getAppBaseInfo,
  getDeviceInfo,
  getSystemInfo,
  getSystemInfoSync,
  getWindowInfo,
  offError,
  onError,
  onSocketMessage,
  onSocketOpen,
  previewImage,
  redirectTo,
  showActionSheet
});
const wx$1 = initWx();
var index = initUni(shims, protocols, wx$1);
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
function initVueIds(vueIds, mpInstance) {
  if (!vueIds) {
    return;
  }
  const ids = vueIds.split(",");
  const len = ids.length;
  if (len === 1) {
    mpInstance._$vueId = ids[0];
  } else if (len === 2) {
    mpInstance._$vueId = ids[0];
    mpInstance._$vuePid = ids[1];
  }
}
const EXTRAS = ["externalClasses"];
function initExtraOptions(miniProgramComponentOptions, vueOptions) {
  EXTRAS.forEach((name) => {
    if (hasOwn$1(vueOptions, name)) {
      miniProgramComponentOptions[name] = vueOptions[name];
    }
  });
}
const WORKLET_RE = /_(.*)_worklet_factory_/;
function initWorkletMethods(mpMethods, vueMethods) {
  if (vueMethods) {
    Object.keys(vueMethods).forEach((name) => {
      const matches = name.match(WORKLET_RE);
      if (matches) {
        const workletName = matches[1];
        mpMethods[name] = vueMethods[name];
        mpMethods[workletName] = vueMethods[workletName];
      }
    });
  }
}
function initWxsCallMethods(methods, wxsCallMethods) {
  if (!isArray(wxsCallMethods)) {
    return;
  }
  wxsCallMethods.forEach((callMethod) => {
    methods[callMethod] = function(args) {
      return this.$vm[callMethod](args);
    };
  });
}
function selectAllComponents(mpInstance, selector, $refs) {
  const components = mpInstance.selectAllComponents(selector);
  components.forEach((component) => {
    const ref2 = component.properties.uR;
    $refs[ref2] = component.$vm || component;
  });
}
function initRefs(instance, mpInstance) {
  Object.defineProperty(instance, "refs", {
    get() {
      const $refs = {};
      selectAllComponents(mpInstance, ".r", $refs);
      const forComponents = mpInstance.selectAllComponents(".r-i-f");
      forComponents.forEach((component) => {
        const ref2 = component.properties.uR;
        if (!ref2) {
          return;
        }
        if (!$refs[ref2]) {
          $refs[ref2] = [];
        }
        $refs[ref2].push(component.$vm || component);
      });
      return $refs;
    }
  });
}
function findVmByVueId(instance, vuePid) {
  const $children = instance.$children;
  for (let i = $children.length - 1; i >= 0; i--) {
    const childVm = $children[i];
    if (childVm.$scope._$vueId === vuePid) {
      return childVm;
    }
  }
  let parentVm;
  for (let i = $children.length - 1; i >= 0; i--) {
    parentVm = findVmByVueId($children[i], vuePid);
    if (parentVm) {
      return parentVm;
    }
  }
}
function getLocaleLanguage() {
  var _a2;
  let localeLanguage = "";
  {
    const appBaseInfo = ((_a2 = wx.getAppBaseInfo) === null || _a2 === void 0 ? void 0 : _a2.call(wx)) || wx.getSystemInfoSync();
    const language = appBaseInfo && appBaseInfo.language ? appBaseInfo.language : LOCALE_EN;
    localeLanguage = normalizeLocale(language) || LOCALE_EN;
  }
  return localeLanguage;
}
const MP_METHODS = [
  "createSelectorQuery",
  "createIntersectionObserver",
  "selectAllComponents",
  "selectComponent"
];
function createEmitFn(oldEmit, ctx) {
  return function emit2(event, ...args) {
    const scope = ctx.$scope;
    if (scope && event) {
      const detail = { __args__: args };
      {
        scope.triggerEvent(event, detail);
      }
    }
    return oldEmit.apply(this, [event, ...args]);
  };
}
function initBaseInstance(instance, options) {
  const ctx = instance.ctx;
  ctx.mpType = options.mpType;
  ctx.$mpType = options.mpType;
  ctx.$mpPlatform = "mp-weixin";
  ctx.$scope = options.mpInstance;
  {
    Object.defineProperties(ctx, {
      // only id
      [VIRTUAL_HOST_ID]: {
        get() {
          const id = this.$scope.data[VIRTUAL_HOST_ID];
          return id === void 0 ? "" : id;
        }
      }
    });
  }
  ctx.$mp = {};
  {
    ctx._self = {};
  }
  instance.slots = {};
  if (isArray(options.slots) && options.slots.length) {
    options.slots.forEach((name) => {
      instance.slots[name] = true;
    });
    if (instance.slots[SLOT_DEFAULT_NAME]) {
      instance.slots.default = true;
    }
  }
  ctx.getOpenerEventChannel = function() {
    {
      return options.mpInstance.getOpenerEventChannel();
    }
  };
  ctx.$hasHook = hasHook;
  ctx.$callHook = callHook;
  instance.emit = createEmitFn(instance.emit, ctx);
}
function initComponentInstance(instance, options) {
  initBaseInstance(instance, options);
  const ctx = instance.ctx;
  MP_METHODS.forEach((method) => {
    ctx[method] = function(...args) {
      const mpInstance = ctx.$scope;
      if (mpInstance && mpInstance[method]) {
        return mpInstance[method].apply(mpInstance, args);
      }
    };
  });
}
function initMocks(instance, mpInstance, mocks2) {
  const ctx = instance.ctx;
  mocks2.forEach((mock) => {
    if (hasOwn$1(mpInstance, mock)) {
      instance[mock] = ctx[mock] = mpInstance[mock];
    }
  });
}
function hasHook(name) {
  const hooks = this.$[name];
  if (hooks && hooks.length) {
    return true;
  }
  return false;
}
function callHook(name, args) {
  if (name === "mounted") {
    callHook.call(this, "bm");
    this.$.isMounted = true;
    name = "m";
  }
  const hooks = this.$[name];
  return hooks && invokeArrayFns(hooks, args);
}
const PAGE_INIT_HOOKS = [
  ON_LOAD,
  ON_SHOW,
  ON_HIDE,
  ON_UNLOAD,
  ON_RESIZE,
  ON_TAB_ITEM_TAP,
  ON_REACH_BOTTOM,
  ON_PULL_DOWN_REFRESH,
  ON_ADD_TO_FAVORITES
  // 'onReady', // lifetimes.ready
  // 'onPageScroll', // 影响性能，开发者手动注册
  // 'onShareTimeline', // 右上角菜单，开发者手动注册
  // 'onShareAppMessage' // 右上角菜单，开发者手动注册
];
function findHooks(vueOptions, hooks = /* @__PURE__ */ new Set()) {
  if (vueOptions) {
    Object.keys(vueOptions).forEach((name) => {
      if (isUniLifecycleHook(name, vueOptions[name])) {
        hooks.add(name);
      }
    });
    {
      const { extends: extendsOptions, mixins } = vueOptions;
      if (mixins) {
        mixins.forEach((mixin) => findHooks(mixin, hooks));
      }
      if (extendsOptions) {
        findHooks(extendsOptions, hooks);
      }
    }
  }
  return hooks;
}
function initHook(mpOptions, hook, excludes) {
  if (excludes.indexOf(hook) === -1 && !hasOwn$1(mpOptions, hook)) {
    mpOptions[hook] = function(args) {
      return this.$vm && this.$vm.$callHook(hook, args);
    };
  }
}
const EXCLUDE_HOOKS = [ON_READY];
function initHooks(mpOptions, hooks, excludes = EXCLUDE_HOOKS) {
  hooks.forEach((hook) => initHook(mpOptions, hook, excludes));
}
function initUnknownHooks(mpOptions, vueOptions, excludes = EXCLUDE_HOOKS) {
  findHooks(vueOptions).forEach((hook) => initHook(mpOptions, hook, excludes));
}
function initRuntimeHooks(mpOptions, runtimeHooks) {
  if (!runtimeHooks) {
    return;
  }
  const hooks = Object.keys(MINI_PROGRAM_PAGE_RUNTIME_HOOKS);
  hooks.forEach((hook) => {
    if (runtimeHooks & MINI_PROGRAM_PAGE_RUNTIME_HOOKS[hook]) {
      initHook(mpOptions, hook, []);
    }
  });
}
const findMixinRuntimeHooks = /* @__PURE__ */ once(() => {
  const runtimeHooks = [];
  const app = isFunction(getApp) && getApp({ allowDefault: true });
  if (app && app.$vm && app.$vm.$) {
    const mixins = app.$vm.$.appContext.mixins;
    if (isArray(mixins)) {
      const hooks = Object.keys(MINI_PROGRAM_PAGE_RUNTIME_HOOKS);
      mixins.forEach((mixin) => {
        hooks.forEach((hook) => {
          if (hasOwn$1(mixin, hook) && !runtimeHooks.includes(hook)) {
            runtimeHooks.push(hook);
          }
        });
      });
    }
  }
  return runtimeHooks;
});
function initMixinRuntimeHooks(mpOptions) {
  initHooks(mpOptions, findMixinRuntimeHooks());
}
const HOOKS = [
  ON_SHOW,
  ON_HIDE,
  ON_ERROR,
  ON_THEME_CHANGE,
  ON_PAGE_NOT_FOUND,
  ON_UNHANDLE_REJECTION
];
function parseApp(instance, parseAppOptions) {
  const internalInstance = instance.$;
  const appOptions = {
    globalData: instance.$options && instance.$options.globalData || {},
    $vm: instance,
    // mp-alipay 组件 data 初始化比 onLaunch 早，提前挂载
    onLaunch(options) {
      this.$vm = instance;
      const ctx = internalInstance.ctx;
      if (this.$vm && ctx.$scope && ctx.$callHook) {
        return;
      }
      initBaseInstance(internalInstance, {
        mpType: "app",
        mpInstance: this,
        slots: []
      });
      ctx.globalData = this.globalData;
      instance.$callHook(ON_LAUNCH, options);
    }
  };
  const onErrorHandlers = wx.$onErrorHandlers;
  if (onErrorHandlers) {
    onErrorHandlers.forEach((fn) => {
      injectHook(ON_ERROR, fn, internalInstance);
    });
    onErrorHandlers.length = 0;
  }
  initLocale(instance);
  const vueOptions = instance.$.type;
  initHooks(appOptions, HOOKS);
  initUnknownHooks(appOptions, vueOptions);
  {
    const methods = vueOptions.methods;
    methods && extend(appOptions, methods);
  }
  return appOptions;
}
function initCreateApp(parseAppOptions) {
  return function createApp2(vm) {
    return App(parseApp(vm));
  };
}
function initCreateSubpackageApp(parseAppOptions) {
  return function createApp2(vm) {
    const appOptions = parseApp(vm);
    const app = isFunction(getApp) && getApp({
      allowDefault: true
    });
    if (!app)
      return;
    vm.$.ctx.$scope = app;
    const globalData = app.globalData;
    if (globalData) {
      Object.keys(appOptions.globalData).forEach((name) => {
        if (!hasOwn$1(globalData, name)) {
          globalData[name] = appOptions.globalData[name];
        }
      });
    }
    Object.keys(appOptions).forEach((name) => {
      if (!hasOwn$1(app, name)) {
        app[name] = appOptions[name];
      }
    });
    initAppLifecycle(appOptions, vm);
  };
}
function initAppLifecycle(appOptions, vm) {
  if (isFunction(appOptions.onLaunch)) {
    const args = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();
    appOptions.onLaunch(args);
  }
  if (isFunction(appOptions.onShow) && wx.onAppShow) {
    wx.onAppShow((args) => {
      vm.$callHook("onShow", args);
    });
  }
  if (isFunction(appOptions.onHide) && wx.onAppHide) {
    wx.onAppHide((args) => {
      vm.$callHook("onHide", args);
    });
  }
}
function initLocale(appVm) {
  const locale = ref(getLocaleLanguage());
  Object.defineProperty(appVm, "$locale", {
    get() {
      return locale.value;
    },
    set(v) {
      locale.value = v;
    }
  });
}
const builtInProps = [
  // 百度小程序,快手小程序自定义组件不支持绑定动态事件，动态dataset，故通过props传递事件信息
  // event-opts
  "eO",
  // 组件 ref
  "uR",
  // 组件 ref-in-for
  "uRIF",
  // 组件 id
  "uI",
  // 组件类型 m: 小程序组件
  "uT",
  // 组件 props
  "uP",
  // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots
  "uS"
];
function initDefaultProps(options, isBehavior = false) {
  const properties = {};
  if (!isBehavior) {
    let observerSlots = function(newVal) {
      const $slots = /* @__PURE__ */ Object.create(null);
      newVal && newVal.forEach((slotName) => {
        $slots[slotName] = true;
      });
      this.setData({
        $slots
      });
    };
    builtInProps.forEach((name) => {
      properties[name] = {
        type: null,
        value: ""
      };
    });
    properties.uS = {
      type: null,
      value: []
    };
    {
      properties.uS.observer = observerSlots;
    }
  }
  if (options.behaviors) {
    if (options.behaviors.includes("wx://form-field")) {
      if (!options.properties || !options.properties.name) {
        properties.name = {
          type: null,
          value: ""
        };
      }
      if (!options.properties || !options.properties.value) {
        properties.value = {
          type: null,
          value: ""
        };
      }
    }
  }
  return properties;
}
function initVirtualHostProps(options) {
  const properties = {};
  {
    if (options && options.virtualHost) {
      properties[VIRTUAL_HOST_STYLE] = {
        type: null,
        value: ""
      };
      properties[VIRTUAL_HOST_CLASS] = {
        type: null,
        value: ""
      };
      properties[VIRTUAL_HOST_HIDDEN] = {
        type: null,
        value: ""
      };
      properties[VIRTUAL_HOST_ID] = {
        type: null,
        value: ""
      };
    }
  }
  return properties;
}
function initProps(mpComponentOptions) {
  if (!mpComponentOptions.properties) {
    mpComponentOptions.properties = {};
  }
  extend(mpComponentOptions.properties, initDefaultProps(mpComponentOptions), initVirtualHostProps(mpComponentOptions.options));
}
const PROP_TYPES = [String, Number, Boolean, Object, Array, null];
function parsePropType(type, defaultValue) {
  if (isArray(type) && type.length === 1) {
    return type[0];
  }
  return type;
}
function normalizePropType(type, defaultValue) {
  const res = parsePropType(type);
  return PROP_TYPES.indexOf(res) !== -1 ? res : null;
}
function initPageProps({ properties }, rawProps) {
  if (isArray(rawProps)) {
    rawProps.forEach((key) => {
      properties[key] = {
        type: String,
        value: ""
      };
    });
  } else if (isPlainObject$1(rawProps)) {
    Object.keys(rawProps).forEach((key) => {
      const opts = rawProps[key];
      if (isPlainObject$1(opts)) {
        let value = opts.default;
        if (isFunction(value)) {
          value = value();
        }
        const type = opts.type;
        opts.type = normalizePropType(type);
        properties[key] = {
          type: opts.type,
          value
        };
      } else {
        properties[key] = {
          type: normalizePropType(opts)
        };
      }
    });
  }
}
function findPropsData(properties, isPage2) {
  return (isPage2 ? findPagePropsData(properties) : findComponentPropsData(resolvePropValue(properties.uP))) || {};
}
function findPagePropsData(properties) {
  const propsData = {};
  if (isPlainObject$1(properties)) {
    Object.keys(properties).forEach((name) => {
      if (builtInProps.indexOf(name) === -1) {
        propsData[name] = resolvePropValue(properties[name]);
      }
    });
  }
  return propsData;
}
function initFormField(vm) {
  const vueOptions = vm.$options;
  if (isArray(vueOptions.behaviors) && vueOptions.behaviors.includes("uni://form-field")) {
    vm.$watch("modelValue", () => {
      vm.$scope && vm.$scope.setData({
        name: vm.name,
        value: vm.modelValue
      });
    }, {
      immediate: true
    });
  }
}
function resolvePropValue(prop) {
  return prop;
}
function initData(_) {
  return {};
}
function initPropsObserver(componentOptions) {
  const observe = function observe2() {
    const up = this.properties.uP;
    if (!up) {
      return;
    }
    if (this.$vm) {
      updateComponentProps(resolvePropValue(up), this.$vm.$);
    } else if (resolvePropValue(this.properties.uT) === "m") {
      updateMiniProgramComponentProperties(resolvePropValue(up), this);
    }
  };
  {
    if (!componentOptions.observers) {
      componentOptions.observers = {};
    }
    componentOptions.observers.uP = observe;
  }
}
function updateMiniProgramComponentProperties(up, mpInstance) {
  const prevProps = mpInstance.properties;
  const nextProps = findComponentPropsData(up) || {};
  if (hasPropsChanged(prevProps, nextProps, false)) {
    mpInstance.setData(nextProps);
  }
}
function updateComponentProps(up, instance) {
  const prevProps = toRaw(instance.props);
  const nextProps = findComponentPropsData(up) || {};
  if (hasPropsChanged(prevProps, nextProps)) {
    updateProps(instance, nextProps, prevProps, false);
    if (hasQueueJob(instance.update)) {
      invalidateJob(instance.update);
    }
    {
      instance.update();
    }
  }
}
function hasPropsChanged(prevProps, nextProps, checkLen = true) {
  const nextKeys = Object.keys(nextProps);
  if (checkLen && nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key]) {
      return true;
    }
  }
  return false;
}
function initBehaviors(vueOptions) {
  const vueBehaviors = vueOptions.behaviors;
  let vueProps = vueOptions.props;
  if (!vueProps) {
    vueOptions.props = vueProps = [];
  }
  const behaviors = [];
  if (isArray(vueBehaviors)) {
    vueBehaviors.forEach((behavior) => {
      behaviors.push(behavior.replace("uni://", "wx://"));
      if (behavior === "uni://form-field") {
        if (isArray(vueProps)) {
          vueProps.push("name");
          vueProps.push("modelValue");
        } else {
          vueProps.name = {
            type: String,
            default: ""
          };
          vueProps.modelValue = {
            type: [String, Number, Boolean, Array, Object, Date],
            default: ""
          };
        }
      }
    });
  }
  return behaviors;
}
function applyOptions(componentOptions, vueOptions) {
  componentOptions.data = initData();
  componentOptions.behaviors = initBehaviors(vueOptions);
}
function parseComponent(vueOptions, { parse: parse2, mocks: mocks2, isPage: isPage2, isPageInProject, initRelation: initRelation2, handleLink: handleLink2, initLifetimes: initLifetimes2 }) {
  vueOptions = vueOptions.default || vueOptions;
  const options = {
    multipleSlots: true,
    // styleIsolation: 'apply-shared',
    addGlobalClass: true,
    pureDataPattern: /^uP$/
  };
  if (isArray(vueOptions.mixins)) {
    vueOptions.mixins.forEach((item) => {
      if (isObject$1(item.options)) {
        extend(options, item.options);
      }
    });
  }
  if (vueOptions.options) {
    extend(options, vueOptions.options);
  }
  const mpComponentOptions = {
    options,
    lifetimes: initLifetimes2({ mocks: mocks2, isPage: isPage2, initRelation: initRelation2, vueOptions }),
    pageLifetimes: {
      show() {
        this.$vm && this.$vm.$callHook("onPageShow");
      },
      hide() {
        this.$vm && this.$vm.$callHook("onPageHide");
      },
      resize(size2) {
        this.$vm && this.$vm.$callHook("onPageResize", size2);
      }
    },
    methods: {
      __l: handleLink2
    }
  };
  {
    applyOptions(mpComponentOptions, vueOptions);
  }
  initProps(mpComponentOptions);
  initPropsObserver(mpComponentOptions);
  initExtraOptions(mpComponentOptions, vueOptions);
  initWxsCallMethods(mpComponentOptions.methods, vueOptions.wxsCallMethods);
  {
    initWorkletMethods(mpComponentOptions.methods, vueOptions.methods);
  }
  if (parse2) {
    parse2(mpComponentOptions, { handleLink: handleLink2 });
  }
  return mpComponentOptions;
}
function initCreateComponent(parseOptions2) {
  return function createComponent2(vueComponentOptions) {
    return Component(parseComponent(vueComponentOptions, parseOptions2));
  };
}
let $createComponentFn;
let $destroyComponentFn;
function getAppVm() {
  return getApp().$vm;
}
function $createComponent(initialVNode, options) {
  if (!$createComponentFn) {
    $createComponentFn = getAppVm().$createComponent;
  }
  const proxy = $createComponentFn(initialVNode, options);
  return getExposeProxy(proxy.$) || proxy;
}
function $destroyComponent(instance) {
  if (!$destroyComponentFn) {
    $destroyComponentFn = getAppVm().$destroyComponent;
  }
  return $destroyComponentFn(instance);
}
function parsePage(vueOptions, parseOptions2) {
  const { parse: parse2, mocks: mocks2, isPage: isPage2, initRelation: initRelation2, handleLink: handleLink2, initLifetimes: initLifetimes2 } = parseOptions2;
  const miniProgramPageOptions = parseComponent(vueOptions, {
    mocks: mocks2,
    isPage: isPage2,
    isPageInProject: true,
    initRelation: initRelation2,
    handleLink: handleLink2,
    initLifetimes: initLifetimes2
  });
  initPageProps(miniProgramPageOptions, (vueOptions.default || vueOptions).props);
  const methods = miniProgramPageOptions.methods;
  methods.onLoad = function(query) {
    {
      this.options = query;
    }
    this.$page = {
      fullPath: addLeadingSlash(this.route + stringifyQuery(query))
    };
    return this.$vm && this.$vm.$callHook(ON_LOAD, query);
  };
  initHooks(methods, PAGE_INIT_HOOKS);
  {
    initUnknownHooks(methods, vueOptions);
  }
  initRuntimeHooks(methods, vueOptions.__runtimeHooks);
  initMixinRuntimeHooks(methods);
  parse2 && parse2(miniProgramPageOptions, { handleLink: handleLink2 });
  return miniProgramPageOptions;
}
function initCreatePage(parseOptions2) {
  return function createPage2(vuePageOptions) {
    return Component(parsePage(vuePageOptions, parseOptions2));
  };
}
function initCreatePluginApp(parseAppOptions) {
  return function createApp2(vm) {
    initAppLifecycle(parseApp(vm), vm);
  };
}
const MPPage = Page;
const MPComponent = Component;
function initTriggerEvent(mpInstance) {
  const oldTriggerEvent = mpInstance.triggerEvent;
  const newTriggerEvent = function(event, ...args) {
    return oldTriggerEvent.apply(mpInstance, [
      customizeEvent(event),
      ...args
    ]);
  };
  try {
    mpInstance.triggerEvent = newTriggerEvent;
  } catch (error) {
    mpInstance._triggerEvent = newTriggerEvent;
  }
}
function initMiniProgramHook(name, options, isComponent) {
  const oldHook = options[name];
  if (!oldHook) {
    options[name] = function() {
      initTriggerEvent(this);
    };
  } else {
    options[name] = function(...args) {
      initTriggerEvent(this);
      return oldHook.apply(this, args);
    };
  }
}
Page = function(options) {
  initMiniProgramHook(ON_LOAD, options);
  return MPPage(options);
};
Component = function(options) {
  initMiniProgramHook("created", options);
  const isVueComponent = options.properties && options.properties.uP;
  if (!isVueComponent) {
    initProps(options);
    initPropsObserver(options);
  }
  return MPComponent(options);
};
function initLifetimes({ mocks: mocks2, isPage: isPage2, initRelation: initRelation2, vueOptions }) {
  return {
    attached() {
      let properties = this.properties;
      initVueIds(properties.uI, this);
      const relationOptions = {
        vuePid: this._$vuePid
      };
      initRelation2(this, relationOptions);
      const mpInstance = this;
      const isMiniProgramPage = isPage2(mpInstance);
      let propsData = properties;
      this.$vm = $createComponent({
        type: vueOptions,
        props: findPropsData(propsData, isMiniProgramPage)
      }, {
        mpType: isMiniProgramPage ? "page" : "component",
        mpInstance,
        slots: properties.uS || {},
        // vueSlots
        parentComponent: relationOptions.parent && relationOptions.parent.$,
        onBeforeSetup(instance, options) {
          initRefs(instance, mpInstance);
          initMocks(instance, mpInstance, mocks2);
          initComponentInstance(instance, options);
        }
      });
      if (!isMiniProgramPage) {
        initFormField(this.$vm);
      }
    },
    ready() {
      if (this.$vm) {
        {
          this.$vm.$callHook("mounted");
          this.$vm.$callHook(ON_READY);
        }
      }
    },
    detached() {
      if (this.$vm) {
        pruneComponentPropsCache(this.$vm.$.uid);
        $destroyComponent(this.$vm);
      }
    }
  };
}
const mocks = ["__route__", "__wxExparserNodeId__", "__wxWebviewId__"];
function isPage(mpInstance) {
  return !!mpInstance.route;
}
function initRelation(mpInstance, detail) {
  mpInstance.triggerEvent("__l", detail);
}
function handleLink(event) {
  const detail = event.detail || event.value;
  const vuePid = detail.vuePid;
  let parentVm;
  if (vuePid) {
    parentVm = findVmByVueId(this.$vm, vuePid);
  }
  if (!parentVm) {
    parentVm = this.$vm;
  }
  detail.parent = parentVm;
}
var parseOptions = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  handleLink,
  initLifetimes,
  initRelation,
  isPage,
  mocks
});
const createApp = initCreateApp();
const createPage = initCreatePage(parseOptions);
const createComponent = initCreateComponent(parseOptions);
const createPluginApp = initCreatePluginApp();
const createSubpackageApp = initCreateSubpackageApp();
{
  wx.createApp = global.createApp = createApp;
  wx.createPage = createPage;
  wx.createComponent = createComponent;
  wx.createPluginApp = global.createPluginApp = createPluginApp;
  wx.createSubpackageApp = global.createSubpackageApp = createSubpackageApp;
}
var isVue2 = false;
function set$1(target, key, val) {
  if (Array.isArray(target)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  target[key] = val;
  return val;
}
function del(target, key) {
  if (Array.isArray(target)) {
    target.splice(key, 1);
    return;
  }
  delete target[key];
}
/*!
 * pinia v2.1.7
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */
let activePinia;
const setActivePinia = (pinia) => activePinia = pinia;
const piniaSymbol = Symbol("pinia");
function isPlainObject(o2) {
  return o2 && typeof o2 === "object" && Object.prototype.toString.call(o2) === "[object Object]" && typeof o2.toJSON !== "function";
}
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
const IS_CLIENT = typeof window !== "undefined";
const USE_DEVTOOLS = IS_CLIENT;
const componentStateTypes = [];
const getStoreType = (id) => "🍍 " + id;
function addStoreToDevtools(app, store) {
  if (!componentStateTypes.includes(getStoreType(store.$id))) {
    componentStateTypes.push(getStoreType(store.$id));
  }
}
function patchActionForGrouping(store, actionNames, wrapWithProxy) {
  const actions = actionNames.reduce((storeActions, actionName) => {
    storeActions[actionName] = toRaw(store)[actionName];
    return storeActions;
  }, {});
  for (const actionName in actions) {
    store[actionName] = function() {
      const trackedStore = wrapWithProxy ? new Proxy(store, {
        get(...args) {
          return Reflect.get(...args);
        },
        set(...args) {
          return Reflect.set(...args);
        }
      }) : store;
      const retValue = actions[actionName].apply(trackedStore, arguments);
      return retValue;
    };
  }
}
function devtoolsPlugin({ app, store, options }) {
  if (store.$id.startsWith("__hot:")) {
    return;
  }
  store._isOptionsAPI = !!options.state;
  patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);
  const originalHotUpdate = store._hotUpdate;
  toRaw(store)._hotUpdate = function(newStore) {
    originalHotUpdate.apply(this, arguments);
    patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);
  };
  addStoreToDevtools(
    app,
    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store
  );
}
function createPinia() {
  const scope = effectScope(true);
  const state = scope.run(() => ref({}));
  let _p = [];
  let toBeInstalled = [];
  const pinia = markRaw({
    install(app) {
      setActivePinia(pinia);
      {
        pinia._a = app;
        app.provide(piniaSymbol, pinia);
        app.config.globalProperties.$pinia = pinia;
        toBeInstalled.forEach((plugin2) => _p.push(plugin2));
        toBeInstalled = [];
      }
    },
    use(plugin2) {
      if (!this._a && !isVue2) {
        toBeInstalled.push(plugin2);
      } else {
        _p.push(plugin2);
      }
      return this;
    },
    _p,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  if (USE_DEVTOOLS && typeof Proxy !== "undefined") {
    pinia.use(devtoolsPlugin);
  }
  return pinia;
}
function patchObject(newState, oldState) {
  for (const key in oldState) {
    const subPatch = oldState[key];
    if (!(key in newState)) {
      continue;
    }
    const targetValue = newState[key];
    if (isPlainObject(targetValue) && isPlainObject(subPatch) && !isRef(subPatch) && !isReactive(subPatch)) {
      newState[key] = patchObject(targetValue, subPatch);
    } else {
      {
        newState[key] = subPatch;
      }
    }
  }
  return newState;
}
const noop = () => {
};
function addSubscription(subscriptions, callback, detached, onCleanup = noop) {
  subscriptions.push(callback);
  const removeSubscription = () => {
    const idx = subscriptions.indexOf(callback);
    if (idx > -1) {
      subscriptions.splice(idx, 1);
      onCleanup();
    }
  };
  if (!detached && getCurrentScope()) {
    onScopeDispose(removeSubscription);
  }
  return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
  subscriptions.slice().forEach((callback) => {
    callback(...args);
  });
}
const fallbackRunWithContext = (fn) => fn();
function mergeReactiveObjects(target, patchToApply) {
  if (target instanceof Map && patchToApply instanceof Map) {
    patchToApply.forEach((value, key) => target.set(key, value));
  }
  if (target instanceof Set && patchToApply instanceof Set) {
    patchToApply.forEach(target.add, target);
  }
  for (const key in patchToApply) {
    if (!patchToApply.hasOwnProperty(key))
      continue;
    const subPatch = patchToApply[key];
    const targetValue = target[key];
    if (isPlainObject(targetValue) && isPlainObject(subPatch) && target.hasOwnProperty(key) && !isRef(subPatch) && !isReactive(subPatch)) {
      target[key] = mergeReactiveObjects(targetValue, subPatch);
    } else {
      target[key] = subPatch;
    }
  }
  return target;
}
const skipHydrateSymbol = Symbol("pinia:skipHydration");
function shouldHydrate(obj) {
  return !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign } = Object;
function isComputed(o2) {
  return !!(isRef(o2) && o2.effect);
}
function createOptionsStore(id, options, pinia, hot) {
  const { state, actions, getters } = options;
  const initialState = pinia.state.value[id];
  let store;
  function setup() {
    if (!initialState && !hot) {
      {
        pinia.state.value[id] = state ? state() : {};
      }
    }
    const localState = hot ? (
      // use ref() to unwrap refs inside state TODO: check if this is still necessary
      toRefs(ref(state ? state() : {}).value)
    ) : toRefs(pinia.state.value[id]);
    return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
      if (name in localState) {
        console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with "${name}" in store "${id}".`);
      }
      computedGetters[name] = markRaw(computed(() => {
        setActivePinia(pinia);
        const store2 = pinia._s.get(id);
        return getters[name].call(store2, store2);
      }));
      return computedGetters;
    }, {}));
  }
  store = createSetupStore(id, setup, options, pinia, hot, true);
  return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
  let scope;
  const optionsForPlugin = assign({ actions: {} }, options);
  if (!pinia._e.active) {
    throw new Error("Pinia destroyed");
  }
  const $subscribeOptions = {
    deep: true
    // flush: 'post',
  };
  {
    $subscribeOptions.onTrigger = (event) => {
      if (isListening) {
        debuggerEvents = event;
      } else if (isListening == false && !store._hotUpdating) {
        if (Array.isArray(debuggerEvents)) {
          debuggerEvents.push(event);
        } else {
          console.error("🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug.");
        }
      }
    };
  }
  let isListening;
  let isSyncListening;
  let subscriptions = [];
  let actionSubscriptions = [];
  let debuggerEvents;
  const initialState = pinia.state.value[$id];
  if (!isOptionsStore && !initialState && !hot) {
    {
      pinia.state.value[$id] = {};
    }
  }
  const hotState = ref({});
  let activeListener;
  function $patch(partialStateOrMutator) {
    let subscriptionMutation;
    isListening = isSyncListening = false;
    {
      debuggerEvents = [];
    }
    if (typeof partialStateOrMutator === "function") {
      partialStateOrMutator(pinia.state.value[$id]);
      subscriptionMutation = {
        type: MutationType.patchFunction,
        storeId: $id,
        events: debuggerEvents
      };
    } else {
      mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
      subscriptionMutation = {
        type: MutationType.patchObject,
        payload: partialStateOrMutator,
        storeId: $id,
        events: debuggerEvents
      };
    }
    const myListenerId = activeListener = Symbol();
    nextTick$1().then(() => {
      if (activeListener === myListenerId) {
        isListening = true;
      }
    });
    isSyncListening = true;
    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
  }
  const $reset = isOptionsStore ? function $reset2() {
    const { state } = options;
    const newState = state ? state() : {};
    this.$patch(($state) => {
      assign($state, newState);
    });
  } : (
    /* istanbul ignore next */
    () => {
      throw new Error(`🍍: Store "${$id}" is built using the setup syntax and does not implement $reset().`);
    }
  );
  function $dispose() {
    scope.stop();
    subscriptions = [];
    actionSubscriptions = [];
    pinia._s.delete($id);
  }
  function wrapAction(name, action) {
    return function() {
      setActivePinia(pinia);
      const args = Array.from(arguments);
      const afterCallbackList = [];
      const onErrorCallbackList = [];
      function after(callback) {
        afterCallbackList.push(callback);
      }
      function onError2(callback) {
        onErrorCallbackList.push(callback);
      }
      triggerSubscriptions(actionSubscriptions, {
        args,
        name,
        store,
        after,
        onError: onError2
      });
      let ret;
      try {
        ret = action.apply(this && this.$id === $id ? this : store, args);
      } catch (error) {
        triggerSubscriptions(onErrorCallbackList, error);
        throw error;
      }
      if (ret instanceof Promise) {
        return ret.then((value) => {
          triggerSubscriptions(afterCallbackList, value);
          return value;
        }).catch((error) => {
          triggerSubscriptions(onErrorCallbackList, error);
          return Promise.reject(error);
        });
      }
      triggerSubscriptions(afterCallbackList, ret);
      return ret;
    };
  }
  const _hmrPayload = /* @__PURE__ */ markRaw({
    actions: {},
    getters: {},
    state: [],
    hotState
  });
  const partialStore = {
    _p: pinia,
    // _s: scope,
    $id,
    $onAction: addSubscription.bind(null, actionSubscriptions),
    $patch,
    $reset,
    $subscribe(callback, options2 = {}) {
      const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
      const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state) => {
        if (options2.flush === "sync" ? isSyncListening : isListening) {
          callback({
            storeId: $id,
            type: MutationType.direct,
            events: debuggerEvents
          }, state);
        }
      }, assign({}, $subscribeOptions, options2)));
      return removeSubscription;
    },
    $dispose
  };
  const store = reactive(assign(
    {
      _hmrPayload,
      _customProperties: markRaw(/* @__PURE__ */ new Set())
      // devtools custom properties
    },
    partialStore
    // must be added later
    // setupStore
  ));
  pinia._s.set($id, store);
  const runWithContext = pinia._a && pinia._a.runWithContext || fallbackRunWithContext;
  const setupStore = runWithContext(() => pinia._e.run(() => (scope = effectScope()).run(setup)));
  for (const key in setupStore) {
    const prop = setupStore[key];
    if (isRef(prop) && !isComputed(prop) || isReactive(prop)) {
      if (hot) {
        set$1(hotState.value, key, toRef(setupStore, key));
      } else if (!isOptionsStore) {
        if (initialState && shouldHydrate(prop)) {
          if (isRef(prop)) {
            prop.value = initialState[key];
          } else {
            mergeReactiveObjects(prop, initialState[key]);
          }
        }
        {
          pinia.state.value[$id][key] = prop;
        }
      }
      {
        _hmrPayload.state.push(key);
      }
    } else if (typeof prop === "function") {
      const actionValue = hot ? prop : wrapAction(key, prop);
      {
        setupStore[key] = actionValue;
      }
      {
        _hmrPayload.actions[key] = prop;
      }
      optionsForPlugin.actions[key] = prop;
    } else {
      if (isComputed(prop)) {
        _hmrPayload.getters[key] = isOptionsStore ? (
          // @ts-expect-error
          options.getters[key]
        ) : prop;
        if (IS_CLIENT) {
          const getters = setupStore._getters || // @ts-expect-error: same
          (setupStore._getters = markRaw([]));
          getters.push(key);
        }
      }
    }
  }
  {
    assign(store, setupStore);
    assign(toRaw(store), setupStore);
  }
  Object.defineProperty(store, "$state", {
    get: () => hot ? hotState.value : pinia.state.value[$id],
    set: (state) => {
      if (hot) {
        throw new Error("cannot set hotState");
      }
      $patch(($state) => {
        assign($state, state);
      });
    }
  });
  {
    store._hotUpdate = markRaw((newStore) => {
      store._hotUpdating = true;
      newStore._hmrPayload.state.forEach((stateKey) => {
        if (stateKey in store.$state) {
          const newStateTarget = newStore.$state[stateKey];
          const oldStateSource = store.$state[stateKey];
          if (typeof newStateTarget === "object" && isPlainObject(newStateTarget) && isPlainObject(oldStateSource)) {
            patchObject(newStateTarget, oldStateSource);
          } else {
            newStore.$state[stateKey] = oldStateSource;
          }
        }
        set$1(store, stateKey, toRef(newStore.$state, stateKey));
      });
      Object.keys(store.$state).forEach((stateKey) => {
        if (!(stateKey in newStore.$state)) {
          del(store, stateKey);
        }
      });
      isListening = false;
      isSyncListening = false;
      pinia.state.value[$id] = toRef(newStore._hmrPayload, "hotState");
      isSyncListening = true;
      nextTick$1().then(() => {
        isListening = true;
      });
      for (const actionName in newStore._hmrPayload.actions) {
        const action = newStore[actionName];
        set$1(store, actionName, wrapAction(actionName, action));
      }
      for (const getterName in newStore._hmrPayload.getters) {
        const getter = newStore._hmrPayload.getters[getterName];
        const getterValue = isOptionsStore ? (
          // special handling of options api
          computed(() => {
            setActivePinia(pinia);
            return getter.call(store, store);
          })
        ) : getter;
        set$1(store, getterName, getterValue);
      }
      Object.keys(store._hmrPayload.getters).forEach((key) => {
        if (!(key in newStore._hmrPayload.getters)) {
          del(store, key);
        }
      });
      Object.keys(store._hmrPayload.actions).forEach((key) => {
        if (!(key in newStore._hmrPayload.actions)) {
          del(store, key);
        }
      });
      store._hmrPayload = newStore._hmrPayload;
      store._getters = newStore._getters;
      store._hotUpdating = false;
    });
  }
  if (USE_DEVTOOLS) {
    const nonEnumerable = {
      writable: true,
      configurable: true,
      // avoid warning on devtools trying to display this property
      enumerable: false
    };
    ["_p", "_hmrPayload", "_getters", "_customProperties"].forEach((p2) => {
      Object.defineProperty(store, p2, assign({ value: store[p2] }, nonEnumerable));
    });
  }
  pinia._p.forEach((extender) => {
    if (USE_DEVTOOLS) {
      const extensions = scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      }));
      Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));
      assign(store, extensions);
    } else {
      assign(store, scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      })));
    }
  });
  if (store.$state && typeof store.$state === "object" && typeof store.$state.constructor === "function" && !store.$state.constructor.toString().includes("[native code]")) {
    console.warn(`[🍍]: The "state" must be a plain object. It cannot be
	state: () => new MyClass()
Found in store "${store.$id}".`);
  }
  if (initialState && isOptionsStore && options.hydrate) {
    options.hydrate(store.$state, initialState);
  }
  isListening = true;
  isSyncListening = true;
  return store;
}
function defineStore(idOrOptions, setup, setupOptions) {
  let id;
  let options;
  const isSetupStore = typeof setup === "function";
  if (typeof idOrOptions === "string") {
    id = idOrOptions;
    options = isSetupStore ? setupOptions : setup;
  } else {
    options = idOrOptions;
    id = idOrOptions.id;
    if (typeof id !== "string") {
      throw new Error(`[🍍]: "defineStore()" must be passed a store id as its first argument.`);
    }
  }
  function useStore(pinia, hot) {
    const hasContext = hasInjectionContext();
    pinia = // in test mode, ignore the argument provided as we can always retrieve a
    // pinia instance with getActivePinia()
    pinia || (hasContext ? inject(piniaSymbol, null) : null);
    if (pinia)
      setActivePinia(pinia);
    if (!activePinia) {
      throw new Error(`[🍍]: "getActivePinia()" was called but there was no active Pinia. Are you trying to use a store before calling "app.use(pinia)"?
See https://pinia.vuejs.org/core-concepts/outside-component-usage.html for help.
This will fail in production.`);
    }
    pinia = activePinia;
    if (!pinia._s.has(id)) {
      if (isSetupStore) {
        createSetupStore(id, setup, options, pinia);
      } else {
        createOptionsStore(id, options, pinia);
      }
      {
        useStore._pinia = pinia;
      }
    }
    const store = pinia._s.get(id);
    if (hot) {
      const hotId = "__hot:" + id;
      const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign({}, options), pinia, true);
      hot._hotUpdate(newStore);
      delete pinia.state.value[hotId];
      pinia._s.delete(hotId);
    }
    if (IS_CLIENT) {
      const currentInstance2 = getCurrentInstance();
      if (currentInstance2 && currentInstance2.proxy && // avoid adding stores that are just built for hot module replacement
      !hot) {
        const vm = currentInstance2.proxy;
        const cache = "_pStores" in vm ? vm._pStores : vm._pStores = {};
        cache[id] = store;
      }
    }
    return store;
  }
  useStore.$id = id;
  return useStore;
}
function storeToRefs(store) {
  {
    store = toRaw(store);
    const refs = {};
    for (const key in store) {
      const value = store[key];
      if (isRef(value) || isReactive(value)) {
        refs[key] = // ---
        toRef(store, key);
      }
    }
    return refs;
  }
}
const createHook = (lifecycle) => (hook, target = getCurrentInstance()) => {
  !isInSSRComponentSetup && injectHook(lifecycle, hook, target);
};
const onLaunch = /* @__PURE__ */ createHook(ON_LAUNCH);
const onLoad = /* @__PURE__ */ createHook(ON_LOAD);
const suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
const suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
const JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}
function get(obj, path) {
  if (obj == null)
    return void 0;
  let value = obj;
  for (let i = 0; i < path.length; i++) {
    if (value == null || value[path[i]] == null)
      return void 0;
    value = value[path[i]];
  }
  return value;
}
function set(obj, value, path) {
  if (path.length === 0)
    return value;
  const idx = path[0];
  if (path.length > 1) {
    value = set(
      typeof obj !== "object" || obj === null || !Object.prototype.hasOwnProperty.call(obj, idx) ? Number.isInteger(Number(path[1])) ? [] : {} : obj[idx],
      value,
      Array.prototype.slice.call(path, 1)
    );
  }
  if (Number.isInteger(Number(idx)) && Array.isArray(obj))
    return obj.slice()[idx];
  return Object.assign({}, obj, { [idx]: value });
}
function unset(obj, path) {
  if (obj == null || path.length === 0)
    return obj;
  if (path.length === 1) {
    if (obj == null)
      return obj;
    if (Number.isInteger(path[0]) && Array.isArray(obj))
      return Array.prototype.slice.call(obj, 0).splice(path[0], 1);
    const result = {};
    for (const p2 in obj)
      result[p2] = obj[p2];
    delete result[path[0]];
    return result;
  }
  if (obj[path[0]] == null) {
    if (Number.isInteger(path[0]) && Array.isArray(obj))
      return Array.prototype.concat.call([], obj);
    const result = {};
    for (const p2 in obj)
      result[p2] = obj[p2];
    return result;
  }
  return set(
    obj,
    unset(
      obj[path[0]],
      Array.prototype.slice.call(path, 1)
    ),
    [path[0]]
  );
}
function deepPickUnsafe(obj, paths) {
  return paths.map((p2) => p2.split(".")).map((p2) => [p2, get(obj, p2)]).filter((t2) => t2[1] !== void 0).reduce((acc, cur) => set(acc, cur[1], cur[0]), {});
}
function deepOmitUnsafe(obj, paths) {
  return paths.map((p2) => p2.split(".")).reduce((acc, cur) => unset(acc, cur), obj);
}
function hydrateStore(store, {
  storage,
  serializer,
  key,
  debug,
  pick,
  omit,
  beforeHydrate,
  afterHydrate
}, context, runHooks = true) {
  try {
    if (runHooks)
      beforeHydrate == null ? void 0 : beforeHydrate(context);
    const fromStorage = storage.getItem(key);
    if (fromStorage) {
      const deserialized = serializer.deserialize(fromStorage);
      const picked = pick ? deepPickUnsafe(deserialized, pick) : deserialized;
      const omitted = omit ? deepOmitUnsafe(picked, omit) : picked;
      store.$patch(omitted);
    }
    if (runHooks)
      afterHydrate == null ? void 0 : afterHydrate(context);
  } catch (error) {
    if (debug)
      console.error("[pinia-plugin-persistedstate]", error);
  }
}
function persistState(state, {
  storage,
  serializer,
  key,
  debug,
  pick,
  omit
}) {
  try {
    const picked = pick ? deepPickUnsafe(state, pick) : state;
    const omitted = omit ? deepOmitUnsafe(picked, omit) : picked;
    const toStorage = serializer.serialize(omitted);
    storage.setItem(key, toStorage);
  } catch (error) {
    if (debug)
      console.error("[pinia-plugin-persistedstate]", error);
  }
}
function createPersistence(context, optionsParser, auto) {
  const { pinia, store, options: { persist = auto } } = context;
  if (!persist)
    return;
  if (!(store.$id in pinia.state.value)) {
    const originalStore = pinia._s.get(store.$id.replace("__hot:", ""));
    if (originalStore)
      void Promise.resolve().then(() => originalStore.$persist());
    return;
  }
  const persistenceOptions = Array.isArray(persist) ? persist : persist === true ? [{}] : [persist];
  const persistences = persistenceOptions.map(optionsParser);
  store.$hydrate = ({ runHooks = true } = {}) => {
    persistences.forEach((p2) => {
      hydrateStore(store, p2, context, runHooks);
    });
  };
  store.$persist = () => {
    persistences.forEach((p2) => {
      persistState(store.$state, p2);
    });
  };
  persistences.forEach((p2) => {
    hydrateStore(store, p2, context);
    store.$subscribe(
      (_mutation, state) => persistState(state, p2),
      { detached: true }
    );
  });
}
function createPersistedState(options = {}) {
  return function(context) {
    createPersistence(
      context,
      (p2) => ({
        key: (options.key ? options.key : (x) => x)(p2.key ?? context.store.$id),
        debug: p2.debug ?? options.debug ?? false,
        serializer: p2.serializer ?? options.serializer ?? {
          serialize: (data) => JSON.stringify(data),
          deserialize: (data) => destr(data)
        },
        storage: p2.storage ?? options.storage ?? window.localStorage,
        beforeHydrate: p2.beforeHydrate,
        afterHydrate: p2.afterHydrate,
        pick: p2.pick,
        omit: p2.omit
      }),
      options.auto ?? false
    );
  };
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a.prototype = f2.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n2, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n2[k];
      }
    });
  });
  return a;
}
var cryptoJs = { exports: {} };
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var core = { exports: {} };
const __viteBrowserExternal = new Proxy({}, {
  get(_, key) {
    throw new Error(`Module "" has been externalized for browser compatibility. Cannot access ".${key}" in client code.  See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
  }
});
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var hasRequiredCore;
function requireCore() {
  if (hasRequiredCore)
    return core.exports;
  hasRequiredCore = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory();
      }
    })(commonjsGlobal, function() {
      var CryptoJS2 = CryptoJS2 || function(Math2, undefined$1) {
        var crypto;
        if (typeof window !== "undefined" && window.crypto) {
          crypto = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto = globalThis.crypto;
        }
        if (!crypto && typeof window !== "undefined" && window.msCrypto) {
          crypto = window.msCrypto;
        }
        if (!crypto && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
          crypto = commonjsGlobal.crypto;
        }
        if (!crypto && typeof commonjsRequire === "function") {
          try {
            crypto = require$$0;
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto) {
            if (typeof crypto.getRandomValues === "function") {
              try {
                return crypto.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto.randomBytes === "function") {
              try {
                return crypto.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create2 = Object.create || /* @__PURE__ */ function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = /* @__PURE__ */ function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create2(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2.words = this.words.slice(0);
            return clone2;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e2) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2._data = this._data.clone();
            return clone2;
          },
          _minBufferSize: 0
        });
        C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS2;
    });
  })(core);
  return core.exports;
}
var x64Core = { exports: {} };
var hasRequiredX64Core;
function requireX64Core() {
  if (hasRequiredX64Core)
    return x64Core.exports;
  hasRequiredX64Core = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function(undefined$1) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone2 = Base.clone.call(this);
            var words = clone2.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone2;
          }
        });
      })();
      return CryptoJS2;
    });
  })(x64Core);
  return x64Core.exports;
}
var libTypedarrays = { exports: {} };
var hasRequiredLibTypedarrays;
function requireLibTypedarrays() {
  if (hasRequiredLibTypedarrays)
    return libTypedarrays.exports;
  hasRequiredLibTypedarrays = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS2.lib.WordArray;
    });
  })(libTypedarrays);
  return libTypedarrays.exports;
}
var encUtf16 = { exports: {} };
var hasRequiredEncUtf16;
function requireEncUtf16() {
  if (hasRequiredEncUtf16)
    return encUtf16.exports;
  hasRequiredEncUtf16 = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS2.enc.Utf16;
    });
  })(encUtf16);
  return encUtf16.exports;
}
var encBase64 = { exports: {} };
var hasRequiredEncBase64;
function requireEncBase64() {
  if (hasRequiredEncBase64)
    return encBase64.exports;
  hasRequiredEncBase64 = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64;
    });
  })(encBase64);
  return encBase64.exports;
}
var encBase64url = { exports: {} };
var hasRequiredEncBase64url;
function requireEncBase64url() {
  if (hasRequiredEncBase64url)
    return encBase64url.exports;
  hasRequiredEncBase64url = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64url;
    });
  })(encBase64url);
  return encBase64url.exports;
}
var md5 = { exports: {} };
var hasRequiredMd5;
function requireMd5() {
  if (hasRequiredMd5)
    return md5.exports;
  hasRequiredMd5 = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function FF(a, b, c, d, x, s2, t2) {
          var n2 = a + (b & c | ~b & d) + x + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b;
        }
        function GG(a, b, c, d, x, s2, t2) {
          var n2 = a + (b & d | c & ~d) + x + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b;
        }
        function HH(a, b, c, d, x, s2, t2) {
          var n2 = a + (b ^ c ^ d) + x + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b;
        }
        function II(a, b, c, d, x, s2, t2) {
          var n2 = a + (c ^ (b | ~d)) + x + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS2.MD5;
    });
  })(md5);
  return md5.exports;
}
var sha1 = { exports: {} };
var hasRequiredSha1;
function requireSha1() {
  if (hasRequiredSha1)
    return sha1.exports;
  hasRequiredSha1 = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e2 = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n2 = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n2 << 1 | n2 >>> 31;
              }
              var t2 = (a << 5 | a >>> 27) + e2 + W[i];
              if (i < 20) {
                t2 += (b & c | ~b & d) + 1518500249;
              } else if (i < 40) {
                t2 += (b ^ c ^ d) + 1859775393;
              } else if (i < 60) {
                t2 += (b & c | b & d | c & d) - 1894007588;
              } else {
                t2 += (b ^ c ^ d) - 899497514;
              }
              e2 = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t2;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS2.SHA1;
    });
  })(sha1);
  return sha1.exports;
}
var sha256 = { exports: {} };
var hasRequiredSha256;
function requireSha256() {
  if (hasRequiredSha256)
    return sha256.exports;
  hasRequiredSha256 = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n3) {
            var sqrtN = Math2.sqrt(n3);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n3 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n3) {
            return (n3 - (n3 | 0)) * 4294967296 | 0;
          }
          var n2 = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n2)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n2, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n2, 1 / 3));
              nPrime++;
            }
            n2++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e2 = H2[4];
            var f2 = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e2 & f2 ^ ~e2 & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e2 << 26 | e2 >>> 6) ^ (e2 << 21 | e2 >>> 11) ^ (e2 << 7 | e2 >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f2;
              f2 = e2;
              e2 = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e2 | 0;
            H2[5] = H2[5] + f2 | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS2.SHA256;
    });
  })(sha256);
  return sha256.exports;
}
var sha224 = { exports: {} };
var hasRequiredSha224;
function requireSha224() {
  if (hasRequiredSha224)
    return sha224.exports;
  hasRequiredSha224 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireSha256());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS2.SHA224;
    });
  })(sha224);
  return sha224.exports;
}
var sha512 = { exports: {} };
var hasRequiredSha512;
function requireSha512() {
  if (hasRequiredSha512)
    return sha512.exports;
  hasRequiredSha512 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireX64Core());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M[offset + i * 2] | 0;
                Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS2.SHA512;
    });
  })(sha512);
  return sha512.exports;
}
var sha384 = { exports: {} };
var hasRequiredSha384;
function requireSha384() {
  if (hasRequiredSha384)
    return sha384.exports;
  hasRequiredSha384 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireX64Core(), requireSha512());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS2.SHA384;
    });
  })(sha384);
  return sha384.exports;
}
var sha3 = { exports: {} };
var hasRequiredSha3;
function requireSha3() {
  if (hasRequiredSha3)
    return sha3.exports;
  hasRequiredSha3 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireX64Core());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t2 = 0; t2 < 24; t2++) {
            RHO_OFFSETS[x + 5 * y] = (t2 + 1) * (t2 + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            var state = clone2._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone2;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS2.SHA3;
    });
  })(sha3);
  return sha3.exports;
}
var ripemd160 = { exports: {} };
var hasRequiredRipemd160;
function requireRipemd160() {
  if (hasRequiredRipemd160)
    return ripemd160.exports;
  hasRequiredRipemd160 = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      /** @preserve
      			(c) 2012 by Cédric Mesnil. All rights reserved.
      
      			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
      
      			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      
      			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      			*/
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr2 = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr2 = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br2, cr, dr, er;
            ar = al = H[0];
            br2 = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t2;
            for (var i = 0; i < 80; i += 1) {
              t2 = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t2 += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t2 += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t2 += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t2 += f4(bl, cl, dl) + hl[3];
              } else {
                t2 += f5(bl, cl, dl) + hl[4];
              }
              t2 = t2 | 0;
              t2 = rotl(t2, sl[i]);
              t2 = t2 + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t2;
              t2 = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t2 += f5(br2, cr, dr) + hr2[0];
              } else if (i < 32) {
                t2 += f4(br2, cr, dr) + hr2[1];
              } else if (i < 48) {
                t2 += f3(br2, cr, dr) + hr2[2];
              } else if (i < 64) {
                t2 += f2(br2, cr, dr) + hr2[3];
              } else {
                t2 += f1(br2, cr, dr) + hr2[4];
              }
              t2 = t2 | 0;
              t2 = rotl(t2, sr2[i]);
              t2 = t2 + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br2;
              br2 = t2;
            }
            t2 = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br2 | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t2;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n2) {
          return x << n2 | x >>> 32 - n2;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })();
      return CryptoJS2.RIPEMD160;
    });
  })(ripemd160);
  return ripemd160.exports;
}
var hmac = { exports: {} };
var hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac)
    return hmac.exports;
  hasRequiredHmac = 1;
  (function(module2, exports2) {
    (function(root, factory) {
      {
        module2.exports = factory(requireCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac2;
          }
        });
      })();
    });
  })(hmac);
  return hmac.exports;
}
var pbkdf2 = { exports: {} };
var hasRequiredPbkdf2;
function requirePbkdf2() {
  if (hasRequiredPbkdf2)
    return pbkdf2.exports;
  hasRequiredPbkdf2 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireSha256(), requireHmac());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac2 = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block2 = hmac2.update(salt).finalize(blockIndex);
              hmac2.reset();
              var blockWords = block2.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block2;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac2.finalize(intermediate);
                hmac2.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block2);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.PBKDF2;
    });
  })(pbkdf2);
  return pbkdf2.exports;
}
var evpkdf = { exports: {} };
var hasRequiredEvpkdf;
function requireEvpkdf() {
  if (hasRequiredEvpkdf)
    return evpkdf.exports;
  hasRequiredEvpkdf = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireSha1(), requireHmac());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block2;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block2) {
                hasher.update(block2);
              }
              block2 = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block2 = hasher.finalize(block2);
                hasher.reset();
              }
              derivedKey.concat(block2);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.EvpKDF;
    });
  })(evpkdf);
  return evpkdf.exports;
}
var cipherCore = { exports: {} };
var hasRequiredCipherCore;
function requireCipherCore() {
  if (hasRequiredCipherCore)
    return cipherCore.exports;
  hasRequiredCipherCore = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEvpkdf());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.lib.Cipher || function(undefined$1) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        C_enc.Utf8;
        var Base642 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: /* @__PURE__ */ function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block2;
            var iv = this._iv;
            if (iv) {
              block2 = iv;
              this._iv = undefined$1;
            } else {
              block2 = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block2[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base642);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base642.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  })(cipherCore);
  return cipherCore.exports;
}
var modeCfb = { exports: {} };
var hasRequiredModeCfb;
function requireModeCfb() {
  if (hasRequiredModeCfb)
    return modeCfb.exports;
  hasRequiredModeCfb = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.mode.CFB = function() {
        var CFB = CryptoJS2.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS2.mode.CFB;
    });
  })(modeCfb);
  return modeCfb.exports;
}
var modeCtr = { exports: {} };
var hasRequiredModeCtr;
function requireModeCtr() {
  if (hasRequiredModeCtr)
    return modeCtr.exports;
  hasRequiredModeCtr = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.mode.CTR = function() {
        var CTR = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS2.mode.CTR;
    });
  })(modeCtr);
  return modeCtr.exports;
}
var modeCtrGladman = { exports: {} };
var hasRequiredModeCtrGladman;
function requireModeCtrGladman() {
  if (hasRequiredModeCtrGladman)
    return modeCtrGladman.exports;
  hasRequiredModeCtrGladman = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      /** @preserve
       * Counter block mode compatible with  Dr Brian Gladman fileenc.c
       * derived from CryptoJS.mode.CTR
       * Jan Hruby jhruby.web@gmail.com
       */
      CryptoJS2.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS2.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS2.mode.CTRGladman;
    });
  })(modeCtrGladman);
  return modeCtrGladman.exports;
}
var modeOfb = { exports: {} };
var hasRequiredModeOfb;
function requireModeOfb() {
  if (hasRequiredModeOfb)
    return modeOfb.exports;
  hasRequiredModeOfb = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.mode.OFB = function() {
        var OFB = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS2.mode.OFB;
    });
  })(modeOfb);
  return modeOfb.exports;
}
var modeEcb = { exports: {} };
var hasRequiredModeEcb;
function requireModeEcb() {
  if (hasRequiredModeEcb)
    return modeEcb.exports;
  hasRequiredModeEcb = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.mode.ECB = function() {
        var ECB = CryptoJS2.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS2.mode.ECB;
    });
  })(modeEcb);
  return modeEcb.exports;
}
var padAnsix923 = { exports: {} };
var hasRequiredPadAnsix923;
function requirePadAnsix923() {
  if (hasRequiredPadAnsix923)
    return padAnsix923.exports;
  hasRequiredPadAnsix923 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Ansix923;
    });
  })(padAnsix923);
  return padAnsix923.exports;
}
var padIso10126 = { exports: {} };
var hasRequiredPadIso10126;
function requirePadIso10126() {
  if (hasRequiredPadIso10126)
    return padIso10126.exports;
  hasRequiredPadIso10126 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS2.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS2.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Iso10126;
    });
  })(padIso10126);
  return padIso10126.exports;
}
var padIso97971 = { exports: {} };
var hasRequiredPadIso97971;
function requirePadIso97971() {
  if (hasRequiredPadIso97971)
    return padIso97971.exports;
  hasRequiredPadIso97971 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS2.lib.WordArray.create([2147483648], 1));
          CryptoJS2.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS2.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS2.pad.Iso97971;
    });
  })(padIso97971);
  return padIso97971.exports;
}
var padZeropadding = { exports: {} };
var hasRequiredPadZeropadding;
function requirePadZeropadding() {
  if (hasRequiredPadZeropadding)
    return padZeropadding.exports;
  hasRequiredPadZeropadding = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS2.pad.ZeroPadding;
    });
  })(padZeropadding);
  return padZeropadding.exports;
}
var padNopadding = { exports: {} };
var hasRequiredPadNopadding;
function requirePadNopadding() {
  if (hasRequiredPadNopadding)
    return padNopadding.exports;
  hasRequiredPadNopadding = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      CryptoJS2.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS2.pad.NoPadding;
    });
  })(padNopadding);
  return padNopadding.exports;
}
var formatHex = { exports: {} };
var hasRequiredFormatHex;
function requireFormatHex() {
  if (hasRequiredFormatHex)
    return formatHex.exports;
  hasRequiredFormatHex = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function(undefined$1) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS2.format.Hex;
    });
  })(formatHex);
  return formatHex.exports;
}
var aes = { exports: {} };
var hasRequiredAes;
function requireAes() {
  if (hasRequiredAes)
    return aes.exports;
  hasRequiredAes = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t2 = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t2 << 24 | t2 >>> 8;
            SUB_MIX_1[x] = t2 << 16 | t2 >>> 16;
            SUB_MIX_2[x] = t2 << 8 | t2 >>> 24;
            SUB_MIX_3[x] = t2;
            var t2 = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t2 << 24 | t2 >>> 8;
            INV_SUB_MIX_1[sx] = t2 << 16 | t2 >>> 16;
            INV_SUB_MIX_2[sx] = t2 << 8 | t2 >>> 24;
            INV_SUB_MIX_3[sx] = t2;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t2;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t2 = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t2 = t2 << 8 | t2 >>> 24;
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                  t2 ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t2;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t2 = keySchedule[ksRow];
              } else {
                var t2 = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t2;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t2 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t2 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t2 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t2 & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t2 = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t2;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t2 = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t2;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS2.AES;
    });
  })(aes);
  return aes.exports;
}
var tripledes = { exports: {} };
var hasRequiredTripledes;
function requireTripledes() {
  if (hasRequiredTripledes)
    return tripledes.exports;
  hasRequiredTripledes = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f2 = 0;
              for (var i = 0; i < 8; i++) {
                f2 |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f2;
            }
            var t2 = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t2;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t2 = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t2;
          this._lBlock ^= t2 << offset;
        }
        function exchangeRL(offset, mask) {
          var t2 = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t2;
          this._rBlock ^= t2 << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS2.TripleDES;
    });
  })(tripledes);
  return tripledes.exports;
}
var rc4 = { exports: {} };
var hasRequiredRc4;
function requireRc4() {
  if (hasRequiredRc4)
    return rc4.exports;
  hasRequiredRc4 = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t2 = S[i];
              S[i] = S[j];
              S[j] = t2;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n2 = 0; n2 < 4; n2++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t2 = S[i];
            S[i] = S[j];
            S[j] = t2;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n2 * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS2.RC4;
    });
  })(rc4);
  return rc4.exports;
}
var rabbit = { exports: {} };
var hasRequiredRabbit;
function requireRabbit() {
  if (hasRequiredRabbit)
    return rabbit.exports;
  hasRequiredRabbit = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS2.Rabbit;
    });
  })(rabbit);
  return rabbit.exports;
}
var rabbitLegacy = { exports: {} };
var hasRequiredRabbitLegacy;
function requireRabbitLegacy() {
  if (hasRequiredRabbitLegacy)
    return rabbitLegacy.exports;
  hasRequiredRabbitLegacy = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS2.RabbitLegacy;
    });
  })(rabbitLegacy);
  return rabbitLegacy.exports;
}
var blowfish = { exports: {} };
var hasRequiredBlowfish;
function requireBlowfish() {
  if (hasRequiredBlowfish)
    return blowfish.exports;
  hasRequiredBlowfish = 1;
  (function(module2, exports2) {
    (function(root, factory, undef) {
      {
        module2.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F(ctx, x) {
          let a = x >> 24 & 255;
          let b = x >> 16 & 255;
          let c = x >> 8 & 255;
          let d = x & 255;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = 0; i < N; ++i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return { left: Xl, right: Xr };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = N + 1; i > 1; --i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr };
        }
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index2 = 0; index2 < N + 2; index2++) {
            ctx.pbox[index2] = ORIG_P[index2] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i = 0; i < N + 2; i += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i] = Data1;
            ctx.pbox[i + 1] = Data2;
          }
          for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i][j] = Data1;
              ctx.sbox[i][j + 1] = Data2;
            }
          }
          return true;
        }
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          decryptBlock: function(M, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS2.Blowfish;
    });
  })(blowfish);
  return blowfish.exports;
}
(function(module2, exports2) {
  (function(root, factory, undef) {
    {
      module2.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy(), requireBlowfish());
    }
  })(commonjsGlobal, function(CryptoJS2) {
    return CryptoJS2;
  });
})(cryptoJs);
var cryptoJsExports = cryptoJs.exports;
const CryptoJS = /* @__PURE__ */ getDefaultExportFromCjs(cryptoJsExports);
var dayjs_min = { exports: {} };
(function(module2, exports2) {
  !function(t2, e2) {
    module2.exports = e2();
  }(commonjsGlobal, function() {
    var t2 = 1e3, e2 = 6e4, n2 = 36e5, r = "millisecond", i = "second", s2 = "minute", u = "hour", a = "day", o2 = "week", c = "month", f2 = "quarter", h = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
      var e3 = ["th", "st", "nd", "rd"], n3 = t3 % 100;
      return "[" + t3 + (e3[(n3 - 20) % 10] || e3[n3] || e3[0]) + "]";
    } }, m2 = function(t3, e3, n3) {
      var r2 = String(t3);
      return !r2 || r2.length >= e3 ? t3 : "" + Array(e3 + 1 - r2.length).join(n3) + t3;
    }, v = { s: m2, z: function(t3) {
      var e3 = -t3.utcOffset(), n3 = Math.abs(e3), r2 = Math.floor(n3 / 60), i2 = n3 % 60;
      return (e3 <= 0 ? "+" : "-") + m2(r2, 2, "0") + ":" + m2(i2, 2, "0");
    }, m: function t3(e3, n3) {
      if (e3.date() < n3.date())
        return -t3(n3, e3);
      var r2 = 12 * (n3.year() - e3.year()) + (n3.month() - e3.month()), i2 = e3.clone().add(r2, c), s3 = n3 - i2 < 0, u2 = e3.clone().add(r2 + (s3 ? -1 : 1), c);
      return +(-(r2 + (n3 - i2) / (s3 ? i2 - u2 : u2 - i2)) || 0);
    }, a: function(t3) {
      return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
    }, p: function(t3) {
      return { M: c, y: h, w: o2, d: a, D: d, h: u, m: s2, s: i, ms: r, Q: f2 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t3) {
      return void 0 === t3;
    } }, g = "en", D = {};
    D[g] = M;
    var p2 = "$isDayjsObject", S = function(t3) {
      return t3 instanceof _ || !(!t3 || !t3[p2]);
    }, w = function t3(e3, n3, r2) {
      var i2;
      if (!e3)
        return g;
      if ("string" == typeof e3) {
        var s3 = e3.toLowerCase();
        D[s3] && (i2 = s3), n3 && (D[s3] = n3, i2 = s3);
        var u2 = e3.split("-");
        if (!i2 && u2.length > 1)
          return t3(u2[0]);
      } else {
        var a2 = e3.name;
        D[a2] = e3, i2 = a2;
      }
      return !r2 && i2 && (g = i2), i2 || !r2 && g;
    }, O = function(t3, e3) {
      if (S(t3))
        return t3.clone();
      var n3 = "object" == typeof e3 ? e3 : {};
      return n3.date = t3, n3.args = arguments, new _(n3);
    }, b = v;
    b.l = w, b.i = S, b.w = function(t3, e3) {
      return O(t3, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
    };
    var _ = function() {
      function M2(t3) {
        this.$L = w(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p2] = true;
      }
      var m3 = M2.prototype;
      return m3.parse = function(t3) {
        this.$d = function(t4) {
          var e3 = t4.date, n3 = t4.utc;
          if (null === e3)
            return /* @__PURE__ */ new Date(NaN);
          if (b.u(e3))
            return /* @__PURE__ */ new Date();
          if (e3 instanceof Date)
            return new Date(e3);
          if ("string" == typeof e3 && !/Z$/i.test(e3)) {
            var r2 = e3.match($);
            if (r2) {
              var i2 = r2[2] - 1 || 0, s3 = (r2[7] || "0").substring(0, 3);
              return n3 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s3)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s3);
            }
          }
          return new Date(e3);
        }(t3), this.init();
      }, m3.init = function() {
        var t3 = this.$d;
        this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
      }, m3.$utils = function() {
        return b;
      }, m3.isValid = function() {
        return !(this.$d.toString() === l);
      }, m3.isSame = function(t3, e3) {
        var n3 = O(t3);
        return this.startOf(e3) <= n3 && n3 <= this.endOf(e3);
      }, m3.isAfter = function(t3, e3) {
        return O(t3) < this.startOf(e3);
      }, m3.isBefore = function(t3, e3) {
        return this.endOf(e3) < O(t3);
      }, m3.$g = function(t3, e3, n3) {
        return b.u(t3) ? this[e3] : this.set(n3, t3);
      }, m3.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, m3.valueOf = function() {
        return this.$d.getTime();
      }, m3.startOf = function(t3, e3) {
        var n3 = this, r2 = !!b.u(e3) || e3, f3 = b.p(t3), l2 = function(t4, e4) {
          var i2 = b.w(n3.$u ? Date.UTC(n3.$y, e4, t4) : new Date(n3.$y, e4, t4), n3);
          return r2 ? i2 : i2.endOf(a);
        }, $2 = function(t4, e4) {
          return b.w(n3.toDate()[t4].apply(n3.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n3);
        }, y2 = this.$W, M3 = this.$M, m4 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
        switch (f3) {
          case h:
            return r2 ? l2(1, 0) : l2(31, 11);
          case c:
            return r2 ? l2(1, M3) : l2(0, M3 + 1);
          case o2:
            var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
            return l2(r2 ? m4 - D2 : m4 + (6 - D2), M3);
          case a:
          case d:
            return $2(v2 + "Hours", 0);
          case u:
            return $2(v2 + "Minutes", 1);
          case s2:
            return $2(v2 + "Seconds", 2);
          case i:
            return $2(v2 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m3.endOf = function(t3) {
        return this.startOf(t3, false);
      }, m3.$set = function(t3, e3) {
        var n3, o3 = b.p(t3), f3 = "set" + (this.$u ? "UTC" : ""), l2 = (n3 = {}, n3[a] = f3 + "Date", n3[d] = f3 + "Date", n3[c] = f3 + "Month", n3[h] = f3 + "FullYear", n3[u] = f3 + "Hours", n3[s2] = f3 + "Minutes", n3[i] = f3 + "Seconds", n3[r] = f3 + "Milliseconds", n3)[o3], $2 = o3 === a ? this.$D + (e3 - this.$W) : e3;
        if (o3 === c || o3 === h) {
          var y2 = this.clone().set(d, 1);
          y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
        } else
          l2 && this.$d[l2]($2);
        return this.init(), this;
      }, m3.set = function(t3, e3) {
        return this.clone().$set(t3, e3);
      }, m3.get = function(t3) {
        return this[b.p(t3)]();
      }, m3.add = function(r2, f3) {
        var d2, l2 = this;
        r2 = Number(r2);
        var $2 = b.p(f3), y2 = function(t3) {
          var e3 = O(l2);
          return b.w(e3.date(e3.date() + Math.round(t3 * r2)), l2);
        };
        if ($2 === c)
          return this.set(c, this.$M + r2);
        if ($2 === h)
          return this.set(h, this.$y + r2);
        if ($2 === a)
          return y2(1);
        if ($2 === o2)
          return y2(7);
        var M3 = (d2 = {}, d2[s2] = e2, d2[u] = n2, d2[i] = t2, d2)[$2] || 1, m4 = this.$d.getTime() + r2 * M3;
        return b.w(m4, this);
      }, m3.subtract = function(t3, e3) {
        return this.add(-1 * t3, e3);
      }, m3.format = function(t3) {
        var e3 = this, n3 = this.$locale();
        if (!this.isValid())
          return n3.invalidDate || l;
        var r2 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s3 = this.$H, u2 = this.$m, a2 = this.$M, o3 = n3.weekdays, c2 = n3.months, f3 = n3.meridiem, h2 = function(t4, n4, i3, s4) {
          return t4 && (t4[n4] || t4(e3, r2)) || i3[n4].slice(0, s4);
        }, d2 = function(t4) {
          return b.s(s3 % 12 || 12, t4, "0");
        }, $2 = f3 || function(t4, e4, n4) {
          var r3 = t4 < 12 ? "AM" : "PM";
          return n4 ? r3.toLowerCase() : r3;
        };
        return r2.replace(y, function(t4, r3) {
          return r3 || function(t5) {
            switch (t5) {
              case "YY":
                return String(e3.$y).slice(-2);
              case "YYYY":
                return b.s(e3.$y, 4, "0");
              case "M":
                return a2 + 1;
              case "MM":
                return b.s(a2 + 1, 2, "0");
              case "MMM":
                return h2(n3.monthsShort, a2, c2, 3);
              case "MMMM":
                return h2(c2, a2);
              case "D":
                return e3.$D;
              case "DD":
                return b.s(e3.$D, 2, "0");
              case "d":
                return String(e3.$W);
              case "dd":
                return h2(n3.weekdaysMin, e3.$W, o3, 2);
              case "ddd":
                return h2(n3.weekdaysShort, e3.$W, o3, 3);
              case "dddd":
                return o3[e3.$W];
              case "H":
                return String(s3);
              case "HH":
                return b.s(s3, 2, "0");
              case "h":
                return d2(1);
              case "hh":
                return d2(2);
              case "a":
                return $2(s3, u2, true);
              case "A":
                return $2(s3, u2, false);
              case "m":
                return String(u2);
              case "mm":
                return b.s(u2, 2, "0");
              case "s":
                return String(e3.$s);
              case "ss":
                return b.s(e3.$s, 2, "0");
              case "SSS":
                return b.s(e3.$ms, 3, "0");
              case "Z":
                return i2;
            }
            return null;
          }(t4) || i2.replace(":", "");
        });
      }, m3.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m3.diff = function(r2, d2, l2) {
        var $2, y2 = this, M3 = b.p(d2), m4 = O(r2), v2 = (m4.utcOffset() - this.utcOffset()) * e2, g2 = this - m4, D2 = function() {
          return b.m(y2, m4);
        };
        switch (M3) {
          case h:
            $2 = D2() / 12;
            break;
          case c:
            $2 = D2();
            break;
          case f2:
            $2 = D2() / 3;
            break;
          case o2:
            $2 = (g2 - v2) / 6048e5;
            break;
          case a:
            $2 = (g2 - v2) / 864e5;
            break;
          case u:
            $2 = g2 / n2;
            break;
          case s2:
            $2 = g2 / e2;
            break;
          case i:
            $2 = g2 / t2;
            break;
          default:
            $2 = g2;
        }
        return l2 ? $2 : b.a($2);
      }, m3.daysInMonth = function() {
        return this.endOf(c).$D;
      }, m3.$locale = function() {
        return D[this.$L];
      }, m3.locale = function(t3, e3) {
        if (!t3)
          return this.$L;
        var n3 = this.clone(), r2 = w(t3, e3, true);
        return r2 && (n3.$L = r2), n3;
      }, m3.clone = function() {
        return b.w(this.$d, this);
      }, m3.toDate = function() {
        return new Date(this.valueOf());
      }, m3.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m3.toISOString = function() {
        return this.$d.toISOString();
      }, m3.toString = function() {
        return this.$d.toUTCString();
      }, M2;
    }(), k = _.prototype;
    return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s2], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function(t3) {
      k[t3[1]] = function(e3) {
        return this.$g(e3, t3[0], t3[1]);
      };
    }), O.extend = function(t3, e3) {
      return t3.$i || (t3(e3, _, O), t3.$i = true), O;
    }, O.locale = w, O.isDayjs = S, O.unix = function(t3) {
      return O(1e3 * t3);
    }, O.en = D[g], O.Ls = D, O.p = {}, O;
  });
})(dayjs_min);
var dayjs_minExports = dayjs_min.exports;
const dayjs = /* @__PURE__ */ getDefaultExportFromCjs(dayjs_minExports);
/*! @license DOMPurify 3.2.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.6/LICENSE */
const {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
let {
  freeze,
  seal,
  create
} = Object;
let {
  apply,
  construct
} = typeof Reflect !== "undefined" && Reflect;
if (!freeze) {
  freeze = function freeze2(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal2(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply2(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct2(Func, args) {
    return new Func(...args);
  };
}
const arrayForEach = unapply(Array.prototype.forEach);
const arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);
const arrayPop = unapply(Array.prototype.pop);
const arrayPush = unapply(Array.prototype.push);
const arraySplice = unapply(Array.prototype.splice);
const stringToLowerCase = unapply(String.prototype.toLowerCase);
const stringToString = unapply(String.prototype.toString);
const stringMatch = unapply(String.prototype.match);
const stringReplace = unapply(String.prototype.replace);
const stringIndexOf = unapply(String.prototype.indexOf);
const stringTrim = unapply(String.prototype.trim);
const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
const regExpTest = unapply(RegExp.prototype.test);
const typeErrorCreate = unconstruct(TypeError);
function unapply(func) {
  return function(thisArg) {
    if (thisArg instanceof RegExp) {
      thisArg.lastIndex = 0;
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
function unconstruct(func) {
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
function addToSet(set2, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    setPrototypeOf(set2, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === "string") {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set2[element] = true;
  }
  return set2;
}
function cleanArray(array) {
  for (let index2 = 0; index2 < array.length; index2++) {
    const isPropertyExist = objectHasOwnProperty(array, index2);
    if (!isPropertyExist) {
      array[index2] = null;
    }
  }
  return array;
}
function clone(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property] = cleanArray(value);
      } else if (value && typeof value === "object" && value.constructor === Object) {
        newObject[property] = clone(value);
      } else {
        newObject[property] = value;
      }
    }
  }
  return newObject;
}
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === "function") {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}
const html$1 = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
const svg$1 = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
const svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
const svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
const mathMl$1 = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]);
const mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
const text = freeze(["#text"]);
const html$2 = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]);
const svg = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "amplitude", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "exponent", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "slope", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "tablevalues", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
const mathMl = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
const xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
const MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
const ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
const TMPLIT_EXPR = seal(/\$\{[\w\W]*/gm);
const DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]+$/);
const ARIA_ATTR = seal(/^aria-[\-\w]+$/);
const IS_ALLOWED_URI = seal(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp|matrix):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
);
const IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
const ATTR_WHITESPACE = seal(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
);
const DOCTYPE_NAME = seal(/^html$/i);
const CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);
var EXPRESSIONS = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ARIA_ATTR,
  ATTR_WHITESPACE,
  CUSTOM_ELEMENT,
  DATA_ATTR,
  DOCTYPE_NAME,
  ERB_EXPR,
  IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA,
  MUSTACHE_EXPR,
  TMPLIT_EXPR
});
const NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12
  // Deprecated
};
const getGlobal = function getGlobal2() {
  return typeof window === "undefined" ? null : window;
};
const _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== "object" || typeof trustedTypes.createPolicy !== "function") {
    return null;
  }
  let suffix = null;
  const ATTR_NAME = "data-tt-policy-suffix";
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = "dompurify" + (suffix ? "#" + suffix : "");
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html2) {
        return html2;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    console.warn("TrustedTypes policy " + policyName + " could not be created.");
    return null;
  }
};
const _createHooksMap = function _createHooksMap2() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function createDOMPurify() {
  let window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
  const DOMPurify = (root) => createDOMPurify(root);
  DOMPurify.version = "3.2.6";
  DOMPurify.removed = [];
  if (!window2 || !window2.document || window2.document.nodeType !== NODE_TYPE.document || !window2.Element) {
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document: document2
  } = window2;
  const originalDocument = document2;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node,
    Element,
    NodeFilter,
    NamedNodeMap = window2.NamedNodeMap || window2.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window2;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, "cloneNode");
  const remove2 = lookupGetter(ElementPrototype, "remove");
  const getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
  const getChildNodes = lookupGetter(ElementPrototype, "childNodes");
  const getParentNode = lookupGetter(ElementPrototype, "parentNode");
  if (typeof HTMLTemplateElement === "function") {
    const template = document2.createElement("template");
    if (template.content && template.content.ownerDocument) {
      document2 = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = "";
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document2;
  const {
    importNode
  } = originalDocument;
  let hooks = _createHooksMap();
  DOMPurify.isSupported = typeof entries === "function" && typeof getParentNode === "function" && implementation && implementation.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: MUSTACHE_EXPR2,
    ERB_EXPR: ERB_EXPR2,
    TMPLIT_EXPR: TMPLIT_EXPR2,
    DATA_ATTR: DATA_ATTR2,
    ARIA_ATTR: ARIA_ATTR2,
    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA2,
    ATTR_WHITESPACE: ATTR_WHITESPACE2,
    CUSTOM_ELEMENT: CUSTOM_ELEMENT2
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html$2, ...svg, ...mathMl, ...xml]);
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  let FORBID_TAGS = null;
  let FORBID_ATTR = null;
  let ALLOW_ARIA_ATTR = true;
  let ALLOW_DATA_ATTR = true;
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  let SAFE_FOR_TEMPLATES = false;
  let SAFE_FOR_XML = true;
  let WHOLE_DOCUMENT = false;
  let SET_CONFIG = false;
  let FORCE_BODY = false;
  let RETURN_DOM = false;
  let RETURN_DOM_FRAGMENT = false;
  let RETURN_TRUSTED_TYPE = false;
  let SANITIZE_DOM = true;
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
  let KEEP_CONTENT = true;
  let IN_PLACE = false;
  let USE_PROFILES = {};
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
  const MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
  const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
  const HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
  let HTML_INTEGRATION_POINTS = addToSet({}, ["annotation-xml"]);
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
  const DEFAULT_PARSER_MEDIA_TYPE = "text/html";
  let transformCaseFunc = null;
  let CONFIG = null;
  const formElement = document2.createElement("form");
  const isRegexOrFunction = function isRegexOrFunction2(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  const _parseConfig = function _parseConfig2() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    if (!cfg || typeof cfg !== "object") {
      cfg = {};
    }
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? stringToString : stringToLowerCase;
    ALLOWED_TAGS = objectHasOwnProperty(cfg, "ALLOWED_TAGS") ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, "ALLOWED_ATTR") ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, "ALLOWED_NAMESPACES") ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, "ADD_URI_SAFE_ATTR") ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, "ADD_DATA_URI_TAGS") ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, "FORBID_CONTENTS") ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, "FORBID_TAGS") ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : clone({});
    FORBID_ATTR = objectHasOwnProperty(cfg, "FORBID_ATTR") ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : clone({});
    USE_PROFILES = objectHasOwnProperty(cfg, "USE_PROFILES") ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false;
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false;
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
    RETURN_DOM = cfg.RETURN_DOM || false;
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
    FORCE_BODY = cfg.FORCE_BODY || false;
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
    IN_PLACE = cfg.IN_PLACE || false;
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;
    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, text);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html$2);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    if (KEEP_CONTENT) {
      ALLOWED_TAGS["#text"] = true;
    }
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
    }
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ["tbody"]);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      emptyHTML = trustedTypesPolicy.createHTML("");
    } else {
      if (trustedTypesPolicy === void 0) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      if (trustedTypesPolicy !== null && typeof emptyHTML === "string") {
        emptyHTML = trustedTypesPolicy.createHTML("");
      }
    }
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  const _checkValidNamespace = function _checkValidNamespace2(element) {
    let parent = getParentNode(element);
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: "template"
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "svg";
      }
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "math";
      }
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
      }
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    return false;
  };
  const _forceRemove = function _forceRemove2(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove2(node);
    }
  };
  const _removeAttribute = function _removeAttribute2(name, element) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: element.getAttributeNode(name),
        from: element
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: element
      });
    }
    element.removeAttribute(name);
    if (name === "is") {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(element);
        } catch (_) {
        }
      } else {
        try {
          element.setAttribute(name, "");
        } catch (_) {
        }
      }
    }
  };
  const _initDocument = function _initDocument2(dirty) {
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = "<remove></remove>" + dirty;
    } else {
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && NAMESPACE === HTML_NAMESPACE) {
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {
      }
    }
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, "template", null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  const _createNodeIterator = function _createNodeIterator2(root) {
    return createNodeIterator.call(
      root.ownerDocument || root,
      root,
      // eslint-disable-next-line no-bitwise
      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION,
      null
    );
  };
  const _isClobbered = function _isClobbered2(element) {
    return element instanceof HTMLFormElement && (typeof element.nodeName !== "string" || typeof element.textContent !== "string" || typeof element.removeChild !== "function" || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== "function" || typeof element.setAttribute !== "function" || typeof element.namespaceURI !== "string" || typeof element.insertBefore !== "function" || typeof element.hasChildNodes !== "function");
  };
  const _isNode = function _isNode2(value) {
    return typeof Node === "function" && value instanceof Node;
  };
  function _executeHooks(hooks2, currentNode, data) {
    arrayForEach(hooks2, (hook) => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  }
  const _sanitizeElements = function _sanitizeElements2(currentNode) {
    let content = null;
    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    const tagName = transformCaseFunc(currentNode.nodeName);
    _executeHooks(hooks.uponSanitizeElement, currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    if (SAFE_FOR_XML && currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w!]/g, currentNode.innerHTML) && regExpTest(/<[/\w!]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            const childClone = cloneNode(childNodes[i], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    if ((tagName === "noscript" || tagName === "noembed" || tagName === "noframes") && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        content = stringReplace(content, expr, " ");
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    _executeHooks(hooks.afterSanitizeElements, currentNode, null);
    return false;
  };
  const _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
    if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
      return false;
    }
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR2, lcName))
      ;
    else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR2, lcName))
      ;
    else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
        // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))
      )
        ;
      else {
        return false;
      }
    } else if (URI_SAFE_ATTRIBUTES[lcName])
      ;
    else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag])
      ;
    else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA2, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if (value) {
      return false;
    } else
      ;
    return true;
  };
  const _isBasicCustomElement = function _isBasicCustomElement2(tagName) {
    return tagName !== "annotation-xml" && stringMatch(tagName, CUSTOM_ELEMENT2);
  };
  const _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);
    const {
      attributes
    } = currentNode;
    if (!attributes || _isClobbered(currentNode)) {
      return;
    }
    const hookEvent = {
      attrName: "",
      attrValue: "",
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR,
      forceKeepAttr: void 0
    };
    let l = attributes.length;
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      const initValue = attrValue;
      let value = name === "value" ? initValue : stringTrim(initValue);
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = void 0;
      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);
      value = hookEvent.attrValue;
      if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
        _removeAttribute(name, currentNode);
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      if (!hookEvent.keepAttr) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
          value = stringReplace(value, expr, " ");
        });
      }
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (trustedTypesPolicy && typeof trustedTypes === "object" && typeof trustedTypes.getAttributeType === "function") {
        if (namespaceURI)
          ;
        else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case "TrustedHTML": {
              value = trustedTypesPolicy.createHTML(value);
              break;
            }
            case "TrustedScriptURL": {
              value = trustedTypesPolicy.createScriptURL(value);
              break;
            }
          }
        }
      }
      if (value !== initValue) {
        try {
          if (namespaceURI) {
            currentNode.setAttributeNS(namespaceURI, name, value);
          } else {
            currentNode.setAttribute(name, value);
          }
          if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);
          } else {
            arrayPop(DOMPurify.removed);
          }
        } catch (_) {
          _removeAttribute(name, currentNode);
        }
      }
    }
    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);
  };
  const _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);
      _sanitizeElements(shadowNode);
      _sanitizeAttributes(shadowNode);
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM2(shadowNode.content);
      }
    }
    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);
  };
  DOMPurify.sanitize = function(dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = "<!-->";
    }
    if (typeof dirty !== "string" && !_isNode(dirty)) {
      if (typeof dirty.toString === "function") {
        dirty = dirty.toString();
        if (typeof dirty !== "string") {
          throw typeErrorCreate("dirty is not a string, aborting");
        }
      } else {
        throw typeErrorCreate("toString is not a function");
      }
    }
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    DOMPurify.removed = [];
    if (typeof dirty === "string") {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
        }
      }
    } else if (dirty instanceof Node) {
      body = _initDocument("<!---->");
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === "BODY") {
        body = importedNode;
      } else if (importedNode.nodeName === "HTML") {
        body = importedNode;
      } else {
        body.appendChild(importedNode);
      }
    } else {
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf("<") === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      body = _initDocument(dirty);
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
      }
    }
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    while (currentNode = nodeIterator.nextNode()) {
      _sanitizeElements(currentNode);
      _sanitizeAttributes(currentNode);
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
    }
    if (IN_PLACE) {
      return dirty;
    }
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
    }
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        serializedHTML = stringReplace(serializedHTML, expr, " ");
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function() {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function(tag2, attr, value) {
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag2);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function(entryPoint, hookFunction) {
    if (typeof hookFunction !== "function") {
      return;
    }
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function(entryPoint, hookFunction) {
    if (hookFunction !== void 0) {
      const index2 = arrayLastIndexOf(hooks[entryPoint], hookFunction);
      return index2 === -1 ? void 0 : arraySplice(hooks[entryPoint], index2, 1)[0];
    }
    return arrayPop(hooks[entryPoint]);
  };
  DOMPurify.removeHooks = function(entryPoint) {
    hooks[entryPoint] = [];
  };
  DOMPurify.removeAllHooks = function() {
    hooks = _createHooksMap();
  };
  return DOMPurify;
}
var purify = createDOMPurify();
function _getDefaults() {
  return {
    async: false,
    breaks: false,
    extensions: null,
    gfm: true,
    hooks: null,
    pedantic: false,
    renderer: null,
    silent: false,
    tokenizer: null,
    walkTokens: null
  };
}
var _defaults = _getDefaults();
function changeDefaults(newDefaults) {
  _defaults = newDefaults;
}
var noopTest = { exec: () => null };
function edit(regex, opt = "") {
  let source = typeof regex === "string" ? regex : regex.source;
  const obj = {
    replace: (name, val) => {
      let valSource = typeof val === "string" ? val : val.source;
      valSource = valSource.replace(other.caret, "$1");
      source = source.replace(name, valSource);
      return obj;
    },
    getRegex: () => {
      return new RegExp(source, opt);
    }
  };
  return obj;
}
var other = {
  codeRemoveIndent: /^(?: {1,4}| {0,3}\t)/gm,
  outputLinkReplace: /\\([\[\]])/g,
  indentCodeCompensation: /^(\s+)(?:```)/,
  beginningSpace: /^\s+/,
  endingHash: /#$/,
  startingSpaceChar: /^ /,
  endingSpaceChar: / $/,
  nonSpaceChar: /[^ ]/,
  newLineCharGlobal: /\n/g,
  tabCharGlobal: /\t/g,
  multipleSpaceGlobal: /\s+/g,
  blankLine: /^[ \t]*$/,
  doubleBlankLine: /\n[ \t]*\n[ \t]*$/,
  blockquoteStart: /^ {0,3}>/,
  blockquoteSetextReplace: /\n {0,3}((?:=+|-+) *)(?=\n|$)/g,
  blockquoteSetextReplace2: /^ {0,3}>[ \t]?/gm,
  listReplaceTabs: /^\t+/,
  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,
  listIsTask: /^\[[ xX]\] /,
  listReplaceTask: /^\[[ xX]\] +/,
  anyLine: /\n.*\n/,
  hrefBrackets: /^<(.*)>$/,
  tableDelimiter: /[:|]/,
  tableAlignChars: /^\||\| *$/g,
  tableRowBlankLine: /\n[ \t]*$/,
  tableAlignRight: /^ *-+: *$/,
  tableAlignCenter: /^ *:-+: *$/,
  tableAlignLeft: /^ *:-+ *$/,
  startATag: /^<a /i,
  endATag: /^<\/a>/i,
  startPreScriptTag: /^<(pre|code|kbd|script)(\s|>)/i,
  endPreScriptTag: /^<\/(pre|code|kbd|script)(\s|>)/i,
  startAngleBracket: /^</,
  endAngleBracket: />$/,
  pedanticHrefTitle: /^([^'"]*[^\s])\s+(['"])(.*)\2/,
  unicodeAlphaNumeric: /[\p{L}\p{N}]/u,
  escapeTest: /[&<>"']/,
  escapeReplace: /[&<>"']/g,
  escapeTestNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,
  escapeReplaceNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,
  unescapeTest: /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig,
  caret: /(^|[^\[])\^/g,
  percentDecode: /%25/g,
  findPipe: /\|/g,
  splitPipe: / \|/,
  slashPipe: /\\\|/g,
  carriageReturn: /\r\n|\r/g,
  spaceLine: /^ +$/gm,
  notSpaceStart: /^\S*/,
  endingNewline: /\n$/,
  listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`),
  nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`),
  hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),
  fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`),
  headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),
  htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, "i")
};
var newline = /^(?:[ \t]*(?:\n|$))+/;
var blockCode = /^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/;
var fences = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
var hr = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
var heading = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
var bullet = /(?:[*+-]|\d{1,9}[.)])/;
var lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/;
var lheading = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/\|table/g, "").getRegex();
var lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/table/g, / {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/).getRegex();
var _paragraph = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
var blockText = /^[^\n]+/;
var _blockLabel = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
var def = edit(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label", _blockLabel).replace("title", /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex();
var list = edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, bullet).getRegex();
var _tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
var _comment = /<!--(?:-?>|[\s\S]*?(?:-->|$))/;
var html = edit(
  "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$))",
  "i"
).replace("comment", _comment).replace("tag", _tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
var paragraph = edit(_paragraph).replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex();
var blockquote = edit(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph", paragraph).getRegex();
var blockNormal = {
  blockquote,
  code: blockCode,
  def,
  fences,
  heading,
  hr,
  html,
  lheading,
  list,
  newline,
  paragraph,
  table: noopTest,
  text: blockText
};
var gfmTable = edit(
  "^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
).replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", "(?: {4}| {0,3}	)[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex();
var blockGfm = {
  ...blockNormal,
  lheading: lheadingGfm,
  table: gfmTable,
  paragraph: edit(_paragraph).replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", gfmTable).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex()
};
var blockPedantic = {
  ...blockNormal,
  html: edit(
    `^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`
  ).replace("comment", _comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  // fences not supported
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: edit(_paragraph).replace("hr", hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", lheading).replace("|table", "").replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").replace("|tag", "").getRegex()
};
var escape$1 = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/;
var inlineCode = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
var br = /^( {2,}|\\)\n(?!\s*$)/;
var inlineText = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
var _punctuation = /[\p{P}\p{S}]/u;
var _punctuationOrSpace = /[\s\p{P}\p{S}]/u;
var _notPunctuationOrSpace = /[^\s\p{P}\p{S}]/u;
var punctuation = edit(/^((?![*_])punctSpace)/, "u").replace(/punctSpace/g, _punctuationOrSpace).getRegex();
var _punctuationGfmStrongEm = /(?!~)[\p{P}\p{S}]/u;
var _punctuationOrSpaceGfmStrongEm = /(?!~)[\s\p{P}\p{S}]/u;
var _notPunctuationOrSpaceGfmStrongEm = /(?:[^\s\p{P}\p{S}]|~)/u;
var blockSkip = /\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g;
var emStrongLDelimCore = /^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/;
var emStrongLDelim = edit(emStrongLDelimCore, "u").replace(/punct/g, _punctuation).getRegex();
var emStrongLDelimGfm = edit(emStrongLDelimCore, "u").replace(/punct/g, _punctuationGfmStrongEm).getRegex();
var emStrongRDelimAstCore = "^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)";
var emStrongRDelimAst = edit(emStrongRDelimAstCore, "gu").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();
var emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, "gu").replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();
var emStrongRDelimUnd = edit(
  "^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)",
  "gu"
).replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();
var anyPunctuation = edit(/\\(punct)/, "gu").replace(/punct/g, _punctuation).getRegex();
var autolink = edit(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();
var _inlineComment = edit(_comment).replace("(?:-->|$)", "-->").getRegex();
var tag = edit(
  "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>"
).replace("comment", _inlineComment).replace("attribute", /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex();
var _inlineLabel = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
var link = edit(/^!?\[(label)\]\(\s*(href)(?:(?:[ \t]*(?:\n[ \t]*)?)(title))?\s*\)/).replace("label", _inlineLabel).replace("href", /<(?:\\.|[^\n<>\\])+>|[^ \t\n\x00-\x1f]*/).replace("title", /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex();
var reflink = edit(/^!?\[(label)\]\[(ref)\]/).replace("label", _inlineLabel).replace("ref", _blockLabel).getRegex();
var nolink = edit(/^!?\[(ref)\](?:\[\])?/).replace("ref", _blockLabel).getRegex();
var reflinkSearch = edit("reflink|nolink(?!\\()", "g").replace("reflink", reflink).replace("nolink", nolink).getRegex();
var inlineNormal = {
  _backpedal: noopTest,
  // only used for GFM url
  anyPunctuation,
  autolink,
  blockSkip,
  br,
  code: inlineCode,
  del: noopTest,
  emStrongLDelim,
  emStrongRDelimAst,
  emStrongRDelimUnd,
  escape: escape$1,
  link,
  nolink,
  punctuation,
  reflink,
  reflinkSearch,
  tag,
  text: inlineText,
  url: noopTest
};
var inlinePedantic = {
  ...inlineNormal,
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", _inlineLabel).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", _inlineLabel).getRegex()
};
var inlineGfm = {
  ...inlineNormal,
  emStrongRDelimAst: emStrongRDelimAstGfm,
  emStrongLDelim: emStrongLDelimGfm,
  url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, "i").replace("email", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
};
var inlineBreaks = {
  ...inlineGfm,
  br: edit(br).replace("{2,}", "*").getRegex(),
  text: edit(inlineGfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
};
var block = {
  normal: blockNormal,
  gfm: blockGfm,
  pedantic: blockPedantic
};
var inline = {
  normal: inlineNormal,
  gfm: inlineGfm,
  breaks: inlineBreaks,
  pedantic: inlinePedantic
};
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape2(html2, encode2) {
  if (encode2) {
    if (other.escapeTest.test(html2)) {
      return html2.replace(other.escapeReplace, getEscapeReplacement);
    }
  } else {
    if (other.escapeTestNoEncode.test(html2)) {
      return html2.replace(other.escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html2;
}
function cleanUrl(href) {
  try {
    href = encodeURI(href).replace(other.percentDecode, "%");
  } catch {
    return null;
  }
  return href;
}
function splitCells(tableRow, count) {
  var _a2;
  const row = tableRow.replace(other.findPipe, (match, offset, str) => {
    let escaped = false;
    let curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(other.splitPipe);
  let i = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !((_a2 = cells.at(-1)) == null ? void 0 : _a2.trim())) {
    cells.pop();
  }
  if (count) {
    if (cells.length > count) {
      cells.splice(count);
    } else {
      while (cells.length < count)
        cells.push("");
    }
  }
  for (; i < cells.length; i++) {
    cells[i] = cells[i].trim().replace(other.slashPipe, "|");
  }
  return cells;
}
function rtrim(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  let level = 0;
  for (let i = 0; i < str.length; i++) {
    if (str[i] === "\\") {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  if (level > 0) {
    return -2;
  }
  return -1;
}
function outputLink(cap, link2, raw, lexer2, rules) {
  const href = link2.href;
  const title = link2.title || null;
  const text2 = cap[1].replace(rules.other.outputLinkReplace, "$1");
  lexer2.state.inLink = true;
  const token = {
    type: cap[0].charAt(0) === "!" ? "image" : "link",
    raw,
    href,
    title,
    text: text2,
    tokens: lexer2.inlineTokens(text2)
  };
  lexer2.state.inLink = false;
  return token;
}
function indentCodeCompensation(raw, text2, rules) {
  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);
  if (matchIndentToCode === null) {
    return text2;
  }
  const indentToCode = matchIndentToCode[1];
  return text2.split("\n").map((node) => {
    const matchIndentInNode = node.match(rules.other.beginningSpace);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var _Tokenizer = class {
  // set by the lexer
  constructor(options2) {
    __publicField(this, "options");
    __publicField(this, "rules");
    // set by the lexer
    __publicField(this, "lexer");
    this.options = options2 || _defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text2 = cap[0].replace(this.rules.other.codeRemoveIndent, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text2, "\n") : text2
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text2 = indentCodeCompensation(raw, cap[3] || "", this.rules);
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, "$1") : cap[2],
        text: text2
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text2 = cap[2].trim();
      if (this.rules.other.endingHash.test(text2)) {
        const trimmed = rtrim(text2, "#");
        if (this.options.pedantic) {
          text2 = trimmed.trim();
        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {
          text2 = trimmed.trim();
        }
      }
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text: text2,
        tokens: this.lexer.inline(text2)
      };
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: rtrim(cap[0], "\n")
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      let lines = rtrim(cap[0], "\n").split("\n");
      let raw = "";
      let text2 = "";
      const tokens = [];
      while (lines.length > 0) {
        let inBlockquote = false;
        const currentLines = [];
        let i;
        for (i = 0; i < lines.length; i++) {
          if (this.rules.other.blockquoteStart.test(lines[i])) {
            currentLines.push(lines[i]);
            inBlockquote = true;
          } else if (!inBlockquote) {
            currentLines.push(lines[i]);
          } else {
            break;
          }
        }
        lines = lines.slice(i);
        const currentRaw = currentLines.join("\n");
        const currentText = currentRaw.replace(this.rules.other.blockquoteSetextReplace, "\n    $1").replace(this.rules.other.blockquoteSetextReplace2, "");
        raw = raw ? `${raw}
${currentRaw}` : currentRaw;
        text2 = text2 ? `${text2}
${currentText}` : currentText;
        const top = this.lexer.state.top;
        this.lexer.state.top = true;
        this.lexer.blockTokens(currentText, tokens, true);
        this.lexer.state.top = top;
        if (lines.length === 0) {
          break;
        }
        const lastToken = tokens.at(-1);
        if ((lastToken == null ? void 0 : lastToken.type) === "code") {
          break;
        } else if ((lastToken == null ? void 0 : lastToken.type) === "blockquote") {
          const oldToken = lastToken;
          const newText = oldToken.raw + "\n" + lines.join("\n");
          const newToken = this.blockquote(newText);
          tokens[tokens.length - 1] = newToken;
          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;
          text2 = text2.substring(0, text2.length - oldToken.text.length) + newToken.text;
          break;
        } else if ((lastToken == null ? void 0 : lastToken.type) === "list") {
          const oldToken = lastToken;
          const newText = oldToken.raw + "\n" + lines.join("\n");
          const newToken = this.list(newText);
          tokens[tokens.length - 1] = newToken;
          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;
          text2 = text2.substring(0, text2.length - oldToken.raw.length) + newToken.raw;
          lines = newText.substring(tokens.at(-1).raw.length).split("\n");
          continue;
        }
      }
      return {
        type: "blockquote",
        raw,
        tokens,
        text: text2
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list2 = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = this.rules.other.listItemRegex(bull);
      let endsWithBlankLine = false;
      while (src) {
        let endEarly = false;
        let raw = "";
        let itemContents = "";
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        let line = cap[2].split("\n", 1)[0].replace(this.rules.other.listReplaceTabs, (t2) => " ".repeat(3 * t2.length));
        let nextLine = src.split("\n", 1)[0];
        let blankLine = !line.trim();
        let indent = 0;
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimStart();
        } else if (blankLine) {
          indent = cap[1].length + 1;
        } else {
          indent = cap[2].search(this.rules.other.nonSpaceChar);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        if (blankLine && this.rules.other.blankLine.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);
          const hrRegex = this.rules.other.hrRegex(indent);
          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);
          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);
          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);
          while (src) {
            const rawLine = src.split("\n", 1)[0];
            let nextLineWithoutTabs;
            nextLine = rawLine;
            if (this.options.pedantic) {
              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, "  ");
              nextLineWithoutTabs = nextLine;
            } else {
              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, "    ");
            }
            if (fencesBeginRegex.test(nextLine)) {
              break;
            }
            if (headingBeginRegex.test(nextLine)) {
              break;
            }
            if (htmlBeginRegex.test(nextLine)) {
              break;
            }
            if (nextBulletRegex.test(nextLine)) {
              break;
            }
            if (hrRegex.test(nextLine)) {
              break;
            }
            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {
              itemContents += "\n" + nextLineWithoutTabs.slice(indent);
            } else {
              if (blankLine) {
                break;
              }
              if (line.replace(this.rules.other.tabCharGlobal, "    ").search(this.rules.other.nonSpaceChar) >= 4) {
                break;
              }
              if (fencesBeginRegex.test(line)) {
                break;
              }
              if (headingBeginRegex.test(line)) {
                break;
              }
              if (hrRegex.test(line)) {
                break;
              }
              itemContents += "\n" + nextLine;
            }
            if (!blankLine && !nextLine.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
            line = nextLineWithoutTabs.slice(indent);
          }
        }
        if (!list2.loose) {
          if (endsWithBlankLine) {
            list2.loose = true;
          } else if (this.rules.other.doubleBlankLine.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        let istask = null;
        let ischecked;
        if (this.options.gfm) {
          istask = this.rules.other.listIsTask.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(this.rules.other.listReplaceTask, "");
          }
        }
        list2.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents,
          tokens: []
        });
        list2.raw += raw;
      }
      const lastItem = list2.items.at(-1);
      if (lastItem) {
        lastItem.raw = lastItem.raw.trimEnd();
        lastItem.text = lastItem.text.trimEnd();
      } else {
        return;
      }
      list2.raw = list2.raw.trimEnd();
      for (let i = 0; i < list2.items.length; i++) {
        this.lexer.state.top = false;
        list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);
        if (!list2.loose) {
          const spacers = list2.items[i].tokens.filter((t2) => t2.type === "space");
          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t2) => this.rules.other.anyLine.test(t2.raw));
          list2.loose = hasMultipleLineBreaks;
        }
      }
      if (list2.loose) {
        for (let i = 0; i < list2.items.length; i++) {
          list2.items[i].loose = true;
        }
      }
      return list2;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        block: true,
        raw: cap[0],
        pre: cap[1] === "pre" || cap[1] === "script" || cap[1] === "style",
        text: cap[0]
      };
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      const tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, " ");
      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, "$1").replace(this.rules.inline.anyPunctuation, "$1") : "";
      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, "$1") : cap[3];
      return {
        type: "def",
        tag: tag2,
        raw: cap[0],
        href,
        title
      };
    }
  }
  table(src) {
    var _a2;
    const cap = this.rules.block.table.exec(src);
    if (!cap) {
      return;
    }
    if (!this.rules.other.tableDelimiter.test(cap[2])) {
      return;
    }
    const headers = splitCells(cap[1]);
    const aligns = cap[2].replace(this.rules.other.tableAlignChars, "").split("|");
    const rows = ((_a2 = cap[3]) == null ? void 0 : _a2.trim()) ? cap[3].replace(this.rules.other.tableRowBlankLine, "").split("\n") : [];
    const item = {
      type: "table",
      raw: cap[0],
      header: [],
      align: [],
      rows: []
    };
    if (headers.length !== aligns.length) {
      return;
    }
    for (const align of aligns) {
      if (this.rules.other.tableAlignRight.test(align)) {
        item.align.push("right");
      } else if (this.rules.other.tableAlignCenter.test(align)) {
        item.align.push("center");
      } else if (this.rules.other.tableAlignLeft.test(align)) {
        item.align.push("left");
      } else {
        item.align.push(null);
      }
    }
    for (let i = 0; i < headers.length; i++) {
      item.header.push({
        text: headers[i],
        tokens: this.lexer.inline(headers[i]),
        header: true,
        align: item.align[i]
      });
    }
    for (const row of rows) {
      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {
        return {
          text: cell,
          tokens: this.lexer.inline(cell),
          header: false,
          align: item.align[i]
        };
      }));
    }
    return item;
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: this.lexer.inline(cap[1])
      };
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const text2 = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
      return {
        type: "paragraph",
        raw: cap[0],
        text: text2,
        tokens: this.lexer.inline(text2)
      };
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      return {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: this.lexer.inline(cap[0])
      };
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: cap[1]
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        block: false,
        text: cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {
        if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex === -2) {
          return;
        }
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link2 = this.rules.other.pedanticHrefTitle.exec(href);
        if (link2) {
          href = link2[1];
          title = link2[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (this.rules.other.startAngleBracket.test(href)) {
        if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline.anyPunctuation, "$1") : href,
        title: title ? title.replace(this.rules.inline.anyPunctuation, "$1") : title
      }, cap[0], this.lexer, this.rules);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, " ");
      const link2 = links[linkString.toLowerCase()];
      if (!link2) {
        const text2 = cap[0].charAt(0);
        return {
          type: "text",
          raw: text2,
          text: text2
        };
      }
      return outputLink(cap, link2, cap[0], this.lexer, this.rules);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match = this.rules.inline.emStrongLDelim.exec(src);
    if (!match)
      return;
    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))
      return;
    const nextChar = match[1] || match[2] || "";
    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
      const lLength = [...match[0]].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match[0][0] === "*" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match = endReg.exec(maskedSrc)) != null) {
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim)
          continue;
        rLength = [...rDelim].length;
        if (match[3] || match[4]) {
          delimTotal += rLength;
          continue;
        } else if (match[5] || match[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        const lastCharLength = [...match[0]][0].length;
        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
        if (Math.min(lLength, rLength) % 2) {
          const text22 = raw.slice(1, -1);
          return {
            type: "em",
            raw,
            text: text22,
            tokens: this.lexer.inlineTokens(text22)
          };
        }
        const text2 = raw.slice(2, -2);
        return {
          type: "strong",
          raw,
          text: text2,
          tokens: this.lexer.inlineTokens(text2)
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text2 = cap[2].replace(this.rules.other.newLineCharGlobal, " ");
      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text2);
      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text2) && this.rules.other.endingSpaceChar.test(text2);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text2 = text2.substring(1, text2.length - 1);
      }
      return {
        type: "codespan",
        raw: cap[0],
        text: text2
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2])
      };
    }
  }
  autolink(src) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text2, href;
      if (cap[2] === "@") {
        text2 = cap[1];
        href = "mailto:" + text2;
      } else {
        text2 = cap[1];
        href = text2;
      }
      return {
        type: "link",
        raw: cap[0],
        text: text2,
        href,
        tokens: [
          {
            type: "text",
            raw: text2,
            text: text2
          }
        ]
      };
    }
  }
  url(src) {
    var _a2;
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text2, href;
      if (cap[2] === "@") {
        text2 = cap[0];
        href = "mailto:" + text2;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = ((_a2 = this.rules.inline._backpedal.exec(cap[0])) == null ? void 0 : _a2[0]) ?? "";
        } while (prevCapZero !== cap[0]);
        text2 = cap[0];
        if (cap[1] === "www.") {
          href = "http://" + cap[0];
        } else {
          href = cap[0];
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text: text2,
        href,
        tokens: [
          {
            type: "text",
            raw: text2,
            text: text2
          }
        ]
      };
    }
  }
  inlineText(src) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      const escaped = this.lexer.state.inRawBlock;
      return {
        type: "text",
        raw: cap[0],
        text: cap[0],
        escaped
      };
    }
  }
};
var _Lexer = class __Lexer {
  constructor(options2) {
    __publicField(this, "tokens");
    __publicField(this, "options");
    __publicField(this, "state");
    __publicField(this, "tokenizer");
    __publicField(this, "inlineQueue");
    this.tokens = [];
    this.tokens.links = /* @__PURE__ */ Object.create(null);
    this.options = options2 || _defaults;
    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      other,
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  /**
   * Expose Rules
   */
  static get rules() {
    return {
      block,
      inline
    };
  }
  /**
   * Static Lex Method
   */
  static lex(src, options2) {
    const lexer2 = new __Lexer(options2);
    return lexer2.lex(src);
  }
  /**
   * Static Lex Inline Method
   */
  static lexInline(src, options2) {
    const lexer2 = new __Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  /**
   * Preprocessing
   */
  lex(src) {
    src = src.replace(other.carriageReturn, "\n");
    this.blockTokens(src, this.tokens);
    for (let i = 0; i < this.inlineQueue.length; i++) {
      const next = this.inlineQueue[i];
      this.inlineTokens(next.src, next.tokens);
    }
    this.inlineQueue = [];
    return this.tokens;
  }
  blockTokens(src, tokens = [], lastParagraphClipped = false) {
    var _a2, _b, _c;
    if (this.options.pedantic) {
      src = src.replace(other.tabCharGlobal, "    ").replace(other.spaceLine, "");
    }
    while (src) {
      let token;
      if ((_b = (_a2 = this.options.extensions) == null ? void 0 : _a2.block) == null ? void 0 : _b.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        const lastToken = tokens.at(-1);
        if (token.raw.length === 1 && lastToken !== void 0) {
          lastToken.raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        const lastToken = tokens.at(-1);
        if ((lastToken == null ? void 0 : lastToken.type) === "paragraph" || (lastToken == null ? void 0 : lastToken.type) === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.at(-1).src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        const lastToken = tokens.at(-1);
        if ((lastToken == null ? void 0 : lastToken.type) === "paragraph" || (lastToken == null ? void 0 : lastToken.type) === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue.at(-1).src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      let cutSrc = src;
      if ((_c = this.options.extensions) == null ? void 0 : _c.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach((getStartIndex) => {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        const lastToken = tokens.at(-1);
        if (lastParagraphClipped && (lastToken == null ? void 0 : lastToken.type) === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue.at(-1).src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        const lastToken = tokens.at(-1);
        if ((lastToken == null ? void 0 : lastToken.type) === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue.at(-1).src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens = []) {
    this.inlineQueue.push({ src, tokens });
    return tokens;
  }
  /**
   * Lexing/Compiling
   */
  inlineTokens(src, tokens = []) {
    var _a2, _b, _c;
    let maskedSrc = src;
    let match = null;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
    }
    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    let keepPrevChar = false;
    let prevChar = "";
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      let token;
      if ((_b = (_a2 = this.options.extensions) == null ? void 0 : _a2.inline) == null ? void 0 : _b.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        const lastToken = tokens.at(-1);
        if (token.type === "text" && (lastToken == null ? void 0 : lastToken.type) === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      let cutSrc = src;
      if ((_c = this.options.extensions) == null ? void 0 : _c.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach((getStartIndex) => {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        const lastToken = tokens.at(-1);
        if ((lastToken == null ? void 0 : lastToken.type) === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var _Renderer = class {
  // set by the parser
  constructor(options2) {
    __publicField(this, "options");
    __publicField(this, "parser");
    this.options = options2 || _defaults;
  }
  space(token) {
    return "";
  }
  code({ text: text2, lang, escaped }) {
    var _a2;
    const langString = (_a2 = (lang || "").match(other.notSpaceStart)) == null ? void 0 : _a2[0];
    const code = text2.replace(other.endingNewline, "") + "\n";
    if (!langString) {
      return "<pre><code>" + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="language-' + escape2(langString) + '">' + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
  }
  blockquote({ tokens }) {
    const body = this.parser.parse(tokens);
    return `<blockquote>
${body}</blockquote>
`;
  }
  html({ text: text2 }) {
    return text2;
  }
  heading({ tokens, depth }) {
    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>
`;
  }
  hr(token) {
    return "<hr>\n";
  }
  list(token) {
    const ordered = token.ordered;
    const start = token.start;
    let body = "";
    for (let j = 0; j < token.items.length; j++) {
      const item = token.items[j];
      body += this.listitem(item);
    }
    const type = ordered ? "ol" : "ul";
    const startAttr = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startAttr + ">\n" + body + "</" + type + ">\n";
  }
  listitem(item) {
    var _a2;
    let itemBody = "";
    if (item.task) {
      const checkbox = this.checkbox({ checked: !!item.checked });
      if (item.loose) {
        if (((_a2 = item.tokens[0]) == null ? void 0 : _a2.type) === "paragraph") {
          item.tokens[0].text = checkbox + " " + item.tokens[0].text;
          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
            item.tokens[0].tokens[0].text = checkbox + " " + escape2(item.tokens[0].tokens[0].text);
            item.tokens[0].tokens[0].escaped = true;
          }
        } else {
          item.tokens.unshift({
            type: "text",
            raw: checkbox + " ",
            text: checkbox + " ",
            escaped: true
          });
        }
      } else {
        itemBody += checkbox + " ";
      }
    }
    itemBody += this.parser.parse(item.tokens, !!item.loose);
    return `<li>${itemBody}</li>
`;
  }
  checkbox({ checked }) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
  }
  paragraph({ tokens }) {
    return `<p>${this.parser.parseInline(tokens)}</p>
`;
  }
  table(token) {
    let header = "";
    let cell = "";
    for (let j = 0; j < token.header.length; j++) {
      cell += this.tablecell(token.header[j]);
    }
    header += this.tablerow({ text: cell });
    let body = "";
    for (let j = 0; j < token.rows.length; j++) {
      const row = token.rows[j];
      cell = "";
      for (let k = 0; k < row.length; k++) {
        cell += this.tablecell(row[k]);
      }
      body += this.tablerow({ text: cell });
    }
    if (body)
      body = `<tbody>${body}</tbody>`;
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow({ text: text2 }) {
    return `<tr>
${text2}</tr>
`;
  }
  tablecell(token) {
    const content = this.parser.parseInline(token.tokens);
    const type = token.header ? "th" : "td";
    const tag2 = token.align ? `<${type} align="${token.align}">` : `<${type}>`;
    return tag2 + content + `</${type}>
`;
  }
  /**
   * span level renderer
   */
  strong({ tokens }) {
    return `<strong>${this.parser.parseInline(tokens)}</strong>`;
  }
  em({ tokens }) {
    return `<em>${this.parser.parseInline(tokens)}</em>`;
  }
  codespan({ text: text2 }) {
    return `<code>${escape2(text2, true)}</code>`;
  }
  br(token) {
    return "<br>";
  }
  del({ tokens }) {
    return `<del>${this.parser.parseInline(tokens)}</del>`;
  }
  link({ href, title, tokens }) {
    const text2 = this.parser.parseInline(tokens);
    const cleanHref = cleanUrl(href);
    if (cleanHref === null) {
      return text2;
    }
    href = cleanHref;
    let out = '<a href="' + href + '"';
    if (title) {
      out += ' title="' + escape2(title) + '"';
    }
    out += ">" + text2 + "</a>";
    return out;
  }
  image({ href, title, text: text2, tokens }) {
    if (tokens) {
      text2 = this.parser.parseInline(tokens, this.parser.textRenderer);
    }
    const cleanHref = cleanUrl(href);
    if (cleanHref === null) {
      return escape2(text2);
    }
    href = cleanHref;
    let out = `<img src="${href}" alt="${text2}"`;
    if (title) {
      out += ` title="${escape2(title)}"`;
    }
    out += ">";
    return out;
  }
  text(token) {
    return "tokens" in token && token.tokens ? this.parser.parseInline(token.tokens) : "escaped" in token && token.escaped ? token.text : escape2(token.text);
  }
};
var _TextRenderer = class {
  // no need for block level renderers
  strong({ text: text2 }) {
    return text2;
  }
  em({ text: text2 }) {
    return text2;
  }
  codespan({ text: text2 }) {
    return text2;
  }
  del({ text: text2 }) {
    return text2;
  }
  html({ text: text2 }) {
    return text2;
  }
  text({ text: text2 }) {
    return text2;
  }
  link({ text: text2 }) {
    return "" + text2;
  }
  image({ text: text2 }) {
    return "" + text2;
  }
  br() {
    return "";
  }
};
var _Parser = class __Parser {
  constructor(options2) {
    __publicField(this, "options");
    __publicField(this, "renderer");
    __publicField(this, "textRenderer");
    this.options = options2 || _defaults;
    this.options.renderer = this.options.renderer || new _Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.renderer.parser = this;
    this.textRenderer = new _TextRenderer();
  }
  /**
   * Static Parse Method
   */
  static parse(tokens, options2) {
    const parser2 = new __Parser(options2);
    return parser2.parse(tokens);
  }
  /**
   * Static Parse Inline Method
   */
  static parseInline(tokens, options2) {
    const parser2 = new __Parser(options2);
    return parser2.parseInline(tokens);
  }
  /**
   * Parse Loop
   */
  parse(tokens, top = true) {
    var _a2, _b;
    let out = "";
    for (let i = 0; i < tokens.length; i++) {
      const anyToken = tokens[i];
      if ((_b = (_a2 = this.options.extensions) == null ? void 0 : _a2.renderers) == null ? void 0 : _b[anyToken.type]) {
        const genericToken = anyToken;
        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(genericToken.type)) {
          out += ret || "";
          continue;
        }
      }
      const token = anyToken;
      switch (token.type) {
        case "space": {
          out += this.renderer.space(token);
          continue;
        }
        case "hr": {
          out += this.renderer.hr(token);
          continue;
        }
        case "heading": {
          out += this.renderer.heading(token);
          continue;
        }
        case "code": {
          out += this.renderer.code(token);
          continue;
        }
        case "table": {
          out += this.renderer.table(token);
          continue;
        }
        case "blockquote": {
          out += this.renderer.blockquote(token);
          continue;
        }
        case "list": {
          out += this.renderer.list(token);
          continue;
        }
        case "html": {
          out += this.renderer.html(token);
          continue;
        }
        case "paragraph": {
          out += this.renderer.paragraph(token);
          continue;
        }
        case "text": {
          let textToken = token;
          let body = this.renderer.text(textToken);
          while (i + 1 < tokens.length && tokens[i + 1].type === "text") {
            textToken = tokens[++i];
            body += "\n" + this.renderer.text(textToken);
          }
          if (top) {
            out += this.renderer.paragraph({
              type: "paragraph",
              raw: body,
              text: body,
              tokens: [{ type: "text", raw: body, text: body, escaped: true }]
            });
          } else {
            out += body;
          }
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return "";
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  /**
   * Parse Inline Tokens
   */
  parseInline(tokens, renderer = this.renderer) {
    var _a2, _b;
    let out = "";
    for (let i = 0; i < tokens.length; i++) {
      const anyToken = tokens[i];
      if ((_b = (_a2 = this.options.extensions) == null ? void 0 : _a2.renderers) == null ? void 0 : _b[anyToken.type]) {
        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(anyToken.type)) {
          out += ret || "";
          continue;
        }
      }
      const token = anyToken;
      switch (token.type) {
        case "escape": {
          out += renderer.text(token);
          break;
        }
        case "html": {
          out += renderer.html(token);
          break;
        }
        case "link": {
          out += renderer.link(token);
          break;
        }
        case "image": {
          out += renderer.image(token);
          break;
        }
        case "strong": {
          out += renderer.strong(token);
          break;
        }
        case "em": {
          out += renderer.em(token);
          break;
        }
        case "codespan": {
          out += renderer.codespan(token);
          break;
        }
        case "br": {
          out += renderer.br(token);
          break;
        }
        case "del": {
          out += renderer.del(token);
          break;
        }
        case "text": {
          out += renderer.text(token);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return "";
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
var _Hooks = (_a = class {
  constructor(options2) {
    __publicField(this, "options");
    __publicField(this, "block");
    this.options = options2 || _defaults;
  }
  /**
   * Process markdown before marked
   */
  preprocess(markdown) {
    return markdown;
  }
  /**
   * Process HTML after marked is finished
   */
  postprocess(html2) {
    return html2;
  }
  /**
   * Process all tokens before walk tokens
   */
  processAllTokens(tokens) {
    return tokens;
  }
  /**
   * Provide function to tokenize markdown
   */
  provideLexer() {
    return this.block ? _Lexer.lex : _Lexer.lexInline;
  }
  /**
   * Provide function to parse tokens
   */
  provideParser() {
    return this.block ? _Parser.parse : _Parser.parseInline;
  }
}, __publicField(_a, "passThroughHooks", /* @__PURE__ */ new Set([
  "preprocess",
  "postprocess",
  "processAllTokens"
])), _a);
var Marked = class {
  constructor(...args) {
    __publicField(this, "defaults", _getDefaults());
    __publicField(this, "options", this.setOptions);
    __publicField(this, "parse", this.parseMarkdown(true));
    __publicField(this, "parseInline", this.parseMarkdown(false));
    __publicField(this, "Parser", _Parser);
    __publicField(this, "Renderer", _Renderer);
    __publicField(this, "TextRenderer", _TextRenderer);
    __publicField(this, "Lexer", _Lexer);
    __publicField(this, "Tokenizer", _Tokenizer);
    __publicField(this, "Hooks", _Hooks);
    this.use(...args);
  }
  /**
   * Run callback for every token
   */
  walkTokens(tokens, callback) {
    var _a2, _b;
    let values = [];
    for (const token of tokens) {
      values = values.concat(callback.call(this, token));
      switch (token.type) {
        case "table": {
          const tableToken = token;
          for (const cell of tableToken.header) {
            values = values.concat(this.walkTokens(cell.tokens, callback));
          }
          for (const row of tableToken.rows) {
            for (const cell of row) {
              values = values.concat(this.walkTokens(cell.tokens, callback));
            }
          }
          break;
        }
        case "list": {
          const listToken = token;
          values = values.concat(this.walkTokens(listToken.items, callback));
          break;
        }
        default: {
          const genericToken = token;
          if ((_b = (_a2 = this.defaults.extensions) == null ? void 0 : _a2.childTokens) == null ? void 0 : _b[genericToken.type]) {
            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {
              const tokens2 = genericToken[childTokens].flat(Infinity);
              values = values.concat(this.walkTokens(tokens2, callback));
            });
          } else if (genericToken.tokens) {
            values = values.concat(this.walkTokens(genericToken.tokens, callback));
          }
        }
      }
    }
    return values;
  }
  use(...args) {
    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
    args.forEach((pack) => {
      const opts = { ...pack };
      opts.async = this.defaults.async || opts.async || false;
      if (pack.extensions) {
        pack.extensions.forEach((ext) => {
          if (!ext.name) {
            throw new Error("extension name required");
          }
          if ("renderer" in ext) {
            const prevRenderer = extensions.renderers[ext.name];
            if (prevRenderer) {
              extensions.renderers[ext.name] = function(...args2) {
                let ret = ext.renderer.apply(this, args2);
                if (ret === false) {
                  ret = prevRenderer.apply(this, args2);
                }
                return ret;
              };
            } else {
              extensions.renderers[ext.name] = ext.renderer;
            }
          }
          if ("tokenizer" in ext) {
            if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
              throw new Error("extension level must be 'block' or 'inline'");
            }
            const extLevel = extensions[ext.level];
            if (extLevel) {
              extLevel.unshift(ext.tokenizer);
            } else {
              extensions[ext.level] = [ext.tokenizer];
            }
            if (ext.start) {
              if (ext.level === "block") {
                if (extensions.startBlock) {
                  extensions.startBlock.push(ext.start);
                } else {
                  extensions.startBlock = [ext.start];
                }
              } else if (ext.level === "inline") {
                if (extensions.startInline) {
                  extensions.startInline.push(ext.start);
                } else {
                  extensions.startInline = [ext.start];
                }
              }
            }
          }
          if ("childTokens" in ext && ext.childTokens) {
            extensions.childTokens[ext.name] = ext.childTokens;
          }
        });
        opts.extensions = extensions;
      }
      if (pack.renderer) {
        const renderer = this.defaults.renderer || new _Renderer(this.defaults);
        for (const prop in pack.renderer) {
          if (!(prop in renderer)) {
            throw new Error(`renderer '${prop}' does not exist`);
          }
          if (["options", "parser"].includes(prop)) {
            continue;
          }
          const rendererProp = prop;
          const rendererFunc = pack.renderer[rendererProp];
          const prevRenderer = renderer[rendererProp];
          renderer[rendererProp] = (...args2) => {
            let ret = rendererFunc.apply(renderer, args2);
            if (ret === false) {
              ret = prevRenderer.apply(renderer, args2);
            }
            return ret || "";
          };
        }
        opts.renderer = renderer;
      }
      if (pack.tokenizer) {
        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
        for (const prop in pack.tokenizer) {
          if (!(prop in tokenizer)) {
            throw new Error(`tokenizer '${prop}' does not exist`);
          }
          if (["options", "rules", "lexer"].includes(prop)) {
            continue;
          }
          const tokenizerProp = prop;
          const tokenizerFunc = pack.tokenizer[tokenizerProp];
          const prevTokenizer = tokenizer[tokenizerProp];
          tokenizer[tokenizerProp] = (...args2) => {
            let ret = tokenizerFunc.apply(tokenizer, args2);
            if (ret === false) {
              ret = prevTokenizer.apply(tokenizer, args2);
            }
            return ret;
          };
        }
        opts.tokenizer = tokenizer;
      }
      if (pack.hooks) {
        const hooks = this.defaults.hooks || new _Hooks();
        for (const prop in pack.hooks) {
          if (!(prop in hooks)) {
            throw new Error(`hook '${prop}' does not exist`);
          }
          if (["options", "block"].includes(prop)) {
            continue;
          }
          const hooksProp = prop;
          const hooksFunc = pack.hooks[hooksProp];
          const prevHook = hooks[hooksProp];
          if (_Hooks.passThroughHooks.has(prop)) {
            hooks[hooksProp] = (arg) => {
              if (this.defaults.async) {
                return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) => {
                  return prevHook.call(hooks, ret2);
                });
              }
              const ret = hooksFunc.call(hooks, arg);
              return prevHook.call(hooks, ret);
            };
          } else {
            hooks[hooksProp] = (...args2) => {
              let ret = hooksFunc.apply(hooks, args2);
              if (ret === false) {
                ret = prevHook.apply(hooks, args2);
              }
              return ret;
            };
          }
        }
        opts.hooks = hooks;
      }
      if (pack.walkTokens) {
        const walkTokens2 = this.defaults.walkTokens;
        const packWalktokens = pack.walkTokens;
        opts.walkTokens = function(token) {
          let values = [];
          values.push(packWalktokens.call(this, token));
          if (walkTokens2) {
            values = values.concat(walkTokens2.call(this, token));
          }
          return values;
        };
      }
      this.defaults = { ...this.defaults, ...opts };
    });
    return this;
  }
  setOptions(opt) {
    this.defaults = { ...this.defaults, ...opt };
    return this;
  }
  lexer(src, options2) {
    return _Lexer.lex(src, options2 ?? this.defaults);
  }
  parser(tokens, options2) {
    return _Parser.parse(tokens, options2 ?? this.defaults);
  }
  parseMarkdown(blockType) {
    const parse2 = (src, options2) => {
      const origOpt = { ...options2 };
      const opt = { ...this.defaults, ...origOpt };
      const throwError = this.onError(!!opt.silent, !!opt.async);
      if (this.defaults.async === true && origOpt.async === false) {
        return throwError(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));
      }
      if (typeof src === "undefined" || src === null) {
        return throwError(new Error("marked(): input parameter is undefined or null"));
      }
      if (typeof src !== "string") {
        return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
      }
      if (opt.hooks) {
        opt.hooks.options = opt;
        opt.hooks.block = blockType;
      }
      const lexer2 = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;
      const parser2 = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;
      if (opt.async) {
        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer2(src2, opt)).then((tokens) => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html2) => opt.hooks ? opt.hooks.postprocess(html2) : html2).catch(throwError);
      }
      try {
        if (opt.hooks) {
          src = opt.hooks.preprocess(src);
        }
        let tokens = lexer2(src, opt);
        if (opt.hooks) {
          tokens = opt.hooks.processAllTokens(tokens);
        }
        if (opt.walkTokens) {
          this.walkTokens(tokens, opt.walkTokens);
        }
        let html2 = parser2(tokens, opt);
        if (opt.hooks) {
          html2 = opt.hooks.postprocess(html2);
        }
        return html2;
      } catch (e2) {
        return throwError(e2);
      }
    };
    return parse2;
  }
  onError(silent, async) {
    return (e2) => {
      e2.message += "\nPlease report this to https://github.com/markedjs/marked.";
      if (silent) {
        const msg = "<p>An error occurred:</p><pre>" + escape2(e2.message + "", true) + "</pre>";
        if (async) {
          return Promise.resolve(msg);
        }
        return msg;
      }
      if (async) {
        return Promise.reject(e2);
      }
      throw e2;
    };
  }
};
var markedInstance = new Marked();
function marked(src, opt) {
  return markedInstance.parse(src, opt);
}
marked.options = marked.setOptions = function(options2) {
  markedInstance.setOptions(options2);
  marked.defaults = markedInstance.defaults;
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = _getDefaults;
marked.defaults = _defaults;
marked.use = function(...args) {
  markedInstance.use(...args);
  marked.defaults = markedInstance.defaults;
  changeDefaults(marked.defaults);
  return marked;
};
marked.walkTokens = function(tokens, callback) {
  return markedInstance.walkTokens(tokens, callback);
};
marked.parseInline = markedInstance.parseInline;
marked.Parser = _Parser;
marked.parser = _Parser.parse;
marked.Renderer = _Renderer;
marked.TextRenderer = _TextRenderer;
marked.Lexer = _Lexer;
marked.lexer = _Lexer.lex;
marked.Tokenizer = _Tokenizer;
marked.Hooks = _Hooks;
marked.parse = marked;
marked.options;
marked.setOptions;
marked.use;
marked.walkTokens;
marked.parseInline;
_Parser.parse;
_Lexer.lex;
var aliyunOssSdk = { exports: {} };
(function(module2, exports2) {
  (function(global2) {
    (function(f2) {
      {
        module2.exports = f2();
      }
    })(function() {
      return (/* @__PURE__ */ function() {
        function r(e2, n2, t2) {
          function o2(i2, f2) {
            if (!n2[i2]) {
              if (!e2[i2]) {
                var c = "function" == typeof commonjsRequire && commonjsRequire;
                if (!f2 && c)
                  return c(i2, true);
                if (u)
                  return u(i2, true);
                var a = new Error("Cannot find module '" + i2 + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }
              var p2 = n2[i2] = { exports: {} };
              e2[i2][0].call(p2.exports, function(r2) {
                var n3 = e2[i2][1][r2];
                return o2(n3 || r2);
              }, p2, p2.exports, r, e2, n2, t2);
            }
            return n2[i2].exports;
          }
          for (var u = "function" == typeof commonjsRequire && commonjsRequire, i = 0; i < t2.length; i++)
            o2(t2[i]);
          return o2;
        }
        return r;
      }())({ 1: [function(require2, module3, exports3) {
        var OSS2 = require2("./browser/client");
        OSS2.Buffer = require2("buffer").Buffer;
        OSS2.urllib = require2("../shims/xhr");
        OSS2.version = require2("./browser/version").version;
        module3.exports = OSS2;
      }, { "../shims/xhr": 546, "./browser/client": 3, "./browser/version": 6, "buffer": 103 }], 2: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.array.slice.js");
        var assert = require2("assert");
        var _require = require2("../common/utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var proto = exports3;
        function isArray2(arr) {
          if (Array.isArray)
            return Array.isArray(arr);
          return Object.prototype.toString.call(arr) === "[object Array]";
        }
        function toArray(obj) {
          if (!obj)
            return [];
          if (isArray2(obj))
            return obj;
          return [obj];
        }
        proto.useBucket = function useBucket(name) {
          _checkBucketName(name);
          this.options.bucket = name;
          return this;
        };
        proto.setBucket = function useBucket(name) {
          _checkBucketName(name);
          this.options.bucket = name;
          return this;
        };
        proto.getBucket = function getBucket() {
          return this.options.bucket;
        };
        proto.deleteBucket = /* @__PURE__ */ function() {
          var _deleteBucket = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    params = this._bucketRequestParams("DELETE", name, "", options);
                    _context.next = 3;
                    return this.request(params);
                  case 3:
                    result = _context.sent;
                    if (!(result.status === 200 || result.status === 204)) {
                      _context.next = 6;
                      break;
                    }
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 6:
                    _context.next = 8;
                    return this.requestError(result);
                  case 8:
                    throw _context.sent;
                  case 9:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function deleteBucket(_x, _x2) {
            return _deleteBucket.apply(this, arguments);
          }
          return deleteBucket;
        }();
        proto.putBucketACL = /* @__PURE__ */ function() {
          var _putBucketACL = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name, acl, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee2$(_context2) {
              while (1)
                switch (_context2.prev = _context2.next) {
                  case 0:
                    params = this._bucketRequestParams("PUT", name, "acl", options);
                    params.headers = {
                      "x-oss-acl": acl
                    };
                    params.successStatuses = [200];
                    _context2.next = 5;
                    return this.request(params);
                  case 5:
                    result = _context2.sent;
                    return _context2.abrupt("return", {
                      bucket: result.headers.location && result.headers.location.substring(1) || null,
                      res: result.res
                    });
                  case 7:
                  case "end":
                    return _context2.stop();
                }
            }, _callee2, this);
          }));
          function putBucketACL(_x3, _x4, _x5) {
            return _putBucketACL.apply(this, arguments);
          }
          return putBucketACL;
        }();
        proto.getBucketACL = /* @__PURE__ */ function() {
          var _getBucketACL = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee3$(_context3) {
              while (1)
                switch (_context3.prev = _context3.next) {
                  case 0:
                    params = this._bucketRequestParams("GET", name, "acl", options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context3.next = 5;
                    return this.request(params);
                  case 5:
                    result = _context3.sent;
                    return _context3.abrupt("return", {
                      acl: result.data.AccessControlList.Grant,
                      owner: {
                        id: result.data.Owner.ID,
                        displayName: result.data.Owner.DisplayName
                      },
                      res: result.res
                    });
                  case 7:
                  case "end":
                    return _context3.stop();
                }
            }, _callee3, this);
          }));
          function getBucketACL(_x6, _x7) {
            return _getBucketACL.apply(this, arguments);
          }
          return getBucketACL;
        }();
        proto.putBucketLogging = /* @__PURE__ */ function() {
          var _putBucketLogging = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(name, prefix, options) {
            var params, xml2, result;
            return _regenerator.default.wrap(function _callee4$(_context4) {
              while (1)
                switch (_context4.prev = _context4.next) {
                  case 0:
                    params = this._bucketRequestParams("PUT", name, "logging", options);
                    xml2 = '<?xml version="1.0" encoding="UTF-8"?>\n<BucketLoggingStatus>\n<LoggingEnabled>\n<TargetBucket>'.concat(name, "</TargetBucket>\n");
                    if (prefix) {
                      xml2 += "<TargetPrefix>".concat(prefix, "</TargetPrefix>\n");
                    }
                    xml2 += "</LoggingEnabled>\n</BucketLoggingStatus>";
                    params.content = xml2;
                    params.mime = "xml";
                    params.successStatuses = [200];
                    _context4.next = 9;
                    return this.request(params);
                  case 9:
                    result = _context4.sent;
                    return _context4.abrupt("return", {
                      res: result.res
                    });
                  case 11:
                  case "end":
                    return _context4.stop();
                }
            }, _callee4, this);
          }));
          function putBucketLogging(_x8, _x9, _x10) {
            return _putBucketLogging.apply(this, arguments);
          }
          return putBucketLogging;
        }();
        proto.getBucketLogging = /* @__PURE__ */ function() {
          var _getBucketLogging = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(name, options) {
            var params, result, enable;
            return _regenerator.default.wrap(function _callee5$(_context5) {
              while (1)
                switch (_context5.prev = _context5.next) {
                  case 0:
                    params = this._bucketRequestParams("GET", name, "logging", options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context5.next = 5;
                    return this.request(params);
                  case 5:
                    result = _context5.sent;
                    enable = result.data.LoggingEnabled;
                    return _context5.abrupt("return", {
                      enable: !!enable,
                      prefix: enable && enable.TargetPrefix || null,
                      res: result.res
                    });
                  case 8:
                  case "end":
                    return _context5.stop();
                }
            }, _callee5, this);
          }));
          function getBucketLogging(_x11, _x12) {
            return _getBucketLogging.apply(this, arguments);
          }
          return getBucketLogging;
        }();
        proto.deleteBucketLogging = /* @__PURE__ */ function() {
          var _deleteBucketLogging = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee6$(_context6) {
              while (1)
                switch (_context6.prev = _context6.next) {
                  case 0:
                    params = this._bucketRequestParams("DELETE", name, "logging", options);
                    params.successStatuses = [204, 200];
                    _context6.next = 4;
                    return this.request(params);
                  case 4:
                    result = _context6.sent;
                    return _context6.abrupt("return", {
                      res: result.res
                    });
                  case 6:
                  case "end":
                    return _context6.stop();
                }
            }, _callee6, this);
          }));
          function deleteBucketLogging(_x13, _x14) {
            return _deleteBucketLogging.apply(this, arguments);
          }
          return deleteBucketLogging;
        }();
        proto.putBucketCORS = /* @__PURE__ */ function() {
          var _putBucketCORS = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7(name, rules, options) {
            var params, xml2, parseOrigin, parseMethod, parseHeader, parseExposeHeader, i, l, rule, result;
            return _regenerator.default.wrap(function _callee7$(_context7) {
              while (1)
                switch (_context7.prev = _context7.next) {
                  case 0:
                    rules = rules || [];
                    assert(rules.length, "rules is required");
                    rules.forEach(function(rule2) {
                      assert(rule2.allowedOrigin, "allowedOrigin is required");
                      assert(rule2.allowedMethod, "allowedMethod is required");
                    });
                    params = this._bucketRequestParams("PUT", name, "cors", options);
                    xml2 = '<?xml version="1.0" encoding="UTF-8"?>\n<CORSConfiguration>';
                    parseOrigin = function parseOrigin2(val) {
                      xml2 += "<AllowedOrigin>".concat(val, "</AllowedOrigin>");
                    };
                    parseMethod = function parseMethod2(val) {
                      xml2 += "<AllowedMethod>".concat(val, "</AllowedMethod>");
                    };
                    parseHeader = function parseHeader2(val) {
                      xml2 += "<AllowedHeader>".concat(val, "</AllowedHeader>");
                    };
                    parseExposeHeader = function parseExposeHeader2(val) {
                      xml2 += "<ExposeHeader>".concat(val, "</ExposeHeader>");
                    };
                    for (i = 0, l = rules.length; i < l; i++) {
                      rule = rules[i];
                      xml2 += "<CORSRule>";
                      toArray(rule.allowedOrigin).forEach(parseOrigin);
                      toArray(rule.allowedMethod).forEach(parseMethod);
                      toArray(rule.allowedHeader).forEach(parseHeader);
                      toArray(rule.exposeHeader).forEach(parseExposeHeader);
                      if (rule.maxAgeSeconds) {
                        xml2 += "<MaxAgeSeconds>".concat(rule.maxAgeSeconds, "</MaxAgeSeconds>");
                      }
                      xml2 += "</CORSRule>";
                    }
                    xml2 += "</CORSConfiguration>";
                    params.content = xml2;
                    params.mime = "xml";
                    params.successStatuses = [200];
                    _context7.next = 16;
                    return this.request(params);
                  case 16:
                    result = _context7.sent;
                    return _context7.abrupt("return", {
                      res: result.res
                    });
                  case 18:
                  case "end":
                    return _context7.stop();
                }
            }, _callee7, this);
          }));
          function putBucketCORS(_x15, _x16, _x17) {
            return _putBucketCORS.apply(this, arguments);
          }
          return putBucketCORS;
        }();
        proto.getBucketCORS = /* @__PURE__ */ function() {
          var _getBucketCORS = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8(name, options) {
            var params, result, rules, CORSRule;
            return _regenerator.default.wrap(function _callee8$(_context8) {
              while (1)
                switch (_context8.prev = _context8.next) {
                  case 0:
                    params = this._bucketRequestParams("GET", name, "cors", options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context8.next = 5;
                    return this.request(params);
                  case 5:
                    result = _context8.sent;
                    rules = [];
                    if (result.data && result.data.CORSRule) {
                      CORSRule = result.data.CORSRule;
                      if (!isArray2(CORSRule))
                        CORSRule = [CORSRule];
                      CORSRule.forEach(function(rule) {
                        var r = {};
                        Object.keys(rule).forEach(function(key) {
                          r[key.slice(0, 1).toLowerCase() + key.slice(1, key.length)] = rule[key];
                        });
                        rules.push(r);
                      });
                    }
                    return _context8.abrupt("return", {
                      rules,
                      res: result.res
                    });
                  case 9:
                  case "end":
                    return _context8.stop();
                }
            }, _callee8, this);
          }));
          function getBucketCORS(_x18, _x19) {
            return _getBucketCORS.apply(this, arguments);
          }
          return getBucketCORS;
        }();
        proto.deleteBucketCORS = /* @__PURE__ */ function() {
          var _deleteBucketCORS = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee9(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee9$(_context9) {
              while (1)
                switch (_context9.prev = _context9.next) {
                  case 0:
                    params = this._bucketRequestParams("DELETE", name, "cors", options);
                    params.successStatuses = [204];
                    _context9.next = 4;
                    return this.request(params);
                  case 4:
                    result = _context9.sent;
                    return _context9.abrupt("return", {
                      res: result.res
                    });
                  case 6:
                  case "end":
                    return _context9.stop();
                }
            }, _callee9, this);
          }));
          function deleteBucketCORS(_x20, _x21) {
            return _deleteBucketCORS.apply(this, arguments);
          }
          return deleteBucketCORS;
        }();
        proto.putBucketReferer = /* @__PURE__ */ function() {
          var _putBucketReferer = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee10(name, allowEmpty, referers, options) {
            var params, xml2, i, result;
            return _regenerator.default.wrap(function _callee10$(_context10) {
              while (1)
                switch (_context10.prev = _context10.next) {
                  case 0:
                    params = this._bucketRequestParams("PUT", name, "referer", options);
                    xml2 = '<?xml version="1.0" encoding="UTF-8"?>\n<RefererConfiguration>\n';
                    xml2 += "  <AllowEmptyReferer>".concat(allowEmpty ? "true" : "false", "</AllowEmptyReferer>\n");
                    if (referers && referers.length > 0) {
                      xml2 += "  <RefererList>\n";
                      for (i = 0; i < referers.length; i++) {
                        xml2 += "    <Referer>".concat(referers[i], "</Referer>\n");
                      }
                      xml2 += "  </RefererList>\n";
                    } else {
                      xml2 += "  <RefererList />\n";
                    }
                    xml2 += "</RefererConfiguration>";
                    params.content = xml2;
                    params.mime = "xml";
                    params.successStatuses = [200];
                    _context10.next = 10;
                    return this.request(params);
                  case 10:
                    result = _context10.sent;
                    return _context10.abrupt("return", {
                      res: result.res
                    });
                  case 12:
                  case "end":
                    return _context10.stop();
                }
            }, _callee10, this);
          }));
          function putBucketReferer(_x22, _x23, _x24, _x25) {
            return _putBucketReferer.apply(this, arguments);
          }
          return putBucketReferer;
        }();
        proto.getBucketReferer = /* @__PURE__ */ function() {
          var _getBucketReferer = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee11(name, options) {
            var params, result, referers;
            return _regenerator.default.wrap(function _callee11$(_context11) {
              while (1)
                switch (_context11.prev = _context11.next) {
                  case 0:
                    params = this._bucketRequestParams("GET", name, "referer", options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context11.next = 5;
                    return this.request(params);
                  case 5:
                    result = _context11.sent;
                    referers = result.data.RefererList.Referer || null;
                    if (referers) {
                      if (!isArray2(referers)) {
                        referers = [referers];
                      }
                    }
                    return _context11.abrupt("return", {
                      allowEmpty: result.data.AllowEmptyReferer === "true",
                      referers,
                      res: result.res
                    });
                  case 9:
                  case "end":
                    return _context11.stop();
                }
            }, _callee11, this);
          }));
          function getBucketReferer(_x26, _x27) {
            return _getBucketReferer.apply(this, arguments);
          }
          return getBucketReferer;
        }();
        proto.deleteBucketReferer = /* @__PURE__ */ function() {
          var _deleteBucketReferer = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee12(name, options) {
            return _regenerator.default.wrap(function _callee12$(_context12) {
              while (1)
                switch (_context12.prev = _context12.next) {
                  case 0:
                    _context12.next = 2;
                    return this.putBucketReferer(name, true, null, options);
                  case 2:
                    return _context12.abrupt("return", _context12.sent);
                  case 3:
                  case "end":
                    return _context12.stop();
                }
            }, _callee12, this);
          }));
          function deleteBucketReferer(_x28, _x29) {
            return _deleteBucketReferer.apply(this, arguments);
          }
          return deleteBucketReferer;
        }();
        proto._bucketRequestParams = function _bucketRequestParams(method, bucket, subres, options) {
          return {
            method,
            bucket,
            subres,
            additionalHeaders: options && options.additionalHeaders,
            timeout: options && options.timeout,
            ctx: options && options.ctx
          };
        };
      }, { "../common/utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "assert": 95, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/web.dom-collections.for-each.js": 380 }], 3: [function(require2, module3, exports3) {
        (function(Buffer2, process) {
          (function() {
            var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
            var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
            var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
            require2("core-js/modules/es.function.name.js");
            require2("core-js/modules/es.object.assign.js");
            require2("core-js/modules/es.array.includes.js");
            require2("core-js/modules/es.regexp.exec.js");
            require2("core-js/modules/es.string.replace.js");
            require2("core-js/modules/es.array.concat.js");
            require2("core-js/modules/es.symbol.js");
            require2("core-js/modules/es.symbol.description.js");
            require2("core-js/modules/es.array.slice.js");
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.promise.js");
            require2("core-js/modules/es.regexp.to-string.js");
            var debug = require2("debug")("ali-oss");
            var xml2 = require2("xml2js");
            var AgentKeepalive = require2("agentkeepalive");
            var merge = require2("merge-descriptors");
            var platform = require2("platform");
            var utility = require2("utility");
            var urllib = require2("urllib");
            var pkg = require2("./version");
            var bowser = require2("bowser");
            var signUtils = require2("../common/signUtils");
            var _initOptions = require2("../common/client/initOptions");
            var _require = require2("../common/utils/createRequest"), createRequest = _require.createRequest;
            var _require2 = require2("../common/utils/encoder"), encoder = _require2.encoder;
            var _require3 = require2("../common/client/getReqUrl"), getReqUrl = _require3.getReqUrl;
            var _require4 = require2("../common/utils/setSTSToken"), setSTSToken = _require4.setSTSToken;
            var _require5 = require2("../common/utils/retry"), retry = _require5.retry;
            var _require6 = require2("../common/utils/isFunction"), isFunction2 = _require6.isFunction;
            var _require7 = require2("../common/utils/getStandardRegion"), getStandardRegion = _require7.getStandardRegion;
            var globalHttpAgent = new AgentKeepalive();
            function _unSupportBrowserTip() {
              var name = platform.name, version2 = platform.version;
              if (name && name.toLowerCase && name.toLowerCase() === "ie" && version2.split(".")[0] < 10) {
                console.warn("ali-oss does not support the current browser");
              }
            }
            function isHttpsWebProtocol() {
              return location && location.protocol === "https:";
            }
            function Client(options, ctx) {
              _unSupportBrowserTip();
              if (!(this instanceof Client)) {
                return new Client(options, ctx);
              }
              if (options && options.inited) {
                this.options = options;
              } else {
                this.options = Client.initOptions(options);
              }
              this.options.cancelFlag = false;
              if (this.options.urllib) {
                this.urllib = this.options.urllib;
              } else {
                this.urllib = urllib;
                this.agent = this.options.agent || globalHttpAgent;
              }
              this.ctx = ctx;
              this.userAgent = this._getUserAgent();
              this.stsTokenFreshTime = /* @__PURE__ */ new Date();
              this.options.amendTimeSkewed = 0;
            }
            module3.exports = Client;
            Client.initOptions = function initOptions(options) {
              if (!options.stsToken) {
                console.warn("Please use STS Token for safety, see more details at https://help.aliyun.com/document_detail/32077.html");
              }
              var opts = Object.assign({
                secure: isHttpsWebProtocol(),
                // for browser compatibility disable fetch.
                useFetch: false
              }, options);
              return _initOptions(opts);
            };
            var proto = Client.prototype;
            proto.debug = debug;
            merge(proto, require2("./object"));
            merge(proto, require2("./bucket"));
            merge(proto, require2("../common/bucket/getBucketWebsite"));
            merge(proto, require2("../common/bucket/putBucketWebsite"));
            merge(proto, require2("../common/bucket/deleteBucketWebsite"));
            merge(proto, require2("../common/bucket/getBucketLifecycle"));
            merge(proto, require2("../common/bucket/putBucketLifecycle"));
            merge(proto, require2("../common/bucket/deleteBucketLifecycle"));
            merge(proto, require2("../common/bucket/putBucketVersioning"));
            merge(proto, require2("../common/bucket/getBucketVersioning"));
            merge(proto, require2("../common/bucket/getBucketInventory"));
            merge(proto, require2("../common/bucket/deleteBucketInventory"));
            merge(proto, require2("../common/bucket/listBucketInventory"));
            merge(proto, require2("../common/bucket/putBucketInventory"));
            merge(proto, require2("../common/bucket/abortBucketWorm"));
            merge(proto, require2("../common/bucket/completeBucketWorm"));
            merge(proto, require2("../common/bucket/extendBucketWorm"));
            merge(proto, require2("../common/bucket/getBucketWorm"));
            merge(proto, require2("../common/bucket/initiateBucketWorm"));
            merge(proto, require2("./managed-upload"));
            merge(proto, require2("../common/multipart-copy"));
            merge(proto, require2("../common/multipart"));
            merge(proto, require2("../common/parallel"));
            proto.signature = function signature(stringToSign) {
              this.debug("authorization stringToSign: %s", stringToSign, "info");
              return signUtils.computeSignature(this.options.accessKeySecret, stringToSign, this.options.headerEncoding);
            };
            proto._getReqUrl = getReqUrl;
            proto.authorization = function authorization(method, resource, subres, headers) {
              var stringToSign = signUtils.buildCanonicalString(method.toUpperCase(), resource, {
                headers,
                parameters: subres
              });
              return signUtils.authorization(this.options.accessKeyId, this.options.accessKeySecret, stringToSign, this.options.headerEncoding);
            };
            proto.authorizationV4 = function authorizationV4(method, requestParams, bucketName, objectName, additionalHeaders) {
              return signUtils.authorizationV4(this.options.accessKeyId, this.options.accessKeySecret, getStandardRegion(this.options.region), method, requestParams, bucketName, objectName, additionalHeaders, this.options.headerEncoding);
            };
            proto.request = /* @__PURE__ */ function() {
              var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(params) {
                var _this = this;
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!this.options.retryMax) {
                          _context.next = 6;
                          break;
                        }
                        _context.next = 3;
                        return retry(request.bind(this), this.options.retryMax, {
                          errorHandler: function errorHandler(err) {
                            var _errHandle = function _errHandle2(_err) {
                              if (params.stream)
                                return false;
                              var statusErr = [-1, -2].includes(_err.status);
                              var requestErrorRetryHandle = _this.options.requestErrorRetryHandle || function() {
                                return true;
                              };
                              return statusErr && requestErrorRetryHandle(_err);
                            };
                            if (_errHandle(err))
                              return true;
                            return false;
                          }
                        })(params);
                      case 3:
                        return _context.abrupt("return", _context.sent);
                      case 6:
                        return _context.abrupt("return", request.call(this, params));
                      case 7:
                      case "end":
                        return _context.stop();
                    }
                }, _callee, this);
              }));
              return function(_x) {
                return _ref.apply(this, arguments);
              };
            }();
            function request(_x2) {
              return _request.apply(this, arguments);
            }
            function _request() {
              _request = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(params) {
                var reqParams, result, reqErr, useStream, err, parseData;
                return _regenerator.default.wrap(function _callee4$(_context4) {
                  while (1)
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!(this.options.stsToken && isFunction2(this.options.refreshSTSToken))) {
                          _context4.next = 3;
                          break;
                        }
                        _context4.next = 3;
                        return setSTSToken.call(this);
                      case 3:
                        reqParams = createRequest.call(this, params);
                        if (!this.options.useFetch) {
                          reqParams.params.mode = "disable-fetch";
                        }
                        useStream = !!params.stream;
                        _context4.prev = 6;
                        _context4.next = 9;
                        return this.urllib.request(reqParams.url, reqParams.params);
                      case 9:
                        result = _context4.sent;
                        this.debug("response %s %s, got %s, headers: %j", params.method, reqParams.url, result.status, result.headers, "info");
                        _context4.next = 16;
                        break;
                      case 13:
                        _context4.prev = 13;
                        _context4.t0 = _context4["catch"](6);
                        reqErr = _context4.t0;
                      case 16:
                        if (!(result && params.successStatuses && params.successStatuses.indexOf(result.status) === -1)) {
                          _context4.next = 28;
                          break;
                        }
                        _context4.next = 19;
                        return this.requestError(result);
                      case 19:
                        err = _context4.sent;
                        if (!(err.code === "RequestTimeTooSkewed" && !useStream)) {
                          _context4.next = 25;
                          break;
                        }
                        this.options.amendTimeSkewed = +new Date(err.serverTime) - /* @__PURE__ */ new Date();
                        _context4.next = 24;
                        return this.request(params);
                      case 24:
                        return _context4.abrupt("return", _context4.sent);
                      case 25:
                        err.params = params;
                        _context4.next = 32;
                        break;
                      case 28:
                        if (!reqErr) {
                          _context4.next = 32;
                          break;
                        }
                        _context4.next = 31;
                        return this.requestError(reqErr);
                      case 31:
                        err = _context4.sent;
                      case 32:
                        if (!err) {
                          _context4.next = 34;
                          break;
                        }
                        throw err;
                      case 34:
                        if (!params.xmlResponse) {
                          _context4.next = 39;
                          break;
                        }
                        _context4.next = 37;
                        return this.parseXML(result.data);
                      case 37:
                        parseData = _context4.sent;
                        result.data = parseData;
                      case 39:
                        return _context4.abrupt("return", result);
                      case 40:
                      case "end":
                        return _context4.stop();
                    }
                }, _callee4, this, [[6, 13]]);
              }));
              return _request.apply(this, arguments);
            }
            proto._getResource = function _getResource(params) {
              var resource = "/";
              if (params.bucket)
                resource += "".concat(params.bucket, "/");
              if (params.object)
                resource += encoder(params.object, this.options.headerEncoding);
              return resource;
            };
            proto._escape = function _escape(name) {
              return utility.encodeURIComponent(name).replace(/%2F/g, "/");
            };
            proto._getUserAgent = function _getUserAgent() {
              var agent = process && process.browser ? "js" : "nodejs";
              var sdk = "aliyun-sdk-".concat(agent, "/").concat(pkg.version);
              var plat = platform.description;
              if (!plat && process) {
                plat = "Node.js ".concat(process.version.slice(1), " on ").concat(process.platform, " ").concat(process.arch);
              }
              return this._checkUserAgent("".concat(sdk, " ").concat(plat));
            };
            proto._checkUserAgent = function _checkUserAgent(ua) {
              var userAgent = ua.replace(/\u03b1/, "alpha").replace(/\u03b2/, "beta");
              return userAgent;
            };
            proto.checkBrowserAndVersion = function checkBrowserAndVersion(name, version2) {
              return bowser.name === name && bowser.version.split(".")[0] === version2;
            };
            proto.parseXML = function parseXMLThunk(str) {
              return new Promise(function(resolve2, reject) {
                if (Buffer2.isBuffer(str)) {
                  str = str.toString();
                }
                xml2.parseString(str, {
                  explicitRoot: false,
                  explicitArray: false
                }, function(err, result) {
                  if (err) {
                    reject(err);
                  } else {
                    resolve2(result);
                  }
                });
              });
            };
            proto.requestError = /* @__PURE__ */ function() {
              var _requestError = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(result) {
                var _this2 = this;
                var err, setError, ossErr, message, _message;
                return _regenerator.default.wrap(function _callee3$(_context3) {
                  while (1)
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        err = null;
                        setError = /* @__PURE__ */ function() {
                          var _ref2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(message2) {
                            var info, msg;
                            return _regenerator.default.wrap(function _callee2$(_context2) {
                              while (1)
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    _context2.prev = 0;
                                    _context2.next = 3;
                                    return _this2.parseXML(message2);
                                  case 3:
                                    _context2.t0 = _context2.sent;
                                    if (_context2.t0) {
                                      _context2.next = 6;
                                      break;
                                    }
                                    _context2.t0 = {};
                                  case 6:
                                    info = _context2.t0;
                                    _context2.next = 16;
                                    break;
                                  case 9:
                                    _context2.prev = 9;
                                    _context2.t1 = _context2["catch"](0);
                                    _this2.debug(message2, "error");
                                    _context2.t1.message += "\nraw xml: ".concat(message2);
                                    _context2.t1.status = result.status;
                                    _context2.t1.requestId = result.headers && result.headers["x-oss-request-id"];
                                    return _context2.abrupt("return", _context2.t1);
                                  case 16:
                                    msg = info.Message || "unknow request error, status: ".concat(result.status);
                                    if (info.Condition) {
                                      msg += " (condition: ".concat(info.Condition, ")");
                                    }
                                    err = new Error(msg);
                                    err.name = info.Code ? "".concat(info.Code, "Error") : "UnknownError";
                                    err.status = result.status;
                                    err.code = info.Code;
                                    err.ecCode = info.EC;
                                    err.requestId = info.RequestId;
                                    err.hostId = info.HostId;
                                    err.serverTime = info.ServerTime;
                                    return _context2.abrupt("return", err);
                                  case 27:
                                  case "end":
                                    return _context2.stop();
                                }
                            }, _callee2, null, [[0, 9]]);
                          }));
                          return function setError2(_x4) {
                            return _ref2.apply(this, arguments);
                          };
                        }();
                        if (!(!result.data || !result.data.length)) {
                          _context3.next = 38;
                          break;
                        }
                        if (!(result.status === -1 || result.status === -2)) {
                          _context3.next = 10;
                          break;
                        }
                        err = new Error(result.message);
                        err.name = result.name;
                        err.status = result.status;
                        err.code = result.name;
                        _context3.next = 36;
                        break;
                      case 10:
                        if (!(result.status === 404)) {
                          _context3.next = 17;
                          break;
                        }
                        err = new Error("Object not exists");
                        err.name = "NoSuchKeyError";
                        err.status = 404;
                        err.code = "NoSuchKey";
                        _context3.next = 34;
                        break;
                      case 17:
                        if (!(result.status === 412)) {
                          _context3.next = 24;
                          break;
                        }
                        err = new Error("Pre condition failed");
                        err.name = "PreconditionFailedError";
                        err.status = 412;
                        err.code = "PreconditionFailed";
                        _context3.next = 34;
                        break;
                      case 24:
                        err = new Error("Unknow error, status: ".concat(result.status));
                        err.name = "UnknownError";
                        err.status = result.status;
                        err.res = result;
                        ossErr = result.headers && result.headers["x-oss-err"];
                        if (!ossErr) {
                          _context3.next = 34;
                          break;
                        }
                        message = atob(ossErr);
                        _context3.next = 33;
                        return setError(message);
                      case 33:
                        err = _context3.sent;
                      case 34:
                        err.requestId = result.headers && result.headers["x-oss-request-id"];
                        err.host = "";
                      case 36:
                        _context3.next = 43;
                        break;
                      case 38:
                        _message = String(result.data);
                        this.debug("request response error data: %s", _message, "error");
                        _context3.next = 42;
                        return setError(_message);
                      case 42:
                        err = _context3.sent;
                      case 43:
                        this.debug("generate error %j", err, "error");
                        return _context3.abrupt("return", err);
                      case 45:
                      case "end":
                        return _context3.stop();
                    }
                }, _callee3, this);
              }));
              function requestError(_x3) {
                return _requestError.apply(this, arguments);
              }
              return requestError;
            }();
          }).call(this);
        }).call(this, { "isBuffer": require2("../../node_modules/is-buffer/index.js") }, require2("_process"));
      }, { "../../node_modules/is-buffer/index.js": 409, "../common/bucket/abortBucketWorm": 7, "../common/bucket/completeBucketWorm": 8, "../common/bucket/deleteBucketInventory": 9, "../common/bucket/deleteBucketLifecycle": 10, "../common/bucket/deleteBucketWebsite": 11, "../common/bucket/extendBucketWorm": 12, "../common/bucket/getBucketInventory": 13, "../common/bucket/getBucketLifecycle": 14, "../common/bucket/getBucketVersioning": 15, "../common/bucket/getBucketWebsite": 16, "../common/bucket/getBucketWorm": 17, "../common/bucket/initiateBucketWorm": 18, "../common/bucket/listBucketInventory": 19, "../common/bucket/putBucketInventory": 20, "../common/bucket/putBucketLifecycle": 21, "../common/bucket/putBucketVersioning": 22, "../common/bucket/putBucketWebsite": 23, "../common/client/getReqUrl": 25, "../common/client/initOptions": 26, "../common/multipart": 30, "../common/multipart-copy": 29, "../common/parallel": 51, "../common/signUtils": 52, "../common/utils/createRequest": 58, "../common/utils/encoder": 62, "../common/utils/getStandardRegion": 65, "../common/utils/isFunction": 72, "../common/utils/retry": 80, "../common/utils/setSTSToken": 82, "./bucket": 2, "./managed-upload": 4, "./object": 5, "./version": 6, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "_process": 538, "agentkeepalive": 94, "bowser": 101, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.replace.js": 345, "core-js/modules/es.symbol.description.js": 351, "core-js/modules/es.symbol.js": 354, "debug": 536, "merge-descriptors": 428, "platform": 440, "urllib": 546, "utility": 545, "xml2js": 496 }], 4: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
            var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
            require2("core-js/modules/es.function.name.js");
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.promise.js");
            require2("core-js/modules/es.array.from.js");
            require2("core-js/modules/es.string.iterator.js");
            require2("core-js/modules/es.array.map.js");
            require2("core-js/modules/es.array.filter.js");
            require2("core-js/modules/es.array.find.js");
            require2("core-js/modules/es.array.concat.js");
            require2("core-js/modules/es.regexp.to-string.js");
            require2("core-js/modules/es.array.slice.js");
            require2("core-js/modules/es.array.iterator.js");
            require2("core-js/modules/es.array-buffer.slice.js");
            require2("core-js/modules/es.typed-array.uint8-array.js");
            require2("core-js/modules/es.typed-array.copy-within.js");
            require2("core-js/modules/es.typed-array.every.js");
            require2("core-js/modules/es.typed-array.fill.js");
            require2("core-js/modules/es.typed-array.filter.js");
            require2("core-js/modules/es.typed-array.find.js");
            require2("core-js/modules/es.typed-array.find-index.js");
            require2("core-js/modules/es.typed-array.for-each.js");
            require2("core-js/modules/es.typed-array.includes.js");
            require2("core-js/modules/es.typed-array.index-of.js");
            require2("core-js/modules/es.typed-array.iterator.js");
            require2("core-js/modules/es.typed-array.join.js");
            require2("core-js/modules/es.typed-array.last-index-of.js");
            require2("core-js/modules/es.typed-array.map.js");
            require2("core-js/modules/es.typed-array.reduce.js");
            require2("core-js/modules/es.typed-array.reduce-right.js");
            require2("core-js/modules/es.typed-array.reverse.js");
            require2("core-js/modules/es.typed-array.set.js");
            require2("core-js/modules/es.typed-array.slice.js");
            require2("core-js/modules/es.typed-array.some.js");
            require2("core-js/modules/es.typed-array.sort.js");
            require2("core-js/modules/es.typed-array.subarray.js");
            require2("core-js/modules/es.typed-array.to-locale-string.js");
            require2("core-js/modules/es.typed-array.to-string.js");
            var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
            var util = require2("util");
            var path = require2("path");
            var mime = require2("mime");
            var copy = require2("copy-to");
            var _require = require2("../common/utils/isBlob"), isBlob = _require.isBlob;
            var _require2 = require2("../common/utils/isFile"), isFile = _require2.isFile;
            var _require3 = require2("../common/utils/isBuffer"), isBuffer = _require3.isBuffer;
            var proto = exports3;
            proto.multipartUpload = /* @__PURE__ */ function() {
              var _multipartUpload = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, file) {
                var options, minPartSize, fileSize, result, ret, initResult, uploadId, partSize, checkpoint, _args = arguments;
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
                        this.resetCancelFlag();
                        options.disabledMD5 = options.disabledMD5 === void 0 ? true : !!options.disabledMD5;
                        if (!(options.checkpoint && options.checkpoint.uploadId)) {
                          _context.next = 8;
                          break;
                        }
                        if (file && isFile(file))
                          options.checkpoint.file = file;
                        _context.next = 7;
                        return this._resumeMultipart(options.checkpoint, options);
                      case 7:
                        return _context.abrupt("return", _context.sent);
                      case 8:
                        minPartSize = 100 * 1024;
                        if (!options.mime) {
                          if (isFile(file)) {
                            options.mime = mime.getType(path.extname(file.name));
                          } else if (isBlob(file)) {
                            options.mime = file.type;
                          } else if (isBuffer(file)) {
                            options.mime = "";
                          } else {
                            options.mime = mime.getType(path.extname(file));
                          }
                        }
                        options.headers = options.headers || {};
                        this._convertMetaToHeaders(options.meta, options.headers);
                        _context.next = 14;
                        return this._getFileSize(file);
                      case 14:
                        fileSize = _context.sent;
                        if (!(fileSize < minPartSize)) {
                          _context.next = 26;
                          break;
                        }
                        options.contentLength = fileSize;
                        _context.next = 19;
                        return this.put(name, file, options);
                      case 19:
                        result = _context.sent;
                        if (!(options && options.progress)) {
                          _context.next = 23;
                          break;
                        }
                        _context.next = 23;
                        return options.progress(1);
                      case 23:
                        ret = {
                          res: result.res,
                          bucket: this.options.bucket,
                          name,
                          etag: result.res.headers.etag
                        };
                        if (options.headers && options.headers["x-oss-callback"] || options.callback) {
                          ret.data = result.data;
                        }
                        return _context.abrupt("return", ret);
                      case 26:
                        if (!(options.partSize && !(parseInt(options.partSize, 10) === options.partSize))) {
                          _context.next = 28;
                          break;
                        }
                        throw new Error("partSize must be int number");
                      case 28:
                        if (!(options.partSize && options.partSize < minPartSize)) {
                          _context.next = 30;
                          break;
                        }
                        throw new Error("partSize must not be smaller than ".concat(minPartSize));
                      case 30:
                        _context.next = 32;
                        return this.initMultipartUpload(name, options);
                      case 32:
                        initResult = _context.sent;
                        uploadId = initResult.uploadId;
                        partSize = this._getPartSize(fileSize, options.partSize);
                        checkpoint = {
                          file,
                          name,
                          fileSize,
                          partSize,
                          uploadId,
                          doneParts: []
                        };
                        if (!(options && options.progress)) {
                          _context.next = 39;
                          break;
                        }
                        _context.next = 39;
                        return options.progress(0, checkpoint, initResult.res);
                      case 39:
                        _context.next = 41;
                        return this._resumeMultipart(checkpoint, options);
                      case 41:
                        return _context.abrupt("return", _context.sent);
                      case 42:
                      case "end":
                        return _context.stop();
                    }
                }, _callee, this);
              }));
              function multipartUpload(_x, _x2) {
                return _multipartUpload.apply(this, arguments);
              }
              return multipartUpload;
            }();
            proto._resumeMultipart = /* @__PURE__ */ function() {
              var _resumeMultipart2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(checkpoint, options) {
                var that, file, fileSize, partSize, uploadId, doneParts, name, internalDoneParts, partOffs, numParts, multipartFinish, uploadPartJob, all, done, todo, defaultParallel, parallel, jobErr, abortEvent;
                return _regenerator.default.wrap(function _callee3$(_context3) {
                  while (1)
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        that = this;
                        if (!this.isCancel()) {
                          _context3.next = 3;
                          break;
                        }
                        throw this._makeCancelEvent();
                      case 3:
                        file = checkpoint.file, fileSize = checkpoint.fileSize, partSize = checkpoint.partSize, uploadId = checkpoint.uploadId, doneParts = checkpoint.doneParts, name = checkpoint.name;
                        internalDoneParts = [];
                        if (doneParts.length > 0) {
                          copy(doneParts).to(internalDoneParts);
                        }
                        partOffs = this._divideParts(fileSize, partSize);
                        numParts = partOffs.length;
                        multipartFinish = false;
                        uploadPartJob = function uploadPartJob2(self2, partNo) {
                          return new Promise(/* @__PURE__ */ function() {
                            var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(resolve2, reject) {
                              var pi, content, data, result, tempErr;
                              return _regenerator.default.wrap(function _callee2$(_context2) {
                                while (1)
                                  switch (_context2.prev = _context2.next) {
                                    case 0:
                                      _context2.prev = 0;
                                      if (self2.isCancel()) {
                                        _context2.next = 29;
                                        break;
                                      }
                                      pi = partOffs[partNo - 1];
                                      _context2.next = 5;
                                      return self2._createBuffer(file, pi.start, pi.end);
                                    case 5:
                                      content = _context2.sent;
                                      data = {
                                        content,
                                        size: pi.end - pi.start
                                      };
                                      _context2.prev = 7;
                                      _context2.next = 10;
                                      return self2._uploadPart(name, uploadId, partNo, data, options);
                                    case 10:
                                      result = _context2.sent;
                                      _context2.next = 18;
                                      break;
                                    case 13:
                                      _context2.prev = 13;
                                      _context2.t0 = _context2["catch"](7);
                                      if (!(_context2.t0.status === 404)) {
                                        _context2.next = 17;
                                        break;
                                      }
                                      throw self2._makeAbortEvent();
                                    case 17:
                                      throw _context2.t0;
                                    case 18:
                                      if (!(!self2.isCancel() && !multipartFinish)) {
                                        _context2.next = 26;
                                        break;
                                      }
                                      checkpoint.doneParts.push({
                                        number: partNo,
                                        etag: result.res.headers.etag
                                      });
                                      if (!options.progress) {
                                        _context2.next = 23;
                                        break;
                                      }
                                      _context2.next = 23;
                                      return options.progress(doneParts.length / (numParts + 1), checkpoint, result.res);
                                    case 23:
                                      resolve2({
                                        number: partNo,
                                        etag: result.res.headers.etag
                                      });
                                      _context2.next = 27;
                                      break;
                                    case 26:
                                      resolve2();
                                    case 27:
                                      _context2.next = 30;
                                      break;
                                    case 29:
                                      resolve2();
                                    case 30:
                                      _context2.next = 41;
                                      break;
                                    case 32:
                                      _context2.prev = 32;
                                      _context2.t1 = _context2["catch"](0);
                                      tempErr = new Error();
                                      tempErr.name = _context2.t1.name;
                                      tempErr.message = _context2.t1.message;
                                      tempErr.stack = _context2.t1.stack;
                                      tempErr.partNum = partNo;
                                      copy(_context2.t1).to(tempErr);
                                      reject(tempErr);
                                    case 41:
                                    case "end":
                                      return _context2.stop();
                                  }
                              }, _callee2, null, [[0, 32], [7, 13]]);
                            }));
                            return function(_x5, _x6) {
                              return _ref.apply(this, arguments);
                            };
                          }());
                        };
                        all = Array.from(new Array(numParts), function(x, i) {
                          return i + 1;
                        });
                        done = internalDoneParts.map(function(p2) {
                          return p2.number;
                        });
                        todo = all.filter(function(p2) {
                          return done.indexOf(p2) < 0;
                        });
                        defaultParallel = 5;
                        parallel = options.parallel || defaultParallel;
                        _context3.next = 17;
                        return this._parallel(todo, parallel, function(value) {
                          return new Promise(function(resolve2, reject) {
                            uploadPartJob(that, value).then(function(result) {
                              if (result) {
                                internalDoneParts.push(result);
                              }
                              resolve2();
                            }).catch(function(err) {
                              reject(err);
                            });
                          });
                        });
                      case 17:
                        jobErr = _context3.sent;
                        multipartFinish = true;
                        abortEvent = jobErr.find(function(err) {
                          return err.name === "abort";
                        });
                        if (!abortEvent) {
                          _context3.next = 22;
                          break;
                        }
                        throw abortEvent;
                      case 22:
                        if (!this.isCancel()) {
                          _context3.next = 25;
                          break;
                        }
                        uploadPartJob = null;
                        throw this._makeCancelEvent();
                      case 25:
                        if (!(jobErr && jobErr.length > 0)) {
                          _context3.next = 28;
                          break;
                        }
                        jobErr[0].message = "Failed to upload some parts with error: ".concat(jobErr[0].toString(), " part_num: ").concat(jobErr[0].partNum);
                        throw jobErr[0];
                      case 28:
                        _context3.next = 30;
                        return this.completeMultipartUpload(name, uploadId, internalDoneParts, options);
                      case 30:
                        return _context3.abrupt("return", _context3.sent);
                      case 31:
                      case "end":
                        return _context3.stop();
                    }
                }, _callee3, this);
              }));
              function _resumeMultipart(_x3, _x4) {
                return _resumeMultipart2.apply(this, arguments);
              }
              return _resumeMultipart;
            }();
            proto._getFileSize = /* @__PURE__ */ function() {
              var _getFileSize2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(file) {
                return _regenerator.default.wrap(function _callee4$(_context4) {
                  while (1)
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!isBuffer(file)) {
                          _context4.next = 4;
                          break;
                        }
                        return _context4.abrupt("return", file.length);
                      case 4:
                        if (!(isBlob(file) || isFile(file))) {
                          _context4.next = 6;
                          break;
                        }
                        return _context4.abrupt("return", file.size);
                      case 6:
                        throw new Error("_getFileSize requires Buffer/File/Blob.");
                      case 7:
                      case "end":
                        return _context4.stop();
                    }
                }, _callee4);
              }));
              function _getFileSize(_x7) {
                return _getFileSize2.apply(this, arguments);
              }
              return _getFileSize;
            }();
            var _require4 = require2("stream"), Readable = _require4.Readable;
            function WebFileReadStream(file, options) {
              if (!(this instanceof WebFileReadStream)) {
                return new WebFileReadStream(file, options);
              }
              Readable.call(this, options);
              this.file = file;
              this.reader = new FileReader();
              this.start = 0;
              this.finish = false;
              this.fileBuffer = null;
            }
            util.inherits(WebFileReadStream, Readable);
            WebFileReadStream.prototype.readFileAndPush = function readFileAndPush(size2) {
              if (this.fileBuffer) {
                var pushRet = true;
                while (pushRet && this.fileBuffer && this.start < this.fileBuffer.length) {
                  var start = this.start;
                  var end = start + size2;
                  end = end > this.fileBuffer.length ? this.fileBuffer.length : end;
                  this.start = end;
                  pushRet = this.push(this.fileBuffer.slice(start, end));
                }
              }
            };
            WebFileReadStream.prototype._read = function _read(size2) {
              if (this.file && this.start >= this.file.size || this.fileBuffer && this.start >= this.fileBuffer.length || this.finish || this.start === 0 && !this.file) {
                if (!this.finish) {
                  this.fileBuffer = null;
                  this.finish = true;
                }
                this.push(null);
                return;
              }
              var defaultReadSize = 16 * 1024;
              size2 = size2 || defaultReadSize;
              var that = this;
              this.reader.onload = function onload(e2) {
                that.fileBuffer = Buffer2.from(new Uint8Array(e2.target.result));
                that.file = null;
                that.readFileAndPush(size2);
              };
              if (this.start === 0) {
                this.reader.readAsArrayBuffer(this.file);
              } else {
                this.readFileAndPush(size2);
              }
            };
            function getBuffer(file) {
              if (file.arrayBuffer)
                return file.arrayBuffer();
              return new Promise(function(resolve2, reject) {
                var reader = new FileReader();
                reader.onload = function(e2) {
                  resolve2(e2.target.result);
                };
                reader.onerror = function(e2) {
                  reject(e2);
                };
                reader.readAsArrayBuffer(file);
              });
            }
            proto._createBuffer = /* @__PURE__ */ function() {
              var _createBuffer2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(file, start, end) {
                var _file, fileContent;
                return _regenerator.default.wrap(function _callee5$(_context5) {
                  while (1)
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        if (!(isBlob(file) || isFile(file))) {
                          _context5.next = 8;
                          break;
                        }
                        _file = file.slice(start, end);
                        _context5.next = 4;
                        return getBuffer(_file);
                      case 4:
                        fileContent = _context5.sent;
                        return _context5.abrupt("return", Buffer2.from(fileContent));
                      case 8:
                        if (!isBuffer(file)) {
                          _context5.next = 12;
                          break;
                        }
                        return _context5.abrupt("return", file.subarray(start, end));
                      case 12:
                        throw new Error("_createBuffer requires File/Blob/Buffer.");
                      case 13:
                      case "end":
                        return _context5.stop();
                    }
                }, _callee5);
              }));
              function _createBuffer(_x8, _x9, _x10) {
                return _createBuffer2.apply(this, arguments);
              }
              return _createBuffer;
            }();
            proto._getPartSize = function _getPartSize(fileSize, partSize) {
              var maxNumParts = 10 * 1e3;
              var defaultPartSize = 1 * 1024 * 1024;
              if (!partSize)
                partSize = defaultPartSize;
              var safeSize = Math.ceil(fileSize / maxNumParts);
              if (partSize < safeSize) {
                partSize = safeSize;
                console.warn("partSize has been set to ".concat(partSize, ", because the partSize you provided causes partNumber to be greater than 10,000"));
              }
              return partSize;
            };
            proto._divideParts = function _divideParts(fileSize, partSize) {
              var numParts = Math.ceil(fileSize / partSize);
              var partOffs = [];
              for (var i = 0; i < numParts; i++) {
                var start = partSize * i;
                var end = Math.min(start + partSize, fileSize);
                partOffs.push({
                  start,
                  end
                });
              }
              return partOffs;
            };
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "../common/utils/isBlob": 68, "../common/utils/isBuffer": 69, "../common/utils/isFile": 71, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "buffer": 103, "copy-to": 107, "core-js/modules/es.array-buffer.slice.js": 309, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.filter.js": 312, "core-js/modules/es.array.find.js": 313, "core-js/modules/es.array.from.js": 314, "core-js/modules/es.array.iterator.js": 316, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.iterator.js": 343, "core-js/modules/es.typed-array.copy-within.js": 356, "core-js/modules/es.typed-array.every.js": 357, "core-js/modules/es.typed-array.fill.js": 358, "core-js/modules/es.typed-array.filter.js": 359, "core-js/modules/es.typed-array.find-index.js": 360, "core-js/modules/es.typed-array.find.js": 361, "core-js/modules/es.typed-array.for-each.js": 362, "core-js/modules/es.typed-array.includes.js": 363, "core-js/modules/es.typed-array.index-of.js": 364, "core-js/modules/es.typed-array.iterator.js": 365, "core-js/modules/es.typed-array.join.js": 366, "core-js/modules/es.typed-array.last-index-of.js": 367, "core-js/modules/es.typed-array.map.js": 368, "core-js/modules/es.typed-array.reduce-right.js": 369, "core-js/modules/es.typed-array.reduce.js": 370, "core-js/modules/es.typed-array.reverse.js": 371, "core-js/modules/es.typed-array.set.js": 372, "core-js/modules/es.typed-array.slice.js": 373, "core-js/modules/es.typed-array.some.js": 374, "core-js/modules/es.typed-array.sort.js": 375, "core-js/modules/es.typed-array.subarray.js": 376, "core-js/modules/es.typed-array.to-locale-string.js": 377, "core-js/modules/es.typed-array.to-string.js": 378, "core-js/modules/es.typed-array.uint8-array.js": 379, "mime": 430, "path": 439, "stream": 468, "util": 489 }], 5: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        require2("core-js/modules/es.function.name.js");
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        require2("core-js/modules/es.array.map.js");
        require2("core-js/modules/es.number.constructor.js");
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.promise.js");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var fs = require2("fs");
        var copy = require2("copy-to");
        var path = require2("path");
        var mime = require2("mime");
        var callback = require2("../common/callback");
        var merge = require2("merge-descriptors");
        var _require = require2("../common/utils/isBlob"), isBlob = _require.isBlob;
        var _require2 = require2("../common/utils/isFile"), isFile = _require2.isFile;
        var _require3 = require2("../common/utils/isBuffer"), isBuffer = _require3.isBuffer;
        var _require4 = require2("../common/utils/obj2xml"), obj2xml = _require4.obj2xml;
        var _require5 = require2("../common/utils/parseRestoreInfo"), parseRestoreInfo = _require5.parseRestoreInfo;
        var proto = exports3;
        proto.append = /* @__PURE__ */ function() {
          var _append = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, file, options) {
            var result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = options || {};
                    if (options.position === void 0)
                      options.position = "0";
                    options.subres = {
                      append: "",
                      position: options.position
                    };
                    options.method = "POST";
                    _context.next = 6;
                    return this.put(name, file, options);
                  case 6:
                    result = _context.sent;
                    result.nextAppendPosition = result.res.headers["x-oss-next-append-position"];
                    return _context.abrupt("return", result);
                  case 9:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function append(_x, _x2, _x3) {
            return _append.apply(this, arguments);
          }
          return append;
        }();
        proto.put = /* @__PURE__ */ function() {
          var _put = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name, file, options) {
            var content, method, params, result, ret;
            return _regenerator.default.wrap(function _callee2$(_context2) {
              while (1)
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = options || {};
                    options.disabledMD5 = options.disabledMD5 === void 0 ? true : !!options.disabledMD5;
                    options.headers = options.headers || {};
                    name = this._objectName(name);
                    if (!isBuffer(file)) {
                      _context2.next = 8;
                      break;
                    }
                    content = file;
                    _context2.next = 19;
                    break;
                  case 8:
                    if (!(isBlob(file) || isFile(file))) {
                      _context2.next = 18;
                      break;
                    }
                    if (!options.mime) {
                      if (isFile(file)) {
                        options.mime = mime.getType(path.extname(file.name));
                      } else {
                        options.mime = file.type;
                      }
                    }
                    _context2.next = 12;
                    return this._createBuffer(file, 0, file.size);
                  case 12:
                    content = _context2.sent;
                    _context2.next = 15;
                    return this._getFileSize(file);
                  case 15:
                    options.contentLength = _context2.sent;
                    _context2.next = 19;
                    break;
                  case 18:
                    throw new TypeError("Must provide Buffer/Blob/File for put.");
                  case 19:
                    this._convertMetaToHeaders(options.meta, options.headers);
                    method = options.method || "PUT";
                    params = this._objectRequestParams(method, name, options);
                    callback.encodeCallback(params, options);
                    params.mime = options.mime;
                    params.disabledMD5 = options.disabledMD5;
                    params.content = content;
                    params.successStatuses = [200];
                    _context2.next = 29;
                    return this.request(params);
                  case 29:
                    result = _context2.sent;
                    ret = {
                      name,
                      url: this._objectUrl(name),
                      res: result.res
                    };
                    if (params.headers && params.headers["x-oss-callback"]) {
                      ret.data = JSON.parse(result.data.toString());
                    }
                    return _context2.abrupt("return", ret);
                  case 33:
                  case "end":
                    return _context2.stop();
                }
            }, _callee2, this);
          }));
          function put(_x4, _x5, _x6) {
            return _put.apply(this, arguments);
          }
          return put;
        }();
        proto.putStream = /* @__PURE__ */ function() {
          var _putStream = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(name, stream, options) {
            var method, params, result, ret;
            return _regenerator.default.wrap(function _callee3$(_context3) {
              while (1)
                switch (_context3.prev = _context3.next) {
                  case 0:
                    options = options || {};
                    options.headers = options.headers || {};
                    name = this._objectName(name);
                    if (options.contentLength) {
                      options.headers["Content-Length"] = options.contentLength;
                    } else {
                      options.headers["Transfer-Encoding"] = "chunked";
                    }
                    this._convertMetaToHeaders(options.meta, options.headers);
                    method = options.method || "PUT";
                    params = this._objectRequestParams(method, name, options);
                    callback.encodeCallback(params, options);
                    params.mime = options.mime;
                    params.stream = stream;
                    params.successStatuses = [200];
                    _context3.next = 13;
                    return this.request(params);
                  case 13:
                    result = _context3.sent;
                    ret = {
                      name,
                      url: this._objectUrl(name),
                      res: result.res
                    };
                    if (params.headers && params.headers["x-oss-callback"]) {
                      ret.data = JSON.parse(result.data.toString());
                    }
                    return _context3.abrupt("return", ret);
                  case 17:
                  case "end":
                    return _context3.stop();
                }
            }, _callee3, this);
          }));
          function putStream(_x7, _x8, _x9) {
            return _putStream.apply(this, arguments);
          }
          return putStream;
        }();
        merge(proto, require2("../common/object/copyObject"));
        merge(proto, require2("../common/object/getObjectTagging"));
        merge(proto, require2("../common/object/putObjectTagging"));
        merge(proto, require2("../common/object/deleteObjectTagging"));
        merge(proto, require2("../common/image"));
        merge(proto, require2("../common/object/getBucketVersions"));
        merge(proto, require2("../common/object/getACL"));
        merge(proto, require2("../common/object/putACL"));
        merge(proto, require2("../common/object/head"));
        merge(proto, require2("../common/object/delete"));
        merge(proto, require2("../common/object/get"));
        merge(proto, require2("../common/object/putSymlink"));
        merge(proto, require2("../common/object/getSymlink"));
        merge(proto, require2("../common/object/deleteMulti"));
        merge(proto, require2("../common/object/getObjectMeta"));
        merge(proto, require2("../common/object/getObjectUrl"));
        merge(proto, require2("../common/object/generateObjectUrl"));
        merge(proto, require2("../common/object/signatureUrl"));
        merge(proto, require2("../common/object/asyncSignatureUrl"));
        merge(proto, require2("../common/object/signatureUrlV4"));
        merge(proto, require2("../common/object/signPostObjectPolicyV4"));
        proto.putMeta = /* @__PURE__ */ function() {
          var _putMeta = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(name, meta, options) {
            var copyResult;
            return _regenerator.default.wrap(function _callee4$(_context4) {
              while (1)
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return this.copy(name, name, {
                      meta: meta || {},
                      timeout: options && options.timeout,
                      ctx: options && options.ctx
                    });
                  case 2:
                    copyResult = _context4.sent;
                    return _context4.abrupt("return", copyResult);
                  case 4:
                  case "end":
                    return _context4.stop();
                }
            }, _callee4, this);
          }));
          function putMeta(_x10, _x11, _x12) {
            return _putMeta.apply(this, arguments);
          }
          return putMeta;
        }();
        proto.list = /* @__PURE__ */ function() {
          var _list = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(query, options) {
            var params, result, objects, that, prefixes;
            return _regenerator.default.wrap(function _callee5$(_context5) {
              while (1)
                switch (_context5.prev = _context5.next) {
                  case 0:
                    params = this._objectRequestParams("GET", "", options);
                    params.query = query;
                    params.xmlResponse = true;
                    params.successStatuses = [200];
                    _context5.next = 6;
                    return this.request(params);
                  case 6:
                    result = _context5.sent;
                    objects = result.data.Contents || [];
                    that = this;
                    if (objects) {
                      if (!Array.isArray(objects)) {
                        objects = [objects];
                      }
                      objects = objects.map(function(obj) {
                        return {
                          name: obj.Key,
                          url: that._objectUrl(obj.Key),
                          lastModified: obj.LastModified,
                          etag: obj.ETag,
                          type: obj.Type,
                          size: Number(obj.Size),
                          storageClass: obj.StorageClass,
                          owner: {
                            id: obj.Owner.ID,
                            displayName: obj.Owner.DisplayName
                          },
                          restoreInfo: parseRestoreInfo(obj.RestoreInfo)
                        };
                      });
                    }
                    prefixes = result.data.CommonPrefixes || null;
                    if (prefixes) {
                      if (!Array.isArray(prefixes)) {
                        prefixes = [prefixes];
                      }
                      prefixes = prefixes.map(function(item) {
                        return item.Prefix;
                      });
                    }
                    return _context5.abrupt("return", {
                      res: result.res,
                      objects,
                      prefixes,
                      nextMarker: result.data.NextMarker || null,
                      isTruncated: result.data.IsTruncated === "true"
                    });
                  case 13:
                  case "end":
                    return _context5.stop();
                }
            }, _callee5, this);
          }));
          function list2(_x13, _x14) {
            return _list.apply(this, arguments);
          }
          return list2;
        }();
        proto.listV2 = /* @__PURE__ */ function() {
          var _listV = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(query) {
            var options, continuation_token, params, result, objects, that, prefixes, _args6 = arguments;
            return _regenerator.default.wrap(function _callee6$(_context6) {
              while (1)
                switch (_context6.prev = _context6.next) {
                  case 0:
                    options = _args6.length > 1 && _args6[1] !== void 0 ? _args6[1] : {};
                    continuation_token = query["continuation-token"] || query.continuationToken;
                    if (continuation_token) {
                      options.subres = Object.assign({
                        "continuation-token": continuation_token
                      }, options.subres);
                    }
                    params = this._objectRequestParams("GET", "", options);
                    params.query = Object.assign({
                      "list-type": 2
                    }, query);
                    delete params.query["continuation-token"];
                    delete params.query.continuationToken;
                    params.xmlResponse = true;
                    params.successStatuses = [200];
                    _context6.next = 11;
                    return this.request(params);
                  case 11:
                    result = _context6.sent;
                    objects = result.data.Contents || [];
                    that = this;
                    if (objects) {
                      if (!Array.isArray(objects)) {
                        objects = [objects];
                      }
                      objects = objects.map(function(obj) {
                        var owner = null;
                        if (obj.Owner) {
                          owner = {
                            id: obj.Owner.ID,
                            displayName: obj.Owner.DisplayName
                          };
                        }
                        return {
                          name: obj.Key,
                          url: that._objectUrl(obj.Key),
                          lastModified: obj.LastModified,
                          etag: obj.ETag,
                          type: obj.Type,
                          size: Number(obj.Size),
                          storageClass: obj.StorageClass,
                          owner,
                          restoreInfo: parseRestoreInfo(obj.RestoreInfo)
                        };
                      });
                    }
                    prefixes = result.data.CommonPrefixes || null;
                    if (prefixes) {
                      if (!Array.isArray(prefixes)) {
                        prefixes = [prefixes];
                      }
                      prefixes = prefixes.map(function(item) {
                        return item.Prefix;
                      });
                    }
                    return _context6.abrupt("return", {
                      res: result.res,
                      objects,
                      prefixes,
                      isTruncated: result.data.IsTruncated === "true",
                      keyCount: +result.data.KeyCount,
                      continuationToken: result.data.ContinuationToken || null,
                      nextContinuationToken: result.data.NextContinuationToken || null
                    });
                  case 18:
                  case "end":
                    return _context6.stop();
                }
            }, _callee6, this);
          }));
          function listV2(_x15) {
            return _listV.apply(this, arguments);
          }
          return listV2;
        }();
        proto.restore = /* @__PURE__ */ function() {
          var _restore = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7(name) {
            var options, params, paramsXMLObj, result, _args7 = arguments;
            return _regenerator.default.wrap(function _callee7$(_context7) {
              while (1)
                switch (_context7.prev = _context7.next) {
                  case 0:
                    options = _args7.length > 1 && _args7[1] !== void 0 ? _args7[1] : {
                      type: "Archive"
                    };
                    options = options || {};
                    options.subres = Object.assign({
                      restore: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    params = this._objectRequestParams("POST", name, options);
                    paramsXMLObj = {
                      RestoreRequest: {
                        Days: options.Days ? options.Days : 2
                      }
                    };
                    if (options.type === "ColdArchive" || options.type === "DeepColdArchive") {
                      paramsXMLObj.RestoreRequest.JobParameters = {
                        Tier: options.JobParameters ? options.JobParameters : "Standard"
                      };
                    }
                    params.content = obj2xml(paramsXMLObj, {
                      headers: true
                    });
                    params.mime = "xml";
                    params.successStatuses = [202];
                    _context7.next = 12;
                    return this.request(params);
                  case 12:
                    result = _context7.sent;
                    return _context7.abrupt("return", {
                      res: result.res
                    });
                  case 14:
                  case "end":
                    return _context7.stop();
                }
            }, _callee7, this);
          }));
          function restore(_x16) {
            return _restore.apply(this, arguments);
          }
          return restore;
        }();
        proto._objectUrl = function _objectUrl(name) {
          return this._getReqUrl({
            bucket: this.options.bucket,
            object: name
          });
        };
        proto._objectRequestParams = function _objectRequestParams(method, name, options) {
          if (!this.options.bucket && !this.options.cname) {
            throw new Error("Please create a bucket first");
          }
          options = options || {};
          name = this._objectName(name);
          var params = {
            object: name,
            bucket: this.options.bucket,
            method,
            subres: options && options.subres,
            additionalHeaders: options && options.additionalHeaders,
            timeout: options && options.timeout,
            ctx: options && options.ctx
          };
          if (options.headers) {
            params.headers = {};
            copy(options.headers).to(params.headers);
          }
          return params;
        };
        proto._objectName = function _objectName(name) {
          return name.replace(/^\/+/, "");
        };
        proto._convertMetaToHeaders = function _convertMetaToHeaders(meta, headers) {
          if (!meta) {
            return;
          }
          Object.keys(meta).forEach(function(k) {
            headers["x-oss-meta-".concat(k)] = meta[k];
          });
        };
        proto._deleteFileSafe = function _deleteFileSafe(filepath) {
          var _this = this;
          return new Promise(function(resolve2) {
            fs.exists(filepath, function(exists) {
              if (!exists) {
                resolve2();
              } else {
                fs.unlink(filepath, function(err) {
                  if (err) {
                    _this.debug("unlink %j error: %s", filepath, err, "error");
                  }
                  resolve2();
                });
              }
            });
          });
        };
      }, { "../common/callback": 24, "../common/image": 27, "../common/object/asyncSignatureUrl": 31, "../common/object/copyObject": 32, "../common/object/delete": 33, "../common/object/deleteMulti": 34, "../common/object/deleteObjectTagging": 35, "../common/object/generateObjectUrl": 36, "../common/object/get": 37, "../common/object/getACL": 38, "../common/object/getBucketVersions": 39, "../common/object/getObjectMeta": 40, "../common/object/getObjectTagging": 41, "../common/object/getObjectUrl": 42, "../common/object/getSymlink": 43, "../common/object/head": 44, "../common/object/putACL": 45, "../common/object/putObjectTagging": 46, "../common/object/putSymlink": 47, "../common/object/signPostObjectPolicyV4": 48, "../common/object/signatureUrl": 49, "../common/object/signatureUrlV4": 50, "../common/utils/isBlob": 68, "../common/utils/isBuffer": 69, "../common/utils/isFile": 71, "../common/utils/obj2xml": 76, "../common/utils/parseRestoreInfo": 78, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "copy-to": 107, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.number.constructor.js": 324, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.replace.js": 345, "core-js/modules/web.dom-collections.for-each.js": 380, "fs": 102, "merge-descriptors": 428, "mime": 430, "path": 439 }], 6: [function(require2, module3, exports3) {
        exports3.version = "6.23.0";
      }, {}], 7: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.abortBucketWorm = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        function abortBucketWorm(_x, _x2) {
          return _abortBucketWorm.apply(this, arguments);
        }
        function _abortBucketWorm() {
          _abortBucketWorm = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    checkBucketName_1.checkBucketName(name);
                    params = this._bucketRequestParams("DELETE", name, "worm", options);
                    _context.next = 4;
                    return this.request(params);
                  case 4:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res,
                      status: result.status
                    });
                  case 6:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _abortBucketWorm.apply(this, arguments);
        }
        exports3.abortBucketWorm = abortBucketWorm;
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 8: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.completeBucketWorm = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        function completeBucketWorm(_x, _x2, _x3) {
          return _completeBucketWorm.apply(this, arguments);
        }
        function _completeBucketWorm() {
          _completeBucketWorm = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, wormId, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    checkBucketName_1.checkBucketName(name);
                    params = this._bucketRequestParams("POST", name, {
                      wormId
                    }, options);
                    _context.next = 4;
                    return this.request(params);
                  case 4:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res,
                      status: result.status
                    });
                  case 6:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _completeBucketWorm.apply(this, arguments);
        }
        exports3.completeBucketWorm = completeBucketWorm;
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 9: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.deleteBucketInventory = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        function deleteBucketInventory(_x, _x2) {
          return _deleteBucketInventory.apply(this, arguments);
        }
        function _deleteBucketInventory() {
          _deleteBucketInventory = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(bucketName, inventoryId) {
            var options, subres, params, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
                    subres = Object.assign({
                      inventory: "",
                      inventoryId
                    }, options.subres);
                    checkBucketName_1.checkBucketName(bucketName);
                    params = this._bucketRequestParams("DELETE", bucketName, subres, options);
                    params.successStatuses = [204];
                    _context.next = 7;
                    return this.request(params);
                  case 7:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      status: result.status,
                      res: result.res
                    });
                  case 9:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _deleteBucketInventory.apply(this, arguments);
        }
        exports3.deleteBucketInventory = deleteBucketInventory;
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 10: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var proto = exports3;
        proto.deleteBucketLifecycle = /* @__PURE__ */ function() {
          var _deleteBucketLifecycle = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    _checkBucketName(name);
                    params = this._bucketRequestParams("DELETE", name, "lifecycle", options);
                    params.successStatuses = [204];
                    _context.next = 5;
                    return this.request(params);
                  case 5:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 7:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function deleteBucketLifecycle(_x, _x2) {
            return _deleteBucketLifecycle.apply(this, arguments);
          }
          return deleteBucketLifecycle;
        }();
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 11: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var proto = exports3;
        proto.deleteBucketWebsite = /* @__PURE__ */ function() {
          var _deleteBucketWebsite = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    _checkBucketName(name);
                    params = this._bucketRequestParams("DELETE", name, "website", options);
                    params.successStatuses = [204];
                    _context.next = 5;
                    return this.request(params);
                  case 5:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 7:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function deleteBucketWebsite(_x, _x2) {
            return _deleteBucketWebsite.apply(this, arguments);
          }
          return deleteBucketWebsite;
        }();
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 12: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.extendBucketWorm = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        var obj2xml_1 = require2("../utils/obj2xml");
        function extendBucketWorm(_x, _x2, _x3, _x4) {
          return _extendBucketWorm.apply(this, arguments);
        }
        function _extendBucketWorm() {
          _extendBucketWorm = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, wormId, days, options) {
            var params, paramlXMLObJ, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    checkBucketName_1.checkBucketName(name);
                    params = this._bucketRequestParams("POST", name, {
                      wormExtend: "",
                      wormId
                    }, options);
                    paramlXMLObJ = {
                      ExtendWormConfiguration: {
                        RetentionPeriodInDays: days
                      }
                    };
                    params.mime = "xml";
                    params.content = obj2xml_1.obj2xml(paramlXMLObJ, {
                      headers: true
                    });
                    params.successStatuses = [200];
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res,
                      status: result.status
                    });
                  case 10:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _extendBucketWorm.apply(this, arguments);
        }
        exports3.extendBucketWorm = extendBucketWorm;
      }, { "../utils/checkBucketName": 53, "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 13: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.getBucketInventory = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        var formatInventoryConfig_1 = require2("../utils/formatInventoryConfig");
        function getBucketInventory(_x, _x2) {
          return _getBucketInventory.apply(this, arguments);
        }
        function _getBucketInventory() {
          _getBucketInventory = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(bucketName, inventoryId) {
            var options, subres, params, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
                    subres = Object.assign({
                      inventory: "",
                      inventoryId
                    }, options.subres);
                    checkBucketName_1.checkBucketName(bucketName);
                    params = this._bucketRequestParams("GET", bucketName, subres, options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      status: result.status,
                      res: result.res,
                      inventory: formatInventoryConfig_1.formatInventoryConfig(result.data)
                    });
                  case 10:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _getBucketInventory.apply(this, arguments);
        }
        exports3.getBucketInventory = getBucketInventory;
      }, { "../utils/checkBucketName": 53, "../utils/formatInventoryConfig": 63, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 14: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.array.map.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var _require2 = require2("../utils/isArray"), isArray2 = _require2.isArray;
        var _require3 = require2("../utils/formatObjKey"), formatObjKey = _require3.formatObjKey;
        var proto = exports3;
        proto.getBucketLifecycle = /* @__PURE__ */ function() {
          var _getBucketLifecycle = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result, rules;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    _checkBucketName(name);
                    params = this._bucketRequestParams("GET", name, "lifecycle", options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context.next = 6;
                    return this.request(params);
                  case 6:
                    result = _context.sent;
                    rules = result.data.Rule || null;
                    if (rules) {
                      if (!isArray2(rules)) {
                        rules = [rules];
                      }
                      rules = rules.map(function(_) {
                        if (_.ID) {
                          _.id = _.ID;
                          delete _.ID;
                        }
                        if (_.Tag && !isArray2(_.Tag)) {
                          _.Tag = [_.Tag];
                        }
                        return formatObjKey(_, "firstLowerCase");
                      });
                    }
                    return _context.abrupt("return", {
                      rules,
                      res: result.res
                    });
                  case 10:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function getBucketLifecycle(_x, _x2) {
            return _getBucketLifecycle.apply(this, arguments);
          }
          return getBucketLifecycle;
        }();
      }, { "../utils/checkBucketName": 53, "../utils/formatObjKey": 64, "../utils/isArray": 67, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.map.js": 318 }], 15: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var proto = exports3;
        proto.getBucketVersioning = /* @__PURE__ */ function() {
          var _getBucketVersioning = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(bucketName, options) {
            var params, result, versionStatus;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    _checkBucketName(bucketName);
                    params = this._bucketRequestParams("GET", bucketName, "versioning", options);
                    params.xmlResponse = true;
                    params.successStatuses = [200];
                    _context.next = 6;
                    return this.request(params);
                  case 6:
                    result = _context.sent;
                    versionStatus = result.data.Status;
                    return _context.abrupt("return", {
                      status: result.status,
                      versionStatus,
                      res: result.res
                    });
                  case 9:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function getBucketVersioning(_x, _x2) {
            return _getBucketVersioning.apply(this, arguments);
          }
          return getBucketVersioning;
        }();
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 16: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var _require2 = require2("../utils/isObject"), isObject2 = _require2.isObject;
        var proto = exports3;
        proto.getBucketWebsite = /* @__PURE__ */ function() {
          var _getBucketWebsite = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result, routingRules;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    _checkBucketName(name);
                    params = this._bucketRequestParams("GET", name, "website", options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context.next = 6;
                    return this.request(params);
                  case 6:
                    result = _context.sent;
                    routingRules = [];
                    if (result.data.RoutingRules && result.data.RoutingRules.RoutingRule) {
                      if (isObject2(result.data.RoutingRules.RoutingRule)) {
                        routingRules = [result.data.RoutingRules.RoutingRule];
                      } else {
                        routingRules = result.data.RoutingRules.RoutingRule;
                      }
                    }
                    return _context.abrupt("return", {
                      index: result.data.IndexDocument && result.data.IndexDocument.Suffix || "",
                      supportSubDir: result.data.IndexDocument && result.data.IndexDocument.SupportSubDir || "false",
                      type: result.data.IndexDocument && result.data.IndexDocument.Type,
                      routingRules,
                      error: result.data.ErrorDocument && result.data.ErrorDocument.Key || null,
                      res: result.res
                    });
                  case 10:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function getBucketWebsite(_x, _x2) {
            return _getBucketWebsite.apply(this, arguments);
          }
          return getBucketWebsite;
        }();
      }, { "../utils/checkBucketName": 53, "../utils/isObject": 74, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 17: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.getBucketWorm = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        var dataFix_1 = require2("../utils/dataFix");
        function getBucketWorm(_x, _x2) {
          return _getBucketWorm.apply(this, arguments);
        }
        function _getBucketWorm() {
          _getBucketWorm = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    checkBucketName_1.checkBucketName(name);
                    params = this._bucketRequestParams("GET", name, "worm", options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context.next = 6;
                    return this.request(params);
                  case 6:
                    result = _context.sent;
                    dataFix_1.dataFix(result.data, {
                      lowerFirst: true,
                      rename: {
                        RetentionPeriodInDays: "days"
                      }
                    });
                    return _context.abrupt("return", Object.assign(Object.assign({}, result.data), {
                      res: result.res,
                      status: result.status
                    }));
                  case 9:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _getBucketWorm.apply(this, arguments);
        }
        exports3.getBucketWorm = getBucketWorm;
      }, { "../utils/checkBucketName": 53, "../utils/dataFix": 59, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 18: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.initiateBucketWorm = void 0;
        var obj2xml_1 = require2("../utils/obj2xml");
        var checkBucketName_1 = require2("../utils/checkBucketName");
        function initiateBucketWorm(_x, _x2, _x3) {
          return _initiateBucketWorm.apply(this, arguments);
        }
        function _initiateBucketWorm() {
          _initiateBucketWorm = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, days, options) {
            var params, paramlXMLObJ, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    checkBucketName_1.checkBucketName(name);
                    params = this._bucketRequestParams("POST", name, "worm", options);
                    paramlXMLObJ = {
                      InitiateWormConfiguration: {
                        RetentionPeriodInDays: days
                      }
                    };
                    params.mime = "xml";
                    params.content = obj2xml_1.obj2xml(paramlXMLObJ, {
                      headers: true
                    });
                    params.successStatuses = [200];
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res,
                      wormId: result.res.headers["x-oss-worm-id"],
                      status: result.status
                    });
                  case 10:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _initiateBucketWorm.apply(this, arguments);
        }
        exports3.initiateBucketWorm = initiateBucketWorm;
      }, { "../utils/checkBucketName": 53, "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 19: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.listBucketInventory = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        var formatInventoryConfig_1 = require2("../utils/formatInventoryConfig");
        function listBucketInventory(_x) {
          return _listBucketInventory.apply(this, arguments);
        }
        function _listBucketInventory() {
          _listBucketInventory = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(bucketName) {
            var options, continuationToken, subres, params, result, data, res, status, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    continuationToken = options.continuationToken;
                    subres = Object.assign({
                      inventory: ""
                    }, continuationToken && {
                      "continuation-token": continuationToken
                    }, options.subres);
                    checkBucketName_1.checkBucketName(bucketName);
                    params = this._bucketRequestParams("GET", bucketName, subres, options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context.next = 9;
                    return this.request(params);
                  case 9:
                    result = _context.sent;
                    data = result.data, res = result.res, status = result.status;
                    return _context.abrupt("return", {
                      isTruncated: data.IsTruncated === "true",
                      nextContinuationToken: data.NextContinuationToken,
                      inventoryList: formatInventoryConfig_1.formatInventoryConfig(data.InventoryConfiguration, true),
                      status,
                      res
                    });
                  case 12:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _listBucketInventory.apply(this, arguments);
        }
        exports3.listBucketInventory = listBucketInventory;
      }, { "../utils/checkBucketName": 53, "../utils/formatInventoryConfig": 63, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 20: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.array.concat.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.putBucketInventory = void 0;
        var checkBucketName_1 = require2("../utils/checkBucketName");
        var obj2xml_1 = require2("../utils/obj2xml");
        function putBucketInventory(_x, _x2) {
          return _putBucketInventory.apply(this, arguments);
        }
        function _putBucketInventory() {
          _putBucketInventory = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(bucketName, inventory) {
            var options, subres, OSSBucketDestination, optionalFields, includedObjectVersions, destinationBucketPrefix, rolePrefix, paramXMLObj, paramXML, params, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
                    subres = Object.assign({
                      inventory: "",
                      inventoryId: inventory.id
                    }, options.subres);
                    checkBucketName_1.checkBucketName(bucketName);
                    OSSBucketDestination = inventory.OSSBucketDestination, optionalFields = inventory.optionalFields, includedObjectVersions = inventory.includedObjectVersions;
                    destinationBucketPrefix = "acs:oss:::";
                    rolePrefix = "acs:ram::".concat(OSSBucketDestination.accountId, ":role/");
                    paramXMLObj = {
                      InventoryConfiguration: {
                        Id: inventory.id,
                        IsEnabled: inventory.isEnabled,
                        Filter: {
                          Prefix: inventory.prefix || ""
                        },
                        Destination: {
                          OSSBucketDestination: {
                            Format: OSSBucketDestination.format,
                            AccountId: OSSBucketDestination.accountId,
                            RoleArn: "".concat(rolePrefix).concat(OSSBucketDestination.rolename),
                            Bucket: "".concat(destinationBucketPrefix).concat(OSSBucketDestination.bucket),
                            Prefix: OSSBucketDestination.prefix || "",
                            Encryption: OSSBucketDestination.encryption || ""
                          }
                        },
                        Schedule: {
                          Frequency: inventory.frequency
                        },
                        IncludedObjectVersions: includedObjectVersions,
                        OptionalFields: {
                          Field: (optionalFields === null || optionalFields === void 0 ? void 0 : optionalFields.field) || []
                        }
                      }
                    };
                    paramXML = obj2xml_1.obj2xml(paramXMLObj, {
                      headers: true,
                      firstUpperCase: true
                    });
                    params = this._bucketRequestParams("PUT", bucketName, subres, options);
                    params.successStatuses = [200];
                    params.mime = "xml";
                    params.content = paramXML;
                    _context.next = 14;
                    return this.request(params);
                  case 14:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      status: result.status,
                      res: result.res
                    });
                  case 16:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _putBucketInventory.apply(this, arguments);
        }
        exports3.putBucketInventory = putBucketInventory;
      }, { "../utils/checkBucketName": 53, "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.object.assign.js": 325 }], 21: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.array.includes.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var _require2 = require2("../utils/isArray"), isArray2 = _require2.isArray;
        var _require3 = require2("../utils/deepCopy"), deepCopy2 = _require3.deepCopy;
        var _require4 = require2("../utils/isObject"), isObject2 = _require4.isObject;
        var _require5 = require2("../utils/obj2xml"), obj2xml = _require5.obj2xml;
        var _require6 = require2("../utils/checkObjectTag"), checkObjectTag = _require6.checkObjectTag;
        var _require7 = require2("../utils/getStrBytesCount"), getStrBytesCount = _require7.getStrBytesCount;
        var proto = exports3;
        proto.putBucketLifecycle = /* @__PURE__ */ function() {
          var _putBucketLifecycle = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, rules, options) {
            var params, Rule, paramXMLObj, paramXML, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    _checkBucketName(name);
                    if (isArray2(rules)) {
                      _context.next = 3;
                      break;
                    }
                    throw new Error("rules must be Array");
                  case 3:
                    params = this._bucketRequestParams("PUT", name, "lifecycle", options);
                    Rule = [];
                    paramXMLObj = {
                      LifecycleConfiguration: {
                        Rule
                      }
                    };
                    rules.forEach(function(_) {
                      defaultDaysAndDate2Expiration(_);
                      checkRule(_);
                      if (_.id) {
                        _.ID = _.id;
                        delete _.id;
                      }
                      Rule.push(_);
                    });
                    paramXML = obj2xml(paramXMLObj, {
                      headers: true,
                      firstUpperCase: true
                    });
                    params.content = paramXML;
                    params.mime = "xml";
                    params.successStatuses = [200];
                    _context.next = 13;
                    return this.request(params);
                  case 13:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 15:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function putBucketLifecycle(_x, _x2, _x3) {
            return _putBucketLifecycle.apply(this, arguments);
          }
          return putBucketLifecycle;
        }();
        function defaultDaysAndDate2Expiration(obj) {
          if (obj.days) {
            obj.expiration = {
              days: obj.days
            };
          }
          if (obj.date) {
            obj.expiration = {
              createdBeforeDate: obj.date
            };
          }
        }
        function checkDaysAndDate(obj, key) {
          var days = obj.days, createdBeforeDate = obj.createdBeforeDate;
          if (!days && !createdBeforeDate) {
            throw new Error("".concat(key, " must includes days or createdBeforeDate"));
          } else if (days && (isArray2(days) || !/^[1-9][0-9]*$/.test(days))) {
            throw new Error("days must be a positive integer");
          } else if (createdBeforeDate && !/\d{4}-\d{2}-\d{2}T00:00:00.000Z/.test(createdBeforeDate)) {
            throw new Error("createdBeforeDate must be date and conform to iso8601 format");
          }
        }
        function checkNoncurrentDays(obj, key) {
          var noncurrentDays = obj.noncurrentDays;
          if (!noncurrentDays) {
            throw new Error("".concat(key, " must includes noncurrentDays"));
          } else if (noncurrentDays && (isArray2(noncurrentDays) || !/^[1-9][0-9]*$/.test(noncurrentDays))) {
            throw new Error("noncurrentDays must be a positive integer");
          }
        }
        function handleCheckTag(tag2) {
          if (!isArray2(tag2) && !isObject2(tag2)) {
            throw new Error("tag must be Object or Array");
          }
          tag2 = isObject2(tag2) ? [tag2] : tag2;
          var tagObj = {};
          var tagClone = deepCopy2(tag2);
          tagClone.forEach(function(v) {
            tagObj[v.key] = v.value;
          });
          checkObjectTag(tagObj);
        }
        function checkStorageClass(storageClass) {
          if (!["IA", "Archive", "ColdArchive", "DeepColdArchive"].includes(storageClass))
            throw new Error("StorageClass must be IA or Archive or ColdArchive or DeepColdArchive");
        }
        function checkRule(rule) {
          if (rule.id && getStrBytesCount(rule.id) > 255)
            throw new Error("ID is composed of 255 bytes at most");
          if (rule.prefix === void 0)
            throw new Error("Rule must includes prefix");
          if (!["Enabled", "Disabled"].includes(rule.status))
            throw new Error("Status must be Enabled or Disabled");
          if (!rule.expiration && !rule.noncurrentVersionExpiration && !rule.abortMultipartUpload && !rule.transition && !rule.noncurrentVersionTransition) {
            throw new Error("Rule must includes expiration or noncurrentVersionExpiration or abortMultipartUpload or transition or noncurrentVersionTransition");
          }
          if (rule.transition) {
            checkStorageClass(rule.transition.storageClass);
            checkDaysAndDate(rule.transition, "Transition");
          }
          if (rule.expiration) {
            if (!rule.expiration.expiredObjectDeleteMarker) {
              checkDaysAndDate(rule.expiration, "Expiration");
            } else if (rule.expiration.days || rule.expiration.createdBeforeDate) {
              throw new Error("expiredObjectDeleteMarker cannot be used with days or createdBeforeDate");
            }
          }
          if (rule.abortMultipartUpload) {
            checkDaysAndDate(rule.abortMultipartUpload, "AbortMultipartUpload");
          }
          if (rule.noncurrentVersionTransition) {
            checkStorageClass(rule.noncurrentVersionTransition.storageClass);
            checkNoncurrentDays(rule.noncurrentVersionTransition, "NoncurrentVersionTransition");
          }
          if (rule.noncurrentVersionExpiration) {
            checkNoncurrentDays(rule.noncurrentVersionExpiration, "NoncurrentVersionExpiration");
          }
          if (rule.tag) {
            if (rule.abortMultipartUpload) {
              throw new Error("Tag cannot be used with abortMultipartUpload");
            }
            handleCheckTag(rule.tag);
          }
        }
      }, { "../utils/checkBucketName": 53, "../utils/checkObjectTag": 56, "../utils/deepCopy": 60, "../utils/getStrBytesCount": 66, "../utils/isArray": 67, "../utils/isObject": 74, "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/web.dom-collections.for-each.js": 380 }], 22: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.array.includes.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var _require2 = require2("../utils/obj2xml"), obj2xml = _require2.obj2xml;
        var proto = exports3;
        proto.putBucketVersioning = /* @__PURE__ */ function() {
          var _putBucketVersioning = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, status) {
            var options, params, paramXMLObj, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
                    _checkBucketName(name);
                    if (["Enabled", "Suspended"].includes(status)) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("status must be Enabled or Suspended");
                  case 4:
                    params = this._bucketRequestParams("PUT", name, "versioning", options);
                    paramXMLObj = {
                      VersioningConfiguration: {
                        Status: status
                      }
                    };
                    params.mime = "xml";
                    params.content = obj2xml(paramXMLObj, {
                      headers: true
                    });
                    _context.next = 10;
                    return this.request(params);
                  case 10:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res,
                      status: result.status
                    });
                  case 12:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function putBucketVersioning(_x, _x2) {
            return _putBucketVersioning.apply(this, arguments);
          }
          return putBucketVersioning;
        }();
      }, { "../utils/checkBucketName": 53, "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.includes.js": 315 }], 23: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var _require2 = require2("../utils/obj2xml"), obj2xml = _require2.obj2xml;
        var _require3 = require2("../utils/isArray"), isArray2 = _require3.isArray;
        var proto = exports3;
        proto.putBucketWebsite = /* @__PURE__ */ function() {
          var _putBucketWebsite = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name) {
            var config, options, params, IndexDocument, WebsiteConfiguration, website, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    config = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    options = _args.length > 2 ? _args[2] : void 0;
                    _checkBucketName(name);
                    params = this._bucketRequestParams("PUT", name, "website", options);
                    IndexDocument = {
                      Suffix: config.index || "index.html"
                    };
                    WebsiteConfiguration = {
                      IndexDocument
                    };
                    website = {
                      WebsiteConfiguration
                    };
                    if (config.supportSubDir) {
                      IndexDocument.SupportSubDir = config.supportSubDir;
                    }
                    if (config.type) {
                      IndexDocument.Type = config.type;
                    }
                    if (config.error) {
                      WebsiteConfiguration.ErrorDocument = {
                        Key: config.error
                      };
                    }
                    if (!(config.routingRules !== void 0)) {
                      _context.next = 14;
                      break;
                    }
                    if (isArray2(config.routingRules)) {
                      _context.next = 13;
                      break;
                    }
                    throw new Error("RoutingRules must be Array");
                  case 13:
                    WebsiteConfiguration.RoutingRules = {
                      RoutingRule: config.routingRules
                    };
                  case 14:
                    website = obj2xml(website);
                    params.content = website;
                    params.mime = "xml";
                    params.successStatuses = [200];
                    _context.next = 20;
                    return this.request(params);
                  case 20:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 22:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function putBucketWebsite(_x) {
            return _putBucketWebsite.apply(this, arguments);
          }
          return putBucketWebsite;
        }();
      }, { "../utils/checkBucketName": 53, "../utils/isArray": 67, "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93 }], 24: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.regexp.to-string.js");
            require2("core-js/modules/web.dom-collections.for-each.js");
            require2("core-js/modules/es.object.keys.js");
            exports3.encodeCallback = function encodeCallback(reqParams, options) {
              reqParams.headers = reqParams.headers || {};
              if (!Object.prototype.hasOwnProperty.call(reqParams.headers, "x-oss-callback")) {
                if (options.callback) {
                  var json = {
                    callbackUrl: encodeURI(options.callback.url),
                    callbackBody: options.callback.body
                  };
                  if (options.callback.host) {
                    json.callbackHost = options.callback.host;
                  }
                  if (options.callback.contentType) {
                    json.callbackBodyType = options.callback.contentType;
                  }
                  if (options.callback.callbackSNI) {
                    json.callbackSNI = options.callback.callbackSNI;
                  }
                  var callback = Buffer2.from(JSON.stringify(json)).toString("base64");
                  reqParams.headers["x-oss-callback"] = callback;
                  if (options.callback.customValue) {
                    var callbackVar = {};
                    Object.keys(options.callback.customValue).forEach(function(key) {
                      callbackVar["x:".concat(key)] = options.callback.customValue[key].toString();
                    });
                    reqParams.headers["x-oss-callback-var"] = Buffer2.from(JSON.stringify(callbackVar)).toString("base64");
                  }
                }
              }
            };
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "buffer": 103, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/web.dom-collections.for-each.js": 380 }], 25: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        var __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.getReqUrl = void 0;
        var copy_to_1 = __importDefault(require2("copy-to"));
        var url_1 = __importDefault(require2("url"));
        var merge_descriptors_1 = __importDefault(require2("merge-descriptors"));
        var is_type_of_1 = __importDefault(require2("is-type-of"));
        var isIP_1 = require2("../utils/isIP");
        var checkConfigValid_1 = require2("../utils/checkConfigValid");
        function getReqUrl(params) {
          var ep = {};
          var isCname = this.options.cname;
          checkConfigValid_1.checkConfigValid(this.options.endpoint, "endpoint");
          copy_to_1.default(this.options.endpoint, false).to(ep);
          if (params.bucket && !isCname && !isIP_1.isIP(ep.hostname) && !this.options.sldEnable) {
            ep.host = "".concat(params.bucket, ".").concat(ep.host);
          }
          var resourcePath = "/";
          if (params.bucket && this.options.sldEnable) {
            resourcePath += "".concat(params.bucket, "/");
          }
          if (params.object) {
            resourcePath += this._escape(params.object).replace(/\+/g, "%2B");
          }
          ep.pathname = resourcePath;
          var query = {};
          if (params.query) {
            merge_descriptors_1.default(query, params.query);
          }
          if (params.subres) {
            var subresAsQuery = {};
            if (is_type_of_1.default.string(params.subres)) {
              subresAsQuery[params.subres] = "";
            } else if (is_type_of_1.default.array(params.subres)) {
              params.subres.forEach(function(k) {
                subresAsQuery[k] = "";
              });
            } else {
              subresAsQuery = params.subres;
            }
            merge_descriptors_1.default(query, subresAsQuery);
          }
          ep.query = query;
          return url_1.default.format(ep);
        }
        exports3.getReqUrl = getReqUrl;
      }, { "../utils/checkConfigValid": 54, "../utils/isIP": 73, "copy-to": 107, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.replace.js": 345, "core-js/modules/web.dom-collections.for-each.js": 380, "is-type-of": 537, "merge-descriptors": 428, "url": 543 }], 26: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.string.trim.js");
        var ms = require2("humanize-ms");
        var urlutil = require2("url");
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var _require2 = require2("../utils/setRegion"), setRegion = _require2.setRegion;
        var _require3 = require2("../utils/checkConfigValid"), checkConfigValid = _require3.checkConfigValid;
        function setEndpoint(endpoint, secure) {
          checkConfigValid(endpoint, "endpoint");
          var url = urlutil.parse(endpoint);
          if (!url.protocol) {
            url = urlutil.parse("http".concat(secure ? "s" : "", "://").concat(endpoint));
          }
          if (url.protocol !== "http:" && url.protocol !== "https:") {
            throw new Error("Endpoint protocol must be http or https.");
          }
          return url;
        }
        module3.exports = function(options) {
          if (!options || !options.accessKeyId || !options.accessKeySecret) {
            throw new Error("require accessKeyId, accessKeySecret");
          }
          if (options.stsToken && !options.refreshSTSToken && !options.refreshSTSTokenInterval) {
            console.warn("It's recommended to set 'refreshSTSToken' and 'refreshSTSTokenInterval' to refresh stsToken、accessKeyId、accessKeySecret automatically when sts token has expired");
          }
          if (options.bucket) {
            _checkBucketName(options.bucket);
          }
          var opts = Object.assign({
            region: "oss-cn-hangzhou",
            internal: false,
            secure: false,
            timeout: 6e4,
            bucket: null,
            endpoint: null,
            cname: false,
            isRequestPay: false,
            sldEnable: false,
            headerEncoding: "utf-8",
            refreshSTSToken: null,
            refreshSTSTokenInterval: 6e4 * 5,
            retryMax: 0,
            authorizationV4: false
            // 启用v4签名，默认关闭
          }, options);
          opts.accessKeyId = opts.accessKeyId.trim();
          opts.accessKeySecret = opts.accessKeySecret.trim();
          if (opts.timeout) {
            opts.timeout = ms(opts.timeout);
          }
          if (opts.endpoint) {
            opts.endpoint = setEndpoint(opts.endpoint, opts.secure);
          } else if (opts.region) {
            opts.endpoint = setRegion(opts.region, opts.internal, opts.secure);
          } else {
            throw new Error("require options.endpoint or options.region");
          }
          opts.inited = true;
          return opts;
        };
      }, { "../utils/checkBucketName": 53, "../utils/checkConfigValid": 54, "../utils/setRegion": 81, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.string.trim.js": 349, "humanize-ms": 399, "url": 543 }], 27: [function(require2, module3, exports3) {
        var merge = require2("merge-descriptors");
        var proto = exports3;
        merge(proto, require2("./processObjectSave"));
      }, { "./processObjectSave": 28, "merge-descriptors": 428 }], 28: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.array.concat.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var querystring2 = require2("querystring");
        var _require2 = require2("js-base64"), str2Base64 = _require2.Base64.encode;
        var proto = exports3;
        proto.processObjectSave = /* @__PURE__ */ function() {
          var _processObjectSave = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(sourceObject, targetObject, process, targetBucket) {
            var params, bucketParam, content, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    checkArgs(sourceObject, "sourceObject");
                    checkArgs(targetObject, "targetObject");
                    checkArgs(process, "process");
                    targetObject = this._objectName(targetObject);
                    if (targetBucket) {
                      _checkBucketName(targetBucket);
                    }
                    params = this._objectRequestParams("POST", sourceObject, {
                      subres: "x-oss-process"
                    });
                    bucketParam = targetBucket ? ",b_".concat(str2Base64(targetBucket)) : "";
                    targetObject = str2Base64(targetObject);
                    content = {
                      "x-oss-process": "".concat(process, "|sys/saveas,o_").concat(targetObject).concat(bucketParam)
                    };
                    params.content = querystring2.stringify(content);
                    _context.next = 12;
                    return this.request(params);
                  case 12:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res,
                      status: result.res.status
                    });
                  case 14:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function processObjectSave(_x, _x2, _x3, _x4) {
            return _processObjectSave.apply(this, arguments);
          }
          return processObjectSave;
        }();
        function checkArgs(name, key) {
          if (!name) {
            throw new Error("".concat(key, " is required"));
          }
          if (typeof name !== "string") {
            throw new Error("".concat(key, " must be String"));
          }
        }
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.concat.js": 310, "js-base64": 413, "querystring": 451 }], 29: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.function.name.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.promise.js");
        require2("core-js/modules/es.array.from.js");
        require2("core-js/modules/es.string.iterator.js");
        require2("core-js/modules/es.array.map.js");
        require2("core-js/modules/es.array.filter.js");
        require2("core-js/modules/es.array.find.js");
        require2("core-js/modules/es.regexp.to-string.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var debug = require2("debug")("ali-oss:multipart-copy");
        var copy = require2("copy-to");
        var proto = exports3;
        proto.uploadPartCopy = /* @__PURE__ */ function() {
          var _uploadPartCopy = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, uploadId, partNo, range, sourceData) {
            var options, versionId, copySource, params, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 5 && _args[5] !== void 0 ? _args[5] : {};
                    options.headers = options.headers || {};
                    versionId = options.versionId || options.subres && options.subres.versionId || null;
                    if (versionId) {
                      copySource = "/".concat(sourceData.sourceBucketName, "/").concat(encodeURIComponent(sourceData.sourceKey), "?versionId=").concat(versionId);
                    } else {
                      copySource = "/".concat(sourceData.sourceBucketName, "/").concat(encodeURIComponent(sourceData.sourceKey));
                    }
                    options.headers["x-oss-copy-source"] = copySource;
                    if (range) {
                      options.headers["x-oss-copy-source-range"] = "bytes=".concat(range);
                    }
                    options.subres = {
                      partNumber: partNo,
                      uploadId
                    };
                    params = this._objectRequestParams("PUT", name, options);
                    params.mime = options.mime;
                    params.successStatuses = [200];
                    _context.next = 12;
                    return this.request(params);
                  case 12:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      name,
                      etag: result.res.headers.etag,
                      res: result.res
                    });
                  case 14:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function uploadPartCopy(_x, _x2, _x3, _x4, _x5) {
            return _uploadPartCopy.apply(this, arguments);
          }
          return uploadPartCopy;
        }();
        proto.multipartUploadCopy = /* @__PURE__ */ function() {
          var _multipartUploadCopy = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name, sourceData) {
            var options, _options$versionId, versionId, metaOpt, objectMeta, fileSize, minPartSize, copySize, init, uploadId, partSize, checkpoint, _args2 = arguments;
            return _regenerator.default.wrap(function _callee2$(_context2) {
              while (1)
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 2 && _args2[2] !== void 0 ? _args2[2] : {};
                    this.resetCancelFlag();
                    _options$versionId = options.versionId, versionId = _options$versionId === void 0 ? null : _options$versionId;
                    metaOpt = {
                      versionId
                    };
                    _context2.next = 6;
                    return this._getObjectMeta(sourceData.sourceBucketName, sourceData.sourceKey, metaOpt);
                  case 6:
                    objectMeta = _context2.sent;
                    fileSize = objectMeta.res.headers["content-length"];
                    sourceData.startOffset = sourceData.startOffset || 0;
                    sourceData.endOffset = sourceData.endOffset || fileSize;
                    if (!(options.checkpoint && options.checkpoint.uploadId)) {
                      _context2.next = 14;
                      break;
                    }
                    _context2.next = 13;
                    return this._resumeMultipartCopy(options.checkpoint, sourceData, options);
                  case 13:
                    return _context2.abrupt("return", _context2.sent);
                  case 14:
                    minPartSize = 100 * 1024;
                    copySize = sourceData.endOffset - sourceData.startOffset;
                    if (!(copySize < minPartSize)) {
                      _context2.next = 18;
                      break;
                    }
                    throw new Error("copySize must not be smaller than ".concat(minPartSize));
                  case 18:
                    if (!(options.partSize && options.partSize < minPartSize)) {
                      _context2.next = 20;
                      break;
                    }
                    throw new Error("partSize must not be smaller than ".concat(minPartSize));
                  case 20:
                    _context2.next = 22;
                    return this.initMultipartUpload(name, options);
                  case 22:
                    init = _context2.sent;
                    uploadId = init.uploadId;
                    partSize = this._getPartSize(copySize, options.partSize);
                    checkpoint = {
                      name,
                      copySize,
                      partSize,
                      uploadId,
                      doneParts: []
                    };
                    if (!(options && options.progress)) {
                      _context2.next = 29;
                      break;
                    }
                    _context2.next = 29;
                    return options.progress(0, checkpoint, init.res);
                  case 29:
                    _context2.next = 31;
                    return this._resumeMultipartCopy(checkpoint, sourceData, options);
                  case 31:
                    return _context2.abrupt("return", _context2.sent);
                  case 32:
                  case "end":
                    return _context2.stop();
                }
            }, _callee2, this);
          }));
          function multipartUploadCopy(_x6, _x7) {
            return _multipartUploadCopy.apply(this, arguments);
          }
          return multipartUploadCopy;
        }();
        proto._resumeMultipartCopy = /* @__PURE__ */ function() {
          var _resumeMultipartCopy2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(checkpoint, sourceData, options) {
            var _options$versionId2, versionId, metaOpt, copySize, partSize, uploadId, doneParts, name, partOffs, numParts, uploadPartCopyOptions, uploadPartJob, all, done, todo, defaultParallel, parallel, i, errors, abortEvent, err;
            return _regenerator.default.wrap(function _callee4$(_context4) {
              while (1)
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (!this.isCancel()) {
                      _context4.next = 2;
                      break;
                    }
                    throw this._makeCancelEvent();
                  case 2:
                    _options$versionId2 = options.versionId, versionId = _options$versionId2 === void 0 ? null : _options$versionId2;
                    metaOpt = {
                      versionId
                    };
                    copySize = checkpoint.copySize, partSize = checkpoint.partSize, uploadId = checkpoint.uploadId, doneParts = checkpoint.doneParts, name = checkpoint.name;
                    partOffs = this._divideMultipartCopyParts(copySize, partSize, sourceData.startOffset);
                    numParts = partOffs.length;
                    uploadPartCopyOptions = {
                      headers: {}
                    };
                    if (options.copyheaders) {
                      copy(options.copyheaders).to(uploadPartCopyOptions.headers);
                    }
                    if (versionId) {
                      copy(metaOpt).to(uploadPartCopyOptions);
                    }
                    uploadPartJob = function uploadPartJob2(self2, partNo, source) {
                      return new Promise(/* @__PURE__ */ function() {
                        var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(resolve2, reject) {
                          var pi, range, result;
                          return _regenerator.default.wrap(function _callee3$(_context3) {
                            while (1)
                              switch (_context3.prev = _context3.next) {
                                case 0:
                                  _context3.prev = 0;
                                  if (self2.isCancel()) {
                                    _context3.next = 22;
                                    break;
                                  }
                                  pi = partOffs[partNo - 1];
                                  range = "".concat(pi.start, "-").concat(pi.end - 1);
                                  _context3.prev = 4;
                                  _context3.next = 7;
                                  return self2.uploadPartCopy(name, uploadId, partNo, range, source, uploadPartCopyOptions);
                                case 7:
                                  result = _context3.sent;
                                  _context3.next = 15;
                                  break;
                                case 10:
                                  _context3.prev = 10;
                                  _context3.t0 = _context3["catch"](4);
                                  if (!(_context3.t0.status === 404)) {
                                    _context3.next = 14;
                                    break;
                                  }
                                  throw self2._makeAbortEvent();
                                case 14:
                                  throw _context3.t0;
                                case 15:
                                  if (self2.isCancel()) {
                                    _context3.next = 22;
                                    break;
                                  }
                                  debug("content-range ".concat(result.res.headers["content-range"]));
                                  doneParts.push({
                                    number: partNo,
                                    etag: result.res.headers.etag
                                  });
                                  checkpoint.doneParts = doneParts;
                                  if (!(options && options.progress)) {
                                    _context3.next = 22;
                                    break;
                                  }
                                  _context3.next = 22;
                                  return options.progress(doneParts.length / numParts, checkpoint, result.res);
                                case 22:
                                  resolve2();
                                  _context3.next = 29;
                                  break;
                                case 25:
                                  _context3.prev = 25;
                                  _context3.t1 = _context3["catch"](0);
                                  _context3.t1.partNum = partNo;
                                  reject(_context3.t1);
                                case 29:
                                case "end":
                                  return _context3.stop();
                              }
                          }, _callee3, null, [[0, 25], [4, 10]]);
                        }));
                        return function(_x11, _x12) {
                          return _ref.apply(this, arguments);
                        };
                      }());
                    };
                    all = Array.from(new Array(numParts), function(x, i2) {
                      return i2 + 1;
                    });
                    done = doneParts.map(function(p2) {
                      return p2.number;
                    });
                    todo = all.filter(function(p2) {
                      return done.indexOf(p2) < 0;
                    });
                    defaultParallel = 5;
                    parallel = options.parallel || defaultParallel;
                    if (!(this.checkBrowserAndVersion("Internet Explorer", "10") || parallel === 1)) {
                      _context4.next = 28;
                      break;
                    }
                    i = 0;
                  case 18:
                    if (!(i < todo.length)) {
                      _context4.next = 26;
                      break;
                    }
                    if (!this.isCancel()) {
                      _context4.next = 21;
                      break;
                    }
                    throw this._makeCancelEvent();
                  case 21:
                    _context4.next = 23;
                    return uploadPartJob(this, todo[i], sourceData);
                  case 23:
                    i++;
                    _context4.next = 18;
                    break;
                  case 26:
                    _context4.next = 40;
                    break;
                  case 28:
                    _context4.next = 30;
                    return this._parallelNode(todo, parallel, uploadPartJob, sourceData);
                  case 30:
                    errors = _context4.sent;
                    abortEvent = errors.find(function(err2) {
                      return err2.name === "abort";
                    });
                    if (!abortEvent) {
                      _context4.next = 34;
                      break;
                    }
                    throw abortEvent;
                  case 34:
                    if (!this.isCancel()) {
                      _context4.next = 36;
                      break;
                    }
                    throw this._makeCancelEvent();
                  case 36:
                    if (!(errors && errors.length > 0)) {
                      _context4.next = 40;
                      break;
                    }
                    err = errors[0];
                    err.message = "Failed to copy some parts with error: ".concat(err.toString(), " part_num: ").concat(err.partNum);
                    throw err;
                  case 40:
                    _context4.next = 42;
                    return this.completeMultipartUpload(name, uploadId, doneParts, options);
                  case 42:
                    return _context4.abrupt("return", _context4.sent);
                  case 43:
                  case "end":
                    return _context4.stop();
                }
            }, _callee4, this);
          }));
          function _resumeMultipartCopy(_x8, _x9, _x10) {
            return _resumeMultipartCopy2.apply(this, arguments);
          }
          return _resumeMultipartCopy;
        }();
        proto._divideMultipartCopyParts = function _divideMultipartCopyParts(fileSize, partSize, startOffset) {
          var numParts = Math.ceil(fileSize / partSize);
          var partOffs = [];
          for (var i = 0; i < numParts; i++) {
            var start = partSize * i + startOffset;
            var end = Math.min(start + partSize, fileSize + startOffset);
            partOffs.push({
              start,
              end
            });
          }
          return partOffs;
        };
        proto._getObjectMeta = /* @__PURE__ */ function() {
          var _getObjectMeta2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(bucket, name, options) {
            var currentBucket, data;
            return _regenerator.default.wrap(function _callee5$(_context5) {
              while (1)
                switch (_context5.prev = _context5.next) {
                  case 0:
                    currentBucket = this.getBucket();
                    this.setBucket(bucket);
                    _context5.next = 4;
                    return this.head(name, options);
                  case 4:
                    data = _context5.sent;
                    this.setBucket(currentBucket);
                    return _context5.abrupt("return", data);
                  case 7:
                  case "end":
                    return _context5.stop();
                }
            }, _callee5, this);
          }));
          function _getObjectMeta(_x13, _x14, _x15) {
            return _getObjectMeta2.apply(this, arguments);
          }
          return _getObjectMeta;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "copy-to": 107, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.filter.js": 312, "core-js/modules/es.array.find.js": 313, "core-js/modules/es.array.from.js": 314, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.iterator.js": 343, "debug": 536 }], 30: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
            var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
            require2("core-js/modules/es.array.map.js");
            require2("core-js/modules/es.array.filter.js");
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.array.sort.js");
            require2("core-js/modules/es.array.concat.js");
            require2("core-js/modules/es.object.keys.js");
            require2("core-js/modules/es.regexp.to-string.js");
            var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
            var copy = require2("copy-to");
            var callback = require2("./callback");
            var _require = require2("./utils/deepCopy"), deepCopyWith = _require.deepCopyWith;
            var _require2 = require2("./utils/isBuffer"), isBuffer = _require2.isBuffer;
            var _require3 = require2("./utils/omit"), omit = _require3.omit;
            var proto = exports3;
            proto.listUploads = /* @__PURE__ */ function() {
              var _listUploads = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(query, options) {
                var opt, params, result, uploads;
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        options = options || {};
                        opt = {};
                        copy(options).to(opt);
                        opt.subres = "uploads";
                        params = this._objectRequestParams("GET", "", opt);
                        params.query = query;
                        params.xmlResponse = true;
                        params.successStatuses = [200];
                        _context.next = 10;
                        return this.request(params);
                      case 10:
                        result = _context.sent;
                        uploads = result.data.Upload || [];
                        if (!Array.isArray(uploads)) {
                          uploads = [uploads];
                        }
                        uploads = uploads.map(function(up) {
                          return {
                            name: up.Key,
                            uploadId: up.UploadId,
                            initiated: up.Initiated
                          };
                        });
                        return _context.abrupt("return", {
                          res: result.res,
                          uploads,
                          bucket: result.data.Bucket,
                          nextKeyMarker: result.data.NextKeyMarker,
                          nextUploadIdMarker: result.data.NextUploadIdMarker,
                          isTruncated: result.data.IsTruncated === "true"
                        });
                      case 15:
                      case "end":
                        return _context.stop();
                    }
                }, _callee, this);
              }));
              function listUploads(_x, _x2) {
                return _listUploads.apply(this, arguments);
              }
              return listUploads;
            }();
            proto.listParts = /* @__PURE__ */ function() {
              var _listParts = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name, uploadId, query, options) {
                var opt, params, result;
                return _regenerator.default.wrap(function _callee2$(_context2) {
                  while (1)
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        options = options || {};
                        opt = {};
                        copy(options).to(opt);
                        opt.subres = {
                          uploadId
                        };
                        params = this._objectRequestParams("GET", name, opt);
                        params.query = query;
                        params.xmlResponse = true;
                        params.successStatuses = [200];
                        _context2.next = 10;
                        return this.request(params);
                      case 10:
                        result = _context2.sent;
                        return _context2.abrupt("return", {
                          res: result.res,
                          uploadId: result.data.UploadId,
                          bucket: result.data.Bucket,
                          name: result.data.Key,
                          partNumberMarker: result.data.PartNumberMarker,
                          nextPartNumberMarker: result.data.NextPartNumberMarker,
                          maxParts: result.data.MaxParts,
                          isTruncated: result.data.IsTruncated,
                          parts: result.data.Part || []
                        });
                      case 12:
                      case "end":
                        return _context2.stop();
                    }
                }, _callee2, this);
              }));
              function listParts(_x3, _x4, _x5, _x6) {
                return _listParts.apply(this, arguments);
              }
              return listParts;
            }();
            proto.abortMultipartUpload = /* @__PURE__ */ function() {
              var _abortMultipartUpload = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(name, uploadId, options) {
                var opt, params, result;
                return _regenerator.default.wrap(function _callee3$(_context3) {
                  while (1)
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        this._stop();
                        options = options || {};
                        opt = {};
                        copy(options).to(opt);
                        opt.subres = {
                          uploadId
                        };
                        params = this._objectRequestParams("DELETE", name, opt);
                        params.successStatuses = [204];
                        _context3.next = 9;
                        return this.request(params);
                      case 9:
                        result = _context3.sent;
                        return _context3.abrupt("return", {
                          res: result.res
                        });
                      case 11:
                      case "end":
                        return _context3.stop();
                    }
                }, _callee3, this);
              }));
              function abortMultipartUpload(_x7, _x8, _x9) {
                return _abortMultipartUpload.apply(this, arguments);
              }
              return abortMultipartUpload;
            }();
            proto.initMultipartUpload = /* @__PURE__ */ function() {
              var _initMultipartUpload = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(name, options) {
                var opt, params, result;
                return _regenerator.default.wrap(function _callee4$(_context4) {
                  while (1)
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        options = options || {};
                        opt = {};
                        copy(options).to(opt);
                        opt.headers = opt.headers || {};
                        this._convertMetaToHeaders(options.meta, opt.headers);
                        opt.subres = "uploads";
                        params = this._objectRequestParams("POST", name, opt);
                        params.mime = options.mime;
                        params.xmlResponse = true;
                        params.successStatuses = [200];
                        _context4.next = 12;
                        return this.request(params);
                      case 12:
                        result = _context4.sent;
                        return _context4.abrupt("return", {
                          res: result.res,
                          bucket: result.data.Bucket,
                          name: result.data.Key,
                          uploadId: result.data.UploadId
                        });
                      case 14:
                      case "end":
                        return _context4.stop();
                    }
                }, _callee4, this);
              }));
              function initMultipartUpload(_x10, _x11) {
                return _initMultipartUpload.apply(this, arguments);
              }
              return initMultipartUpload;
            }();
            proto.uploadPart = /* @__PURE__ */ function() {
              var _uploadPart2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(name, uploadId, partNo, file, start, end, options) {
                var data, isBrowserEnv;
                return _regenerator.default.wrap(function _callee5$(_context5) {
                  while (1)
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        data = {
                          size: end - start
                        };
                        isBrowserEnv = process && process.browser;
                        if (!isBrowserEnv) {
                          _context5.next = 8;
                          break;
                        }
                        _context5.next = 5;
                        return this._createBuffer(file, start, end);
                      case 5:
                        data.content = _context5.sent;
                        _context5.next = 11;
                        break;
                      case 8:
                        _context5.next = 10;
                        return this._createStream(file, start, end);
                      case 10:
                        data.stream = _context5.sent;
                      case 11:
                        _context5.next = 13;
                        return this._uploadPart(name, uploadId, partNo, data, options);
                      case 13:
                        return _context5.abrupt("return", _context5.sent);
                      case 14:
                      case "end":
                        return _context5.stop();
                    }
                }, _callee5, this);
              }));
              function uploadPart(_x12, _x13, _x14, _x15, _x16, _x17, _x18) {
                return _uploadPart2.apply(this, arguments);
              }
              return uploadPart;
            }();
            proto.completeMultipartUpload = /* @__PURE__ */ function() {
              var _completeMultipartUpload = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(name, uploadId, parts, options) {
                var completeParts, xml2, i, p2, opt, params, result, ret;
                return _regenerator.default.wrap(function _callee6$(_context6) {
                  while (1)
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        completeParts = parts.concat().sort(function(a, b) {
                          return a.number - b.number;
                        }).filter(function(item, index2, arr) {
                          return !index2 || item.number !== arr[index2 - 1].number;
                        });
                        xml2 = '<?xml version="1.0" encoding="UTF-8"?>\n<CompleteMultipartUpload>\n';
                        for (i = 0; i < completeParts.length; i++) {
                          p2 = completeParts[i];
                          xml2 += "<Part>\n";
                          xml2 += "<PartNumber>".concat(p2.number, "</PartNumber>\n");
                          xml2 += "<ETag>".concat(p2.etag, "</ETag>\n");
                          xml2 += "</Part>\n";
                        }
                        xml2 += "</CompleteMultipartUpload>";
                        options = options || {};
                        opt = {};
                        opt = deepCopyWith(options, function(_) {
                          if (isBuffer(_))
                            return null;
                        });
                        opt.subres = {
                          uploadId
                        };
                        opt.headers = omit(opt.headers, ["x-oss-server-side-encryption", "x-oss-storage-class"]);
                        params = this._objectRequestParams("POST", name, opt);
                        callback.encodeCallback(params, opt);
                        params.mime = "xml";
                        params.content = xml2;
                        if (!(params.headers && params.headers["x-oss-callback"])) {
                          params.xmlResponse = true;
                        }
                        params.successStatuses = [200];
                        _context6.next = 17;
                        return this.request(params);
                      case 17:
                        result = _context6.sent;
                        if (!options.progress) {
                          _context6.next = 21;
                          break;
                        }
                        _context6.next = 21;
                        return options.progress(1, null, result.res);
                      case 21:
                        ret = {
                          res: result.res,
                          bucket: params.bucket,
                          name,
                          etag: result.res.headers.etag
                        };
                        if (params.headers && params.headers["x-oss-callback"]) {
                          ret.data = JSON.parse(result.data.toString());
                        }
                        return _context6.abrupt("return", ret);
                      case 24:
                      case "end":
                        return _context6.stop();
                    }
                }, _callee6, this);
              }));
              function completeMultipartUpload(_x19, _x20, _x21, _x22) {
                return _completeMultipartUpload.apply(this, arguments);
              }
              return completeMultipartUpload;
            }();
            proto._uploadPart = /* @__PURE__ */ function() {
              var _uploadPart3 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7(name, uploadId, partNo, data, options) {
                var opt, params, isBrowserEnv, result;
                return _regenerator.default.wrap(function _callee7$(_context7) {
                  while (1)
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        options = options || {};
                        opt = {};
                        copy(options).to(opt);
                        opt.headers = opt.headers || {};
                        opt.headers["Content-Length"] = data.size;
                        opt.headers = omit(opt.headers, ["x-oss-server-side-encryption", "x-oss-storage-class"]);
                        opt.subres = {
                          partNumber: partNo,
                          uploadId
                        };
                        params = this._objectRequestParams("PUT", name, opt);
                        params.mime = opt.mime;
                        isBrowserEnv = process && process.browser;
                        isBrowserEnv ? params.content = data.content : params.stream = data.stream;
                        params.successStatuses = [200];
                        params.disabledMD5 = options.disabledMD5;
                        _context7.next = 15;
                        return this.request(params);
                      case 15:
                        result = _context7.sent;
                        if (result.res.headers.etag) {
                          _context7.next = 18;
                          break;
                        }
                        throw new Error("Please set the etag of expose-headers in OSS \n https://help.aliyun.com/document_detail/32069.html");
                      case 18:
                        if (data.stream) {
                          data.stream = null;
                          params.stream = null;
                        }
                        return _context7.abrupt("return", {
                          name,
                          etag: result.res.headers.etag,
                          res: result.res
                        });
                      case 20:
                      case "end":
                        return _context7.stop();
                    }
                }, _callee7, this);
              }));
              function _uploadPart(_x23, _x24, _x25, _x26, _x27) {
                return _uploadPart3.apply(this, arguments);
              }
              return _uploadPart;
            }();
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./callback": 24, "./utils/deepCopy": 60, "./utils/isBuffer": 69, "./utils/omit": 77, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "_process": 538, "copy-to": 107, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.filter.js": 312, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.array.sort.js": 320, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339 }], 31: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.regexp.exec.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var urlutil = require2("url");
        var utility = require2("utility");
        var copy = require2("copy-to");
        var signHelper = require2("../../common/signUtils");
        var _require = require2("../utils/isIP"), isIP = _require.isIP;
        var _require2 = require2("../utils/setSTSToken"), setSTSToken = _require2.setSTSToken;
        var _require3 = require2("../utils/isFunction"), isFunction2 = _require3.isFunction;
        var proto = exports3;
        proto.asyncSignatureUrl = /* @__PURE__ */ function() {
          var _asyncSignatureUrl = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var strictObjectNameValidation, expires, params, resource, signRes, url, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    strictObjectNameValidation = _args.length > 2 && _args[2] !== void 0 ? _args[2] : true;
                    if (!isIP(this.options.endpoint.hostname)) {
                      _context.next = 3;
                      break;
                    }
                    throw new Error("can not get the object URL when endpoint is IP");
                  case 3:
                    if (!(strictObjectNameValidation && /^\?/.test(name))) {
                      _context.next = 5;
                      break;
                    }
                    throw new Error("Invalid object name ".concat(name));
                  case 5:
                    options = options || {};
                    name = this._objectName(name);
                    options.method = options.method || "GET";
                    expires = utility.timestamp() + (options.expires || 1800);
                    params = {
                      bucket: this.options.bucket,
                      object: name
                    };
                    resource = this._getResource(params);
                    if (!(this.options.stsToken && isFunction2(this.options.refreshSTSToken))) {
                      _context.next = 14;
                      break;
                    }
                    _context.next = 14;
                    return setSTSToken.call(this);
                  case 14:
                    if (this.options.stsToken) {
                      options["security-token"] = this.options.stsToken;
                    }
                    signRes = signHelper._signatureForURL(this.options.accessKeySecret, options, resource, expires);
                    url = urlutil.parse(this._getReqUrl(params));
                    url.query = {
                      OSSAccessKeyId: this.options.accessKeyId,
                      Expires: expires,
                      Signature: signRes.Signature
                    };
                    copy(signRes.subResource).to(url.query);
                    return _context.abrupt("return", url.format());
                  case 20:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function asyncSignatureUrl(_x, _x2) {
            return _asyncSignatureUrl.apply(this, arguments);
          }
          return asyncSignatureUrl;
        }();
      }, { "../../common/signUtils": 52, "../utils/isFunction": 72, "../utils/isIP": 73, "../utils/setSTSToken": 82, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "copy-to": 107, "core-js/modules/es.regexp.exec.js": 338, "url": 543, "utility": 545 }], 32: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.array.find.js");
        require2("core-js/modules/es.array.includes.js");
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        var _typeof2 = _interopRequireDefault(require2("@babel/runtime/helpers/typeof"));
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkBucketName"), _checkBucketName = _require.checkBucketName;
        var proto = exports3;
        var REPLACE_HEDERS = ["content-type", "content-encoding", "content-language", "content-disposition", "cache-control", "expires"];
        proto.copy = /* @__PURE__ */ function() {
          var _copy = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, sourceName, bucketName, options) {
            var params, result, data;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    if ((0, _typeof2.default)(bucketName) === "object") {
                      options = bucketName;
                    }
                    options = options || {};
                    options.headers = options.headers || {};
                    Object.keys(options.headers).forEach(function(key) {
                      options.headers["x-oss-copy-source-".concat(key.toLowerCase())] = options.headers[key];
                    });
                    if (options.meta || Object.keys(options.headers).find(function(_) {
                      return REPLACE_HEDERS.includes(_.toLowerCase());
                    })) {
                      options.headers["x-oss-metadata-directive"] = "REPLACE";
                    }
                    this._convertMetaToHeaders(options.meta, options.headers);
                    sourceName = this._getSourceName(sourceName, bucketName);
                    if (options.versionId) {
                      sourceName = "".concat(sourceName, "?versionId=").concat(options.versionId);
                    }
                    options.headers["x-oss-copy-source"] = sourceName;
                    params = this._objectRequestParams("PUT", name, options);
                    params.xmlResponse = true;
                    params.successStatuses = [200, 304];
                    _context.next = 14;
                    return this.request(params);
                  case 14:
                    result = _context.sent;
                    data = result.data;
                    if (data) {
                      data = {
                        etag: data.ETag,
                        lastModified: data.LastModified
                      };
                    }
                    return _context.abrupt("return", {
                      data,
                      res: result.res
                    });
                  case 18:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function copy(_x, _x2, _x3, _x4) {
            return _copy.apply(this, arguments);
          }
          return copy;
        }();
        proto._getSourceName = function _getSourceName(sourceName, bucketName) {
          if (typeof bucketName === "string") {
            sourceName = this._objectName(sourceName);
          } else if (sourceName[0] !== "/") {
            bucketName = this.options.bucket;
          } else {
            bucketName = sourceName.replace(/\/(.+?)(\/.*)/, "$1");
            sourceName = sourceName.replace(/(\/.+?\/)(.*)/, "$2");
          }
          _checkBucketName(bucketName);
          sourceName = encodeURIComponent(sourceName);
          sourceName = "/".concat(bucketName, "/").concat(sourceName);
          return sourceName;
        };
      }, { "../utils/checkBucketName": 53, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/typeof": 91, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.find.js": 313, "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.replace.js": 345, "core-js/modules/web.dom-collections.for-each.js": 380 }], 33: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        proto.delete = /* @__PURE__ */ function() {
          var _delete2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name) {
            var options, params, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    options.subres = Object.assign({}, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    params = this._objectRequestParams("DELETE", name, options);
                    params.successStatuses = [204];
                    _context.next = 7;
                    return this.request(params);
                  case 7:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 9:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function _delete(_x) {
            return _delete2.apply(this, arguments);
          }
          return _delete;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 34: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var utility = require2("utility");
        var _require = require2("../utils/obj2xml"), obj2xml = _require.obj2xml;
        var proto = exports3;
        proto.deleteMulti = /* @__PURE__ */ function() {
          var _deleteMulti = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(names) {
            var options, objects, i, object, _names$i, key, versionId, paramXMLObj, paramXML, params, result, r, deleted, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    objects = [];
                    if (!(!names || !names.length)) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("names is required");
                  case 4:
                    for (i = 0; i < names.length; i++) {
                      object = {};
                      if (typeof names[i] === "string") {
                        object.Key = utility.escape(this._objectName(names[i]));
                      } else {
                        _names$i = names[i], key = _names$i.key, versionId = _names$i.versionId;
                        object.Key = utility.escape(this._objectName(key));
                        object.VersionId = versionId;
                      }
                      objects.push(object);
                    }
                    paramXMLObj = {
                      Delete: {
                        Quiet: !!options.quiet,
                        Object: objects
                      }
                    };
                    paramXML = obj2xml(paramXMLObj, {
                      headers: true
                    });
                    options.subres = Object.assign({
                      delete: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    params = this._objectRequestParams("POST", "", options);
                    params.mime = "xml";
                    params.content = paramXML;
                    params.xmlResponse = true;
                    params.successStatuses = [200];
                    _context.next = 16;
                    return this.request(params);
                  case 16:
                    result = _context.sent;
                    r = result.data;
                    deleted = r && r.Deleted || null;
                    if (deleted) {
                      if (!Array.isArray(deleted)) {
                        deleted = [deleted];
                      }
                    }
                    return _context.abrupt("return", {
                      res: result.res,
                      deleted: deleted || []
                    });
                  case 21:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function deleteMulti(_x) {
            return _deleteMulti.apply(this, arguments);
          }
          return deleteMulti;
        }();
      }, { "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325, "utility": 545 }], 35: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        proto.deleteObjectTagging = /* @__PURE__ */ function() {
          var _deleteObjectTagging = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name) {
            var options, params, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    options.subres = Object.assign({
                      tagging: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    name = this._objectName(name);
                    params = this._objectRequestParams("DELETE", name, options);
                    params.successStatuses = [204];
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      status: result.status,
                      res: result.res
                    });
                  case 10:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function deleteObjectTagging(_x) {
            return _deleteObjectTagging.apply(this, arguments);
          }
          return deleteObjectTagging;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 36: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.concat.js");
        var urlutil = require2("url");
        var _require = require2("../utils/isIP"), isIP = _require.isIP;
        var proto = exports3;
        proto.generateObjectUrl = function generateObjectUrl(name, baseUrl) {
          if (isIP(this.options.endpoint.hostname)) {
            throw new Error("can not get the object URL when endpoint is IP");
          }
          if (!baseUrl) {
            baseUrl = this.options.endpoint.format();
            var copyUrl = urlutil.parse(baseUrl);
            var bucket = this.options.bucket;
            copyUrl.hostname = "".concat(bucket, ".").concat(copyUrl.hostname);
            copyUrl.host = "".concat(bucket, ".").concat(copyUrl.host);
            baseUrl = copyUrl.format();
          } else if (baseUrl[baseUrl.length - 1] !== "/") {
            baseUrl += "/";
          }
          return baseUrl + this._escape(this._objectName(name));
        };
      }, { "../utils/isIP": 73, "core-js/modules/es.array.concat.js": 310, "url": 543 }], 37: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
            var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
            require2("core-js/modules/es.object.assign.js");
            var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
            var fs = require2("fs");
            var is = require2("is-type-of");
            var _require = require2("../utils/isObject"), isObject2 = _require.isObject;
            var proto = exports3;
            proto.get = /* @__PURE__ */ function() {
              var _get = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, file) {
                var options, writeStream, needDestroy, isBrowserEnv, responseCacheControl, defaultSubresOptions, result, params, _args = arguments;
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
                        writeStream = null;
                        needDestroy = false;
                        if (is.writableStream(file)) {
                          writeStream = file;
                        } else if (is.string(file)) {
                          writeStream = fs.createWriteStream(file);
                          needDestroy = true;
                        } else if (isObject2(file)) {
                          options = file;
                        }
                        options = options || {};
                        isBrowserEnv = process && process.browser;
                        responseCacheControl = options.responseCacheControl === null ? "" : "no-cache";
                        defaultSubresOptions = isBrowserEnv && responseCacheControl ? {
                          "response-cache-control": responseCacheControl
                        } : {};
                        options.subres = Object.assign(defaultSubresOptions, options.subres);
                        if (options.versionId) {
                          options.subres.versionId = options.versionId;
                        }
                        if (options.process) {
                          options.subres["x-oss-process"] = options.process;
                        }
                        _context.prev = 11;
                        params = this._objectRequestParams("GET", name, options);
                        params.writeStream = writeStream;
                        params.successStatuses = [200, 206, 304];
                        _context.next = 17;
                        return this.request(params);
                      case 17:
                        result = _context.sent;
                        if (needDestroy) {
                          writeStream.destroy();
                        }
                        _context.next = 28;
                        break;
                      case 21:
                        _context.prev = 21;
                        _context.t0 = _context["catch"](11);
                        if (!needDestroy) {
                          _context.next = 27;
                          break;
                        }
                        writeStream.destroy();
                        _context.next = 27;
                        return this._deleteFileSafe(file);
                      case 27:
                        throw _context.t0;
                      case 28:
                        return _context.abrupt("return", {
                          res: result.res,
                          content: result.data
                        });
                      case 29:
                      case "end":
                        return _context.stop();
                    }
                }, _callee, this, [[11, 21]]);
              }));
              function get2(_x, _x2) {
                return _get.apply(this, arguments);
              }
              return get2;
            }();
          }).call(this);
        }).call(this, require2("_process"));
      }, { "../utils/isObject": 74, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "_process": 538, "core-js/modules/es.object.assign.js": 325, "fs": 102, "is-type-of": 537 }], 38: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        proto.getACL = /* @__PURE__ */ function() {
          var _getACL = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name) {
            var options, params, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    options.subres = Object.assign({
                      acl: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    name = this._objectName(name);
                    params = this._objectRequestParams("GET", name, options);
                    params.successStatuses = [200];
                    params.xmlResponse = true;
                    _context.next = 9;
                    return this.request(params);
                  case 9:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      acl: result.data.AccessControlList.Grant,
                      owner: {
                        id: result.data.Owner.ID,
                        displayName: result.data.Owner.DisplayName
                      },
                      res: result.res
                    });
                  case 11:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function getACL(_x) {
            return _getACL.apply(this, arguments);
          }
          return getACL;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 39: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.array.map.js");
        require2("core-js/modules/es.number.constructor.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        var _require = require2("../utils/isObject"), isObject2 = _require.isObject;
        var _require2 = require2("../utils/isArray"), isArray2 = _require2.isArray;
        var _require3 = require2("../utils/parseRestoreInfo"), parseRestoreInfo = _require3.parseRestoreInfo;
        proto.getBucketVersions = getBucketVersions;
        proto.listObjectVersions = getBucketVersions;
        function getBucketVersions() {
          return _getBucketVersions.apply(this, arguments);
        }
        function _getBucketVersions() {
          _getBucketVersions = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var query, options, params, result, objects, deleteMarker, that, prefixes, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    query = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {};
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    if (!(query.versionIdMarker && query.keyMarker === void 0)) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("A version-id marker cannot be specified without a key marker");
                  case 4:
                    options.subres = Object.assign({
                      versions: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    params = this._objectRequestParams("GET", "", options);
                    params.xmlResponse = true;
                    params.successStatuses = [200];
                    params.query = formatQuery(query);
                    _context.next = 12;
                    return this.request(params);
                  case 12:
                    result = _context.sent;
                    objects = result.data.Version || [];
                    deleteMarker = result.data.DeleteMarker || [];
                    that = this;
                    if (objects) {
                      if (!Array.isArray(objects)) {
                        objects = [objects];
                      }
                      objects = objects.map(function(obj) {
                        return {
                          name: obj.Key,
                          url: that._objectUrl(obj.Key),
                          lastModified: obj.LastModified,
                          isLatest: obj.IsLatest === "true",
                          versionId: obj.VersionId,
                          etag: obj.ETag,
                          type: obj.Type,
                          size: Number(obj.Size),
                          storageClass: obj.StorageClass,
                          owner: {
                            id: obj.Owner.ID,
                            displayName: obj.Owner.DisplayName
                          },
                          restoreInfo: parseRestoreInfo(obj.RestoreInfo)
                        };
                      });
                    }
                    if (deleteMarker) {
                      if (!isArray2(deleteMarker)) {
                        deleteMarker = [deleteMarker];
                      }
                      deleteMarker = deleteMarker.map(function(obj) {
                        return {
                          name: obj.Key,
                          lastModified: obj.LastModified,
                          versionId: obj.VersionId,
                          owner: {
                            id: obj.Owner.ID,
                            displayName: obj.Owner.DisplayName
                          }
                        };
                      });
                    }
                    prefixes = result.data.CommonPrefixes || null;
                    if (prefixes) {
                      if (!isArray2(prefixes)) {
                        prefixes = [prefixes];
                      }
                      prefixes = prefixes.map(function(item) {
                        return item.Prefix;
                      });
                    }
                    return _context.abrupt("return", {
                      res: result.res,
                      objects,
                      deleteMarker,
                      prefixes,
                      // attirbute of legacy error
                      nextMarker: result.data.NextKeyMarker || null,
                      // attirbute of legacy error
                      NextVersionIdMarker: result.data.NextVersionIdMarker || null,
                      nextKeyMarker: result.data.NextKeyMarker || null,
                      nextVersionIdMarker: result.data.NextVersionIdMarker || null,
                      isTruncated: result.data.IsTruncated === "true"
                    });
                  case 21:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _getBucketVersions.apply(this, arguments);
        }
        function camel2Line(name) {
          return name.replace(/([A-Z])/g, "-$1").toLowerCase();
        }
        function formatQuery() {
          var query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var obj = {};
          if (isObject2(query)) {
            Object.keys(query).forEach(function(key) {
              obj[camel2Line(key)] = query[key];
            });
          }
          return obj;
        }
      }, { "../utils/isArray": 67, "../utils/isObject": 74, "../utils/parseRestoreInfo": 78, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.number.constructor.js": 324, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.replace.js": 345, "core-js/modules/web.dom-collections.for-each.js": 380 }], 40: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        proto.getObjectMeta = /* @__PURE__ */ function() {
          var _getObjectMeta = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = options || {};
                    name = this._objectName(name);
                    options.subres = Object.assign({
                      objectMeta: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    params = this._objectRequestParams("HEAD", name, options);
                    params.successStatuses = [200];
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      status: result.status,
                      res: result.res
                    });
                  case 10:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function getObjectMeta(_x, _x2) {
            return _getObjectMeta.apply(this, arguments);
          }
          return getObjectMeta;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 41: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        var _require = require2("../utils/isObject"), isObject2 = _require.isObject;
        proto.getObjectTagging = /* @__PURE__ */ function() {
          var _getObjectTagging = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name) {
            var options, params, result, Tagging, Tag, tag2, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    options.subres = Object.assign({
                      tagging: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    name = this._objectName(name);
                    params = this._objectRequestParams("GET", name, options);
                    params.successStatuses = [200];
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    _context.next = 11;
                    return this.parseXML(result.data);
                  case 11:
                    Tagging = _context.sent;
                    Tag = Tagging.TagSet.Tag;
                    Tag = Tag && isObject2(Tag) ? [Tag] : Tag || [];
                    tag2 = {};
                    Tag.forEach(function(item) {
                      tag2[item.Key] = item.Value;
                    });
                    return _context.abrupt("return", {
                      status: result.status,
                      res: result.res,
                      tag: tag2
                    });
                  case 17:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function getObjectTagging(_x) {
            return _getObjectTagging.apply(this, arguments);
          }
          return getObjectTagging;
        }();
      }, { "../utils/isObject": 74, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/web.dom-collections.for-each.js": 380 }], 42: [function(require2, module3, exports3) {
        var _require = require2("../utils/isIP"), isIP = _require.isIP;
        var proto = exports3;
        proto.getObjectUrl = function getObjectUrl(name, baseUrl) {
          if (isIP(this.options.endpoint.hostname)) {
            throw new Error("can not get the object URL when endpoint is IP");
          }
          if (!baseUrl) {
            baseUrl = this.options.endpoint.format();
          } else if (baseUrl[baseUrl.length - 1] !== "/") {
            baseUrl += "/";
          }
          return baseUrl + this._escape(this._objectName(name));
        };
      }, { "../utils/isIP": 73 }], 43: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        proto.getSymlink = /* @__PURE__ */ function() {
          var _getSymlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name) {
            var options, params, result, target, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    options.subres = Object.assign({
                      symlink: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    name = this._objectName(name);
                    params = this._objectRequestParams("GET", name, options);
                    params.successStatuses = [200];
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    target = result.res.headers["x-oss-symlink-target"];
                    return _context.abrupt("return", {
                      targetName: decodeURIComponent(target),
                      res: result.res
                    });
                  case 11:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function getSymlink(_x) {
            return _getSymlink.apply(this, arguments);
          }
          return getSymlink;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 44: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/checkEnv"), checkEnv = _require.checkEnv;
        var proto = exports3;
        proto.head = /* @__PURE__ */ function() {
          var _head = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name) {
            var options, params, result, data, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    checkEnv("Because HeadObject has gzip enabled, head cannot get the file size correctly. If you need to get the file size, please use getObjectMeta");
                    options.subres = Object.assign({}, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    params = this._objectRequestParams("HEAD", name, options);
                    params.successStatuses = [200, 304];
                    _context.next = 8;
                    return this.request(params);
                  case 8:
                    result = _context.sent;
                    data = {
                      meta: null,
                      res: result.res,
                      status: result.status
                    };
                    if (result.status === 200) {
                      Object.keys(result.headers).forEach(function(k) {
                        if (k.indexOf("x-oss-meta-") === 0) {
                          if (!data.meta) {
                            data.meta = {};
                          }
                          data.meta[k.substring(11)] = result.headers[k];
                        }
                      });
                    }
                    return _context.abrupt("return", data);
                  case 12:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function head(_x) {
            return _head.apply(this, arguments);
          }
          return head;
        }();
      }, { "../utils/checkEnv": 55, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/web.dom-collections.for-each.js": 380 }], 45: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        proto.putACL = /* @__PURE__ */ function() {
          var _putACL = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, acl, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = options || {};
                    options.subres = Object.assign({
                      acl: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    options.headers = options.headers || {};
                    options.headers["x-oss-object-acl"] = acl;
                    name = this._objectName(name);
                    params = this._objectRequestParams("PUT", name, options);
                    params.successStatuses = [200];
                    _context.next = 10;
                    return this.request(params);
                  case 10:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 12:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function putACL(_x, _x2, _x3) {
            return _putACL.apply(this, arguments);
          }
          return putACL;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 46: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.array.map.js");
        require2("core-js/modules/es.object.keys.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("../utils/obj2xml"), obj2xml = _require.obj2xml;
        var _require2 = require2("../utils/checkObjectTag"), checkObjectTag = _require2.checkObjectTag;
        var proto = exports3;
        proto.putObjectTagging = /* @__PURE__ */ function() {
          var _putObjectTagging = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, tag2) {
            var options, params, paramXMLObj, result, _args = arguments;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
                    checkObjectTag(tag2);
                    options.subres = Object.assign({
                      tagging: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    name = this._objectName(name);
                    params = this._objectRequestParams("PUT", name, options);
                    params.successStatuses = [200];
                    tag2 = Object.keys(tag2).map(function(key) {
                      return {
                        Key: key,
                        Value: tag2[key]
                      };
                    });
                    paramXMLObj = {
                      Tagging: {
                        TagSet: {
                          Tag: tag2
                        }
                      }
                    };
                    params.mime = "xml";
                    params.content = obj2xml(paramXMLObj);
                    _context.next = 13;
                    return this.request(params);
                  case 13:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res,
                      status: result.status
                    });
                  case 15:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function putObjectTagging(_x, _x2) {
            return _putObjectTagging.apply(this, arguments);
          }
          return putObjectTagging;
        }();
      }, { "../utils/checkObjectTag": 56, "../utils/obj2xml": 76, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.keys.js": 328 }], 47: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var proto = exports3;
        proto.putSymlink = /* @__PURE__ */ function() {
          var _putSymlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, targetName, options) {
            var params, result;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    options = options || {};
                    options.headers = options.headers || {};
                    targetName = this._escape(this._objectName(targetName));
                    this._convertMetaToHeaders(options.meta, options.headers);
                    options.headers["x-oss-symlink-target"] = targetName;
                    options.subres = Object.assign({
                      symlink: ""
                    }, options.subres);
                    if (options.versionId) {
                      options.subres.versionId = options.versionId;
                    }
                    if (options.storageClass) {
                      options.headers["x-oss-storage-class"] = options.storageClass;
                    }
                    name = this._objectName(name);
                    params = this._objectRequestParams("PUT", name, options);
                    params.successStatuses = [200];
                    _context.next = 13;
                    return this.request(params);
                  case 13:
                    result = _context.sent;
                    return _context.abrupt("return", {
                      res: result.res
                    });
                  case 15:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function putSymlink(_x, _x2, _x3) {
            return _putSymlink.apply(this, arguments);
          }
          return putSymlink;
        }();
      }, { "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.object.assign.js": 325 }], 48: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.regexp.to-string.js");
            var __importDefault = function(mod) {
              return mod && mod.__esModule ? mod : {
                "default": mod
              };
            };
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.signPostObjectPolicyV4 = void 0;
            var dateformat_1 = __importDefault(require2("dateformat"));
            var getStandardRegion_1 = require2("../utils/getStandardRegion");
            var policy2Str_1 = require2("../utils/policy2Str");
            var signUtils_1 = require2("../signUtils");
            function signPostObjectPolicyV4(policy, date) {
              var policyStr = Buffer2.from(policy2Str_1.policy2Str(policy), "utf8").toString("base64");
              var formattedDate = dateformat_1.default(date, "UTC:yyyymmdd'T'HHMMss'Z'");
              var onlyDate = formattedDate.split("T")[0];
              var signature = signUtils_1.getSignatureV4(this.options.accessKeySecret, onlyDate, getStandardRegion_1.getStandardRegion(this.options.region), policyStr);
              return signature;
            }
            exports3.signPostObjectPolicyV4 = signPostObjectPolicyV4;
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "../signUtils": 52, "../utils/getStandardRegion": 65, "../utils/policy2Str": 79, "buffer": 103, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339, "dateformat": 383 }], 49: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        var urlutil = require2("url");
        var utility = require2("utility");
        var copy = require2("copy-to");
        var signHelper = require2("../../common/signUtils");
        var _require = require2("../utils/isIP"), isIP = _require.isIP;
        var proto = exports3;
        proto.signatureUrl = function signatureUrl(name, options) {
          var strictObjectNameValidation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          if (isIP(this.options.endpoint.hostname)) {
            throw new Error("can not get the object URL when endpoint is IP");
          }
          if (strictObjectNameValidation && /^\?/.test(name)) {
            throw new Error("Invalid object name ".concat(name));
          }
          options = options || {};
          name = this._objectName(name);
          options.method = options.method || "GET";
          var expires = utility.timestamp() + (options.expires || 1800);
          var params = {
            bucket: this.options.bucket,
            object: name
          };
          var resource = this._getResource(params);
          if (this.options.stsToken) {
            options["security-token"] = this.options.stsToken;
          }
          var signRes = signHelper._signatureForURL(this.options.accessKeySecret, options, resource, expires);
          var url = urlutil.parse(this._getReqUrl(params));
          url.query = {
            OSSAccessKeyId: this.options.accessKeyId,
            Expires: expires,
            Signature: signRes.Signature
          };
          copy(signRes.subResource).to(url.query);
          return url.format();
        };
      }, { "../../common/signUtils": 52, "../utils/isIP": 73, "copy-to": 107, "core-js/modules/es.regexp.exec.js": 338, "url": 543, "utility": 545 }], 50: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.assign.js");
        require2("core-js/modules/es.array.join.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var dateFormat = require2("dateformat");
        var urlUtil = require2("url");
        var signHelper = require2("../../common/signUtils");
        var _require = require2("../utils/setSTSToken"), setSTSToken = _require.setSTSToken;
        var _require2 = require2("../utils/isFunction"), isFunction2 = _require2.isFunction;
        var _require3 = require2("../utils/getStandardRegion"), getStandardRegion = _require3.getStandardRegion;
        var proto = exports3;
        proto.signatureUrlV4 = /* @__PURE__ */ function() {
          var _signatureUrlV = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(method, expires, request, objectName, additionalHeaders) {
            var cloudBoxId, product, signRegion, headers, queries, date, formattedDate, onlyDate, fixedAdditionalHeaders, canonicalRequest, stringToSign, signedUrl;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    cloudBoxId = this.options.cloudBoxId;
                    product = signHelper.getProduct(cloudBoxId);
                    signRegion = signHelper.getSignRegion(getStandardRegion(this.options.region), cloudBoxId);
                    headers = request && request.headers || {};
                    queries = Object.assign({}, request && request.queries || {});
                    date = /* @__PURE__ */ new Date();
                    formattedDate = dateFormat(date, "UTC:yyyymmdd'T'HHMMss'Z'");
                    onlyDate = formattedDate.split("T")[0];
                    fixedAdditionalHeaders = signHelper.fixAdditionalHeaders(additionalHeaders);
                    if (fixedAdditionalHeaders.length > 0) {
                      queries["x-oss-additional-headers"] = fixedAdditionalHeaders.join(";");
                    }
                    queries["x-oss-credential"] = signHelper.getCredential(onlyDate, signRegion, this.options.accessKeyId, product);
                    queries["x-oss-date"] = formattedDate;
                    queries["x-oss-expires"] = expires;
                    queries["x-oss-signature-version"] = "OSS4-HMAC-SHA256";
                    if (!(this.options.stsToken && isFunction2(this.options.refreshSTSToken))) {
                      _context.next = 17;
                      break;
                    }
                    _context.next = 17;
                    return setSTSToken.call(this);
                  case 17:
                    if (this.options.stsToken) {
                      queries["x-oss-security-token"] = this.options.stsToken;
                    }
                    canonicalRequest = signHelper.getCanonicalRequest(method, {
                      headers,
                      queries
                    }, this.options.bucket, objectName, fixedAdditionalHeaders);
                    stringToSign = signHelper.getStringToSign(signRegion, formattedDate, canonicalRequest, product);
                    queries["x-oss-signature"] = signHelper.getSignatureV4(this.options.accessKeySecret, onlyDate, signRegion, stringToSign, product);
                    signedUrl = urlUtil.parse(this._getReqUrl({
                      bucket: this.options.bucket,
                      object: objectName
                    }));
                    signedUrl.query = Object.assign({}, queries);
                    return _context.abrupt("return", signedUrl.format());
                  case 24:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function signatureUrlV4(_x, _x2, _x3, _x4, _x5) {
            return _signatureUrlV.apply(this, arguments);
          }
          return signatureUrlV4;
        }();
      }, { "../../common/signUtils": 52, "../utils/getStandardRegion": 65, "../utils/isFunction": 72, "../utils/setSTSToken": 82, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.join.js": 317, "core-js/modules/es.object.assign.js": 325, "dateformat": 383, "url": 543 }], 51: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.array.iterator.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.promise.js");
        require2("core-js/modules/es.string.iterator.js");
        require2("core-js/modules/web.dom-collections.iterator.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.function.name.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        var _require = require2("./utils/isArray"), isArray2 = _require.isArray;
        var proto = exports3;
        proto._parallelNode = /* @__PURE__ */ function() {
          var _parallelNode2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(todo, parallel, fn, sourceData) {
            var that, jobErr, jobs, tempBatch, remainder, batch, taskIndex, i;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    that = this;
                    jobErr = [];
                    jobs = [];
                    tempBatch = todo.length / parallel;
                    remainder = todo.length % parallel;
                    batch = remainder === 0 ? tempBatch : (todo.length - remainder) / parallel + 1;
                    taskIndex = 1;
                    i = 0;
                  case 8:
                    if (!(i < todo.length)) {
                      _context.next = 26;
                      break;
                    }
                    if (!that.isCancel()) {
                      _context.next = 11;
                      break;
                    }
                    return _context.abrupt("break", 26);
                  case 11:
                    if (sourceData) {
                      jobs.push(fn(that, todo[i], sourceData));
                    } else {
                      jobs.push(fn(that, todo[i]));
                    }
                    if (!(jobs.length === parallel || taskIndex === batch && i === todo.length - 1)) {
                      _context.next = 23;
                      break;
                    }
                    _context.prev = 13;
                    taskIndex += 1;
                    _context.next = 17;
                    return Promise.all(jobs);
                  case 17:
                    _context.next = 22;
                    break;
                  case 19:
                    _context.prev = 19;
                    _context.t0 = _context["catch"](13);
                    jobErr.push(_context.t0);
                  case 22:
                    jobs = [];
                  case 23:
                    i++;
                    _context.next = 8;
                    break;
                  case 26:
                    return _context.abrupt("return", jobErr);
                  case 27:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this, [[13, 19]]);
          }));
          function _parallelNode(_x, _x2, _x3, _x4) {
            return _parallelNode2.apply(this, arguments);
          }
          return _parallelNode;
        }();
        proto._parallel = function _parallel(todo, parallel, jobPromise) {
          var that = this;
          return new Promise(function(resolve2) {
            var _jobErr = [];
            if (parallel <= 0 || !todo) {
              resolve2(_jobErr);
              return;
            }
            function onlyOnce(fn) {
              return function() {
                if (fn === null)
                  throw new Error("Callback was already called.");
                var callFn = fn;
                fn = null;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                callFn.apply(this, args);
              };
            }
            function createArrayIterator(coll) {
              var i = -1;
              var len = coll.length;
              return function next() {
                return ++i < len && !that.isCancel() ? {
                  value: coll[i],
                  key: i
                } : null;
              };
            }
            var nextElem = createArrayIterator(todo);
            var done = false;
            var running = 0;
            var looping = false;
            function iterateeCallback(err) {
              running -= 1;
              if (err) {
                done = true;
                _jobErr.push(err);
                resolve2(_jobErr);
              } else if (done && running <= 0) {
                done = true;
                resolve2(_jobErr);
              } else if (!looping) {
                if (that.isCancel()) {
                  resolve2(_jobErr);
                } else {
                  replenish();
                }
              }
            }
            function iteratee(value, callback) {
              jobPromise(value).then(function(result) {
                callback(null, result);
              }).catch(function(err) {
                callback(err);
              });
            }
            function replenish() {
              looping = true;
              while (running < parallel && !done && !that.isCancel()) {
                var elem = nextElem();
                if (elem === null || _jobErr.length > 0) {
                  done = true;
                  if (running <= 0) {
                    resolve2(_jobErr);
                  }
                  return;
                }
                running += 1;
                iteratee(elem.value, onlyOnce(iterateeCallback));
              }
              looping = false;
            }
            replenish();
          });
        };
        proto.cancel = function cancel(abort) {
          this.options.cancelFlag = true;
          if (isArray2(this.multipartUploadStreams)) {
            this.multipartUploadStreams.forEach(function(_) {
              if (_.destroyed === false) {
                var err = {
                  name: "cancel",
                  message: "cancel"
                };
                _.destroy(err);
              }
            });
          }
          this.multipartUploadStreams = [];
          if (abort) {
            this.abortMultipartUpload(abort.name, abort.uploadId, abort.options);
          }
        };
        proto.isCancel = function isCancel() {
          return this.options.cancelFlag;
        };
        proto.resetCancelFlag = function resetCancelFlag() {
          this.options.cancelFlag = false;
        };
        proto._stop = function _stop() {
          this.options.cancelFlag = true;
        };
        proto._makeCancelEvent = function _makeCancelEvent() {
          var cancelEvent = {
            status: 0,
            name: "cancel"
          };
          return cancelEvent;
        };
        proto._makeAbortEvent = function _makeAbortEvent() {
          var abortEvent = {
            status: 0,
            name: "abort",
            message: "upload task has been abort"
          };
          return abortEvent;
        };
      }, { "./utils/isArray": 67, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.iterator.js": 316, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.string.iterator.js": 343, "core-js/modules/web.dom-collections.for-each.js": 380, "core-js/modules/web.dom-collections.iterator.js": 381 }], 52: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
            var _toConsumableArray2 = _interopRequireDefault(require2("@babel/runtime/helpers/toConsumableArray"));
            require2("core-js/modules/es.string.trim.js");
            require2("core-js/modules/es.array.sort.js");
            require2("core-js/modules/es.array.join.js");
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/web.dom-collections.for-each.js");
            require2("core-js/modules/es.object.keys.js");
            require2("core-js/modules/es.array.concat.js");
            require2("core-js/modules/es.array.filter.js");
            require2("core-js/modules/es.array.iterator.js");
            require2("core-js/modules/es.set.js");
            require2("core-js/modules/es.string.iterator.js");
            require2("core-js/modules/web.dom-collections.iterator.js");
            require2("core-js/modules/es.array.map.js");
            require2("core-js/modules/es.string.starts-with.js");
            require2("core-js/modules/es.regexp.exec.js");
            require2("core-js/modules/es.string.replace.js");
            require2("core-js/modules/es.object.entries.js");
            require2("core-js/modules/es.regexp.to-string.js");
            var crypto = require2("./../../shims/crypto/crypto.js");
            var is = require2("is-type-of");
            var qs2 = require2("qs");
            var _require = require2("./utils/lowercaseKeyHeader"), lowercaseKeyHeader = _require.lowercaseKeyHeader;
            var _require2 = require2("./utils/encodeString"), encodeString = _require2.encodeString;
            exports3.getProduct = function getProduct(cloudBoxId) {
              if (cloudBoxId === void 0)
                return "oss";
              return "oss-cloudbox";
            };
            exports3.getSignRegion = function getSignRegion(region, cloudBoxId) {
              if (cloudBoxId === void 0)
                return region;
              return cloudBoxId;
            };
            exports3.buildCanonicalizedResource = function buildCanonicalizedResource(resourcePath, parameters) {
              var canonicalizedResource = "".concat(resourcePath);
              var separatorString = "?";
              if (is.string(parameters) && parameters.trim() !== "") {
                canonicalizedResource += separatorString + parameters;
              } else if (is.array(parameters)) {
                parameters.sort();
                canonicalizedResource += separatorString + parameters.join("&");
              } else if (parameters) {
                var processFunc = function processFunc2(key) {
                  canonicalizedResource += separatorString + key;
                  if (parameters[key] || parameters[key] === 0) {
                    canonicalizedResource += "=".concat(parameters[key]);
                  }
                  separatorString = "&";
                };
                Object.keys(parameters).sort().forEach(processFunc);
              }
              return canonicalizedResource;
            };
            exports3.buildCanonicalString = function canonicalString(method, resourcePath, request, expires) {
              request = request || {};
              var headers = lowercaseKeyHeader(request.headers);
              var OSS_PREFIX = "x-oss-";
              var ossHeaders = [];
              var headersToSign = {};
              var signContent = [method.toUpperCase(), headers["content-md5"] || "", headers["content-type"], expires || headers["x-oss-date"]];
              Object.keys(headers).forEach(function(key) {
                var lowerKey = key.toLowerCase();
                if (lowerKey.indexOf(OSS_PREFIX) === 0) {
                  headersToSign[lowerKey] = String(headers[key]).trim();
                }
              });
              Object.keys(headersToSign).sort().forEach(function(key) {
                ossHeaders.push("".concat(key, ":").concat(headersToSign[key]));
              });
              signContent = signContent.concat(ossHeaders);
              signContent.push(this.buildCanonicalizedResource(resourcePath, request.parameters));
              return signContent.join("\n");
            };
            exports3.computeSignature = function computeSignature(accessKeySecret, canonicalString) {
              var headerEncoding = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "utf-8";
              var signature = crypto.createHmac("sha1", accessKeySecret);
              return signature.update(Buffer2.from(canonicalString, headerEncoding)).digest("base64");
            };
            exports3.authorization = function authorization(accessKeyId, accessKeySecret, canonicalString, headerEncoding) {
              return "OSS ".concat(accessKeyId, ":").concat(this.computeSignature(accessKeySecret, canonicalString, headerEncoding));
            };
            exports3.fixAdditionalHeaders = function(additionalHeaders) {
              if (!additionalHeaders) {
                return [];
              }
              var OSS_PREFIX = "x-oss-";
              return (0, _toConsumableArray2.default)(new Set(additionalHeaders.map(function(v) {
                return v.toLowerCase();
              }))).filter(function(v) {
                return v !== "content-type" && v !== "content-md5" && !v.startsWith(OSS_PREFIX);
              }).sort();
            };
            exports3.getCanonicalRequest = function getCanonicalRequest(method, request, bucketName, objectName, additionalHeaders) {
              var headers = lowercaseKeyHeader(request.headers);
              var queries = request.queries || {};
              var OSS_PREFIX = "x-oss-";
              if (objectName && !bucketName) {
                throw Error("Please ensure that bucketName is passed into getCanonicalRequest.");
              }
              var signContent = [
                method.toUpperCase(),
                // HTTP Verb
                encodeString("/".concat(bucketName ? "".concat(bucketName, "/") : "").concat(objectName || "")).replace(/%2F/g, "/")
                // Canonical URI
              ];
              signContent.push(qs2.stringify(queries, {
                encoder: encodeString,
                sort: function sort(a, b) {
                  return a.localeCompare(b);
                },
                strictNullHandling: true
              }));
              if (additionalHeaders) {
                additionalHeaders.forEach(function(v) {
                  if (!Object.prototype.hasOwnProperty.call(headers, v)) {
                    throw Error("Can't find additional header ".concat(v, " in request headers."));
                  }
                });
              }
              var tempHeaders = new Set(additionalHeaders);
              Object.keys(headers).forEach(function(v) {
                if (v === "content-type" || v === "content-md5" || v.startsWith(OSS_PREFIX)) {
                  tempHeaders.add(v);
                }
              });
              var canonicalHeaders = "".concat((0, _toConsumableArray2.default)(tempHeaders).sort().map(function(v) {
                return "".concat(v, ":").concat(is.string(headers[v]) ? headers[v].trim() : headers[v], "\n");
              }).join(""));
              signContent.push(canonicalHeaders);
              if (additionalHeaders && additionalHeaders.length > 0) {
                signContent.push(additionalHeaders.join(";"));
              } else {
                signContent.push("");
              }
              signContent.push(headers["x-oss-content-sha256"] || "UNSIGNED-PAYLOAD");
              return signContent.join("\n");
            };
            exports3.getCredential = function getCredential(date, region, accessKeyId) {
              var product = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "oss";
              var tempCredential = "".concat(date, "/").concat(region, "/").concat(product, "/aliyun_v4_request");
              if (accessKeyId) {
                return "".concat(accessKeyId, "/").concat(tempCredential);
              }
              return tempCredential;
            };
            exports3.getStringToSign = function getStringToSign(region, date, canonicalRequest) {
              var product = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "oss";
              var stringToSign = [
                "OSS4-HMAC-SHA256",
                date,
                // TimeStamp
                this.getCredential(date.split("T")[0], region, void 0, product),
                // Scope
                crypto.createHash("sha256").update(canonicalRequest).digest("hex")
                // Hashed Canonical Request
              ];
              return stringToSign.join("\n");
            };
            exports3.getSignatureV4 = function getSignatureV4(accessKeySecret, date, region, stringToSign) {
              var product = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "oss";
              var signingDate = crypto.createHmac("sha256", "aliyun_v4".concat(accessKeySecret)).update(date).digest();
              var signingRegion = crypto.createHmac("sha256", signingDate).update(region).digest();
              var signingOss = crypto.createHmac("sha256", signingRegion).update(product).digest();
              var signingKey = crypto.createHmac("sha256", signingOss).update("aliyun_v4_request").digest();
              var signatureValue = crypto.createHmac("sha256", signingKey).update(stringToSign).digest("hex");
              return signatureValue;
            };
            exports3.authorizationV4 = function authorizationV4(accessKeyId, accessKeySecret, region, method, request, bucketName, objectName, additionalHeaders) {
              var headerEncoding = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : "utf-8";
              var cloudBoxId = arguments.length > 9 ? arguments[9] : void 0;
              var product = this.getProduct(cloudBoxId);
              var fixedAdditionalHeaders = this.fixAdditionalHeaders(additionalHeaders);
              var fixedHeaders = {};
              Object.entries(request.headers).forEach(function(v) {
                fixedHeaders[v[0]] = is.string(v[1]) ? Buffer2.from(v[1], headerEncoding).toString() : v[1];
              });
              var date = fixedHeaders["x-oss-date"] || request.queries && request.queries["x-oss-date"];
              var canonicalRequest = this.getCanonicalRequest(method, {
                headers: fixedHeaders,
                queries: request.queries
              }, bucketName, objectName, fixedAdditionalHeaders);
              var stringToSign = this.getStringToSign(region, date, canonicalRequest, product);
              var onlyDate = date.split("T")[0];
              var signatureValue = this.getSignatureV4(accessKeySecret, onlyDate, region, stringToSign, product);
              var additionalHeadersValue = fixedAdditionalHeaders.length > 0 ? "AdditionalHeaders=".concat(fixedAdditionalHeaders.join(";"), ",") : "";
              return "OSS4-HMAC-SHA256 Credential=".concat(this.getCredential(onlyDate, region, accessKeyId, product), ",").concat(additionalHeadersValue, "Signature=").concat(signatureValue);
            };
            exports3._signatureForURL = function _signatureForURL(accessKeySecret) {
              var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              var resource = arguments.length > 2 ? arguments[2] : void 0;
              var expires = arguments.length > 3 ? arguments[3] : void 0;
              var headerEncoding = arguments.length > 4 ? arguments[4] : void 0;
              var headers = {};
              var _options$subResource = options.subResource, subResource = _options$subResource === void 0 ? {} : _options$subResource;
              if (options.process) {
                var processKeyword = "x-oss-process";
                subResource[processKeyword] = options.process;
              }
              if (options.trafficLimit) {
                var trafficLimitKey = "x-oss-traffic-limit";
                subResource[trafficLimitKey] = options.trafficLimit;
              }
              if (options.response) {
                Object.keys(options.response).forEach(function(k) {
                  var key = "response-".concat(k.toLowerCase());
                  subResource[key] = options.response[k];
                });
              }
              Object.keys(options).forEach(function(key) {
                var lowerKey = key.toLowerCase();
                var value = options[key];
                if (lowerKey.indexOf("x-oss-") === 0) {
                  headers[lowerKey] = value;
                } else if (lowerKey.indexOf("content-md5") === 0) {
                  headers[key] = value;
                } else if (lowerKey.indexOf("content-type") === 0) {
                  headers[key] = value;
                }
              });
              if (Object.prototype.hasOwnProperty.call(options, "security-token")) {
                subResource["security-token"] = options["security-token"];
              }
              if (Object.prototype.hasOwnProperty.call(options, "callback")) {
                var json = {
                  callbackUrl: encodeURI(options.callback.url),
                  callbackBody: options.callback.body
                };
                if (options.callback.host) {
                  json.callbackHost = options.callback.host;
                }
                if (options.callback.contentType) {
                  json.callbackBodyType = options.callback.contentType;
                }
                if (options.callback.callbackSNI) {
                  json.callbackSNI = options.callback.callbackSNI;
                }
                subResource.callback = Buffer2.from(JSON.stringify(json)).toString("base64");
                if (options.callback.customValue) {
                  var callbackVar = {};
                  Object.keys(options.callback.customValue).forEach(function(key) {
                    callbackVar["x:".concat(key)] = options.callback.customValue[key];
                  });
                  subResource["callback-var"] = Buffer2.from(JSON.stringify(callbackVar)).toString("base64");
                }
              }
              var canonicalString = this.buildCanonicalString(options.method, resource, {
                headers,
                parameters: subResource
              }, expires.toString());
              return {
                Signature: this.computeSignature(accessKeySecret, canonicalString, headerEncoding),
                subResource
              };
            };
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "./../../shims/crypto/crypto.js": 531, "./utils/encodeString": 61, "./utils/lowercaseKeyHeader": 75, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/toConsumableArray": 90, "buffer": 103, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.filter.js": 312, "core-js/modules/es.array.iterator.js": 316, "core-js/modules/es.array.join.js": 317, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.array.sort.js": 320, "core-js/modules/es.object.entries.js": 326, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.set.js": 341, "core-js/modules/es.string.iterator.js": 343, "core-js/modules/es.string.replace.js": 345, "core-js/modules/es.string.starts-with.js": 348, "core-js/modules/es.string.trim.js": 349, "core-js/modules/web.dom-collections.for-each.js": 380, "core-js/modules/web.dom-collections.iterator.js": 381, "is-type-of": 537, "qs": 445 }], 53: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.checkBucketName = void 0;
        exports3.checkBucketName = function(name) {
          var createBucket = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var bucketRegex = createBucket ? /^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$/ : /^[a-z0-9_][a-z0-9-_]{1,61}[a-z0-9_]$/;
          if (!bucketRegex.test(name)) {
            throw new Error("The bucket must be conform to the specifications");
          }
        };
      }, { "core-js/modules/es.regexp.exec.js": 338 }], 54: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.checkConfigValid = void 0;
        var checkConfigMap = {
          endpoint: checkEndpoint,
          region: /^[a-zA-Z0-9\-_]+$/
        };
        function checkEndpoint(endpoint) {
          if (typeof endpoint === "string") {
            return /^[a-zA-Z0-9._:/-]+$/.test(endpoint);
          } else if (endpoint.host) {
            return /^[a-zA-Z0-9._:/-]+$/.test(endpoint.host);
          }
          return false;
        }
        exports3.checkConfigValid = function(conf, key) {
          if (checkConfigMap[key]) {
            var isConfigValid = true;
            if (checkConfigMap[key] instanceof Function) {
              isConfigValid = checkConfigMap[key](conf);
            } else {
              isConfigValid = checkConfigMap[key].test(conf);
            }
            if (!isConfigValid) {
              throw new Error("The ".concat(key, " must be conform to the specifications"));
            }
          }
        };
      }, { "core-js/modules/es.regexp.exec.js": 338 }], 55: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.checkEnv = void 0;
            function checkEnv(msg) {
              if (process.browser) {
                console.warn(msg);
              }
            }
            exports3.checkEnv = checkEnv;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 538 }], 56: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.object.entries.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.checkObjectTag = void 0;
        var _require = require2("./checkValid"), checkValid = _require.checkValid;
        var _require2 = require2("./isObject"), isObject2 = _require2.isObject;
        var commonRules = [{
          validator: function validator(value) {
            if (typeof value !== "string") {
              throw new Error("the key and value of the tag must be String");
            }
          }
        }, {
          pattern: /^[a-zA-Z0-9 +-=._:/]+$/,
          msg: "tag can contain letters, numbers, spaces, and the following symbols: plus sign (+), hyphen (-), equal sign (=), period (.), underscore (_), colon (:), and forward slash (/)"
        }];
        var rules = {
          key: [].concat(commonRules, [{
            pattern: /^.{1,128}$/,
            msg: "tag key can be a maximum of 128 bytes in length"
          }]),
          value: [].concat(commonRules, [{
            pattern: /^.{0,256}$/,
            msg: "tag value can be a maximum of 256 bytes in length"
          }])
        };
        function checkObjectTag(tag2) {
          if (!isObject2(tag2)) {
            throw new Error("tag must be Object");
          }
          var entries2 = Object.entries(tag2);
          if (entries2.length > 10) {
            throw new Error("maximum of 10 tags for a object");
          }
          var rulesIndexKey = ["key", "value"];
          entries2.forEach(function(keyValue) {
            keyValue.forEach(function(item, index2) {
              checkValid(item, rules[rulesIndexKey[index2]]);
            });
          });
        }
        exports3.checkObjectTag = checkObjectTag;
      }, { "./checkValid": 57, "./isObject": 74, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.object.entries.js": 326, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/web.dom-collections.for-each.js": 380 }], 57: [function(require2, module3, exports3) {
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.regexp.exec.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.checkValid = void 0;
        function checkValid(_value, _rules) {
          _rules.forEach(function(rule) {
            if (rule.validator) {
              rule.validator(_value);
            } else if (rule.pattern && !rule.pattern.test(_value)) {
              throw new Error(rule.msg);
            }
          });
        }
        exports3.checkValid = checkValid;
      }, { "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/web.dom-collections.for-each.js": 380 }], 58: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            require2("core-js/modules/es.array.includes.js");
            require2("core-js/modules/es.string.includes.js");
            require2("core-js/modules/es.object.assign.js");
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/web.dom-collections.for-each.js");
            require2("core-js/modules/es.object.entries.js");
            require2("core-js/modules/es.array.concat.js");
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.createRequest = void 0;
            var crypto = require2("./../../../shims/crypto/crypto.js");
            var debug = require2("debug")("ali-oss");
            var _isString = require2("lodash/isString");
            var _isArray = require2("lodash/isArray");
            var _isObject = require2("lodash/isObject");
            var mime = require2("mime");
            var dateFormat = require2("dateformat");
            var copy = require2("copy-to");
            var path = require2("path");
            var _require = require2("./encoder"), encoder = _require.encoder;
            var _require2 = require2("./isIP"), isIP = _require2.isIP;
            var _require3 = require2("./setRegion"), setRegion = _require3.setRegion;
            var _require4 = require2("../client/getReqUrl"), getReqUrl = _require4.getReqUrl;
            var _require5 = require2("./isDingTalk"), isDingTalk = _require5.isDingTalk;
            function getHeader(headers, name) {
              return headers[name] || headers[name.toLowerCase()];
            }
            function delHeader(headers, name) {
              delete headers[name];
              delete headers[name.toLowerCase()];
            }
            function createRequest(params) {
              var date = /* @__PURE__ */ new Date();
              if (this.options.amendTimeSkewed) {
                date = +/* @__PURE__ */ new Date() + this.options.amendTimeSkewed;
              }
              var headers = {
                "x-oss-date": dateFormat(date, this.options.authorizationV4 ? "UTC:yyyymmdd'T'HHMMss'Z'" : "UTC:ddd, dd mmm yyyy HH:MM:ss 'GMT'")
              };
              if (this.options.authorizationV4) {
                headers["x-oss-content-sha256"] = "UNSIGNED-PAYLOAD";
              }
              if (typeof window !== "undefined") {
                headers["x-oss-user-agent"] = this.userAgent;
              }
              if (this.userAgent.includes("nodejs")) {
                headers["User-Agent"] = this.userAgent;
              }
              if (this.options.isRequestPay) {
                Object.assign(headers, {
                  "x-oss-request-payer": "requester"
                });
              }
              if (this.options.stsToken) {
                headers["x-oss-security-token"] = this.options.stsToken;
              }
              copy(params.headers).to(headers);
              if (!getHeader(headers, "Content-Type")) {
                if (params.mime && params.mime.indexOf("/") > 0) {
                  headers["Content-Type"] = params.mime;
                } else if (isDingTalk()) {
                  headers["Content-Type"] = "application/octet-stream";
                } else {
                  headers["Content-Type"] = mime.getType(params.mime || path.extname(params.object || ""));
                }
              }
              if (!getHeader(headers, "Content-Type")) {
                delHeader(headers, "Content-Type");
              }
              if (params.content) {
                if (!params.disabledMD5) {
                  if (!params.headers || !params.headers["Content-MD5"]) {
                    headers["Content-MD5"] = crypto.createHash("md5").update(Buffer2.from(params.content, "utf8")).digest("base64");
                  } else {
                    headers["Content-MD5"] = params.headers["Content-MD5"];
                  }
                }
                if (!headers["Content-Length"]) {
                  headers["Content-Length"] = params.content.length;
                }
              }
              var hasOwnProperty2 = Object.prototype.hasOwnProperty;
              for (var k in headers) {
                if (headers[k] && hasOwnProperty2.call(headers, k)) {
                  headers[k] = encoder(String(headers[k]), this.options.headerEncoding);
                }
              }
              var queries = {};
              if (_isString(params.subres)) {
                queries[params.subres] = null;
              } else if (_isArray(params.subres)) {
                params.subres.forEach(function(v) {
                  queries[v] = null;
                });
              } else if (_isObject(params.subres)) {
                Object.entries(params.subres).forEach(function(v) {
                  queries[v[0]] = v[1] === "" ? null : v[1];
                });
              }
              if (_isObject(params.query)) {
                Object.entries(params.query).forEach(function(v) {
                  queries[v[0]] = v[1];
                });
              }
              headers.authorization = this.options.authorizationV4 ? this.authorizationV4(params.method, {
                headers,
                queries
              }, params.bucket, params.object, params.additionalHeaders) : this.authorization(params.method, this._getResource(params), params.subres, headers, this.options.headerEncoding);
              if (isIP(this.options.endpoint.hostname)) {
                var _this$options = this.options, region = _this$options.region, internal = _this$options.internal, secure = _this$options.secure;
                var hostInfo = setRegion(region, internal, secure);
                headers.host = "".concat(params.bucket, ".").concat(hostInfo.host);
              }
              var url = getReqUrl.bind(this)(params);
              debug("request %s %s, with headers %j, !!stream: %s", params.method, url, headers, !!params.stream);
              var timeout = params.timeout || this.options.timeout;
              var reqParams = {
                method: params.method,
                content: params.content,
                stream: params.stream,
                headers,
                timeout,
                writeStream: params.writeStream,
                customResponse: params.customResponse,
                ctx: params.ctx || this.ctx
              };
              if (this.agent) {
                reqParams.agent = this.agent;
              }
              if (this.httpsAgent) {
                reqParams.httpsAgent = this.httpsAgent;
              }
              reqParams.enableProxy = !!this.options.enableProxy;
              reqParams.proxy = this.options.proxy ? this.options.proxy : null;
              return {
                url,
                params: reqParams
              };
            }
            exports3.createRequest = createRequest;
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "../client/getReqUrl": 25, "./../../../shims/crypto/crypto.js": 531, "./encoder": 62, "./isDingTalk": 70, "./isIP": 73, "./setRegion": 81, "buffer": 103, "copy-to": 107, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.entries.js": 326, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.string.includes.js": 342, "core-js/modules/web.dom-collections.for-each.js": 380, "dateformat": 383, "debug": 536, "lodash/isArray": 422, "lodash/isObject": 423, "lodash/isString": 425, "mime": 430, "path": 439 }], 59: [function(require2, module3, exports3) {
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.entries.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/es.array.includes.js");
        require2("core-js/modules/es.object.keys.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.dataFix = void 0;
        var isObject_1 = require2("./isObject");
        var TRUE = ["true", "TRUE", "1", 1];
        var FALSE = ["false", "FALSE", "0", 0];
        function dataFix(o2, conf, finalKill) {
          if (!isObject_1.isObject(o2))
            return;
          var _conf$remove = conf.remove, remove2 = _conf$remove === void 0 ? [] : _conf$remove, _conf$rename = conf.rename, rename = _conf$rename === void 0 ? {} : _conf$rename, _conf$camel = conf.camel, camel = _conf$camel === void 0 ? [] : _conf$camel, _conf$bool = conf.bool, bool = _conf$bool === void 0 ? [] : _conf$bool, _conf$lowerFirst = conf.lowerFirst, lowerFirst = _conf$lowerFirst === void 0 ? false : _conf$lowerFirst;
          remove2.forEach(function(v) {
            return delete o2[v];
          });
          Object.entries(rename).forEach(function(v) {
            if (!o2[v[0]])
              return;
            if (o2[v[1]])
              return;
            o2[v[1]] = o2[v[0]];
            delete o2[v[0]];
          });
          camel.forEach(function(v) {
            if (!o2[v])
              return;
            var afterKey = v.replace(/^(.)/, function($0) {
              return $0.toLowerCase();
            }).replace(/-(\w)/g, function(_, $1) {
              return $1.toUpperCase();
            });
            if (o2[afterKey])
              return;
            o2[afterKey] = o2[v];
          });
          bool.forEach(function(v) {
            o2[v] = fixBool(o2[v]);
          });
          if (typeof finalKill === "function") {
            finalKill(o2);
          }
          fixLowerFirst(o2, lowerFirst);
          return dataFix;
        }
        exports3.dataFix = dataFix;
        function fixBool(value) {
          if (!value)
            return false;
          if (TRUE.includes(value))
            return true;
          return FALSE.includes(value) ? false : value;
        }
        function fixLowerFirst(o2, lowerFirst) {
          if (lowerFirst) {
            Object.keys(o2).forEach(function(key) {
              var lowerK = key.replace(/^\w/, function(match) {
                return match.toLowerCase();
              });
              if (typeof o2[lowerK] === "undefined") {
                o2[lowerK] = o2[key];
                delete o2[key];
              }
            });
          }
        }
      }, { "./isObject": 74, "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.object.entries.js": 326, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.replace.js": 345, "core-js/modules/web.dom-collections.for-each.js": 380 }], 60: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        require2("core-js/modules/es.array.slice.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        var _typeof2 = _interopRequireDefault(require2("@babel/runtime/helpers/typeof"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.deepCopyWith = exports3.deepCopy = void 0;
        var isBuffer_1 = require2("./isBuffer");
        exports3.deepCopy = function(obj) {
          if (obj === null || (0, _typeof2.default)(obj) !== "object") {
            return obj;
          }
          if (isBuffer_1.isBuffer(obj)) {
            return obj.slice();
          }
          var copy = Array.isArray(obj) ? [] : {};
          Object.keys(obj).forEach(function(key) {
            copy[key] = exports3.deepCopy(obj[key]);
          });
          return copy;
        };
        exports3.deepCopyWith = function(obj, customizer) {
          function deepCopyWithHelper(value, innerKey, innerObject) {
            var result = customizer(value, innerKey, innerObject);
            if (result !== void 0)
              return result;
            if (value === null || (0, _typeof2.default)(value) !== "object") {
              return value;
            }
            if (isBuffer_1.isBuffer(value)) {
              return value.slice();
            }
            var copy = Array.isArray(value) ? [] : {};
            Object.keys(value).forEach(function(k) {
              copy[k] = deepCopyWithHelper(value[k], k, value);
            });
            return copy;
          }
          if (customizer) {
            return deepCopyWithHelper(obj, "", null);
          } else {
            return exports3.deepCopy(obj);
          }
        };
      }, { "./isBuffer": 69, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/typeof": 91, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/web.dom-collections.for-each.js": 380 }], 61: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        var __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.encodeString = void 0;
        var toString_1 = __importDefault(require2("lodash/toString"));
        function encodeString(str) {
          var tempStr = toString_1.default(str);
          return encodeURIComponent(tempStr).replace(/[!'()*]/g, function(c) {
            return "%".concat(c.charCodeAt(0).toString(16).toUpperCase());
          });
        }
        exports3.encodeString = encodeString;
      }, { "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.replace.js": 345, "lodash/toString": 427 }], 62: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.regexp.to-string.js");
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.encoder = void 0;
            function encoder(str) {
              var encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "utf-8";
              if (encoding === "utf-8")
                return str;
              return Buffer2.from(str).toString("latin1");
            }
            exports3.encoder = encoder;
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "buffer": 103, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339 }], 63: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.map.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.formatInventoryConfig = void 0;
        var dataFix_1 = require2("../utils/dataFix");
        var isObject_1 = require2("../utils/isObject");
        var isArray_1 = require2("../utils/isArray");
        var formatObjKey_1 = require2("../utils/formatObjKey");
        function formatInventoryConfig(inventoryConfig) {
          var toArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          if (toArray && isObject_1.isObject(inventoryConfig))
            inventoryConfig = [inventoryConfig];
          if (isArray_1.isArray(inventoryConfig)) {
            inventoryConfig = inventoryConfig.map(formatFn);
          } else {
            inventoryConfig = formatFn(inventoryConfig);
          }
          return inventoryConfig;
        }
        exports3.formatInventoryConfig = formatInventoryConfig;
        function formatFn(_) {
          dataFix_1.dataFix(_, {
            bool: ["IsEnabled"]
          }, function(conf) {
            var _a2, _b;
            conf.prefix = conf.Filter.Prefix;
            delete conf.Filter;
            conf.OSSBucketDestination = conf.Destination.OSSBucketDestination;
            conf.OSSBucketDestination.rolename = conf.OSSBucketDestination.RoleArn.replace(/.*\//, "");
            delete conf.OSSBucketDestination.RoleArn;
            conf.OSSBucketDestination.bucket = conf.OSSBucketDestination.Bucket.replace(/.*:::/, "");
            delete conf.OSSBucketDestination.Bucket;
            delete conf.Destination;
            conf.frequency = conf.Schedule.Frequency;
            delete conf.Schedule.Frequency;
            if (((_a2 = conf === null || conf === void 0 ? void 0 : conf.OptionalFields) === null || _a2 === void 0 ? void 0 : _a2.Field) && !isArray_1.isArray((_b = conf.OptionalFields) === null || _b === void 0 ? void 0 : _b.Field))
              conf.OptionalFields.Field = [conf.OptionalFields.Field];
          });
          _ = formatObjKey_1.formatObjKey(_, "firstLowerCase", {
            exclude: ["OSSBucketDestination", "SSE-OSS", "SSE-KMS"]
          });
          return _;
        }
      }, { "../utils/dataFix": 59, "../utils/formatObjKey": 64, "../utils/isArray": 67, "../utils/isObject": 74, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.replace.js": 345 }], 64: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.array.includes.js");
        require2("core-js/modules/es.string.includes.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        var _typeof2 = _interopRequireDefault(require2("@babel/runtime/helpers/typeof"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.formatObjKey = void 0;
        function formatObjKey(obj, type, options) {
          if (obj === null || (0, _typeof2.default)(obj) !== "object") {
            return obj;
          }
          var o2;
          if (Array.isArray(obj)) {
            o2 = [];
            for (var i = 0; i < obj.length; i++) {
              o2.push(formatObjKey(obj[i], type, options));
            }
          } else {
            o2 = {};
            Object.keys(obj).forEach(function(key) {
              o2[handelFormat(key, type, options)] = formatObjKey(obj[key], type, options);
            });
          }
          return o2;
        }
        exports3.formatObjKey = formatObjKey;
        function handelFormat(key, type, options) {
          if (options && options.exclude && options.exclude.includes(key))
            return key;
          if (type === "firstUpperCase") {
            key = key.replace(/^./, function(_) {
              return _.toUpperCase();
            });
          } else if (type === "firstLowerCase") {
            key = key.replace(/^./, function(_) {
              return _.toLowerCase();
            });
          }
          return key;
        }
      }, { "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/typeof": 91, "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.includes.js": 342, "core-js/modules/es.string.replace.js": 345, "core-js/modules/web.dom-collections.for-each.js": 380 }], 65: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.getStandardRegion = void 0;
        function getStandardRegion(str) {
          return str.replace(/^oss-/g, "");
        }
        exports3.getStandardRegion = getStandardRegion;
      }, { "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.replace.js": 345 }], 66: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.getStrBytesCount = void 0;
        function getStrBytesCount(str) {
          var bytesCount = 0;
          for (var i = 0; i < str.length; i++) {
            var c = str.charAt(i);
            if (/^[\u00-\uff]$/.test(c)) {
              bytesCount += 1;
            } else {
              bytesCount += 2;
            }
          }
          return bytesCount;
        }
        exports3.getStrBytesCount = getStrBytesCount;
      }, { "core-js/modules/es.regexp.exec.js": 338 }], 67: [function(require2, module3, exports3) {
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.isArray = void 0;
        exports3.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }, { "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339 }], 68: [function(require2, module3, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.isBlob = void 0;
        function isBlob(blob) {
          return typeof Blob !== "undefined" && blob instanceof Blob;
        }
        exports3.isBlob = isBlob;
      }, {}], 69: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.isBuffer = void 0;
            function isBuffer(obj) {
              return Buffer2.isBuffer(obj);
            }
            exports3.isBuffer = isBuffer;
          }).call(this);
        }).call(this, { "isBuffer": require2("../../../node_modules/is-buffer/index.js") });
      }, { "../../../node_modules/is-buffer/index.js": 409 }], 70: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            require2("core-js/modules/es.array.includes.js");
            require2("core-js/modules/es.string.includes.js");
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.isDingTalk = void 0;
            function isDingTalk() {
              if (process.browser && window.navigator.userAgent.toLowerCase().includes("aliapp(dingtalk")) {
                return true;
              }
              return false;
            }
            exports3.isDingTalk = isDingTalk;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 538, "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.string.includes.js": 342 }], 71: [function(require2, module3, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.isFile = void 0;
        exports3.isFile = function(obj) {
          return typeof File !== "undefined" && obj instanceof File;
        };
      }, {}], 72: [function(require2, module3, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.isFunction = void 0;
        exports3.isFunction = function(v) {
          return typeof v === "function";
        };
      }, {}], 73: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.isIP = void 0;
        exports3.isIP = function(host2) {
          var ipv4Regex = /^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$/;
          var ipv6Regex = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
          return ipv4Regex.test(host2) || ipv6Regex.test(host2);
        };
      }, { "core-js/modules/es.regexp.exec.js": 338 }], 74: [function(require2, module3, exports3) {
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.isObject = void 0;
        exports3.isObject = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Object]";
        };
      }, { "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339 }], 75: [function(require2, module3, exports3) {
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.lowercaseKeyHeader = void 0;
        var isObject_1 = require2("./isObject");
        function lowercaseKeyHeader(headers) {
          var lowercaseHeader = {};
          if (isObject_1.isObject(headers)) {
            Object.keys(headers).forEach(function(key) {
              lowercaseHeader[key.toLowerCase()] = headers[key];
            });
          }
          return lowercaseHeader;
        }
        exports3.lowercaseKeyHeader = lowercaseKeyHeader;
      }, { "./isObject": 74, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/web.dom-collections.for-each.js": 380 }], 76: [function(require2, module3, exports3) {
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        require2("core-js/modules/web.dom-collections.for-each.js");
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.array.join.js");
        require2("core-js/modules/es.array.map.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.obj2xml = void 0;
        var formatObjKey_1 = require2("./formatObjKey");
        function type(params) {
          return Object.prototype.toString.call(params).replace(/(.*? |])/g, "").toLowerCase();
        }
        function obj2xml(obj, options) {
          var s2 = "";
          if (options && options.headers) {
            s2 = '<?xml version="1.0" encoding="UTF-8"?>\n';
          }
          if (options && options.firstUpperCase) {
            obj = formatObjKey_1.formatObjKey(obj, "firstUpperCase");
          }
          if (type(obj) === "object") {
            Object.keys(obj).forEach(function(key) {
              if (type(obj[key]) !== "undefined" && type(obj[key]) !== "null") {
                if (type(obj[key]) === "string" || type(obj[key]) === "number") {
                  s2 += "<".concat(key, ">").concat(obj[key], "</").concat(key, ">");
                } else if (type(obj[key]) === "object") {
                  s2 += "<".concat(key, ">").concat(obj2xml(obj[key]), "</").concat(key, ">");
                } else if (type(obj[key]) === "array") {
                  s2 += obj[key].map(function(keyChild) {
                    return "<".concat(key, ">").concat(obj2xml(keyChild), "</").concat(key, ">");
                  }).join("");
                } else {
                  s2 += "<".concat(key, ">").concat(obj[key].toString(), "</").concat(key, ">");
                }
              }
            });
          } else {
            s2 += obj.toString();
          }
          return s2;
        }
        exports3.obj2xml = obj2xml;
      }, { "./formatObjKey": 64, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.join.js": 317, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.replace.js": 345, "core-js/modules/web.dom-collections.for-each.js": 380 }], 77: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.slice.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        require2("core-js/modules/es.function.name.js");
        require2("core-js/modules/es.array.from.js");
        require2("core-js/modules/es.string.iterator.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.symbol.js");
        require2("core-js/modules/es.symbol.description.js");
        require2("core-js/modules/es.symbol.iterator.js");
        require2("core-js/modules/es.array.iterator.js");
        require2("core-js/modules/web.dom-collections.iterator.js");
        require2("core-js/modules/es.object.assign.js");
        function _createForOfIteratorHelper(o2, allowArrayLike) {
          var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
          if (!it) {
            if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
              if (it)
                o2 = it;
              var i = 0;
              var F = function F2() {
              };
              return { s: F, n: function n2() {
                if (i >= o2.length)
                  return { done: true };
                return { done: false, value: o2[i++] };
              }, e: function e2(_e) {
                throw _e;
              }, f: F };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var normalCompletion = true, didErr = false, err;
          return { s: function s2() {
            it = it.call(o2);
          }, n: function n2() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          }, e: function e2(_e2) {
            didErr = true;
            err = _e2;
          }, f: function f2() {
            try {
              if (!normalCompletion && it.return != null)
                it.return();
            } finally {
              if (didErr)
                throw err;
            }
          } };
        }
        function _unsupportedIterableToArray(o2, minLen) {
          if (!o2)
            return;
          if (typeof o2 === "string")
            return _arrayLikeToArray(o2, minLen);
          var n2 = Object.prototype.toString.call(o2).slice(8, -1);
          if (n2 === "Object" && o2.constructor)
            n2 = o2.constructor.name;
          if (n2 === "Map" || n2 === "Set")
            return Array.from(o2);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return _arrayLikeToArray(o2, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++)
            arr2[i] = arr[i];
          return arr2;
        }
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.omit = void 0;
        function omit(originalObject, keysToOmit) {
          var cloneObject = Object.assign({}, originalObject);
          var _iterator = _createForOfIteratorHelper(keysToOmit), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var path = _step.value;
              delete cloneObject[path];
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return cloneObject;
        }
        exports3.omit = omit;
      }, { "core-js/modules/es.array.from.js": 314, "core-js/modules/es.array.iterator.js": 316, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.iterator.js": 343, "core-js/modules/es.symbol.description.js": 351, "core-js/modules/es.symbol.iterator.js": 353, "core-js/modules/es.symbol.js": 354, "core-js/modules/web.dom-collections.iterator.js": 381 }], 78: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.includes.js");
        require2("core-js/modules/es.string.includes.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.match.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.parseRestoreInfo = void 0;
        exports3.parseRestoreInfo = function(originalRestoreInfo) {
          var tempRestoreInfo;
          if (originalRestoreInfo) {
            tempRestoreInfo = {
              ongoingRequest: originalRestoreInfo.includes("true")
            };
            if (!tempRestoreInfo.ongoingRequest) {
              var matchArray = originalRestoreInfo.match(/expiry-date="(.*)"/);
              if (matchArray && matchArray[1]) {
                tempRestoreInfo.expiryDate = new Date(matchArray[1]);
              }
            }
          }
          return tempRestoreInfo;
        };
      }, { "core-js/modules/es.array.includes.js": 315, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.includes.js": 342, "core-js/modules/es.string.match.js": 344 }], 79: [function(require2, module3, exports3) {
        require2("core-js/modules/es.object.keys.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.policy2Str = void 0;
        function policy2Str(policy) {
          var policyStr;
          if (policy) {
            if (typeof policy === "string") {
              try {
                policyStr = JSON.stringify(JSON.parse(policy));
              } catch (err) {
                throw new Error("Policy string is not a valid JSON: ".concat(err.message));
              }
            } else {
              policyStr = JSON.stringify(policy);
            }
          }
          return policyStr;
        }
        exports3.policy2Str = policy2Str;
      }, { "core-js/modules/es.object.keys.js": 328 }], 80: [function(require2, module3, exports3) {
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.promise.js");
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.retry = void 0;
        function retry(func, retryMax) {
          var config = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var retryNum = 0;
          var _config$retryDelay = config.retryDelay, retryDelay = _config$retryDelay === void 0 ? 500 : _config$retryDelay, _config$errorHandler = config.errorHandler, errorHandler = _config$errorHandler === void 0 ? function() {
            return true;
          } : _config$errorHandler;
          var funcR = function funcR2() {
            for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
              arg[_key] = arguments[_key];
            }
            return new Promise(function(resolve2, reject) {
              func.apply(void 0, arg).then(function(result) {
                retryNum = 0;
                resolve2(result);
              }).catch(function(err) {
                if (retryNum < retryMax && errorHandler(err)) {
                  retryNum++;
                  setTimeout(function() {
                    resolve2(funcR2.apply(void 0, arg));
                  }, retryDelay);
                } else {
                  retryNum = 0;
                  reject(err);
                }
              });
            });
          };
          return funcR;
        }
        exports3.retry = retry;
      }, { "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333 }], 81: [function(require2, module3, exports3) {
        var __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : {
            "default": mod
          };
        };
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.setRegion = void 0;
        var url_1 = __importDefault(require2("url"));
        var checkConfigValid_1 = require2("./checkConfigValid");
        function setRegion(region) {
          var internal = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var secure = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          checkConfigValid_1.checkConfigValid(region, "region");
          var protocol = secure ? "https://" : "http://";
          var suffix = internal ? "-internal.aliyuncs.com" : ".aliyuncs.com";
          var prefix = "vpc100-oss-cn-";
          if (region.substr(0, prefix.length) === prefix) {
            suffix = ".aliyuncs.com";
          }
          return url_1.default.parse(protocol + region + suffix);
        }
        exports3.setRegion = setRegion;
      }, { "./checkConfigValid": 54, "url": 543 }], 82: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _regenerator = _interopRequireDefault(require2("@babel/runtime/regenerator"));
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.array.find.js");
        require2("core-js/modules/es.object.assign.js");
        var _asyncToGenerator2 = _interopRequireDefault(require2("@babel/runtime/helpers/asyncToGenerator"));
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.checkCredentials = exports3.setSTSToken = void 0;
        var formatObjKey_1 = require2("./formatObjKey");
        function setSTSToken() {
          return _setSTSToken.apply(this, arguments);
        }
        function _setSTSToken() {
          _setSTSToken = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var now, credentials;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this.options)
                      this.options = {};
                    now = /* @__PURE__ */ new Date();
                    if (!this.stsTokenFreshTime) {
                      _context.next = 14;
                      break;
                    }
                    if (!(+now - this.stsTokenFreshTime >= this.options.refreshSTSTokenInterval)) {
                      _context.next = 12;
                      break;
                    }
                    this.stsTokenFreshTime = now;
                    _context.next = 7;
                    return this.options.refreshSTSToken();
                  case 7:
                    credentials = _context.sent;
                    credentials = formatObjKey_1.formatObjKey(credentials, "firstLowerCase");
                    if (credentials.securityToken) {
                      credentials.stsToken = credentials.securityToken;
                    }
                    checkCredentials(credentials);
                    Object.assign(this.options, credentials);
                  case 12:
                    _context.next = 15;
                    break;
                  case 14:
                    this.stsTokenFreshTime = now;
                  case 15:
                    return _context.abrupt("return", null);
                  case 16:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          return _setSTSToken.apply(this, arguments);
        }
        exports3.setSTSToken = setSTSToken;
        function checkCredentials(obj) {
          var stsTokenKey = ["accessKeySecret", "accessKeyId", "stsToken"];
          var objKeys = Object.keys(obj);
          stsTokenKey.forEach(function(_) {
            if (!objKeys.find(function(key) {
              return key === _;
            })) {
              throw Error("refreshSTSToken must return contains ".concat(_));
            }
          });
        }
        exports3.checkCredentials = checkCredentials;
      }, { "./formatObjKey": 64, "@babel/runtime/helpers/asyncToGenerator": 85, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/regenerator": 93, "core-js/modules/es.array.find.js": 313, "core-js/modules/es.object.assign.js": 325, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329 }], 83: [function(require2, module3, exports3) {
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++)
            arr2[i] = arr[i];
          return arr2;
        }
        module3.exports = _arrayLikeToArray, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, {}], 84: [function(require2, module3, exports3) {
        var arrayLikeToArray = require2("./arrayLikeToArray.js");
        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr))
            return arrayLikeToArray(arr);
        }
        module3.exports = _arrayWithoutHoles, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, { "./arrayLikeToArray.js": 83 }], 85: [function(require2, module3, exports3) {
        function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }
          if (info.done) {
            resolve2(value);
          } else {
            Promise.resolve(value).then(_next, _throw);
          }
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve2, reject) {
              var gen = fn.apply(self2, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        module3.exports = _asyncToGenerator, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, {}], 86: [function(require2, module3, exports3) {
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            "default": obj
          };
        }
        module3.exports = _interopRequireDefault, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, {}], 87: [function(require2, module3, exports3) {
        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
            return Array.from(iter);
        }
        module3.exports = _iterableToArray, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, {}], 88: [function(require2, module3, exports3) {
        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        module3.exports = _nonIterableSpread, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, {}], 89: [function(require2, module3, exports3) {
        var _typeof = require2("./typeof.js")["default"];
        function _regeneratorRuntime() {
          module3.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
            return e2;
          }, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
          var t2, e2 = {}, r = Object.prototype, n2 = r.hasOwnProperty, o2 = Object.defineProperty || function(t3, e3, r2) {
            t3[e3] = r2.value;
          }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
          function define(t3, e3, r2) {
            return Object.defineProperty(t3, e3, {
              value: r2,
              enumerable: true,
              configurable: true,
              writable: true
            }), t3[e3];
          }
          try {
            define({}, "");
          } catch (t3) {
            define = function define2(t4, e3, r2) {
              return t4[e3] = r2;
            };
          }
          function wrap(t3, e3, r2, n3) {
            var i2 = e3 && e3.prototype instanceof Generator ? e3 : Generator, a2 = Object.create(i2.prototype), c2 = new Context(n3 || []);
            return o2(a2, "_invoke", {
              value: makeInvokeMethod(t3, r2, c2)
            }), a2;
          }
          function tryCatch2(t3, e3, r2) {
            try {
              return {
                type: "normal",
                arg: t3.call(e3, r2)
              };
            } catch (t4) {
              return {
                type: "throw",
                arg: t4
              };
            }
          }
          e2.wrap = wrap;
          var h = "suspendedStart", l = "suspendedYield", f2 = "executing", s2 = "completed", y = {};
          function Generator() {
          }
          function GeneratorFunction() {
          }
          function GeneratorFunctionPrototype() {
          }
          var p2 = {};
          define(p2, a, function() {
            return this;
          });
          var d = Object.getPrototypeOf, v = d && d(d(values([])));
          v && v !== r && n2.call(v, a) && (p2 = v);
          var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p2);
          function defineIteratorMethods(t3) {
            ["next", "throw", "return"].forEach(function(e3) {
              define(t3, e3, function(t4) {
                return this._invoke(e3, t4);
              });
            });
          }
          function AsyncIterator(t3, e3) {
            function invoke(r3, o3, i2, a2) {
              var c2 = tryCatch2(t3[r3], t3, o3);
              if ("throw" !== c2.type) {
                var u2 = c2.arg, h2 = u2.value;
                return h2 && "object" == _typeof(h2) && n2.call(h2, "__await") ? e3.resolve(h2.__await).then(function(t4) {
                  invoke("next", t4, i2, a2);
                }, function(t4) {
                  invoke("throw", t4, i2, a2);
                }) : e3.resolve(h2).then(function(t4) {
                  u2.value = t4, i2(u2);
                }, function(t4) {
                  return invoke("throw", t4, i2, a2);
                });
              }
              a2(c2.arg);
            }
            var r2;
            o2(this, "_invoke", {
              value: function value(t4, n3) {
                function callInvokeWithMethodAndArg() {
                  return new e3(function(e4, r3) {
                    invoke(t4, n3, e4, r3);
                  });
                }
                return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
              }
            });
          }
          function makeInvokeMethod(e3, r2, n3) {
            var o3 = h;
            return function(i2, a2) {
              if (o3 === f2)
                throw new Error("Generator is already running");
              if (o3 === s2) {
                if ("throw" === i2)
                  throw a2;
                return {
                  value: t2,
                  done: true
                };
              }
              for (n3.method = i2, n3.arg = a2; ; ) {
                var c2 = n3.delegate;
                if (c2) {
                  var u2 = maybeInvokeDelegate(c2, n3);
                  if (u2) {
                    if (u2 === y)
                      continue;
                    return u2;
                  }
                }
                if ("next" === n3.method)
                  n3.sent = n3._sent = n3.arg;
                else if ("throw" === n3.method) {
                  if (o3 === h)
                    throw o3 = s2, n3.arg;
                  n3.dispatchException(n3.arg);
                } else
                  "return" === n3.method && n3.abrupt("return", n3.arg);
                o3 = f2;
                var p3 = tryCatch2(e3, r2, n3);
                if ("normal" === p3.type) {
                  if (o3 = n3.done ? s2 : l, p3.arg === y)
                    continue;
                  return {
                    value: p3.arg,
                    done: n3.done
                  };
                }
                "throw" === p3.type && (o3 = s2, n3.method = "throw", n3.arg = p3.arg);
              }
            };
          }
          function maybeInvokeDelegate(e3, r2) {
            var n3 = r2.method, o3 = e3.iterator[n3];
            if (o3 === t2)
              return r2.delegate = null, "throw" === n3 && e3.iterator["return"] && (r2.method = "return", r2.arg = t2, maybeInvokeDelegate(e3, r2), "throw" === r2.method) || "return" !== n3 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n3 + "' method")), y;
            var i2 = tryCatch2(o3, e3.iterator, r2.arg);
            if ("throw" === i2.type)
              return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
            var a2 = i2.arg;
            return a2 ? a2.done ? (r2[e3.resultName] = a2.value, r2.next = e3.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t2), r2.delegate = null, y) : a2 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
          }
          function pushTryEntry(t3) {
            var e3 = {
              tryLoc: t3[0]
            };
            1 in t3 && (e3.catchLoc = t3[1]), 2 in t3 && (e3.finallyLoc = t3[2], e3.afterLoc = t3[3]), this.tryEntries.push(e3);
          }
          function resetTryEntry(t3) {
            var e3 = t3.completion || {};
            e3.type = "normal", delete e3.arg, t3.completion = e3;
          }
          function Context(t3) {
            this.tryEntries = [{
              tryLoc: "root"
            }], t3.forEach(pushTryEntry, this), this.reset(true);
          }
          function values(e3) {
            if (e3 || "" === e3) {
              var r2 = e3[a];
              if (r2)
                return r2.call(e3);
              if ("function" == typeof e3.next)
                return e3;
              if (!isNaN(e3.length)) {
                var o3 = -1, i2 = function next() {
                  for (; ++o3 < e3.length; )
                    if (n2.call(e3, o3))
                      return next.value = e3[o3], next.done = false, next;
                  return next.value = t2, next.done = true, next;
                };
                return i2.next = i2;
              }
            }
            throw new TypeError(_typeof(e3) + " is not iterable");
          }
          return GeneratorFunction.prototype = GeneratorFunctionPrototype, o2(g, "constructor", {
            value: GeneratorFunctionPrototype,
            configurable: true
          }), o2(GeneratorFunctionPrototype, "constructor", {
            value: GeneratorFunction,
            configurable: true
          }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e2.isGeneratorFunction = function(t3) {
            var e3 = "function" == typeof t3 && t3.constructor;
            return !!e3 && (e3 === GeneratorFunction || "GeneratorFunction" === (e3.displayName || e3.name));
          }, e2.mark = function(t3) {
            return Object.setPrototypeOf ? Object.setPrototypeOf(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define(t3, u, "GeneratorFunction")), t3.prototype = Object.create(g), t3;
          }, e2.awrap = function(t3) {
            return {
              __await: t3
            };
          }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {
            return this;
          }), e2.AsyncIterator = AsyncIterator, e2.async = function(t3, r2, n3, o3, i2) {
            void 0 === i2 && (i2 = Promise);
            var a2 = new AsyncIterator(wrap(t3, r2, n3, o3), i2);
            return e2.isGeneratorFunction(r2) ? a2 : a2.next().then(function(t4) {
              return t4.done ? t4.value : a2.next();
            });
          }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function() {
            return this;
          }), define(g, "toString", function() {
            return "[object Generator]";
          }), e2.keys = function(t3) {
            var e3 = Object(t3), r2 = [];
            for (var n3 in e3)
              r2.push(n3);
            return r2.reverse(), function next() {
              for (; r2.length; ) {
                var t4 = r2.pop();
                if (t4 in e3)
                  return next.value = t4, next.done = false, next;
              }
              return next.done = true, next;
            };
          }, e2.values = values, Context.prototype = {
            constructor: Context,
            reset: function reset(e3) {
              if (this.prev = 0, this.next = 0, this.sent = this._sent = t2, this.done = false, this.delegate = null, this.method = "next", this.arg = t2, this.tryEntries.forEach(resetTryEntry), !e3)
                for (var r2 in this)
                  "t" === r2.charAt(0) && n2.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t2);
            },
            stop: function stop() {
              this.done = true;
              var t3 = this.tryEntries[0].completion;
              if ("throw" === t3.type)
                throw t3.arg;
              return this.rval;
            },
            dispatchException: function dispatchException(e3) {
              if (this.done)
                throw e3;
              var r2 = this;
              function handle(n3, o4) {
                return a2.type = "throw", a2.arg = e3, r2.next = n3, o4 && (r2.method = "next", r2.arg = t2), !!o4;
              }
              for (var o3 = this.tryEntries.length - 1; o3 >= 0; --o3) {
                var i2 = this.tryEntries[o3], a2 = i2.completion;
                if ("root" === i2.tryLoc)
                  return handle("end");
                if (i2.tryLoc <= this.prev) {
                  var c2 = n2.call(i2, "catchLoc"), u2 = n2.call(i2, "finallyLoc");
                  if (c2 && u2) {
                    if (this.prev < i2.catchLoc)
                      return handle(i2.catchLoc, true);
                    if (this.prev < i2.finallyLoc)
                      return handle(i2.finallyLoc);
                  } else if (c2) {
                    if (this.prev < i2.catchLoc)
                      return handle(i2.catchLoc, true);
                  } else {
                    if (!u2)
                      throw new Error("try statement without catch or finally");
                    if (this.prev < i2.finallyLoc)
                      return handle(i2.finallyLoc);
                  }
                }
              }
            },
            abrupt: function abrupt(t3, e3) {
              for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
                var o3 = this.tryEntries[r2];
                if (o3.tryLoc <= this.prev && n2.call(o3, "finallyLoc") && this.prev < o3.finallyLoc) {
                  var i2 = o3;
                  break;
                }
              }
              i2 && ("break" === t3 || "continue" === t3) && i2.tryLoc <= e3 && e3 <= i2.finallyLoc && (i2 = null);
              var a2 = i2 ? i2.completion : {};
              return a2.type = t3, a2.arg = e3, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
            },
            complete: function complete(t3, e3) {
              if ("throw" === t3.type)
                throw t3.arg;
              return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e3 && (this.next = e3), y;
            },
            finish: function finish(t3) {
              for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
                var r2 = this.tryEntries[e3];
                if (r2.finallyLoc === t3)
                  return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
              }
            },
            "catch": function _catch(t3) {
              for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
                var r2 = this.tryEntries[e3];
                if (r2.tryLoc === t3) {
                  var n3 = r2.completion;
                  if ("throw" === n3.type) {
                    var o3 = n3.arg;
                    resetTryEntry(r2);
                  }
                  return o3;
                }
              }
              throw new Error("illegal catch attempt");
            },
            delegateYield: function delegateYield(e3, r2, n3) {
              return this.delegate = {
                iterator: values(e3),
                resultName: r2,
                nextLoc: n3
              }, "next" === this.method && (this.arg = t2), y;
            }
          }, e2;
        }
        module3.exports = _regeneratorRuntime, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, { "./typeof.js": 91 }], 90: [function(require2, module3, exports3) {
        var arrayWithoutHoles = require2("./arrayWithoutHoles.js");
        var iterableToArray = require2("./iterableToArray.js");
        var unsupportedIterableToArray = require2("./unsupportedIterableToArray.js");
        var nonIterableSpread = require2("./nonIterableSpread.js");
        function _toConsumableArray(arr) {
          return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
        }
        module3.exports = _toConsumableArray, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, { "./arrayWithoutHoles.js": 84, "./iterableToArray.js": 87, "./nonIterableSpread.js": 88, "./unsupportedIterableToArray.js": 92 }], 91: [function(require2, module3, exports3) {
        function _typeof(o2) {
          "@babel/helpers - typeof";
          return module3.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
            return typeof o3;
          } : function(o3) {
            return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
          }, module3.exports.__esModule = true, module3.exports["default"] = module3.exports, _typeof(o2);
        }
        module3.exports = _typeof, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, {}], 92: [function(require2, module3, exports3) {
        var arrayLikeToArray = require2("./arrayLikeToArray.js");
        function _unsupportedIterableToArray(o2, minLen) {
          if (!o2)
            return;
          if (typeof o2 === "string")
            return arrayLikeToArray(o2, minLen);
          var n2 = Object.prototype.toString.call(o2).slice(8, -1);
          if (n2 === "Object" && o2.constructor)
            n2 = o2.constructor.name;
          if (n2 === "Map" || n2 === "Set")
            return Array.from(o2);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return arrayLikeToArray(o2, minLen);
        }
        module3.exports = _unsupportedIterableToArray, module3.exports.__esModule = true, module3.exports["default"] = module3.exports;
      }, { "./arrayLikeToArray.js": 83 }], 93: [function(require2, module3, exports3) {
        var runtime = require2("../helpers/regeneratorRuntime")();
        module3.exports = runtime;
        try {
          regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
          if (typeof globalThis === "object") {
            globalThis.regeneratorRuntime = runtime;
          } else {
            Function("r", "regeneratorRuntime = r")(runtime);
          }
        }
      }, { "../helpers/regeneratorRuntime": 89 }], 94: [function(require2, module3, exports3) {
        module3.exports = noop2;
        module3.exports.HttpsAgent = noop2;
        function noop2() {
        }
      }, {}], 95: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            var objectAssign = require2("object.assign/polyfill")();
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
             * @license  MIT
             */
            function compare(a, b) {
              if (a === b) {
                return 0;
              }
              var x = a.length;
              var y = b.length;
              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }
              if (x < y) {
                return -1;
              }
              if (y < x) {
                return 1;
              }
              return 0;
            }
            function isBuffer(b) {
              if (global3.Buffer && typeof global3.Buffer.isBuffer === "function") {
                return global3.Buffer.isBuffer(b);
              }
              return !!(b != null && b._isBuffer);
            }
            var util = require2("util/");
            var hasOwn2 = Object.prototype.hasOwnProperty;
            var pSlice = Array.prototype.slice;
            var functionsHaveNames = function() {
              return (function foo() {
              }).name === "foo";
            }();
            function pToString(obj) {
              return Object.prototype.toString.call(obj);
            }
            function isView(arrbuf) {
              if (isBuffer(arrbuf)) {
                return false;
              }
              if (typeof global3.ArrayBuffer !== "function") {
                return false;
              }
              if (typeof ArrayBuffer.isView === "function") {
                return ArrayBuffer.isView(arrbuf);
              }
              if (!arrbuf) {
                return false;
              }
              if (arrbuf instanceof DataView) {
                return true;
              }
              if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                return true;
              }
              return false;
            }
            var assert = module3.exports = ok;
            var regex = /\s*function\s+([^\(\s]*)\s*/;
            function getName(func) {
              if (!util.isFunction(func)) {
                return;
              }
              if (functionsHaveNames) {
                return func.name;
              }
              var str = func.toString();
              var match = str.match(regex);
              return match && match[1];
            }
            assert.AssertionError = function AssertionError(options) {
              this.name = "AssertionError";
              this.actual = options.actual;
              this.expected = options.expected;
              this.operator = options.operator;
              if (options.message) {
                this.message = options.message;
                this.generatedMessage = false;
              } else {
                this.message = getMessage(this);
                this.generatedMessage = true;
              }
              var stackStartFunction = options.stackStartFunction || fail;
              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, stackStartFunction);
              } else {
                var err = new Error();
                if (err.stack) {
                  var out = err.stack;
                  var fn_name = getName(stackStartFunction);
                  var idx = out.indexOf("\n" + fn_name);
                  if (idx >= 0) {
                    var next_line = out.indexOf("\n", idx + 1);
                    out = out.substring(next_line + 1);
                  }
                  this.stack = out;
                }
              }
            };
            util.inherits(assert.AssertionError, Error);
            function truncate(s2, n2) {
              if (typeof s2 === "string") {
                return s2.length < n2 ? s2 : s2.slice(0, n2);
              } else {
                return s2;
              }
            }
            function inspect(something) {
              if (functionsHaveNames || !util.isFunction(something)) {
                return util.inspect(something);
              }
              var rawname = getName(something);
              var name = rawname ? ": " + rawname : "";
              return "[Function" + name + "]";
            }
            function getMessage(self2) {
              return truncate(inspect(self2.actual), 128) + " " + self2.operator + " " + truncate(inspect(self2.expected), 128);
            }
            function fail(actual, expected, message, operator, stackStartFunction) {
              throw new assert.AssertionError({
                message,
                actual,
                expected,
                operator,
                stackStartFunction
              });
            }
            assert.fail = fail;
            function ok(value, message) {
              if (!value)
                fail(value, true, message, "==", assert.ok);
            }
            assert.ok = ok;
            assert.equal = function equal(actual, expected, message) {
              if (actual != expected)
                fail(actual, expected, message, "==", assert.equal);
            };
            assert.notEqual = function notEqual(actual, expected, message) {
              if (actual == expected) {
                fail(actual, expected, message, "!=", assert.notEqual);
              }
            };
            assert.deepEqual = function deepEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, "deepEqual", assert.deepEqual);
              }
            };
            assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, true)) {
                fail(actual, expected, message, "deepStrictEqual", assert.deepStrictEqual);
              }
            };
            function _deepEqual(actual, expected, strict2, memos) {
              if (actual === expected) {
                return true;
              } else if (isBuffer(actual) && isBuffer(expected)) {
                return compare(actual, expected) === 0;
              } else if (util.isDate(actual) && util.isDate(expected)) {
                return actual.getTime() === expected.getTime();
              } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
              } else if ((actual === null || typeof actual !== "object") && (expected === null || typeof expected !== "object")) {
                return strict2 ? actual === expected : actual == expected;
              } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
                return compare(
                  new Uint8Array(actual.buffer),
                  new Uint8Array(expected.buffer)
                ) === 0;
              } else if (isBuffer(actual) !== isBuffer(expected)) {
                return false;
              } else {
                memos = memos || { actual: [], expected: [] };
                var actualIndex = memos.actual.indexOf(actual);
                if (actualIndex !== -1) {
                  if (actualIndex === memos.expected.indexOf(expected)) {
                    return true;
                  }
                }
                memos.actual.push(actual);
                memos.expected.push(expected);
                return objEquiv(actual, expected, strict2, memos);
              }
            }
            function isArguments(object) {
              return Object.prototype.toString.call(object) == "[object Arguments]";
            }
            function objEquiv(a, b, strict2, actualVisitedObjects) {
              if (a === null || a === void 0 || b === null || b === void 0)
                return false;
              if (util.isPrimitive(a) || util.isPrimitive(b))
                return a === b;
              if (strict2 && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
                return false;
              var aIsArgs = isArguments(a);
              var bIsArgs = isArguments(b);
              if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs)
                return false;
              if (aIsArgs) {
                a = pSlice.call(a);
                b = pSlice.call(b);
                return _deepEqual(a, b, strict2);
              }
              var ka = objectKeys2(a);
              var kb = objectKeys2(b);
              var key, i;
              if (ka.length !== kb.length)
                return false;
              ka.sort();
              kb.sort();
              for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] !== kb[i])
                  return false;
              }
              for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!_deepEqual(a[key], b[key], strict2, actualVisitedObjects))
                  return false;
              }
              return true;
            }
            assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, "notDeepEqual", assert.notDeepEqual);
              }
            };
            assert.notDeepStrictEqual = notDeepStrictEqual;
            function notDeepStrictEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, true)) {
                fail(actual, expected, message, "notDeepStrictEqual", notDeepStrictEqual);
              }
            }
            assert.strictEqual = function strictEqual(actual, expected, message) {
              if (actual !== expected) {
                fail(actual, expected, message, "===", assert.strictEqual);
              }
            };
            assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
              if (actual === expected) {
                fail(actual, expected, message, "!==", assert.notStrictEqual);
              }
            };
            function expectedException(actual, expected) {
              if (!actual || !expected) {
                return false;
              }
              if (Object.prototype.toString.call(expected) == "[object RegExp]") {
                return expected.test(actual);
              }
              try {
                if (actual instanceof expected) {
                  return true;
                }
              } catch (e2) {
              }
              if (Error.isPrototypeOf(expected)) {
                return false;
              }
              return expected.call({}, actual) === true;
            }
            function _tryBlock(block2) {
              var error;
              try {
                block2();
              } catch (e2) {
                error = e2;
              }
              return error;
            }
            function _throws(shouldThrow, block2, expected, message) {
              var actual;
              if (typeof block2 !== "function") {
                throw new TypeError('"block" argument must be a function');
              }
              if (typeof expected === "string") {
                message = expected;
                expected = null;
              }
              actual = _tryBlock(block2);
              message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");
              if (shouldThrow && !actual) {
                fail(actual, expected, "Missing expected exception" + message);
              }
              var userProvidedMessage = typeof message === "string";
              var isUnwantedException = !shouldThrow && util.isError(actual);
              var isUnexpectedException = !shouldThrow && actual && !expected;
              if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
                fail(actual, expected, "Got unwanted exception" + message);
              }
              if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
                throw actual;
              }
            }
            assert.throws = function(block2, error, message) {
              _throws(true, block2, error, message);
            };
            assert.doesNotThrow = function(block2, error, message) {
              _throws(false, block2, error, message);
            };
            assert.ifError = function(err) {
              if (err)
                throw err;
            };
            function strict(value, message) {
              if (!value)
                fail(value, true, message, "==", strict);
            }
            assert.strict = objectAssign(strict, assert, {
              equal: assert.strictEqual,
              deepEqual: assert.deepStrictEqual,
              notEqual: assert.notStrictEqual,
              notDeepEqual: assert.notDeepStrictEqual
            });
            assert.strict.strict = assert.strict;
            var objectKeys2 = Object.keys || function(obj) {
              var keys = [];
              for (var key in obj) {
                if (hasOwn2.call(obj, key))
                  keys.push(key);
              }
              return keys;
            };
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "object.assign/polyfill": 438, "util/": 98 }], 96: [function(require2, module3, exports3) {
        if (typeof Object.create === "function") {
          module3.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          };
        } else {
          module3.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          };
        }
      }, {}], 97: [function(require2, module3, exports3) {
        module3.exports = function isBuffer(arg) {
          return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
        };
      }, {}], 98: [function(require2, module3, exports3) {
        (function(process, global3) {
          (function() {
            var formatRegExp = /%[sdj%]/g;
            exports3.format = function(f2) {
              if (!isString2(f2)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(" ");
              }
              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f2).replace(formatRegExp, function(x2) {
                if (x2 === "%%")
                  return "%";
                if (i >= len)
                  return x2;
                switch (x2) {
                  case "%s":
                    return String(args[i++]);
                  case "%d":
                    return Number(args[i++]);
                  case "%j":
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return "[Circular]";
                    }
                  default:
                    return x2;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject2(x)) {
                  str += " " + x;
                } else {
                  str += " " + inspect(x);
                }
              }
              return str;
            };
            exports3.deprecate = function(fn, msg) {
              if (isUndefined(global3.process)) {
                return function() {
                  return exports3.deprecate(fn, msg).apply(this, arguments);
                };
              }
              if (process.noDeprecation === true) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            };
            var debugs = {};
            var debugEnviron;
            exports3.debuglog = function(set2) {
              if (isUndefined(debugEnviron))
                debugEnviron = process.env.NODE_DEBUG || "";
              set2 = set2.toUpperCase();
              if (!debugs[set2]) {
                if (new RegExp("\\b" + set2 + "\\b", "i").test(debugEnviron)) {
                  var pid = process.pid;
                  debugs[set2] = function() {
                    var msg = exports3.format.apply(exports3, arguments);
                    console.error("%s %d: %s", set2, pid, msg);
                  };
                } else {
                  debugs[set2] = function() {
                  };
                }
              }
              return debugs[set2];
            };
            function inspect(obj, opts) {
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              };
              if (arguments.length >= 3)
                ctx.depth = arguments[2];
              if (arguments.length >= 4)
                ctx.colors = arguments[3];
              if (isBoolean2(opts)) {
                ctx.showHidden = opts;
              } else if (opts) {
                exports3._extend(ctx, opts);
              }
              if (isUndefined(ctx.showHidden))
                ctx.showHidden = false;
              if (isUndefined(ctx.depth))
                ctx.depth = 2;
              if (isUndefined(ctx.colors))
                ctx.colors = false;
              if (isUndefined(ctx.customInspect))
                ctx.customInspect = true;
              if (ctx.colors)
                ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }
            exports3.inspect = inspect;
            inspect.colors = {
              "bold": [1, 22],
              "italic": [3, 23],
              "underline": [4, 24],
              "inverse": [7, 27],
              "white": [37, 39],
              "grey": [90, 39],
              "black": [30, 39],
              "blue": [34, 39],
              "cyan": [36, 39],
              "green": [32, 39],
              "magenta": [35, 39],
              "red": [31, 39],
              "yellow": [33, 39]
            };
            inspect.styles = {
              "special": "cyan",
              "number": "yellow",
              "boolean": "yellow",
              "undefined": "grey",
              "null": "bold",
              "string": "green",
              "date": "magenta",
              // "name": intentionally not styling
              "regexp": "red"
            };
            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];
              if (style) {
                return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
              } else {
                return str;
              }
            }
            function stylizeNoColor(str, styleType) {
              return str;
            }
            function arrayToHash(array) {
              var hash = {};
              array.forEach(function(val, idx) {
                hash[val] = true;
              });
              return hash;
            }
            function formatValue(ctx, value, recurseTimes) {
              if (ctx.customInspect && value && isFunction2(value.inspect) && // Filter out the util module, it's inspect function is special
              value.inspect !== exports3.inspect && // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);
                if (!isString2(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }
                return ret;
              }
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);
              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }
              if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
                return formatError(value);
              }
              if (keys.length === 0) {
                if (isFunction2(value)) {
                  var name = value.name ? ": " + value.name : "";
                  return ctx.stylize("[Function" + name + "]", "special");
                }
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                }
                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), "date");
                }
                if (isError(value)) {
                  return formatError(value);
                }
              }
              var base = "", array = false, braces = ["{", "}"];
              if (isArray2(value)) {
                array = true;
                braces = ["[", "]"];
              }
              if (isFunction2(value)) {
                var n2 = value.name ? ": " + value.name : "";
                base = " [Function" + n2 + "]";
              }
              if (isRegExp(value)) {
                base = " " + RegExp.prototype.toString.call(value);
              }
              if (isDate(value)) {
                base = " " + Date.prototype.toUTCString.call(value);
              }
              if (isError(value)) {
                base = " " + formatError(value);
              }
              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }
              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                } else {
                  return ctx.stylize("[Object]", "special");
                }
              }
              ctx.seen.push(value);
              var output;
              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function(key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }
              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }
            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize("undefined", "undefined");
              if (isString2(value)) {
                var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return ctx.stylize(simple, "string");
              }
              if (isNumber(value))
                return ctx.stylize("" + value, "number");
              if (isBoolean2(value))
                return ctx.stylize("" + value, "boolean");
              if (isNull(value))
                return ctx.stylize("null", "null");
            }
            function formatError(value) {
              return "[" + Error.prototype.toString.call(value) + "]";
            }
            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty2(value, String(i))) {
                  output.push(formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    String(i),
                    true
                  ));
                } else {
                  output.push("");
                }
              }
              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    true
                  ));
                }
              });
              return output;
            }
            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize("[Getter/Setter]", "special");
                } else {
                  str = ctx.stylize("[Getter]", "special");
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize("[Setter]", "special");
                }
              }
              if (!hasOwnProperty2(visibleKeys, key)) {
                name = "[" + key + "]";
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf("\n") > -1) {
                    if (array) {
                      str = str.split("\n").map(function(line) {
                        return "  " + line;
                      }).join("\n").substr(2);
                    } else {
                      str = "\n" + str.split("\n").map(function(line) {
                        return "   " + line;
                      }).join("\n");
                    }
                  }
                } else {
                  str = ctx.stylize("[Circular]", "special");
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify("" + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, "name");
                } else {
                  name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, "string");
                }
              }
              return name + ": " + str;
            }
            function reduceToSingleString(output, base, braces) {
              var length = output.reduce(function(prev, cur) {
                if (cur.indexOf("\n") >= 0)
                  ;
                return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0);
              if (length > 60) {
                return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
              }
              return braces[0] + base + " " + output.join(", ") + " " + braces[1];
            }
            function isArray2(ar) {
              return Array.isArray(ar);
            }
            exports3.isArray = isArray2;
            function isBoolean2(arg) {
              return typeof arg === "boolean";
            }
            exports3.isBoolean = isBoolean2;
            function isNull(arg) {
              return arg === null;
            }
            exports3.isNull = isNull;
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports3.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
              return typeof arg === "number";
            }
            exports3.isNumber = isNumber;
            function isString2(arg) {
              return typeof arg === "string";
            }
            exports3.isString = isString2;
            function isSymbol2(arg) {
              return typeof arg === "symbol";
            }
            exports3.isSymbol = isSymbol2;
            function isUndefined(arg) {
              return arg === void 0;
            }
            exports3.isUndefined = isUndefined;
            function isRegExp(re) {
              return isObject2(re) && objectToString2(re) === "[object RegExp]";
            }
            exports3.isRegExp = isRegExp;
            function isObject2(arg) {
              return typeof arg === "object" && arg !== null;
            }
            exports3.isObject = isObject2;
            function isDate(d) {
              return isObject2(d) && objectToString2(d) === "[object Date]";
            }
            exports3.isDate = isDate;
            function isError(e2) {
              return isObject2(e2) && (objectToString2(e2) === "[object Error]" || e2 instanceof Error);
            }
            exports3.isError = isError;
            function isFunction2(arg) {
              return typeof arg === "function";
            }
            exports3.isFunction = isFunction2;
            function isPrimitive(arg) {
              return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
              typeof arg === "undefined";
            }
            exports3.isPrimitive = isPrimitive;
            exports3.isBuffer = require2("./support/isBuffer");
            function objectToString2(o2) {
              return Object.prototype.toString.call(o2);
            }
            function pad(n2) {
              return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
            }
            var months = [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec"
            ];
            function timestamp() {
              var d = /* @__PURE__ */ new Date();
              var time = [
                pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())
              ].join(":");
              return [d.getDate(), months[d.getMonth()], time].join(" ");
            }
            exports3.log = function() {
              console.log("%s - %s", timestamp(), exports3.format.apply(exports3, arguments));
            };
            exports3.inherits = require2("inherits");
            exports3._extend = function(origin, add2) {
              if (!add2 || !isObject2(add2))
                return origin;
              var keys = Object.keys(add2);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add2[keys[i]];
              }
              return origin;
            };
            function hasOwnProperty2(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
          }).call(this);
        }).call(this, require2("_process"), typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "./support/isBuffer": 97, "_process": 538, "inherits": 96 }], 99: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            var possibleNames = [
              "BigInt64Array",
              "BigUint64Array",
              "Float32Array",
              "Float64Array",
              "Int16Array",
              "Int32Array",
              "Int8Array",
              "Uint16Array",
              "Uint32Array",
              "Uint8Array",
              "Uint8ClampedArray"
            ];
            var g = typeof globalThis === "undefined" ? global3 : globalThis;
            module3.exports = function availableTypedArrays() {
              var out = [];
              for (var i = 0; i < possibleNames.length; i++) {
                if (typeof g[possibleNames[i]] === "function") {
                  out[out.length] = possibleNames[i];
                }
              }
              return out;
            };
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 100: [function(require2, module3, exports3) {
        exports3.byteLength = byteLength;
        exports3.toByteArray = toByteArray;
        exports3.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
        var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;
        function getLens(b642) {
          var len2 = b642.length;
          if (len2 % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }
          var validLen = b642.indexOf("=");
          if (validLen === -1)
            validLen = len2;
          var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
          return [validLen, placeHoldersLen];
        }
        function byteLength(b642) {
          var lens = getLens(b642);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function _byteLength(b642, validLen, placeHoldersLen) {
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function toByteArray(b642) {
          var tmp;
          var lens = getLens(b642);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          var arr = new Arr(_byteLength(b642, validLen, placeHoldersLen));
          var curByte = 0;
          var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
          var i2;
          for (i2 = 0; i2 < len2; i2 += 4) {
            tmp = revLookup[b642.charCodeAt(i2)] << 18 | revLookup[b642.charCodeAt(i2 + 1)] << 12 | revLookup[b642.charCodeAt(i2 + 2)] << 6 | revLookup[b642.charCodeAt(i2 + 3)];
            arr[curByte++] = tmp >> 16 & 255;
            arr[curByte++] = tmp >> 8 & 255;
            arr[curByte++] = tmp & 255;
          }
          if (placeHoldersLen === 2) {
            tmp = revLookup[b642.charCodeAt(i2)] << 2 | revLookup[b642.charCodeAt(i2 + 1)] >> 4;
            arr[curByte++] = tmp & 255;
          }
          if (placeHoldersLen === 1) {
            tmp = revLookup[b642.charCodeAt(i2)] << 10 | revLookup[b642.charCodeAt(i2 + 1)] << 4 | revLookup[b642.charCodeAt(i2 + 2)] >> 2;
            arr[curByte++] = tmp >> 8 & 255;
            arr[curByte++] = tmp & 255;
          }
          return arr;
        }
        function tripletToBase64(num) {
          return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
        }
        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i2 = start; i2 < end; i2 += 3) {
            tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }
        function fromByteArray(uint8) {
          var tmp;
          var len2 = uint8.length;
          var extraBytes = len2 % 3;
          var parts = [];
          var maxChunkLength = 16383;
          for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
            parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
          }
          if (extraBytes === 1) {
            tmp = uint8[len2 - 1];
            parts.push(
              lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
            );
          } else if (extraBytes === 2) {
            tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
            parts.push(
              lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
            );
          }
          return parts.join("");
        }
      }, {}], 101: [function(require2, module3, exports3) {
        /*!
         * Bowser - a browser detector
         * https://github.com/ded/bowser
         * MIT License | (c) Dustin Diaz 2015
         */
        !function(root, name, definition) {
          if (typeof module3 != "undefined" && module3.exports)
            module3.exports = definition();
          else
            root[name] = definition();
        }(this, "bowser", function() {
          var t2 = true;
          function detect(ua) {
            function getFirstMatch(regex) {
              var match = ua.match(regex);
              return match && match.length > 1 && match[1] || "";
            }
            function getSecondMatch(regex) {
              var match = ua.match(regex);
              return match && match.length > 1 && match[2] || "";
            }
            var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(), likeAndroid = /like android/i.test(ua), android = !likeAndroid && /android/i.test(ua), nexusMobile = /nexus\s*[0-6]\s*/i.test(ua), nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua), chromeos = /CrOS/.test(ua), silk = /silk/i.test(ua), sailfish = /sailfish/i.test(ua), tizen = /tizen/i.test(ua), webos = /(web|hpw)(o|0)s/i.test(ua), windowsphone = /windows phone/i.test(ua), windows = !windowsphone && /windows/i.test(ua), mac = !iosdevice && !silk && /macintosh/i.test(ua), linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua), edgeVersion = getSecondMatch(/edg([ea]|ios)\/(\d+(\.\d+)?)/i), versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i), tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua), mobile = !tablet && /[^-]mobi/i.test(ua), xbox = /xbox/i.test(ua), result;
            if (/opera/i.test(ua)) {
              result = {
                name: "Opera",
                opera: t2,
                version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
              };
            } else if (/opr\/|opios/i.test(ua)) {
              result = {
                name: "Opera",
                opera: t2,
                version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
              };
            } else if (/SamsungBrowser/i.test(ua)) {
              result = {
                name: "Samsung Internet for Android",
                samsungBrowser: t2,
                version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
              };
            } else if (/Whale/i.test(ua)) {
              result = {
                name: "NAVER Whale browser",
                whale: t2,
                version: getFirstMatch(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (/MZBrowser/i.test(ua)) {
              result = {
                name: "MZ Browser",
                mzbrowser: t2,
                version: getFirstMatch(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (/coast/i.test(ua)) {
              result = {
                name: "Opera Coast",
                coast: t2,
                version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
              };
            } else if (/focus/i.test(ua)) {
              result = {
                name: "Focus",
                focus: t2,
                version: getFirstMatch(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (/yabrowser/i.test(ua)) {
              result = {
                name: "Yandex Browser",
                yandexbrowser: t2,
                version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
              };
            } else if (/ucbrowser/i.test(ua)) {
              result = {
                name: "UC Browser",
                ucbrowser: t2,
                version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (/mxios/i.test(ua)) {
              result = {
                name: "Maxthon",
                maxthon: t2,
                version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (/epiphany/i.test(ua)) {
              result = {
                name: "Epiphany",
                epiphany: t2,
                version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (/puffin/i.test(ua)) {
              result = {
                name: "Puffin",
                puffin: t2,
                version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
              };
            } else if (/sleipnir/i.test(ua)) {
              result = {
                name: "Sleipnir",
                sleipnir: t2,
                version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (/k-meleon/i.test(ua)) {
              result = {
                name: "K-Meleon",
                kMeleon: t2,
                version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
              };
            } else if (windowsphone) {
              result = {
                name: "Windows Phone",
                osname: "Windows Phone",
                windowsphone: t2
              };
              if (edgeVersion) {
                result.msedge = t2;
                result.version = edgeVersion;
              } else {
                result.msie = t2;
                result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
              }
            } else if (/msie|trident/i.test(ua)) {
              result = {
                name: "Internet Explorer",
                msie: t2,
                version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
              };
            } else if (chromeos) {
              result = {
                name: "Chrome",
                osname: "Chrome OS",
                chromeos: t2,
                chromeBook: t2,
                chrome: t2,
                version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
              };
            } else if (/edg([ea]|ios)/i.test(ua)) {
              result = {
                name: "Microsoft Edge",
                msedge: t2,
                version: edgeVersion
              };
            } else if (/vivaldi/i.test(ua)) {
              result = {
                name: "Vivaldi",
                vivaldi: t2,
                version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
              };
            } else if (sailfish) {
              result = {
                name: "Sailfish",
                osname: "Sailfish OS",
                sailfish: t2,
                version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
              };
            } else if (/seamonkey\//i.test(ua)) {
              result = {
                name: "SeaMonkey",
                seamonkey: t2,
                version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
              };
            } else if (/firefox|iceweasel|fxios/i.test(ua)) {
              result = {
                name: "Firefox",
                firefox: t2,
                version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
              };
              if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
                result.firefoxos = t2;
                result.osname = "Firefox OS";
              }
            } else if (silk) {
              result = {
                name: "Amazon Silk",
                silk: t2,
                version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
              };
            } else if (/phantom/i.test(ua)) {
              result = {
                name: "PhantomJS",
                phantom: t2,
                version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
              };
            } else if (/slimerjs/i.test(ua)) {
              result = {
                name: "SlimerJS",
                slimer: t2,
                version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
              };
            } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
              result = {
                name: "BlackBerry",
                osname: "BlackBerry OS",
                blackberry: t2,
                version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
              };
            } else if (webos) {
              result = {
                name: "WebOS",
                osname: "WebOS",
                webos: t2,
                version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
              };
              /touchpad\//i.test(ua) && (result.touchpad = t2);
            } else if (/bada/i.test(ua)) {
              result = {
                name: "Bada",
                osname: "Bada",
                bada: t2,
                version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
              };
            } else if (tizen) {
              result = {
                name: "Tizen",
                osname: "Tizen",
                tizen: t2,
                version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
              };
            } else if (/qupzilla/i.test(ua)) {
              result = {
                name: "QupZilla",
                qupzilla: t2,
                version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
              };
            } else if (/chromium/i.test(ua)) {
              result = {
                name: "Chromium",
                chromium: t2,
                version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
              };
            } else if (/chrome|crios|crmo/i.test(ua)) {
              result = {
                name: "Chrome",
                chrome: t2,
                version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
              };
            } else if (android) {
              result = {
                name: "Android",
                version: versionIdentifier
              };
            } else if (/safari|applewebkit/i.test(ua)) {
              result = {
                name: "Safari",
                safari: t2
              };
              if (versionIdentifier) {
                result.version = versionIdentifier;
              }
            } else if (iosdevice) {
              result = {
                name: iosdevice == "iphone" ? "iPhone" : iosdevice == "ipad" ? "iPad" : "iPod"
              };
              if (versionIdentifier) {
                result.version = versionIdentifier;
              }
            } else if (/googlebot/i.test(ua)) {
              result = {
                name: "Googlebot",
                googlebot: t2,
                version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
              };
            } else {
              result = {
                name: getFirstMatch(/^(.*)\/(.*) /),
                version: getSecondMatch(/^(.*)\/(.*) /)
              };
            }
            if (!result.msedge && /(apple)?webkit/i.test(ua)) {
              if (/(apple)?webkit\/537\.36/i.test(ua)) {
                result.name = result.name || "Blink";
                result.blink = t2;
              } else {
                result.name = result.name || "Webkit";
                result.webkit = t2;
              }
              if (!result.version && versionIdentifier) {
                result.version = versionIdentifier;
              }
            } else if (!result.opera && /gecko\//i.test(ua)) {
              result.name = result.name || "Gecko";
              result.gecko = t2;
              result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
            }
            if (!result.windowsphone && (android || result.silk)) {
              result.android = t2;
              result.osname = "Android";
            } else if (!result.windowsphone && iosdevice) {
              result[iosdevice] = t2;
              result.ios = t2;
              result.osname = "iOS";
            } else if (mac) {
              result.mac = t2;
              result.osname = "macOS";
            } else if (xbox) {
              result.xbox = t2;
              result.osname = "Xbox";
            } else if (windows) {
              result.windows = t2;
              result.osname = "Windows";
            } else if (linux) {
              result.linux = t2;
              result.osname = "Linux";
            }
            function getWindowsVersion(s2) {
              switch (s2) {
                case "NT":
                  return "NT";
                case "XP":
                  return "XP";
                case "NT 5.0":
                  return "2000";
                case "NT 5.1":
                  return "XP";
                case "NT 5.2":
                  return "2003";
                case "NT 6.0":
                  return "Vista";
                case "NT 6.1":
                  return "7";
                case "NT 6.2":
                  return "8";
                case "NT 6.3":
                  return "8.1";
                case "NT 10.0":
                  return "10";
                default:
                  return void 0;
              }
            }
            var osVersion = "";
            if (result.windows) {
              osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i));
            } else if (result.windowsphone) {
              osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
            } else if (result.mac) {
              osVersion = getFirstMatch(/Mac OS X (\d+([_\.\s]\d+)*)/i);
              osVersion = osVersion.replace(/[_\s]/g, ".");
            } else if (iosdevice) {
              osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
              osVersion = osVersion.replace(/[_\s]/g, ".");
            } else if (android) {
              osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
            } else if (result.webos) {
              osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
            } else if (result.blackberry) {
              osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
            } else if (result.bada) {
              osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
            } else if (result.tizen) {
              osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
            }
            if (osVersion) {
              result.osversion = osVersion;
            }
            var osMajorVersion = !result.windows && osVersion.split(".")[0];
            if (tablet || nexusTablet || iosdevice == "ipad" || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
              result.tablet = t2;
            } else if (mobile || iosdevice == "iphone" || iosdevice == "ipod" || android || nexusMobile || result.blackberry || result.webos || result.bada) {
              result.mobile = t2;
            }
            if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.whale && compareVersions([result.version, "1.0"]) === 1 || result.mzbrowser && compareVersions([result.version, "6.0"]) === 1 || result.focus && compareVersions([result.version, "1.0"]) === 1 || result.firefox && result.version >= 20 || result.safari && result.version >= 6 || result.opera && result.version >= 10 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
              result.a = t2;
            } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20 || result.safari && result.version < 6 || result.opera && result.version < 10 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
              result.c = t2;
            } else
              result.x = t2;
            return result;
          }
          var bowser = detect(typeof navigator !== "undefined" ? navigator.userAgent || "" : "");
          bowser.test = function(browserList) {
            for (var i = 0; i < browserList.length; ++i) {
              var browserItem = browserList[i];
              if (typeof browserItem === "string") {
                if (browserItem in bowser) {
                  return true;
                }
              }
            }
            return false;
          };
          function getVersionPrecision(version2) {
            return version2.split(".").length;
          }
          function map(arr, iterator) {
            var result = [], i;
            if (Array.prototype.map) {
              return Array.prototype.map.call(arr, iterator);
            }
            for (i = 0; i < arr.length; i++) {
              result.push(iterator(arr[i]));
            }
            return result;
          }
          function compareVersions(versions) {
            var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
            var chunks = map(versions, function(version2) {
              var delta = precision - getVersionPrecision(version2);
              version2 = version2 + new Array(delta + 1).join(".0");
              return map(version2.split("."), function(chunk) {
                return new Array(20 - chunk.length).join("0") + chunk;
              }).reverse();
            });
            while (--precision >= 0) {
              if (chunks[0][precision] > chunks[1][precision]) {
                return 1;
              } else if (chunks[0][precision] === chunks[1][precision]) {
                if (precision === 0) {
                  return 0;
                }
              } else {
                return -1;
              }
            }
          }
          function isUnsupportedBrowser(minVersions, strictMode, ua) {
            var _bowser = bowser;
            if (typeof strictMode === "string") {
              ua = strictMode;
              strictMode = void 0;
            }
            if (strictMode === void 0) {
              strictMode = false;
            }
            if (ua) {
              _bowser = detect(ua);
            }
            var version2 = "" + _bowser.version;
            for (var browser in minVersions) {
              if (minVersions.hasOwnProperty(browser)) {
                if (_bowser[browser]) {
                  if (typeof minVersions[browser] !== "string") {
                    throw new Error("Browser version in the minVersion map should be a string: " + browser + ": " + String(minVersions));
                  }
                  return compareVersions([version2, minVersions[browser]]) < 0;
                }
              }
            }
            return strictMode;
          }
          function check(minVersions, strictMode, ua) {
            return !isUnsupportedBrowser(minVersions, strictMode, ua);
          }
          bowser.isUnsupportedBrowser = isUnsupportedBrowser;
          bowser.compareVersions = compareVersions;
          bowser.check = check;
          bowser._detect = detect;
          bowser.detect = detect;
          return bowser;
        });
      }, {}], 102: [function(require2, module3, exports3) {
      }, {}], 103: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var base64 = require2("base64-js");
            var ieee754 = require2("ieee754");
            exports3.Buffer = Buffer3;
            exports3.SlowBuffer = SlowBuffer;
            exports3.INSPECT_MAX_BYTES = 50;
            var K_MAX_LENGTH = 2147483647;
            exports3.kMaxLength = K_MAX_LENGTH;
            Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
            if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
              console.error(
                "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
              );
            }
            function typedArraySupport() {
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                  return 42;
                } };
                return arr.foo() === 42;
              } catch (e2) {
                return false;
              }
            }
            Object.defineProperty(Buffer3.prototype, "parent", {
              enumerable: true,
              get: function() {
                if (!Buffer3.isBuffer(this))
                  return void 0;
                return this.buffer;
              }
            });
            Object.defineProperty(Buffer3.prototype, "offset", {
              enumerable: true,
              get: function() {
                if (!Buffer3.isBuffer(this))
                  return void 0;
                return this.byteOffset;
              }
            });
            function createBuffer(length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError('The value "' + length + '" is invalid for option "size"');
              }
              var buf = new Uint8Array(length);
              buf.__proto__ = Buffer3.prototype;
              return buf;
            }
            function Buffer3(arg, encodingOrOffset, length) {
              if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                  throw new TypeError(
                    'The "string" argument must be of type string. Received type number'
                  );
                }
                return allocUnsafe(arg);
              }
              return from(arg, encodingOrOffset, length);
            }
            if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer3[Symbol.species] === Buffer3) {
              Object.defineProperty(Buffer3, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
              });
            }
            Buffer3.poolSize = 8192;
            function from(value, encodingOrOffset, length) {
              if (typeof value === "string") {
                return fromString(value, encodingOrOffset);
              }
              if (ArrayBuffer.isView(value)) {
                return fromArrayLike(value);
              }
              if (value == null) {
                throw TypeError(
                  "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
                );
              }
              if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                return fromArrayBuffer(value, encodingOrOffset, length);
              }
              if (typeof value === "number") {
                throw new TypeError(
                  'The "value" argument must not be of type number. Received type number'
                );
              }
              var valueOf = value.valueOf && value.valueOf();
              if (valueOf != null && valueOf !== value) {
                return Buffer3.from(valueOf, encodingOrOffset, length);
              }
              var b = fromObject(value);
              if (b)
                return b;
              if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
                return Buffer3.from(
                  value[Symbol.toPrimitive]("string"),
                  encodingOrOffset,
                  length
                );
              }
              throw new TypeError(
                "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
              );
            }
            Buffer3.from = function(value, encodingOrOffset, length) {
              return from(value, encodingOrOffset, length);
            };
            Buffer3.prototype.__proto__ = Uint8Array.prototype;
            Buffer3.__proto__ = Uint8Array;
            function assertSize(size2) {
              if (typeof size2 !== "number") {
                throw new TypeError('"size" argument must be of type number');
              } else if (size2 < 0) {
                throw new RangeError('The value "' + size2 + '" is invalid for option "size"');
              }
            }
            function alloc(size2, fill, encoding) {
              assertSize(size2);
              if (size2 <= 0) {
                return createBuffer(size2);
              }
              if (fill !== void 0) {
                return typeof encoding === "string" ? createBuffer(size2).fill(fill, encoding) : createBuffer(size2).fill(fill);
              }
              return createBuffer(size2);
            }
            Buffer3.alloc = function(size2, fill, encoding) {
              return alloc(size2, fill, encoding);
            };
            function allocUnsafe(size2) {
              assertSize(size2);
              return createBuffer(size2 < 0 ? 0 : checked(size2) | 0);
            }
            Buffer3.allocUnsafe = function(size2) {
              return allocUnsafe(size2);
            };
            Buffer3.allocUnsafeSlow = function(size2) {
              return allocUnsafe(size2);
            };
            function fromString(string, encoding) {
              if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
              }
              if (!Buffer3.isEncoding(encoding)) {
                throw new TypeError("Unknown encoding: " + encoding);
              }
              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);
              var actual = buf.write(string, encoding);
              if (actual !== length) {
                buf = buf.slice(0, actual);
              }
              return buf;
            }
            function fromArrayLike(array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf;
            }
            function fromArrayBuffer(array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds');
              }
              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds');
              }
              var buf;
              if (byteOffset === void 0 && length === void 0) {
                buf = new Uint8Array(array);
              } else if (length === void 0) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }
              buf.__proto__ = Buffer3.prototype;
              return buf;
            }
            function fromObject(obj) {
              if (Buffer3.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);
                if (buf.length === 0) {
                  return buf;
                }
                obj.copy(buf, 0, 0, len);
                return buf;
              }
              if (obj.length !== void 0) {
                if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                  return createBuffer(0);
                }
                return fromArrayLike(obj);
              }
              if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data);
              }
            }
            function checked(length) {
              if (length >= K_MAX_LENGTH) {
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
              }
              return length | 0;
            }
            function SlowBuffer(length) {
              if (+length != length) {
                length = 0;
              }
              return Buffer3.alloc(+length);
            }
            Buffer3.isBuffer = function isBuffer(b) {
              return b != null && b._isBuffer === true && b !== Buffer3.prototype;
            };
            Buffer3.compare = function compare(a, b) {
              if (isInstance(a, Uint8Array))
                a = Buffer3.from(a, a.offset, a.byteLength);
              if (isInstance(b, Uint8Array))
                b = Buffer3.from(b, b.offset, b.byteLength);
              if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
                throw new TypeError(
                  'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                );
              }
              if (a === b)
                return 0;
              var x = a.length;
              var y = b.length;
              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            Buffer3.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            };
            Buffer3.concat = function concat(list2, length) {
              if (!Array.isArray(list2)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }
              if (list2.length === 0) {
                return Buffer3.alloc(0);
              }
              var i;
              if (length === void 0) {
                length = 0;
                for (i = 0; i < list2.length; ++i) {
                  length += list2[i].length;
                }
              }
              var buffer2 = Buffer3.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list2.length; ++i) {
                var buf = list2[i];
                if (isInstance(buf, Uint8Array)) {
                  buf = Buffer3.from(buf);
                }
                if (!Buffer3.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer2, pos);
                pos += buf.length;
              }
              return buffer2;
            };
            function byteLength(string, encoding) {
              if (Buffer3.isBuffer(string)) {
                return string.length;
              }
              if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                return string.byteLength;
              }
              if (typeof string !== "string") {
                throw new TypeError(
                  'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
                );
              }
              var len = string.length;
              var mustMatch = arguments.length > 2 && arguments[2] === true;
              if (!mustMatch && len === 0)
                return 0;
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;
                  case "utf8":
                  case "utf-8":
                    return utf8ToBytes(string).length;
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;
                  case "hex":
                    return len >>> 1;
                  case "base64":
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase) {
                      return mustMatch ? -1 : utf8ToBytes(string).length;
                    }
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.byteLength = byteLength;
            function slowToString(encoding, start, end) {
              var loweredCase = false;
              if (start === void 0 || start < 0) {
                start = 0;
              }
              if (start > this.length) {
                return "";
              }
              if (end === void 0 || end > this.length) {
                end = this.length;
              }
              if (end <= 0) {
                return "";
              }
              end >>>= 0;
              start >>>= 0;
              if (end <= start) {
                return "";
              }
              if (!encoding)
                encoding = "utf8";
              while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);
                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);
                  case "ascii":
                    return asciiSlice(this, start, end);
                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);
                  case "base64":
                    return base64Slice(this, start, end);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.prototype._isBuffer = true;
            function swap(b, n2, m2) {
              var i = b[n2];
              b[n2] = b[m2];
              b[m2] = i;
            }
            Buffer3.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 16-bits");
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };
            Buffer3.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 32-bits");
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };
            Buffer3.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 64-bits");
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };
            Buffer3.prototype.toString = function toString() {
              var length = this.length;
              if (length === 0)
                return "";
              if (arguments.length === 0)
                return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };
            Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
            Buffer3.prototype.equals = function equals(b) {
              if (!Buffer3.isBuffer(b))
                throw new TypeError("Argument must be a Buffer");
              if (this === b)
                return true;
              return Buffer3.compare(this, b) === 0;
            };
            Buffer3.prototype.inspect = function inspect() {
              var str = "";
              var max = exports3.INSPECT_MAX_BYTES;
              str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
              if (this.length > max)
                str += " ... ";
              return "<Buffer " + str + ">";
            };
            Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (isInstance(target, Uint8Array)) {
                target = Buffer3.from(target, target.offset, target.byteLength);
              }
              if (!Buffer3.isBuffer(target)) {
                throw new TypeError(
                  'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
                );
              }
              if (start === void 0) {
                start = 0;
              }
              if (end === void 0) {
                end = target ? target.length : 0;
              }
              if (thisStart === void 0) {
                thisStart = 0;
              }
              if (thisEnd === void 0) {
                thisEnd = this.length;
              }
              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError("out of range index");
              }
              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }
              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target)
                return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);
              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
              if (buffer2.length === 0)
                return -1;
              if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 2147483647) {
                byteOffset = 2147483647;
              } else if (byteOffset < -2147483648) {
                byteOffset = -2147483648;
              }
              byteOffset = +byteOffset;
              if (numberIsNaN(byteOffset)) {
                byteOffset = dir ? 0 : buffer2.length - 1;
              }
              if (byteOffset < 0)
                byteOffset = buffer2.length + byteOffset;
              if (byteOffset >= buffer2.length) {
                if (dir)
                  return -1;
                else
                  byteOffset = buffer2.length - 1;
              } else if (byteOffset < 0) {
                if (dir)
                  byteOffset = 0;
                else
                  return -1;
              }
              if (typeof val === "string") {
                val = Buffer3.from(val, encoding);
              }
              if (Buffer3.isBuffer(val)) {
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
              } else if (typeof val === "number") {
                val = val & 255;
                if (typeof Uint8Array.prototype.indexOf === "function") {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
                  }
                }
                return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
              }
              throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;
              if (encoding !== void 0) {
                encoding = String(encoding).toLowerCase();
                if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }
              function read(buf, i2) {
                if (indexSize === 1) {
                  return buf[i2];
                } else {
                  return buf.readUInt16BE(i2 * indexSize);
                }
              }
              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1)
                      foundIndex = i;
                    if (i - foundIndex + 1 === valLength)
                      return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1)
                      i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength)
                  byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found)
                    return i;
                }
              }
              return -1;
            }
            Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }
              var strLen = string.length;
              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed))
                  return i;
                buf[offset + i] = parsed;
              }
              return i;
            }
            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer3.prototype.write = function write(string, offset, length, encoding) {
              if (offset === void 0) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
              } else if (length === void 0 && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === void 0)
                    encoding = "utf8";
                } else {
                  encoding = length;
                  length = void 0;
                }
              } else {
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              }
              var remaining = this.length - offset;
              if (length === void 0 || length > remaining)
                length = remaining;
              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError("Attempt to write outside buffer bounds");
              }
              if (!encoding)
                encoding = "utf8";
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);
                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);
                  case "ascii":
                    return asciiWrite(this, string, offset, length);
                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);
                  case "base64":
                    return base64Write(this, string, offset, length);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };
            Buffer3.prototype.toJSON = function toJSON() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }
            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;
                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 128) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }
                if (codePoint === null) {
                  codePoint = 65533;
                  bytesPerSequence = 1;
                } else if (codePoint > 65535) {
                  codePoint -= 65536;
                  res.push(codePoint >>> 10 & 1023 | 55296);
                  codePoint = 56320 | codePoint & 1023;
                }
                res.push(codePoint);
                i += bytesPerSequence;
              }
              return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 4096;
            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
              }
              var res = "";
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                );
              }
              return res;
            }
            function asciiSlice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 127);
              }
              return ret;
            }
            function latin1Slice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }
            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0)
                start = 0;
              if (!end || end < 0 || end > len)
                end = len;
              var out = "";
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out;
            }
            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = "";
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }
            Buffer3.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === void 0 ? len : ~~end;
              if (start < 0) {
                start += len;
                if (start < 0)
                  start = 0;
              } else if (start > len) {
                start = len;
              }
              if (end < 0) {
                end += len;
                if (end < 0)
                  end = 0;
              } else if (end > len) {
                end = len;
              }
              if (end < start)
                end = start;
              var newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer3.prototype;
              return newBuf;
            };
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0)
                throw new RangeError("offset is not uint");
              if (offset + ext > length)
                throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength2, this.length);
              }
              var val = this[offset + --byteLength2];
              var mul = 1;
              while (byteLength2 > 0 && (mul *= 256)) {
                val += this[offset + --byteLength2] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              return this[offset];
            };
            Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };
            Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };
            Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
            };
            Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var i = byteLength2;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 256)) {
                val += this[offset + --i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              if (!(this[offset] & 128))
                return this[offset];
              return (255 - this[offset] + 1) * -1;
            };
            Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer3.isBuffer(buf))
                throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min)
                throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
            }
            Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var mul = 1;
              var i = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 255, 0);
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 255;
              return offset + 4;
            };
            Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 127, -128);
              if (value < 0)
                value = 255 + value + 1;
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
              return offset + 4;
            };
            Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              if (value < 0)
                value = 4294967295 + value + 1;
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
              if (offset < 0)
                throw new RangeError("Index out of range");
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }
            Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }
            Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            };
            Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
              if (!Buffer3.isBuffer(target))
                throw new TypeError("argument should be a Buffer");
              if (!start)
                start = 0;
              if (!end && end !== 0)
                end = this.length;
              if (targetStart >= target.length)
                targetStart = target.length;
              if (!targetStart)
                targetStart = 0;
              if (end > 0 && end < start)
                end = start;
              if (end === start)
                return 0;
              if (target.length === 0 || this.length === 0)
                return 0;
              if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
              }
              if (start < 0 || start >= this.length)
                throw new RangeError("Index out of range");
              if (end < 0)
                throw new RangeError("sourceEnd out of bounds");
              if (end > this.length)
                end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }
              var len = end - start;
              if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
                this.copyWithin(targetStart, start, end);
              } else if (this === target && start < targetStart && targetStart < end) {
                for (var i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, end),
                  targetStart
                );
              }
              return len;
            };
            Buffer3.prototype.fill = function fill(val, start, end, encoding) {
              if (typeof val === "string") {
                if (typeof start === "string") {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === "string") {
                  encoding = end;
                  end = this.length;
                }
                if (encoding !== void 0 && typeof encoding !== "string") {
                  throw new TypeError("encoding must be a string");
                }
                if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (encoding === "utf8" && code < 128 || encoding === "latin1") {
                    val = code;
                  }
                }
              } else if (typeof val === "number") {
                val = val & 255;
              }
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
              }
              if (end <= start) {
                return this;
              }
              start = start >>> 0;
              end = end === void 0 ? this.length : end >>> 0;
              if (!val)
                val = 0;
              var i;
              if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                  throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                }
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }
              return this;
            };
            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
            function base64clean(str) {
              str = str.split("=")[0];
              str = str.trim().replace(INVALID_BASE64_RE, "");
              if (str.length < 2)
                return "";
              while (str.length % 4 !== 0) {
                str = str + "=";
              }
              return str;
            }
            function toHex(n2) {
              if (n2 < 16)
                return "0" + n2.toString(16);
              return n2.toString(16);
            }
            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];
              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 55295 && codePoint < 57344) {
                  if (!leadSurrogate) {
                    if (codePoint > 56319) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    } else if (i + 1 === length) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    }
                    leadSurrogate = codePoint;
                    continue;
                  }
                  if (codePoint < 56320) {
                    if ((units -= 3) > -1)
                      bytes.push(239, 191, 189);
                    leadSurrogate = codePoint;
                    continue;
                  }
                  codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                } else if (leadSurrogate) {
                  if ((units -= 3) > -1)
                    bytes.push(239, 191, 189);
                }
                leadSurrogate = null;
                if (codePoint < 128) {
                  if ((units -= 1) < 0)
                    break;
                  bytes.push(codePoint);
                } else if (codePoint < 2048) {
                  if ((units -= 2) < 0)
                    break;
                  bytes.push(
                    codePoint >> 6 | 192,
                    codePoint & 63 | 128
                  );
                } else if (codePoint < 65536) {
                  if ((units -= 3) < 0)
                    break;
                  bytes.push(
                    codePoint >> 12 | 224,
                    codePoint >> 6 & 63 | 128,
                    codePoint & 63 | 128
                  );
                } else if (codePoint < 1114112) {
                  if ((units -= 4) < 0)
                    break;
                  bytes.push(
                    codePoint >> 18 | 240,
                    codePoint >> 12 & 63 | 128,
                    codePoint >> 6 & 63 | 128,
                    codePoint & 63 | 128
                  );
                } else {
                  throw new Error("Invalid code point");
                }
              }
              return bytes;
            }
            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                byteArray.push(str.charCodeAt(i) & 255);
              }
              return byteArray;
            }
            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0)
                  break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }
              return byteArray;
            }
            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length)
                  break;
                dst[i + offset] = src[i];
              }
              return i;
            }
            function isInstance(obj, type) {
              return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
            }
            function numberIsNaN(obj) {
              return obj !== obj;
            }
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "base64-js": 100, "buffer": 103, "ieee754": 400 }], 104: [function(require2, module3, exports3) {
        module3.exports = {
          "100": "Continue",
          "101": "Switching Protocols",
          "102": "Processing",
          "200": "OK",
          "201": "Created",
          "202": "Accepted",
          "203": "Non-Authoritative Information",
          "204": "No Content",
          "205": "Reset Content",
          "206": "Partial Content",
          "207": "Multi-Status",
          "208": "Already Reported",
          "226": "IM Used",
          "300": "Multiple Choices",
          "301": "Moved Permanently",
          "302": "Found",
          "303": "See Other",
          "304": "Not Modified",
          "305": "Use Proxy",
          "307": "Temporary Redirect",
          "308": "Permanent Redirect",
          "400": "Bad Request",
          "401": "Unauthorized",
          "402": "Payment Required",
          "403": "Forbidden",
          "404": "Not Found",
          "405": "Method Not Allowed",
          "406": "Not Acceptable",
          "407": "Proxy Authentication Required",
          "408": "Request Timeout",
          "409": "Conflict",
          "410": "Gone",
          "411": "Length Required",
          "412": "Precondition Failed",
          "413": "Payload Too Large",
          "414": "URI Too Long",
          "415": "Unsupported Media Type",
          "416": "Range Not Satisfiable",
          "417": "Expectation Failed",
          "418": "I'm a teapot",
          "421": "Misdirected Request",
          "422": "Unprocessable Entity",
          "423": "Locked",
          "424": "Failed Dependency",
          "425": "Unordered Collection",
          "426": "Upgrade Required",
          "428": "Precondition Required",
          "429": "Too Many Requests",
          "431": "Request Header Fields Too Large",
          "451": "Unavailable For Legal Reasons",
          "500": "Internal Server Error",
          "501": "Not Implemented",
          "502": "Bad Gateway",
          "503": "Service Unavailable",
          "504": "Gateway Timeout",
          "505": "HTTP Version Not Supported",
          "506": "Variant Also Negotiates",
          "507": "Insufficient Storage",
          "508": "Loop Detected",
          "509": "Bandwidth Limit Exceeded",
          "510": "Not Extended",
          "511": "Network Authentication Required"
        };
      }, {}], 105: [function(require2, module3, exports3) {
        var GetIntrinsic = require2("get-intrinsic");
        var callBind = require2("./");
        var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
        module3.exports = function callBoundIntrinsic(name, allowMissing) {
          var intrinsic = GetIntrinsic(name, !!allowMissing);
          if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
            return callBind(intrinsic);
          }
          return intrinsic;
        };
      }, { "./": 106, "get-intrinsic": 390 }], 106: [function(require2, module3, exports3) {
        var bind = require2("function-bind");
        var GetIntrinsic = require2("get-intrinsic");
        var setFunctionLength = require2("set-function-length");
        var $TypeError = GetIntrinsic("%TypeError%");
        var $apply = GetIntrinsic("%Function.prototype.apply%");
        var $call = GetIntrinsic("%Function.prototype.call%");
        var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
        var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
        var $max = GetIntrinsic("%Math.max%");
        if ($defineProperty) {
          try {
            $defineProperty({}, "a", { value: 1 });
          } catch (e2) {
            $defineProperty = null;
          }
        }
        module3.exports = function callBind(originalFunction) {
          if (typeof originalFunction !== "function") {
            throw new $TypeError("a function is required");
          }
          var func = $reflectApply(bind, $call, arguments);
          return setFunctionLength(
            func,
            1 + $max(0, originalFunction.length - (arguments.length - 1)),
            true
          );
        };
        var applyBind = function applyBind2() {
          return $reflectApply(bind, $apply, arguments);
        };
        if ($defineProperty) {
          $defineProperty(module3.exports, "apply", { value: applyBind });
        } else {
          module3.exports.apply = applyBind;
        }
      }, { "function-bind": 389, "get-intrinsic": 390, "set-function-length": 466 }], 107: [function(require2, module3, exports3) {
        var slice = Array.prototype.slice;
        module3.exports = Copy;
        function Copy(src, withAccess) {
          if (!(this instanceof Copy))
            return new Copy(src, withAccess);
          this.src = src;
          this._withAccess = withAccess;
        }
        Copy.prototype.withAccess = function(w) {
          this._withAccess = w !== false;
          return this;
        };
        Copy.prototype.pick = function(keys) {
          if (!Array.isArray(keys)) {
            keys = slice.call(arguments);
          }
          if (keys.length) {
            this.keys = keys;
          }
          return this;
        };
        Copy.prototype.to = function(to) {
          to = to || {};
          if (!this.src)
            return to;
          var keys = this.keys || Object.keys(this.src);
          if (!this._withAccess) {
            for (var i = 0; i < keys.length; i++) {
              key = keys[i];
              if (to[key] !== void 0)
                continue;
              to[key] = this.src[key];
            }
            return to;
          }
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!notDefined(to, key))
              continue;
            var getter = this.src.__lookupGetter__(key);
            var setter = this.src.__lookupSetter__(key);
            if (getter)
              to.__defineGetter__(key, getter);
            if (setter)
              to.__defineSetter__(key, setter);
            if (!getter && !setter) {
              to[key] = this.src[key];
            }
          }
          return to;
        };
        Copy.prototype.toCover = function(to) {
          var keys = this.keys || Object.keys(this.src);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            delete to[key];
            var getter = this.src.__lookupGetter__(key);
            var setter = this.src.__lookupSetter__(key);
            if (getter)
              to.__defineGetter__(key, getter);
            if (setter)
              to.__defineSetter__(key, setter);
            if (!getter && !setter) {
              to[key] = this.src[key];
            }
          }
        };
        Copy.prototype.override = Copy.prototype.toCover;
        Copy.prototype.and = function(obj) {
          var src = {};
          this.to(src);
          this.src = obj;
          this.to(src);
          this.src = src;
          return this;
        };
        function notDefined(obj, key) {
          return obj[key] === void 0 && obj.__lookupGetter__(key) === void 0 && obj.__lookupSetter__(key) === void 0;
        }
      }, {}], 108: [function(require2, module3, exports3) {
        var isCallable = require2("../internals/is-callable");
        var tryToString = require2("../internals/try-to-string");
        var $TypeError = TypeError;
        module3.exports = function(argument) {
          if (isCallable(argument))
            return argument;
          throw new $TypeError(tryToString(argument) + " is not a function");
        };
      }, { "../internals/is-callable": 203, "../internals/try-to-string": 293 }], 109: [function(require2, module3, exports3) {
        var isConstructor = require2("../internals/is-constructor");
        var tryToString = require2("../internals/try-to-string");
        var $TypeError = TypeError;
        module3.exports = function(argument) {
          if (isConstructor(argument))
            return argument;
          throw new $TypeError(tryToString(argument) + " is not a constructor");
        };
      }, { "../internals/is-constructor": 204, "../internals/try-to-string": 293 }], 110: [function(require2, module3, exports3) {
        var isPossiblePrototype = require2("../internals/is-possible-prototype");
        var $String = String;
        var $TypeError = TypeError;
        module3.exports = function(argument) {
          if (isPossiblePrototype(argument))
            return argument;
          throw new $TypeError("Can't set " + $String(argument) + " as a prototype");
        };
      }, { "../internals/is-possible-prototype": 209 }], 111: [function(require2, module3, exports3) {
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var create2 = require2("../internals/object-create");
        var defineProperty = require2("../internals/object-define-property").f;
        var UNSCOPABLES = wellKnownSymbol("unscopables");
        var ArrayPrototype = Array.prototype;
        if (ArrayPrototype[UNSCOPABLES] === void 0) {
          defineProperty(ArrayPrototype, UNSCOPABLES, {
            configurable: true,
            value: create2(null)
          });
        }
        module3.exports = function(key) {
          ArrayPrototype[UNSCOPABLES][key] = true;
        };
      }, { "../internals/object-create": 229, "../internals/object-define-property": 231, "../internals/well-known-symbol": 306 }], 112: [function(require2, module3, exports3) {
        var charAt = require2("../internals/string-multibyte").charAt;
        module3.exports = function(S, index2, unicode) {
          return index2 + (unicode ? charAt(S, index2).length : 1);
        };
      }, { "../internals/string-multibyte": 271 }], 113: [function(require2, module3, exports3) {
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var $TypeError = TypeError;
        module3.exports = function(it, Prototype) {
          if (isPrototypeOf(Prototype, it))
            return it;
          throw new $TypeError("Incorrect invocation");
        };
      }, { "../internals/object-is-prototype-of": 238 }], 114: [function(require2, module3, exports3) {
        var isObject2 = require2("../internals/is-object");
        var $String = String;
        var $TypeError = TypeError;
        module3.exports = function(argument) {
          if (isObject2(argument))
            return argument;
          throw new $TypeError($String(argument) + " is not an object");
        };
      }, { "../internals/is-object": 208 }], 115: [function(require2, module3, exports3) {
        module3.exports = typeof ArrayBuffer != "undefined" && typeof DataView != "undefined";
      }, {}], 116: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        module3.exports = fails(function() {
          if (typeof ArrayBuffer == "function") {
            var buffer2 = new ArrayBuffer(8);
            if (Object.isExtensible(buffer2))
              Object.defineProperty(buffer2, "a", { value: 8 });
          }
        });
      }, { "../internals/fails": 171 }], 117: [function(require2, module3, exports3) {
        var NATIVE_ARRAY_BUFFER = require2("../internals/array-buffer-basic-detection");
        var DESCRIPTORS = require2("../internals/descriptors");
        var global3 = require2("../internals/global");
        var isCallable = require2("../internals/is-callable");
        var isObject2 = require2("../internals/is-object");
        var hasOwn2 = require2("../internals/has-own-property");
        var classof = require2("../internals/classof");
        var tryToString = require2("../internals/try-to-string");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var defineBuiltIn = require2("../internals/define-built-in");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var getPrototypeOf2 = require2("../internals/object-get-prototype-of");
        var setPrototypeOf2 = require2("../internals/object-set-prototype-of");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var uid2 = require2("../internals/uid");
        var InternalStateModule = require2("../internals/internal-state");
        var enforceInternalState = InternalStateModule.enforce;
        var getInternalState = InternalStateModule.get;
        var Int8Array2 = global3.Int8Array;
        var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
        var Uint8ClampedArray2 = global3.Uint8ClampedArray;
        var Uint8ClampedArrayPrototype = Uint8ClampedArray2 && Uint8ClampedArray2.prototype;
        var TypedArray = Int8Array2 && getPrototypeOf2(Int8Array2);
        var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf2(Int8ArrayPrototype);
        var ObjectPrototype = Object.prototype;
        var TypeError2 = global3.TypeError;
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var TYPED_ARRAY_TAG = uid2("TYPED_ARRAY_TAG");
        var TYPED_ARRAY_CONSTRUCTOR = "TypedArrayConstructor";
        var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf2 && classof(global3.opera) !== "Opera";
        var TYPED_ARRAY_TAG_REQUIRED = false;
        var NAME, Constructor, Prototype;
        var TypedArrayConstructorsList = {
          Int8Array: 1,
          Uint8Array: 1,
          Uint8ClampedArray: 1,
          Int16Array: 2,
          Uint16Array: 2,
          Int32Array: 4,
          Uint32Array: 4,
          Float32Array: 4,
          Float64Array: 8
        };
        var BigIntArrayConstructorsList = {
          BigInt64Array: 8,
          BigUint64Array: 8
        };
        var isView = function isView2(it) {
          if (!isObject2(it))
            return false;
          var klass = classof(it);
          return klass === "DataView" || hasOwn2(TypedArrayConstructorsList, klass) || hasOwn2(BigIntArrayConstructorsList, klass);
        };
        var getTypedArrayConstructor = function(it) {
          var proto = getPrototypeOf2(it);
          if (!isObject2(proto))
            return;
          var state = getInternalState(proto);
          return state && hasOwn2(state, TYPED_ARRAY_CONSTRUCTOR) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);
        };
        var isTypedArray = function(it) {
          if (!isObject2(it))
            return false;
          var klass = classof(it);
          return hasOwn2(TypedArrayConstructorsList, klass) || hasOwn2(BigIntArrayConstructorsList, klass);
        };
        var aTypedArray = function(it) {
          if (isTypedArray(it))
            return it;
          throw new TypeError2("Target is not a typed array");
        };
        var aTypedArrayConstructor = function(C) {
          if (isCallable(C) && (!setPrototypeOf2 || isPrototypeOf(TypedArray, C)))
            return C;
          throw new TypeError2(tryToString(C) + " is not a typed array constructor");
        };
        var exportTypedArrayMethod = function(KEY, property, forced, options) {
          if (!DESCRIPTORS)
            return;
          if (forced)
            for (var ARRAY in TypedArrayConstructorsList) {
              var TypedArrayConstructor = global3[ARRAY];
              if (TypedArrayConstructor && hasOwn2(TypedArrayConstructor.prototype, KEY))
                try {
                  delete TypedArrayConstructor.prototype[KEY];
                } catch (error) {
                  try {
                    TypedArrayConstructor.prototype[KEY] = property;
                  } catch (error2) {
                  }
                }
            }
          if (!TypedArrayPrototype[KEY] || forced) {
            defineBuiltIn(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);
          }
        };
        var exportTypedArrayStaticMethod = function(KEY, property, forced) {
          var ARRAY, TypedArrayConstructor;
          if (!DESCRIPTORS)
            return;
          if (setPrototypeOf2) {
            if (forced)
              for (ARRAY in TypedArrayConstructorsList) {
                TypedArrayConstructor = global3[ARRAY];
                if (TypedArrayConstructor && hasOwn2(TypedArrayConstructor, KEY))
                  try {
                    delete TypedArrayConstructor[KEY];
                  } catch (error) {
                  }
              }
            if (!TypedArray[KEY] || forced) {
              try {
                return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
              } catch (error) {
              }
            } else
              return;
          }
          for (ARRAY in TypedArrayConstructorsList) {
            TypedArrayConstructor = global3[ARRAY];
            if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
              defineBuiltIn(TypedArrayConstructor, KEY, property);
            }
          }
        };
        for (NAME in TypedArrayConstructorsList) {
          Constructor = global3[NAME];
          Prototype = Constructor && Constructor.prototype;
          if (Prototype)
            enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
          else
            NATIVE_ARRAY_BUFFER_VIEWS = false;
        }
        for (NAME in BigIntArrayConstructorsList) {
          Constructor = global3[NAME];
          Prototype = Constructor && Constructor.prototype;
          if (Prototype)
            enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
        }
        if (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {
          TypedArray = function TypedArray2() {
            throw new TypeError2("Incorrect invocation");
          };
          if (NATIVE_ARRAY_BUFFER_VIEWS)
            for (NAME in TypedArrayConstructorsList) {
              if (global3[NAME])
                setPrototypeOf2(global3[NAME], TypedArray);
            }
        }
        if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
          TypedArrayPrototype = TypedArray.prototype;
          if (NATIVE_ARRAY_BUFFER_VIEWS)
            for (NAME in TypedArrayConstructorsList) {
              if (global3[NAME])
                setPrototypeOf2(global3[NAME].prototype, TypedArrayPrototype);
            }
        }
        if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf2(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
          setPrototypeOf2(Uint8ClampedArrayPrototype, TypedArrayPrototype);
        }
        if (DESCRIPTORS && !hasOwn2(TypedArrayPrototype, TO_STRING_TAG)) {
          TYPED_ARRAY_TAG_REQUIRED = true;
          defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {
            configurable: true,
            get: function() {
              return isObject2(this) ? this[TYPED_ARRAY_TAG] : void 0;
            }
          });
          for (NAME in TypedArrayConstructorsList)
            if (global3[NAME]) {
              createNonEnumerableProperty(global3[NAME], TYPED_ARRAY_TAG, NAME);
            }
        }
        module3.exports = {
          NATIVE_ARRAY_BUFFER_VIEWS,
          TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
          aTypedArray,
          aTypedArrayConstructor,
          exportTypedArrayMethod,
          exportTypedArrayStaticMethod,
          getTypedArrayConstructor,
          isView,
          isTypedArray,
          TypedArray,
          TypedArrayPrototype
        };
      }, { "../internals/array-buffer-basic-detection": 115, "../internals/classof": 138, "../internals/create-non-enumerable-property": 145, "../internals/define-built-in": 149, "../internals/define-built-in-accessor": 148, "../internals/descriptors": 153, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/internal-state": 199, "../internals/is-callable": 203, "../internals/is-object": 208, "../internals/object-get-prototype-of": 236, "../internals/object-is-prototype-of": 238, "../internals/object-set-prototype-of": 242, "../internals/try-to-string": 293, "../internals/uid": 299, "../internals/well-known-symbol": 306 }], 118: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var DESCRIPTORS = require2("../internals/descriptors");
        var NATIVE_ARRAY_BUFFER = require2("../internals/array-buffer-basic-detection");
        var FunctionName = require2("../internals/function-name");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var defineBuiltIns = require2("../internals/define-built-ins");
        var fails = require2("../internals/fails");
        var anInstance = require2("../internals/an-instance");
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var toLength = require2("../internals/to-length");
        var toIndex = require2("../internals/to-index");
        var fround = require2("../internals/math-fround");
        var IEEE754 = require2("../internals/ieee754");
        var getPrototypeOf2 = require2("../internals/object-get-prototype-of");
        var setPrototypeOf2 = require2("../internals/object-set-prototype-of");
        var arrayFill = require2("../internals/array-fill");
        var arraySlice = require2("../internals/array-slice");
        var inheritIfRequired = require2("../internals/inherit-if-required");
        var copyConstructorProperties = require2("../internals/copy-constructor-properties");
        var setToStringTag = require2("../internals/set-to-string-tag");
        var InternalStateModule = require2("../internals/internal-state");
        var PROPER_FUNCTION_NAME = FunctionName.PROPER;
        var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
        var ARRAY_BUFFER = "ArrayBuffer";
        var DATA_VIEW = "DataView";
        var PROTOTYPE = "prototype";
        var WRONG_LENGTH = "Wrong length";
        var WRONG_INDEX = "Wrong index";
        var getInternalArrayBufferState = InternalStateModule.getterFor(ARRAY_BUFFER);
        var getInternalDataViewState = InternalStateModule.getterFor(DATA_VIEW);
        var setInternalState = InternalStateModule.set;
        var NativeArrayBuffer = global3[ARRAY_BUFFER];
        var $ArrayBuffer = NativeArrayBuffer;
        var ArrayBufferPrototype = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
        var $DataView = global3[DATA_VIEW];
        var DataViewPrototype = $DataView && $DataView[PROTOTYPE];
        var ObjectPrototype = Object.prototype;
        var Array2 = global3.Array;
        var RangeError2 = global3.RangeError;
        var fill = uncurryThis(arrayFill);
        var reverse = uncurryThis([].reverse);
        var packIEEE754 = IEEE754.pack;
        var unpackIEEE754 = IEEE754.unpack;
        var packInt8 = function(number) {
          return [number & 255];
        };
        var packInt16 = function(number) {
          return [number & 255, number >> 8 & 255];
        };
        var packInt32 = function(number) {
          return [number & 255, number >> 8 & 255, number >> 16 & 255, number >> 24 & 255];
        };
        var unpackInt32 = function(buffer2) {
          return buffer2[3] << 24 | buffer2[2] << 16 | buffer2[1] << 8 | buffer2[0];
        };
        var packFloat32 = function(number) {
          return packIEEE754(fround(number), 23, 4);
        };
        var packFloat64 = function(number) {
          return packIEEE754(number, 52, 8);
        };
        var addGetter = function(Constructor, key, getInternalState) {
          defineBuiltInAccessor(Constructor[PROTOTYPE], key, {
            configurable: true,
            get: function() {
              return getInternalState(this)[key];
            }
          });
        };
        var get2 = function(view, count, index2, isLittleEndian) {
          var store = getInternalDataViewState(view);
          var intIndex = toIndex(index2);
          var boolIsLittleEndian = !!isLittleEndian;
          if (intIndex + count > store.byteLength)
            throw new RangeError2(WRONG_INDEX);
          var bytes = store.bytes;
          var start = intIndex + store.byteOffset;
          var pack = arraySlice(bytes, start, start + count);
          return boolIsLittleEndian ? pack : reverse(pack);
        };
        var set2 = function(view, count, index2, conversion, value, isLittleEndian) {
          var store = getInternalDataViewState(view);
          var intIndex = toIndex(index2);
          var pack = conversion(+value);
          var boolIsLittleEndian = !!isLittleEndian;
          if (intIndex + count > store.byteLength)
            throw new RangeError2(WRONG_INDEX);
          var bytes = store.bytes;
          var start = intIndex + store.byteOffset;
          for (var i = 0; i < count; i++)
            bytes[start + i] = pack[boolIsLittleEndian ? i : count - i - 1];
        };
        if (!NATIVE_ARRAY_BUFFER) {
          $ArrayBuffer = function ArrayBuffer2(length) {
            anInstance(this, ArrayBufferPrototype);
            var byteLength = toIndex(length);
            setInternalState(this, {
              type: ARRAY_BUFFER,
              bytes: fill(Array2(byteLength), 0),
              byteLength
            });
            if (!DESCRIPTORS) {
              this.byteLength = byteLength;
              this.detached = false;
            }
          };
          ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE];
          $DataView = function DataView2(buffer2, byteOffset, byteLength) {
            anInstance(this, DataViewPrototype);
            anInstance(buffer2, ArrayBufferPrototype);
            var bufferState = getInternalArrayBufferState(buffer2);
            var bufferLength = bufferState.byteLength;
            var offset = toIntegerOrInfinity(byteOffset);
            if (offset < 0 || offset > bufferLength)
              throw new RangeError2("Wrong offset");
            byteLength = byteLength === void 0 ? bufferLength - offset : toLength(byteLength);
            if (offset + byteLength > bufferLength)
              throw new RangeError2(WRONG_LENGTH);
            setInternalState(this, {
              type: DATA_VIEW,
              buffer: buffer2,
              byteLength,
              byteOffset: offset,
              bytes: bufferState.bytes
            });
            if (!DESCRIPTORS) {
              this.buffer = buffer2;
              this.byteLength = byteLength;
              this.byteOffset = offset;
            }
          };
          DataViewPrototype = $DataView[PROTOTYPE];
          if (DESCRIPTORS) {
            addGetter($ArrayBuffer, "byteLength", getInternalArrayBufferState);
            addGetter($DataView, "buffer", getInternalDataViewState);
            addGetter($DataView, "byteLength", getInternalDataViewState);
            addGetter($DataView, "byteOffset", getInternalDataViewState);
          }
          defineBuiltIns(DataViewPrototype, {
            getInt8: function getInt8(byteOffset) {
              return get2(this, 1, byteOffset)[0] << 24 >> 24;
            },
            getUint8: function getUint8(byteOffset) {
              return get2(this, 1, byteOffset)[0];
            },
            getInt16: function getInt16(byteOffset) {
              var bytes = get2(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : false);
              return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
            },
            getUint16: function getUint16(byteOffset) {
              var bytes = get2(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : false);
              return bytes[1] << 8 | bytes[0];
            },
            getInt32: function getInt32(byteOffset) {
              return unpackInt32(get2(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : false));
            },
            getUint32: function getUint32(byteOffset) {
              return unpackInt32(get2(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : false)) >>> 0;
            },
            getFloat32: function getFloat32(byteOffset) {
              return unpackIEEE754(get2(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : false), 23);
            },
            getFloat64: function getFloat64(byteOffset) {
              return unpackIEEE754(get2(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : false), 52);
            },
            setInt8: function setInt8(byteOffset, value) {
              set2(this, 1, byteOffset, packInt8, value);
            },
            setUint8: function setUint8(byteOffset, value) {
              set2(this, 1, byteOffset, packInt8, value);
            },
            setInt16: function setInt16(byteOffset, value) {
              set2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : false);
            },
            setUint16: function setUint16(byteOffset, value) {
              set2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : false);
            },
            setInt32: function setInt32(byteOffset, value) {
              set2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : false);
            },
            setUint32: function setUint32(byteOffset, value) {
              set2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : false);
            },
            setFloat32: function setFloat32(byteOffset, value) {
              set2(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : false);
            },
            setFloat64: function setFloat64(byteOffset, value) {
              set2(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : false);
            }
          });
        } else {
          var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME && NativeArrayBuffer.name !== ARRAY_BUFFER;
          if (!fails(function() {
            NativeArrayBuffer(1);
          }) || !fails(function() {
            new NativeArrayBuffer(-1);
          }) || fails(function() {
            new NativeArrayBuffer();
            new NativeArrayBuffer(1.5);
            new NativeArrayBuffer(NaN);
            return NativeArrayBuffer.length !== 1 || INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
          })) {
            $ArrayBuffer = function ArrayBuffer2(length) {
              anInstance(this, ArrayBufferPrototype);
              return inheritIfRequired(new NativeArrayBuffer(toIndex(length)), this, $ArrayBuffer);
            };
            $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype;
            ArrayBufferPrototype.constructor = $ArrayBuffer;
            copyConstructorProperties($ArrayBuffer, NativeArrayBuffer);
          } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
            createNonEnumerableProperty(NativeArrayBuffer, "name", ARRAY_BUFFER);
          }
          if (setPrototypeOf2 && getPrototypeOf2(DataViewPrototype) !== ObjectPrototype) {
            setPrototypeOf2(DataViewPrototype, ObjectPrototype);
          }
          var testView = new $DataView(new $ArrayBuffer(2));
          var $setInt8 = uncurryThis(DataViewPrototype.setInt8);
          testView.setInt8(0, 2147483648);
          testView.setInt8(1, 2147483649);
          if (testView.getInt8(0) || !testView.getInt8(1))
            defineBuiltIns(DataViewPrototype, {
              setInt8: function setInt8(byteOffset, value) {
                $setInt8(this, byteOffset, value << 24 >> 24);
              },
              setUint8: function setUint8(byteOffset, value) {
                $setInt8(this, byteOffset, value << 24 >> 24);
              }
            }, { unsafe: true });
        }
        setToStringTag($ArrayBuffer, ARRAY_BUFFER);
        setToStringTag($DataView, DATA_VIEW);
        module3.exports = {
          ArrayBuffer: $ArrayBuffer,
          DataView: $DataView
        };
      }, { "../internals/an-instance": 113, "../internals/array-buffer-basic-detection": 115, "../internals/array-fill": 120, "../internals/array-slice": 131, "../internals/copy-constructor-properties": 141, "../internals/create-non-enumerable-property": 145, "../internals/define-built-in-accessor": 148, "../internals/define-built-ins": 150, "../internals/descriptors": 153, "../internals/fails": 171, "../internals/function-name": 178, "../internals/function-uncurry-this": 181, "../internals/global": 188, "../internals/ieee754": 194, "../internals/inherit-if-required": 196, "../internals/internal-state": 199, "../internals/math-fround": 222, "../internals/object-get-prototype-of": 236, "../internals/object-set-prototype-of": 242, "../internals/set-to-string-tag": 266, "../internals/to-index": 281, "../internals/to-integer-or-infinity": 283, "../internals/to-length": 284 }], 119: [function(require2, module3, exports3) {
        var toObject = require2("../internals/to-object");
        var toAbsoluteIndex = require2("../internals/to-absolute-index");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var deletePropertyOrThrow = require2("../internals/delete-property-or-throw");
        var min = Math.min;
        module3.exports = [].copyWithin || function copyWithin(target, start) {
          var O = toObject(this);
          var len = lengthOfArrayLike(O);
          var to = toAbsoluteIndex(target, len);
          var from = toAbsoluteIndex(start, len);
          var end = arguments.length > 2 ? arguments[2] : void 0;
          var count = min((end === void 0 ? len : toAbsoluteIndex(end, len)) - from, len - to);
          var inc = 1;
          if (from < to && to < from + count) {
            inc = -1;
            from += count - 1;
            to += count - 1;
          }
          while (count-- > 0) {
            if (from in O)
              O[to] = O[from];
            else
              deletePropertyOrThrow(O, to);
            to += inc;
            from += inc;
          }
          return O;
        };
      }, { "../internals/delete-property-or-throw": 152, "../internals/length-of-array-like": 219, "../internals/to-absolute-index": 279, "../internals/to-object": 285 }], 120: [function(require2, module3, exports3) {
        var toObject = require2("../internals/to-object");
        var toAbsoluteIndex = require2("../internals/to-absolute-index");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        module3.exports = function fill(value) {
          var O = toObject(this);
          var length = lengthOfArrayLike(O);
          var argumentsLength = arguments.length;
          var index2 = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length);
          var end = argumentsLength > 2 ? arguments[2] : void 0;
          var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
          while (endPos > index2)
            O[index2++] = value;
          return O;
        };
      }, { "../internals/length-of-array-like": 219, "../internals/to-absolute-index": 279, "../internals/to-object": 285 }], 121: [function(require2, module3, exports3) {
        var $forEach = require2("../internals/array-iteration").forEach;
        var arrayMethodIsStrict = require2("../internals/array-method-is-strict");
        var STRICT_METHOD = arrayMethodIsStrict("forEach");
        module3.exports = !STRICT_METHOD ? function forEach(callbackfn) {
          return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        } : [].forEach;
      }, { "../internals/array-iteration": 125, "../internals/array-method-is-strict": 128 }], 122: [function(require2, module3, exports3) {
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        module3.exports = function(Constructor, list2, $length) {
          var index2 = 0;
          var length = arguments.length > 2 ? $length : lengthOfArrayLike(list2);
          var result = new Constructor(length);
          while (length > index2)
            result[index2] = list2[index2++];
          return result;
        };
      }, { "../internals/length-of-array-like": 219 }], 123: [function(require2, module3, exports3) {
        var bind = require2("../internals/function-bind-context");
        var call = require2("../internals/function-call");
        var toObject = require2("../internals/to-object");
        var callWithSafeIterationClosing = require2("../internals/call-with-safe-iteration-closing");
        var isArrayIteratorMethod = require2("../internals/is-array-iterator-method");
        var isConstructor = require2("../internals/is-constructor");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var createProperty = require2("../internals/create-property");
        var getIterator = require2("../internals/get-iterator");
        var getIteratorMethod = require2("../internals/get-iterator-method");
        var $Array = Array;
        module3.exports = function from(arrayLike) {
          var O = toObject(arrayLike);
          var IS_CONSTRUCTOR = isConstructor(this);
          var argumentsLength = arguments.length;
          var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
          var mapping = mapfn !== void 0;
          if (mapping)
            mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
          var iteratorMethod = getIteratorMethod(O);
          var index2 = 0;
          var length, result, step, iterator, next, value;
          if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
            iterator = getIterator(O, iteratorMethod);
            next = iterator.next;
            result = IS_CONSTRUCTOR ? new this() : [];
            for (; !(step = call(next, iterator)).done; index2++) {
              value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index2], true) : step.value;
              createProperty(result, index2, value);
            }
          } else {
            length = lengthOfArrayLike(O);
            result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
            for (; length > index2; index2++) {
              value = mapping ? mapfn(O[index2], index2) : O[index2];
              createProperty(result, index2, value);
            }
          }
          result.length = index2;
          return result;
        };
      }, { "../internals/call-with-safe-iteration-closing": 135, "../internals/create-property": 147, "../internals/function-bind-context": 175, "../internals/function-call": 177, "../internals/get-iterator": 184, "../internals/get-iterator-method": 183, "../internals/is-array-iterator-method": 200, "../internals/is-constructor": 204, "../internals/length-of-array-like": 219, "../internals/to-object": 285 }], 124: [function(require2, module3, exports3) {
        var toIndexedObject = require2("../internals/to-indexed-object");
        var toAbsoluteIndex = require2("../internals/to-absolute-index");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var createMethod = function(IS_INCLUDES) {
          return function($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = lengthOfArrayLike(O);
            var index2 = toAbsoluteIndex(fromIndex, length);
            var value;
            if (IS_INCLUDES && el !== el)
              while (length > index2) {
                value = O[index2++];
                if (value !== value)
                  return true;
              }
            else
              for (; length > index2; index2++) {
                if ((IS_INCLUDES || index2 in O) && O[index2] === el)
                  return IS_INCLUDES || index2 || 0;
              }
            return !IS_INCLUDES && -1;
          };
        };
        module3.exports = {
          // `Array.prototype.includes` method
          // https://tc39.es/ecma262/#sec-array.prototype.includes
          includes: createMethod(true),
          // `Array.prototype.indexOf` method
          // https://tc39.es/ecma262/#sec-array.prototype.indexof
          indexOf: createMethod(false)
        };
      }, { "../internals/length-of-array-like": 219, "../internals/to-absolute-index": 279, "../internals/to-indexed-object": 282 }], 125: [function(require2, module3, exports3) {
        var bind = require2("../internals/function-bind-context");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var IndexedObject = require2("../internals/indexed-object");
        var toObject = require2("../internals/to-object");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var arraySpeciesCreate = require2("../internals/array-species-create");
        var push = uncurryThis([].push);
        var createMethod = function(TYPE) {
          var IS_MAP = TYPE === 1;
          var IS_FILTER = TYPE === 2;
          var IS_SOME = TYPE === 3;
          var IS_EVERY = TYPE === 4;
          var IS_FIND_INDEX = TYPE === 6;
          var IS_FILTER_REJECT = TYPE === 7;
          var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
          return function($this, callbackfn, that, specificCreate) {
            var O = toObject($this);
            var self2 = IndexedObject(O);
            var length = lengthOfArrayLike(self2);
            var boundFunction = bind(callbackfn, that);
            var index2 = 0;
            var create2 = specificCreate || arraySpeciesCreate;
            var target = IS_MAP ? create2($this, length) : IS_FILTER || IS_FILTER_REJECT ? create2($this, 0) : void 0;
            var value, result;
            for (; length > index2; index2++)
              if (NO_HOLES || index2 in self2) {
                value = self2[index2];
                result = boundFunction(value, index2, O);
                if (TYPE) {
                  if (IS_MAP)
                    target[index2] = result;
                  else if (result)
                    switch (TYPE) {
                      case 3:
                        return true;
                      case 5:
                        return value;
                      case 6:
                        return index2;
                      case 2:
                        push(target, value);
                    }
                  else
                    switch (TYPE) {
                      case 4:
                        return false;
                      case 7:
                        push(target, value);
                    }
                }
              }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
          };
        };
        module3.exports = {
          // `Array.prototype.forEach` method
          // https://tc39.es/ecma262/#sec-array.prototype.foreach
          forEach: createMethod(0),
          // `Array.prototype.map` method
          // https://tc39.es/ecma262/#sec-array.prototype.map
          map: createMethod(1),
          // `Array.prototype.filter` method
          // https://tc39.es/ecma262/#sec-array.prototype.filter
          filter: createMethod(2),
          // `Array.prototype.some` method
          // https://tc39.es/ecma262/#sec-array.prototype.some
          some: createMethod(3),
          // `Array.prototype.every` method
          // https://tc39.es/ecma262/#sec-array.prototype.every
          every: createMethod(4),
          // `Array.prototype.find` method
          // https://tc39.es/ecma262/#sec-array.prototype.find
          find: createMethod(5),
          // `Array.prototype.findIndex` method
          // https://tc39.es/ecma262/#sec-array.prototype.findIndex
          findIndex: createMethod(6),
          // `Array.prototype.filterReject` method
          // https://github.com/tc39/proposal-array-filtering
          filterReject: createMethod(7)
        };
      }, { "../internals/array-species-create": 134, "../internals/function-bind-context": 175, "../internals/function-uncurry-this": 181, "../internals/indexed-object": 195, "../internals/length-of-array-like": 219, "../internals/to-object": 285 }], 126: [function(require2, module3, exports3) {
        var apply2 = require2("../internals/function-apply");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var arrayMethodIsStrict = require2("../internals/array-method-is-strict");
        var min = Math.min;
        var $lastIndexOf = [].lastIndexOf;
        var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
        var STRICT_METHOD = arrayMethodIsStrict("lastIndexOf");
        var FORCED = NEGATIVE_ZERO || !STRICT_METHOD;
        module3.exports = FORCED ? function lastIndexOf(searchElement) {
          if (NEGATIVE_ZERO)
            return apply2($lastIndexOf, this, arguments) || 0;
          var O = toIndexedObject(this);
          var length = lengthOfArrayLike(O);
          var index2 = length - 1;
          if (arguments.length > 1)
            index2 = min(index2, toIntegerOrInfinity(arguments[1]));
          if (index2 < 0)
            index2 = length + index2;
          for (; index2 >= 0; index2--)
            if (index2 in O && O[index2] === searchElement)
              return index2 || 0;
          return -1;
        } : $lastIndexOf;
      }, { "../internals/array-method-is-strict": 128, "../internals/function-apply": 174, "../internals/length-of-array-like": 219, "../internals/to-indexed-object": 282, "../internals/to-integer-or-infinity": 283 }], 127: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var V8_VERSION = require2("../internals/engine-v8-version");
        var SPECIES = wellKnownSymbol("species");
        module3.exports = function(METHOD_NAME) {
          return V8_VERSION >= 51 || !fails(function() {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES] = function() {
              return { foo: 1 };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
          });
        };
      }, { "../internals/engine-v8-version": 167, "../internals/fails": 171, "../internals/well-known-symbol": 306 }], 128: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        module3.exports = function(METHOD_NAME, argument) {
          var method = [][METHOD_NAME];
          return !!method && fails(function() {
            method.call(null, argument || function() {
              return 1;
            }, 1);
          });
        };
      }, { "../internals/fails": 171 }], 129: [function(require2, module3, exports3) {
        var aCallable = require2("../internals/a-callable");
        var toObject = require2("../internals/to-object");
        var IndexedObject = require2("../internals/indexed-object");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var $TypeError = TypeError;
        var createMethod = function(IS_RIGHT) {
          return function(that, callbackfn, argumentsLength, memo) {
            var O = toObject(that);
            var self2 = IndexedObject(O);
            var length = lengthOfArrayLike(O);
            aCallable(callbackfn);
            var index2 = IS_RIGHT ? length - 1 : 0;
            var i = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2)
              while (true) {
                if (index2 in self2) {
                  memo = self2[index2];
                  index2 += i;
                  break;
                }
                index2 += i;
                if (IS_RIGHT ? index2 < 0 : length <= index2) {
                  throw new $TypeError("Reduce of empty array with no initial value");
                }
              }
            for (; IS_RIGHT ? index2 >= 0 : length > index2; index2 += i)
              if (index2 in self2) {
                memo = callbackfn(memo, self2[index2], index2, O);
              }
            return memo;
          };
        };
        module3.exports = {
          // `Array.prototype.reduce` method
          // https://tc39.es/ecma262/#sec-array.prototype.reduce
          left: createMethod(false),
          // `Array.prototype.reduceRight` method
          // https://tc39.es/ecma262/#sec-array.prototype.reduceright
          right: createMethod(true)
        };
      }, { "../internals/a-callable": 108, "../internals/indexed-object": 195, "../internals/length-of-array-like": 219, "../internals/to-object": 285 }], 130: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var isArray2 = require2("../internals/is-array");
        var $TypeError = TypeError;
        var getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor;
        var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function() {
          if (this !== void 0)
            return true;
          try {
            Object.defineProperty([], "length", { writable: false }).length = 1;
          } catch (error) {
            return error instanceof TypeError;
          }
        }();
        module3.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function(O, length) {
          if (isArray2(O) && !getOwnPropertyDescriptor2(O, "length").writable) {
            throw new $TypeError("Cannot set read only .length");
          }
          return O.length = length;
        } : function(O, length) {
          return O.length = length;
        };
      }, { "../internals/descriptors": 153, "../internals/is-array": 201 }], 131: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        module3.exports = uncurryThis([].slice);
      }, { "../internals/function-uncurry-this": 181 }], 132: [function(require2, module3, exports3) {
        var arraySlice = require2("../internals/array-slice");
        var floor = Math.floor;
        var sort = function(array, comparefn) {
          var length = array.length;
          if (length < 8) {
            var i = 1;
            var element, j;
            while (i < length) {
              j = i;
              element = array[i];
              while (j && comparefn(array[j - 1], element) > 0) {
                array[j] = array[--j];
              }
              if (j !== i++)
                array[j] = element;
            }
          } else {
            var middle = floor(length / 2);
            var left = sort(arraySlice(array, 0, middle), comparefn);
            var right = sort(arraySlice(array, middle), comparefn);
            var llength = left.length;
            var rlength = right.length;
            var lindex = 0;
            var rindex = 0;
            while (lindex < llength || rindex < rlength) {
              array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
            }
          }
          return array;
        };
        module3.exports = sort;
      }, { "../internals/array-slice": 131 }], 133: [function(require2, module3, exports3) {
        var isArray2 = require2("../internals/is-array");
        var isConstructor = require2("../internals/is-constructor");
        var isObject2 = require2("../internals/is-object");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var SPECIES = wellKnownSymbol("species");
        var $Array = Array;
        module3.exports = function(originalArray) {
          var C;
          if (isArray2(originalArray)) {
            C = originalArray.constructor;
            if (isConstructor(C) && (C === $Array || isArray2(C.prototype)))
              C = void 0;
            else if (isObject2(C)) {
              C = C[SPECIES];
              if (C === null)
                C = void 0;
            }
          }
          return C === void 0 ? $Array : C;
        };
      }, { "../internals/is-array": 201, "../internals/is-constructor": 204, "../internals/is-object": 208, "../internals/well-known-symbol": 306 }], 134: [function(require2, module3, exports3) {
        var arraySpeciesConstructor = require2("../internals/array-species-constructor");
        module3.exports = function(originalArray, length) {
          return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
        };
      }, { "../internals/array-species-constructor": 133 }], 135: [function(require2, module3, exports3) {
        var anObject = require2("../internals/an-object");
        var iteratorClose = require2("../internals/iterator-close");
        module3.exports = function(iterator, fn, value, ENTRIES) {
          try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
          } catch (error) {
            iteratorClose(iterator, "throw", error);
          }
        };
      }, { "../internals/an-object": 114, "../internals/iterator-close": 214 }], 136: [function(require2, module3, exports3) {
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var ITERATOR = wellKnownSymbol("iterator");
        var SAFE_CLOSING = false;
        try {
          var called = 0;
          var iteratorWithReturn = {
            next: function() {
              return { done: !!called++ };
            },
            "return": function() {
              SAFE_CLOSING = true;
            }
          };
          iteratorWithReturn[ITERATOR] = function() {
            return this;
          };
          Array.from(iteratorWithReturn, function() {
            throw 2;
          });
        } catch (error) {
        }
        module3.exports = function(exec, SKIP_CLOSING) {
          try {
            if (!SKIP_CLOSING && !SAFE_CLOSING)
              return false;
          } catch (error) {
            return false;
          }
          var ITERATION_SUPPORT = false;
          try {
            var object = {};
            object[ITERATOR] = function() {
              return {
                next: function() {
                  return { done: ITERATION_SUPPORT = true };
                }
              };
            };
            exec(object);
          } catch (error) {
          }
          return ITERATION_SUPPORT;
        };
      }, { "../internals/well-known-symbol": 306 }], 137: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var toString = uncurryThis({}.toString);
        var stringSlice = uncurryThis("".slice);
        module3.exports = function(it) {
          return stringSlice(toString(it), 8, -1);
        };
      }, { "../internals/function-uncurry-this": 181 }], 138: [function(require2, module3, exports3) {
        var TO_STRING_TAG_SUPPORT = require2("../internals/to-string-tag-support");
        var isCallable = require2("../internals/is-callable");
        var classofRaw = require2("../internals/classof-raw");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var $Object = Object;
        var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
          return arguments;
        }()) === "Arguments";
        var tryGet = function(it, key) {
          try {
            return it[key];
          } catch (error) {
          }
        };
        module3.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
          var O, tag2, result;
          return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag2 = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag2 : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
        };
      }, { "../internals/classof-raw": 137, "../internals/is-callable": 203, "../internals/to-string-tag-support": 290, "../internals/well-known-symbol": 306 }], 139: [function(require2, module3, exports3) {
        var create2 = require2("../internals/object-create");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var defineBuiltIns = require2("../internals/define-built-ins");
        var bind = require2("../internals/function-bind-context");
        var anInstance = require2("../internals/an-instance");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var iterate = require2("../internals/iterate");
        var defineIterator = require2("../internals/iterator-define");
        var createIterResultObject = require2("../internals/create-iter-result-object");
        var setSpecies = require2("../internals/set-species");
        var DESCRIPTORS = require2("../internals/descriptors");
        var fastKey = require2("../internals/internal-metadata").fastKey;
        var InternalStateModule = require2("../internals/internal-state");
        var setInternalState = InternalStateModule.set;
        var internalStateGetterFor = InternalStateModule.getterFor;
        module3.exports = {
          getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
            var Constructor = wrapper(function(that, iterable) {
              anInstance(that, Prototype);
              setInternalState(that, {
                type: CONSTRUCTOR_NAME,
                index: create2(null),
                first: void 0,
                last: void 0,
                size: 0
              });
              if (!DESCRIPTORS)
                that.size = 0;
              if (!isNullOrUndefined(iterable))
                iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
            });
            var Prototype = Constructor.prototype;
            var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
            var define = function(that, key, value) {
              var state = getInternalState(that);
              var entry = getEntry(that, key);
              var previous, index2;
              if (entry) {
                entry.value = value;
              } else {
                state.last = entry = {
                  index: index2 = fastKey(key, true),
                  key,
                  value,
                  previous: previous = state.last,
                  next: void 0,
                  removed: false
                };
                if (!state.first)
                  state.first = entry;
                if (previous)
                  previous.next = entry;
                if (DESCRIPTORS)
                  state.size++;
                else
                  that.size++;
                if (index2 !== "F")
                  state.index[index2] = entry;
              }
              return that;
            };
            var getEntry = function(that, key) {
              var state = getInternalState(that);
              var index2 = fastKey(key);
              var entry;
              if (index2 !== "F")
                return state.index[index2];
              for (entry = state.first; entry; entry = entry.next) {
                if (entry.key === key)
                  return entry;
              }
            };
            defineBuiltIns(Prototype, {
              // `{ Map, Set }.prototype.clear()` methods
              // https://tc39.es/ecma262/#sec-map.prototype.clear
              // https://tc39.es/ecma262/#sec-set.prototype.clear
              clear: function clear2() {
                var that = this;
                var state = getInternalState(that);
                var entry = state.first;
                while (entry) {
                  entry.removed = true;
                  if (entry.previous)
                    entry.previous = entry.previous.next = void 0;
                  entry = entry.next;
                }
                state.first = state.last = void 0;
                state.index = create2(null);
                if (DESCRIPTORS)
                  state.size = 0;
                else
                  that.size = 0;
              },
              // `{ Map, Set }.prototype.delete(key)` methods
              // https://tc39.es/ecma262/#sec-map.prototype.delete
              // https://tc39.es/ecma262/#sec-set.prototype.delete
              "delete": function(key) {
                var that = this;
                var state = getInternalState(that);
                var entry = getEntry(that, key);
                if (entry) {
                  var next = entry.next;
                  var prev = entry.previous;
                  delete state.index[entry.index];
                  entry.removed = true;
                  if (prev)
                    prev.next = next;
                  if (next)
                    next.previous = prev;
                  if (state.first === entry)
                    state.first = next;
                  if (state.last === entry)
                    state.last = prev;
                  if (DESCRIPTORS)
                    state.size--;
                  else
                    that.size--;
                }
                return !!entry;
              },
              // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
              // https://tc39.es/ecma262/#sec-map.prototype.foreach
              // https://tc39.es/ecma262/#sec-set.prototype.foreach
              forEach: function forEach(callbackfn) {
                var state = getInternalState(this);
                var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                var entry;
                while (entry = entry ? entry.next : state.first) {
                  boundFunction(entry.value, entry.key, this);
                  while (entry && entry.removed)
                    entry = entry.previous;
                }
              },
              // `{ Map, Set}.prototype.has(key)` methods
              // https://tc39.es/ecma262/#sec-map.prototype.has
              // https://tc39.es/ecma262/#sec-set.prototype.has
              has: function has2(key) {
                return !!getEntry(this, key);
              }
            });
            defineBuiltIns(Prototype, IS_MAP ? {
              // `Map.prototype.get(key)` method
              // https://tc39.es/ecma262/#sec-map.prototype.get
              get: function get2(key) {
                var entry = getEntry(this, key);
                return entry && entry.value;
              },
              // `Map.prototype.set(key, value)` method
              // https://tc39.es/ecma262/#sec-map.prototype.set
              set: function set2(key, value) {
                return define(this, key === 0 ? 0 : key, value);
              }
            } : {
              // `Set.prototype.add(value)` method
              // https://tc39.es/ecma262/#sec-set.prototype.add
              add: function add2(value) {
                return define(this, value = value === 0 ? 0 : value, value);
              }
            });
            if (DESCRIPTORS)
              defineBuiltInAccessor(Prototype, "size", {
                configurable: true,
                get: function() {
                  return getInternalState(this).size;
                }
              });
            return Constructor;
          },
          setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
            var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
            var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
            var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
            defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
              setInternalState(this, {
                type: ITERATOR_NAME,
                target: iterated,
                state: getInternalCollectionState(iterated),
                kind,
                last: void 0
              });
            }, function() {
              var state = getInternalIteratorState(this);
              var kind = state.kind;
              var entry = state.last;
              while (entry && entry.removed)
                entry = entry.previous;
              if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                state.target = void 0;
                return createIterResultObject(void 0, true);
              }
              if (kind === "keys")
                return createIterResultObject(entry.key, false);
              if (kind === "values")
                return createIterResultObject(entry.value, false);
              return createIterResultObject([entry.key, entry.value], false);
            }, IS_MAP ? "entries" : "values", !IS_MAP, true);
            setSpecies(CONSTRUCTOR_NAME);
          }
        };
      }, { "../internals/an-instance": 113, "../internals/create-iter-result-object": 144, "../internals/define-built-in-accessor": 148, "../internals/define-built-ins": 150, "../internals/descriptors": 153, "../internals/function-bind-context": 175, "../internals/internal-metadata": 198, "../internals/internal-state": 199, "../internals/is-null-or-undefined": 207, "../internals/iterate": 213, "../internals/iterator-define": 216, "../internals/object-create": 229, "../internals/set-species": 265 }], 140: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var global3 = require2("../internals/global");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var isForced = require2("../internals/is-forced");
        var defineBuiltIn = require2("../internals/define-built-in");
        var InternalMetadataModule = require2("../internals/internal-metadata");
        var iterate = require2("../internals/iterate");
        var anInstance = require2("../internals/an-instance");
        var isCallable = require2("../internals/is-callable");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var isObject2 = require2("../internals/is-object");
        var fails = require2("../internals/fails");
        var checkCorrectnessOfIteration = require2("../internals/check-correctness-of-iteration");
        var setToStringTag = require2("../internals/set-to-string-tag");
        var inheritIfRequired = require2("../internals/inherit-if-required");
        module3.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
          var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
          var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
          var ADDER = IS_MAP ? "set" : "add";
          var NativeConstructor = global3[CONSTRUCTOR_NAME];
          var NativePrototype = NativeConstructor && NativeConstructor.prototype;
          var Constructor = NativeConstructor;
          var exported = {};
          var fixMethod = function(KEY) {
            var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
            defineBuiltIn(
              NativePrototype,
              KEY,
              KEY === "add" ? function add2(value) {
                uncurriedNativeMethod(this, value === 0 ? 0 : value);
                return this;
              } : KEY === "delete" ? function(key) {
                return IS_WEAK && !isObject2(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
              } : KEY === "get" ? function get2(key) {
                return IS_WEAK && !isObject2(key) ? void 0 : uncurriedNativeMethod(this, key === 0 ? 0 : key);
              } : KEY === "has" ? function has2(key) {
                return IS_WEAK && !isObject2(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
              } : function set2(key, value) {
                uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
                return this;
              }
            );
          };
          var REPLACE = isForced(
            CONSTRUCTOR_NAME,
            !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
              new NativeConstructor().entries().next();
            }))
          );
          if (REPLACE) {
            Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
            InternalMetadataModule.enable();
          } else if (isForced(CONSTRUCTOR_NAME, true)) {
            var instance = new Constructor();
            var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) !== instance;
            var THROWS_ON_PRIMITIVES = fails(function() {
              instance.has(1);
            });
            var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
              new NativeConstructor(iterable);
            });
            var BUGGY_ZERO = !IS_WEAK && fails(function() {
              var $instance = new NativeConstructor();
              var index2 = 5;
              while (index2--)
                $instance[ADDER](index2, index2);
              return !$instance.has(-0);
            });
            if (!ACCEPT_ITERABLES) {
              Constructor = wrapper(function(dummy, iterable) {
                anInstance(dummy, NativePrototype);
                var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
                if (!isNullOrUndefined(iterable))
                  iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
                return that;
              });
              Constructor.prototype = NativePrototype;
              NativePrototype.constructor = Constructor;
            }
            if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
              fixMethod("delete");
              fixMethod("has");
              IS_MAP && fixMethod("get");
            }
            if (BUGGY_ZERO || HASNT_CHAINING)
              fixMethod(ADDER);
            if (IS_WEAK && NativePrototype.clear)
              delete NativePrototype.clear;
          }
          exported[CONSTRUCTOR_NAME] = Constructor;
          $({ global: true, constructor: true, forced: Constructor !== NativeConstructor }, exported);
          setToStringTag(Constructor, CONSTRUCTOR_NAME);
          if (!IS_WEAK)
            common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
          return Constructor;
        };
      }, { "../internals/an-instance": 113, "../internals/check-correctness-of-iteration": 136, "../internals/define-built-in": 149, "../internals/export": 170, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/global": 188, "../internals/inherit-if-required": 196, "../internals/internal-metadata": 198, "../internals/is-callable": 203, "../internals/is-forced": 205, "../internals/is-null-or-undefined": 207, "../internals/is-object": 208, "../internals/iterate": 213, "../internals/set-to-string-tag": 266 }], 141: [function(require2, module3, exports3) {
        var hasOwn2 = require2("../internals/has-own-property");
        var ownKeys = require2("../internals/own-keys");
        var getOwnPropertyDescriptorModule = require2("../internals/object-get-own-property-descriptor");
        var definePropertyModule = require2("../internals/object-define-property");
        module3.exports = function(target, source, exceptions) {
          var keys = ownKeys(source);
          var defineProperty = definePropertyModule.f;
          var getOwnPropertyDescriptor2 = getOwnPropertyDescriptorModule.f;
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!hasOwn2(target, key) && !(exceptions && hasOwn2(exceptions, key))) {
              defineProperty(target, key, getOwnPropertyDescriptor2(source, key));
            }
          }
        };
      }, { "../internals/has-own-property": 189, "../internals/object-define-property": 231, "../internals/object-get-own-property-descriptor": 232, "../internals/own-keys": 246 }], 142: [function(require2, module3, exports3) {
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var MATCH = wellKnownSymbol("match");
        module3.exports = function(METHOD_NAME) {
          var regexp = /./;
          try {
            "/./"[METHOD_NAME](regexp);
          } catch (error1) {
            try {
              regexp[MATCH] = false;
              return "/./"[METHOD_NAME](regexp);
            } catch (error2) {
            }
          }
          return false;
        };
      }, { "../internals/well-known-symbol": 306 }], 143: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        module3.exports = !fails(function() {
          function F() {
          }
          F.prototype.constructor = null;
          return Object.getPrototypeOf(new F()) !== F.prototype;
        });
      }, { "../internals/fails": 171 }], 144: [function(require2, module3, exports3) {
        module3.exports = function(value, done) {
          return { value, done };
        };
      }, {}], 145: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var definePropertyModule = require2("../internals/object-define-property");
        var createPropertyDescriptor = require2("../internals/create-property-descriptor");
        module3.exports = DESCRIPTORS ? function(object, key, value) {
          return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
        } : function(object, key, value) {
          object[key] = value;
          return object;
        };
      }, { "../internals/create-property-descriptor": 146, "../internals/descriptors": 153, "../internals/object-define-property": 231 }], 146: [function(require2, module3, exports3) {
        module3.exports = function(bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value
          };
        };
      }, {}], 147: [function(require2, module3, exports3) {
        var toPropertyKey = require2("../internals/to-property-key");
        var definePropertyModule = require2("../internals/object-define-property");
        var createPropertyDescriptor = require2("../internals/create-property-descriptor");
        module3.exports = function(object, key, value) {
          var propertyKey = toPropertyKey(key);
          if (propertyKey in object)
            definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
          else
            object[propertyKey] = value;
        };
      }, { "../internals/create-property-descriptor": 146, "../internals/object-define-property": 231, "../internals/to-property-key": 289 }], 148: [function(require2, module3, exports3) {
        var makeBuiltIn = require2("../internals/make-built-in");
        var defineProperty = require2("../internals/object-define-property");
        module3.exports = function(target, name, descriptor) {
          if (descriptor.get)
            makeBuiltIn(descriptor.get, name, { getter: true });
          if (descriptor.set)
            makeBuiltIn(descriptor.set, name, { setter: true });
          return defineProperty.f(target, name, descriptor);
        };
      }, { "../internals/make-built-in": 220, "../internals/object-define-property": 231 }], 149: [function(require2, module3, exports3) {
        var isCallable = require2("../internals/is-callable");
        var definePropertyModule = require2("../internals/object-define-property");
        var makeBuiltIn = require2("../internals/make-built-in");
        var defineGlobalProperty = require2("../internals/define-global-property");
        module3.exports = function(O, key, value, options) {
          if (!options)
            options = {};
          var simple = options.enumerable;
          var name = options.name !== void 0 ? options.name : key;
          if (isCallable(value))
            makeBuiltIn(value, name, options);
          if (options.global) {
            if (simple)
              O[key] = value;
            else
              defineGlobalProperty(key, value);
          } else {
            try {
              if (!options.unsafe)
                delete O[key];
              else if (O[key])
                simple = true;
            } catch (error) {
            }
            if (simple)
              O[key] = value;
            else
              definePropertyModule.f(O, key, {
                value,
                enumerable: false,
                configurable: !options.nonConfigurable,
                writable: !options.nonWritable
              });
          }
          return O;
        };
      }, { "../internals/define-global-property": 151, "../internals/is-callable": 203, "../internals/make-built-in": 220, "../internals/object-define-property": 231 }], 150: [function(require2, module3, exports3) {
        var defineBuiltIn = require2("../internals/define-built-in");
        module3.exports = function(target, src, options) {
          for (var key in src)
            defineBuiltIn(target, key, src[key], options);
          return target;
        };
      }, { "../internals/define-built-in": 149 }], 151: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var defineProperty = Object.defineProperty;
        module3.exports = function(key, value) {
          try {
            defineProperty(global3, key, { value, configurable: true, writable: true });
          } catch (error) {
            global3[key] = value;
          }
          return value;
        };
      }, { "../internals/global": 188 }], 152: [function(require2, module3, exports3) {
        var tryToString = require2("../internals/try-to-string");
        var $TypeError = TypeError;
        module3.exports = function(O, P) {
          if (!delete O[P])
            throw new $TypeError("Cannot delete property " + tryToString(P) + " of " + tryToString(O));
        };
      }, { "../internals/try-to-string": 293 }], 153: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        module3.exports = !fails(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] !== 7;
        });
      }, { "../internals/fails": 171 }], 154: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var isObject2 = require2("../internals/is-object");
        var document2 = global3.document;
        var EXISTS = isObject2(document2) && isObject2(document2.createElement);
        module3.exports = function(it) {
          return EXISTS ? document2.createElement(it) : {};
        };
      }, { "../internals/global": 188, "../internals/is-object": 208 }], 155: [function(require2, module3, exports3) {
        var $TypeError = TypeError;
        var MAX_SAFE_INTEGER = 9007199254740991;
        module3.exports = function(it) {
          if (it > MAX_SAFE_INTEGER)
            throw $TypeError("Maximum allowed index exceeded");
          return it;
        };
      }, {}], 156: [function(require2, module3, exports3) {
        module3.exports = {
          CSSRuleList: 0,
          CSSStyleDeclaration: 0,
          CSSValueList: 0,
          ClientRectList: 0,
          DOMRectList: 0,
          DOMStringList: 0,
          DOMTokenList: 1,
          DataTransferItemList: 0,
          FileList: 0,
          HTMLAllCollection: 0,
          HTMLCollection: 0,
          HTMLFormElement: 0,
          HTMLSelectElement: 0,
          MediaList: 0,
          MimeTypeArray: 0,
          NamedNodeMap: 0,
          NodeList: 1,
          PaintRequestList: 0,
          Plugin: 0,
          PluginArray: 0,
          SVGLengthList: 0,
          SVGNumberList: 0,
          SVGPathSegList: 0,
          SVGPointList: 0,
          SVGStringList: 0,
          SVGTransformList: 0,
          SourceBufferList: 0,
          StyleSheetList: 0,
          TextTrackCueList: 0,
          TextTrackList: 0,
          TouchList: 0
        };
      }, {}], 157: [function(require2, module3, exports3) {
        var documentCreateElement = require2("../internals/document-create-element");
        var classList = documentCreateElement("span").classList;
        var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;
        module3.exports = DOMTokenListPrototype === Object.prototype ? void 0 : DOMTokenListPrototype;
      }, { "../internals/document-create-element": 154 }], 158: [function(require2, module3, exports3) {
        var userAgent = require2("../internals/engine-user-agent");
        var firefox = userAgent.match(/firefox\/(\d+)/i);
        module3.exports = !!firefox && +firefox[1];
      }, { "../internals/engine-user-agent": 166 }], 159: [function(require2, module3, exports3) {
        var IS_DENO = require2("../internals/engine-is-deno");
        var IS_NODE = require2("../internals/engine-is-node");
        module3.exports = !IS_DENO && !IS_NODE && typeof window == "object" && typeof document == "object";
      }, { "../internals/engine-is-deno": 160, "../internals/engine-is-node": 164 }], 160: [function(require2, module3, exports3) {
        module3.exports = typeof Deno == "object" && Deno && typeof Deno.version == "object";
      }, {}], 161: [function(require2, module3, exports3) {
        var UA = require2("../internals/engine-user-agent");
        module3.exports = /MSIE|Trident/.test(UA);
      }, { "../internals/engine-user-agent": 166 }], 162: [function(require2, module3, exports3) {
        var userAgent = require2("../internals/engine-user-agent");
        module3.exports = /ipad|iphone|ipod/i.test(userAgent) && typeof Pebble != "undefined";
      }, { "../internals/engine-user-agent": 166 }], 163: [function(require2, module3, exports3) {
        var userAgent = require2("../internals/engine-user-agent");
        module3.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
      }, { "../internals/engine-user-agent": 166 }], 164: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var classof = require2("../internals/classof-raw");
        module3.exports = classof(global3.process) === "process";
      }, { "../internals/classof-raw": 137, "../internals/global": 188 }], 165: [function(require2, module3, exports3) {
        var userAgent = require2("../internals/engine-user-agent");
        module3.exports = /web0s(?!.*chrome)/i.test(userAgent);
      }, { "../internals/engine-user-agent": 166 }], 166: [function(require2, module3, exports3) {
        module3.exports = typeof navigator != "undefined" && String(navigator.userAgent) || "";
      }, {}], 167: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var userAgent = require2("../internals/engine-user-agent");
        var process = global3.process;
        var Deno2 = global3.Deno;
        var versions = process && process.versions || Deno2 && Deno2.version;
        var v8 = versions && versions.v8;
        var match, version2;
        if (v8) {
          match = v8.split(".");
          version2 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
        }
        if (!version2 && userAgent) {
          match = userAgent.match(/Edge\/(\d+)/);
          if (!match || match[1] >= 74) {
            match = userAgent.match(/Chrome\/(\d+)/);
            if (match)
              version2 = +match[1];
          }
        }
        module3.exports = version2;
      }, { "../internals/engine-user-agent": 166, "../internals/global": 188 }], 168: [function(require2, module3, exports3) {
        var userAgent = require2("../internals/engine-user-agent");
        var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
        module3.exports = !!webkit && +webkit[1];
      }, { "../internals/engine-user-agent": 166 }], 169: [function(require2, module3, exports3) {
        module3.exports = [
          "constructor",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "toLocaleString",
          "toString",
          "valueOf"
        ];
      }, {}], 170: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var getOwnPropertyDescriptor2 = require2("../internals/object-get-own-property-descriptor").f;
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var defineBuiltIn = require2("../internals/define-built-in");
        var defineGlobalProperty = require2("../internals/define-global-property");
        var copyConstructorProperties = require2("../internals/copy-constructor-properties");
        var isForced = require2("../internals/is-forced");
        module3.exports = function(options, source) {
          var TARGET = options.target;
          var GLOBAL = options.global;
          var STATIC = options.stat;
          var FORCED, target, key, targetProperty, sourceProperty, descriptor;
          if (GLOBAL) {
            target = global3;
          } else if (STATIC) {
            target = global3[TARGET] || defineGlobalProperty(TARGET, {});
          } else {
            target = (global3[TARGET] || {}).prototype;
          }
          if (target)
            for (key in source) {
              sourceProperty = source[key];
              if (options.dontCallGetSet) {
                descriptor = getOwnPropertyDescriptor2(target, key);
                targetProperty = descriptor && descriptor.value;
              } else
                targetProperty = target[key];
              FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
              if (!FORCED && targetProperty !== void 0) {
                if (typeof sourceProperty == typeof targetProperty)
                  continue;
                copyConstructorProperties(sourceProperty, targetProperty);
              }
              if (options.sham || targetProperty && targetProperty.sham) {
                createNonEnumerableProperty(sourceProperty, "sham", true);
              }
              defineBuiltIn(target, key, sourceProperty, options);
            }
        };
      }, { "../internals/copy-constructor-properties": 141, "../internals/create-non-enumerable-property": 145, "../internals/define-built-in": 149, "../internals/define-global-property": 151, "../internals/global": 188, "../internals/is-forced": 205, "../internals/object-get-own-property-descriptor": 232 }], 171: [function(require2, module3, exports3) {
        module3.exports = function(exec) {
          try {
            return !!exec();
          } catch (error) {
            return true;
          }
        };
      }, {}], 172: [function(require2, module3, exports3) {
        require2("../modules/es.regexp.exec");
        var uncurryThis = require2("../internals/function-uncurry-this-clause");
        var defineBuiltIn = require2("../internals/define-built-in");
        var regexpExec = require2("../internals/regexp-exec");
        var fails = require2("../internals/fails");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var SPECIES = wellKnownSymbol("species");
        var RegExpPrototype = RegExp.prototype;
        module3.exports = function(KEY, exec, FORCED, SHAM) {
          var SYMBOL = wellKnownSymbol(KEY);
          var DELEGATES_TO_SYMBOL = !fails(function() {
            var O = {};
            O[SYMBOL] = function() {
              return 7;
            };
            return ""[KEY](O) !== 7;
          });
          var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
            var execCalled = false;
            var re = /a/;
            if (KEY === "split") {
              re = {};
              re.constructor = {};
              re.constructor[SPECIES] = function() {
                return re;
              };
              re.flags = "";
              re[SYMBOL] = /./[SYMBOL];
            }
            re.exec = function() {
              execCalled = true;
              return null;
            };
            re[SYMBOL]("");
            return !execCalled;
          });
          if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
            var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);
            var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
              var uncurriedNativeMethod = uncurryThis(nativeMethod);
              var $exec = regexp.exec;
              if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                  return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
                }
                return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
              }
              return { done: false };
            });
            defineBuiltIn(String.prototype, KEY, methods[0]);
            defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
          }
          if (SHAM)
            createNonEnumerableProperty(RegExpPrototype[SYMBOL], "sham", true);
        };
      }, { "../internals/create-non-enumerable-property": 145, "../internals/define-built-in": 149, "../internals/fails": 171, "../internals/function-uncurry-this-clause": 180, "../internals/regexp-exec": 256, "../internals/well-known-symbol": 306, "../modules/es.regexp.exec": 338 }], 173: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        module3.exports = !fails(function() {
          return Object.isExtensible(Object.preventExtensions({}));
        });
      }, { "../internals/fails": 171 }], 174: [function(require2, module3, exports3) {
        var NATIVE_BIND = require2("../internals/function-bind-native");
        var FunctionPrototype = Function.prototype;
        var apply2 = FunctionPrototype.apply;
        var call = FunctionPrototype.call;
        module3.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply2) : function() {
          return call.apply(apply2, arguments);
        });
      }, { "../internals/function-bind-native": 176 }], 175: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this-clause");
        var aCallable = require2("../internals/a-callable");
        var NATIVE_BIND = require2("../internals/function-bind-native");
        var bind = uncurryThis(uncurryThis.bind);
        module3.exports = function(fn, that) {
          aCallable(fn);
          return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
            return fn.apply(that, arguments);
          };
        };
      }, { "../internals/a-callable": 108, "../internals/function-bind-native": 176, "../internals/function-uncurry-this-clause": 180 }], 176: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        module3.exports = !fails(function() {
          var test = (function() {
          }).bind();
          return typeof test != "function" || test.hasOwnProperty("prototype");
        });
      }, { "../internals/fails": 171 }], 177: [function(require2, module3, exports3) {
        var NATIVE_BIND = require2("../internals/function-bind-native");
        var call = Function.prototype.call;
        module3.exports = NATIVE_BIND ? call.bind(call) : function() {
          return call.apply(call, arguments);
        };
      }, { "../internals/function-bind-native": 176 }], 178: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var hasOwn2 = require2("../internals/has-own-property");
        var FunctionPrototype = Function.prototype;
        var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
        var EXISTS = hasOwn2(FunctionPrototype, "name");
        var PROPER = EXISTS && (function something() {
        }).name === "something";
        var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
        module3.exports = {
          EXISTS,
          PROPER,
          CONFIGURABLE
        };
      }, { "../internals/descriptors": 153, "../internals/has-own-property": 189 }], 179: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var aCallable = require2("../internals/a-callable");
        module3.exports = function(object, key, method) {
          try {
            return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
          } catch (error) {
          }
        };
      }, { "../internals/a-callable": 108, "../internals/function-uncurry-this": 181 }], 180: [function(require2, module3, exports3) {
        var classofRaw = require2("../internals/classof-raw");
        var uncurryThis = require2("../internals/function-uncurry-this");
        module3.exports = function(fn) {
          if (classofRaw(fn) === "Function")
            return uncurryThis(fn);
        };
      }, { "../internals/classof-raw": 137, "../internals/function-uncurry-this": 181 }], 181: [function(require2, module3, exports3) {
        var NATIVE_BIND = require2("../internals/function-bind-native");
        var FunctionPrototype = Function.prototype;
        var call = FunctionPrototype.call;
        var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
        module3.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
          return function() {
            return call.apply(fn, arguments);
          };
        };
      }, { "../internals/function-bind-native": 176 }], 182: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var isCallable = require2("../internals/is-callable");
        var aFunction = function(argument) {
          return isCallable(argument) ? argument : void 0;
        };
        module3.exports = function(namespace, method) {
          return arguments.length < 2 ? aFunction(global3[namespace]) : global3[namespace] && global3[namespace][method];
        };
      }, { "../internals/global": 188, "../internals/is-callable": 203 }], 183: [function(require2, module3, exports3) {
        var classof = require2("../internals/classof");
        var getMethod = require2("../internals/get-method");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var Iterators = require2("../internals/iterators");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var ITERATOR = wellKnownSymbol("iterator");
        module3.exports = function(it) {
          if (!isNullOrUndefined(it))
            return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
        };
      }, { "../internals/classof": 138, "../internals/get-method": 186, "../internals/is-null-or-undefined": 207, "../internals/iterators": 218, "../internals/well-known-symbol": 306 }], 184: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var aCallable = require2("../internals/a-callable");
        var anObject = require2("../internals/an-object");
        var tryToString = require2("../internals/try-to-string");
        var getIteratorMethod = require2("../internals/get-iterator-method");
        var $TypeError = TypeError;
        module3.exports = function(argument, usingIterator) {
          var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
          if (aCallable(iteratorMethod))
            return anObject(call(iteratorMethod, argument));
          throw new $TypeError(tryToString(argument) + " is not iterable");
        };
      }, { "../internals/a-callable": 108, "../internals/an-object": 114, "../internals/function-call": 177, "../internals/get-iterator-method": 183, "../internals/try-to-string": 293 }], 185: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var isArray2 = require2("../internals/is-array");
        var isCallable = require2("../internals/is-callable");
        var classof = require2("../internals/classof-raw");
        var toString = require2("../internals/to-string");
        var push = uncurryThis([].push);
        module3.exports = function(replacer2) {
          if (isCallable(replacer2))
            return replacer2;
          if (!isArray2(replacer2))
            return;
          var rawLength = replacer2.length;
          var keys = [];
          for (var i = 0; i < rawLength; i++) {
            var element = replacer2[i];
            if (typeof element == "string")
              push(keys, element);
            else if (typeof element == "number" || classof(element) === "Number" || classof(element) === "String")
              push(keys, toString(element));
          }
          var keysLength = keys.length;
          var root = true;
          return function(key, value) {
            if (root) {
              root = false;
              return value;
            }
            if (isArray2(this))
              return value;
            for (var j = 0; j < keysLength; j++)
              if (keys[j] === key)
                return value;
          };
        };
      }, { "../internals/classof-raw": 137, "../internals/function-uncurry-this": 181, "../internals/is-array": 201, "../internals/is-callable": 203, "../internals/to-string": 291 }], 186: [function(require2, module3, exports3) {
        var aCallable = require2("../internals/a-callable");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        module3.exports = function(V, P) {
          var func = V[P];
          return isNullOrUndefined(func) ? void 0 : aCallable(func);
        };
      }, { "../internals/a-callable": 108, "../internals/is-null-or-undefined": 207 }], 187: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var toObject = require2("../internals/to-object");
        var floor = Math.floor;
        var charAt = uncurryThis("".charAt);
        var replace = uncurryThis("".replace);
        var stringSlice = uncurryThis("".slice);
        var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
        var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
        module3.exports = function(matched, str, position, captures, namedCaptures, replacement) {
          var tailPos = position + matched.length;
          var m2 = captures.length;
          var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
          if (namedCaptures !== void 0) {
            namedCaptures = toObject(namedCaptures);
            symbols = SUBSTITUTION_SYMBOLS;
          }
          return replace(replacement, symbols, function(match, ch) {
            var capture;
            switch (charAt(ch, 0)) {
              case "$":
                return "$";
              case "&":
                return matched;
              case "`":
                return stringSlice(str, 0, position);
              case "'":
                return stringSlice(str, tailPos);
              case "<":
                capture = namedCaptures[stringSlice(ch, 1, -1)];
                break;
              default:
                var n2 = +ch;
                if (n2 === 0)
                  return match;
                if (n2 > m2) {
                  var f2 = floor(n2 / 10);
                  if (f2 === 0)
                    return match;
                  if (f2 <= m2)
                    return captures[f2 - 1] === void 0 ? charAt(ch, 1) : captures[f2 - 1] + charAt(ch, 1);
                  return match;
                }
                capture = captures[n2 - 1];
            }
            return capture === void 0 ? "" : capture;
          });
        };
      }, { "../internals/function-uncurry-this": 181, "../internals/to-object": 285 }], 188: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            var check = function(it) {
              return it && it.Math === Math && it;
            };
            module3.exports = // eslint-disable-next-line es/no-global-this -- safe
            check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
            check(typeof self == "object" && self) || check(typeof global3 == "object" && global3) || check(typeof this == "object" && this) || // eslint-disable-next-line no-new-func -- fallback
            /* @__PURE__ */ function() {
              return this;
            }() || Function("return this")();
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 189: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var toObject = require2("../internals/to-object");
        var hasOwnProperty2 = uncurryThis({}.hasOwnProperty);
        module3.exports = Object.hasOwn || function hasOwn2(it, key) {
          return hasOwnProperty2(toObject(it), key);
        };
      }, { "../internals/function-uncurry-this": 181, "../internals/to-object": 285 }], 190: [function(require2, module3, exports3) {
        module3.exports = {};
      }, {}], 191: [function(require2, module3, exports3) {
        module3.exports = function(a, b) {
          try {
            arguments.length === 1 ? console.error(a) : console.error(a, b);
          } catch (error) {
          }
        };
      }, {}], 192: [function(require2, module3, exports3) {
        var getBuiltIn = require2("../internals/get-built-in");
        module3.exports = getBuiltIn("document", "documentElement");
      }, { "../internals/get-built-in": 182 }], 193: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var fails = require2("../internals/fails");
        var createElement = require2("../internals/document-create-element");
        module3.exports = !DESCRIPTORS && !fails(function() {
          return Object.defineProperty(createElement("div"), "a", {
            get: function() {
              return 7;
            }
          }).a !== 7;
        });
      }, { "../internals/descriptors": 153, "../internals/document-create-element": 154, "../internals/fails": 171 }], 194: [function(require2, module3, exports3) {
        var $Array = Array;
        var abs = Math.abs;
        var pow = Math.pow;
        var floor = Math.floor;
        var log = Math.log;
        var LN2 = Math.LN2;
        var pack = function(number, mantissaLength, bytes) {
          var buffer2 = $Array(bytes);
          var exponentLength = bytes * 8 - mantissaLength - 1;
          var eMax = (1 << exponentLength) - 1;
          var eBias = eMax >> 1;
          var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
          var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
          var index2 = 0;
          var exponent, mantissa, c;
          number = abs(number);
          if (number !== number || number === Infinity) {
            mantissa = number !== number ? 1 : 0;
            exponent = eMax;
          } else {
            exponent = floor(log(number) / LN2);
            c = pow(2, -exponent);
            if (number * c < 1) {
              exponent--;
              c *= 2;
            }
            if (exponent + eBias >= 1) {
              number += rt / c;
            } else {
              number += rt * pow(2, 1 - eBias);
            }
            if (number * c >= 2) {
              exponent++;
              c /= 2;
            }
            if (exponent + eBias >= eMax) {
              mantissa = 0;
              exponent = eMax;
            } else if (exponent + eBias >= 1) {
              mantissa = (number * c - 1) * pow(2, mantissaLength);
              exponent += eBias;
            } else {
              mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
              exponent = 0;
            }
          }
          while (mantissaLength >= 8) {
            buffer2[index2++] = mantissa & 255;
            mantissa /= 256;
            mantissaLength -= 8;
          }
          exponent = exponent << mantissaLength | mantissa;
          exponentLength += mantissaLength;
          while (exponentLength > 0) {
            buffer2[index2++] = exponent & 255;
            exponent /= 256;
            exponentLength -= 8;
          }
          buffer2[--index2] |= sign * 128;
          return buffer2;
        };
        var unpack = function(buffer2, mantissaLength) {
          var bytes = buffer2.length;
          var exponentLength = bytes * 8 - mantissaLength - 1;
          var eMax = (1 << exponentLength) - 1;
          var eBias = eMax >> 1;
          var nBits = exponentLength - 7;
          var index2 = bytes - 1;
          var sign = buffer2[index2--];
          var exponent = sign & 127;
          var mantissa;
          sign >>= 7;
          while (nBits > 0) {
            exponent = exponent * 256 + buffer2[index2--];
            nBits -= 8;
          }
          mantissa = exponent & (1 << -nBits) - 1;
          exponent >>= -nBits;
          nBits += mantissaLength;
          while (nBits > 0) {
            mantissa = mantissa * 256 + buffer2[index2--];
            nBits -= 8;
          }
          if (exponent === 0) {
            exponent = 1 - eBias;
          } else if (exponent === eMax) {
            return mantissa ? NaN : sign ? -Infinity : Infinity;
          } else {
            mantissa += pow(2, mantissaLength);
            exponent -= eBias;
          }
          return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
        };
        module3.exports = {
          pack,
          unpack
        };
      }, {}], 195: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var fails = require2("../internals/fails");
        var classof = require2("../internals/classof-raw");
        var $Object = Object;
        var split = uncurryThis("".split);
        module3.exports = fails(function() {
          return !$Object("z").propertyIsEnumerable(0);
        }) ? function(it) {
          return classof(it) === "String" ? split(it, "") : $Object(it);
        } : $Object;
      }, { "../internals/classof-raw": 137, "../internals/fails": 171, "../internals/function-uncurry-this": 181 }], 196: [function(require2, module3, exports3) {
        var isCallable = require2("../internals/is-callable");
        var isObject2 = require2("../internals/is-object");
        var setPrototypeOf2 = require2("../internals/object-set-prototype-of");
        module3.exports = function($this, dummy, Wrapper) {
          var NewTarget, NewTargetPrototype;
          if (
            // it can work only with native `setPrototypeOf`
            setPrototypeOf2 && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
            isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject2(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype
          )
            setPrototypeOf2($this, NewTargetPrototype);
          return $this;
        };
      }, { "../internals/is-callable": 203, "../internals/is-object": 208, "../internals/object-set-prototype-of": 242 }], 197: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var isCallable = require2("../internals/is-callable");
        var store = require2("../internals/shared-store");
        var functionToString = uncurryThis(Function.toString);
        if (!isCallable(store.inspectSource)) {
          store.inspectSource = function(it) {
            return functionToString(it);
          };
        }
        module3.exports = store.inspectSource;
      }, { "../internals/function-uncurry-this": 181, "../internals/is-callable": 203, "../internals/shared-store": 268 }], 198: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var hiddenKeys = require2("../internals/hidden-keys");
        var isObject2 = require2("../internals/is-object");
        var hasOwn2 = require2("../internals/has-own-property");
        var defineProperty = require2("../internals/object-define-property").f;
        var getOwnPropertyNamesModule = require2("../internals/object-get-own-property-names");
        var getOwnPropertyNamesExternalModule = require2("../internals/object-get-own-property-names-external");
        var isExtensible = require2("../internals/object-is-extensible");
        var uid2 = require2("../internals/uid");
        var FREEZING = require2("../internals/freezing");
        var REQUIRED = false;
        var METADATA = uid2("meta");
        var id = 0;
        var setMetadata = function(it) {
          defineProperty(it, METADATA, { value: {
            objectID: "O" + id++,
            // object ID
            weakData: {}
            // weak collections IDs
          } });
        };
        var fastKey = function(it, create2) {
          if (!isObject2(it))
            return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
          if (!hasOwn2(it, METADATA)) {
            if (!isExtensible(it))
              return "F";
            if (!create2)
              return "E";
            setMetadata(it);
          }
          return it[METADATA].objectID;
        };
        var getWeakData = function(it, create2) {
          if (!hasOwn2(it, METADATA)) {
            if (!isExtensible(it))
              return true;
            if (!create2)
              return false;
            setMetadata(it);
          }
          return it[METADATA].weakData;
        };
        var onFreeze = function(it) {
          if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn2(it, METADATA))
            setMetadata(it);
          return it;
        };
        var enable = function() {
          meta.enable = function() {
          };
          REQUIRED = true;
          var getOwnPropertyNames = getOwnPropertyNamesModule.f;
          var splice = uncurryThis([].splice);
          var test = {};
          test[METADATA] = 1;
          if (getOwnPropertyNames(test).length) {
            getOwnPropertyNamesModule.f = function(it) {
              var result = getOwnPropertyNames(it);
              for (var i = 0, length = result.length; i < length; i++) {
                if (result[i] === METADATA) {
                  splice(result, i, 1);
                  break;
                }
              }
              return result;
            };
            $({ target: "Object", stat: true, forced: true }, {
              getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
            });
          }
        };
        var meta = module3.exports = {
          enable,
          fastKey,
          getWeakData,
          onFreeze
        };
        hiddenKeys[METADATA] = true;
      }, { "../internals/export": 170, "../internals/freezing": 173, "../internals/function-uncurry-this": 181, "../internals/has-own-property": 189, "../internals/hidden-keys": 190, "../internals/is-object": 208, "../internals/object-define-property": 231, "../internals/object-get-own-property-names": 234, "../internals/object-get-own-property-names-external": 233, "../internals/object-is-extensible": 237, "../internals/uid": 299 }], 199: [function(require2, module3, exports3) {
        var NATIVE_WEAK_MAP = require2("../internals/weak-map-basic-detection");
        var global3 = require2("../internals/global");
        var isObject2 = require2("../internals/is-object");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var hasOwn2 = require2("../internals/has-own-property");
        var shared = require2("../internals/shared-store");
        var sharedKey = require2("../internals/shared-key");
        var hiddenKeys = require2("../internals/hidden-keys");
        var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
        var TypeError2 = global3.TypeError;
        var WeakMap2 = global3.WeakMap;
        var set2, get2, has2;
        var enforce = function(it) {
          return has2(it) ? get2(it) : set2(it, {});
        };
        var getterFor = function(TYPE) {
          return function(it) {
            var state;
            if (!isObject2(it) || (state = get2(it)).type !== TYPE) {
              throw new TypeError2("Incompatible receiver, " + TYPE + " required");
            }
            return state;
          };
        };
        if (NATIVE_WEAK_MAP || shared.state) {
          var store = shared.state || (shared.state = new WeakMap2());
          store.get = store.get;
          store.has = store.has;
          store.set = store.set;
          set2 = function(it, metadata) {
            if (store.has(it))
              throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            store.set(it, metadata);
            return metadata;
          };
          get2 = function(it) {
            return store.get(it) || {};
          };
          has2 = function(it) {
            return store.has(it);
          };
        } else {
          var STATE = sharedKey("state");
          hiddenKeys[STATE] = true;
          set2 = function(it, metadata) {
            if (hasOwn2(it, STATE))
              throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
          };
          get2 = function(it) {
            return hasOwn2(it, STATE) ? it[STATE] : {};
          };
          has2 = function(it) {
            return hasOwn2(it, STATE);
          };
        }
        module3.exports = {
          set: set2,
          get: get2,
          has: has2,
          enforce,
          getterFor
        };
      }, { "../internals/create-non-enumerable-property": 145, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/hidden-keys": 190, "../internals/is-object": 208, "../internals/shared-key": 267, "../internals/shared-store": 268, "../internals/weak-map-basic-detection": 303 }], 200: [function(require2, module3, exports3) {
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var Iterators = require2("../internals/iterators");
        var ITERATOR = wellKnownSymbol("iterator");
        var ArrayPrototype = Array.prototype;
        module3.exports = function(it) {
          return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
        };
      }, { "../internals/iterators": 218, "../internals/well-known-symbol": 306 }], 201: [function(require2, module3, exports3) {
        var classof = require2("../internals/classof-raw");
        module3.exports = Array.isArray || function isArray2(argument) {
          return classof(argument) === "Array";
        };
      }, { "../internals/classof-raw": 137 }], 202: [function(require2, module3, exports3) {
        var classof = require2("../internals/classof");
        module3.exports = function(it) {
          var klass = classof(it);
          return klass === "BigInt64Array" || klass === "BigUint64Array";
        };
      }, { "../internals/classof": 138 }], 203: [function(require2, module3, exports3) {
        var documentAll = typeof document == "object" && document.all;
        module3.exports = typeof documentAll == "undefined" && documentAll !== void 0 ? function(argument) {
          return typeof argument == "function" || argument === documentAll;
        } : function(argument) {
          return typeof argument == "function";
        };
      }, {}], 204: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var fails = require2("../internals/fails");
        var isCallable = require2("../internals/is-callable");
        var classof = require2("../internals/classof");
        var getBuiltIn = require2("../internals/get-built-in");
        var inspectSource = require2("../internals/inspect-source");
        var noop2 = function() {
        };
        var empty = [];
        var construct2 = getBuiltIn("Reflect", "construct");
        var constructorRegExp = /^\s*(?:class|function)\b/;
        var exec = uncurryThis(constructorRegExp.exec);
        var INCORRECT_TO_STRING = !constructorRegExp.test(noop2);
        var isConstructorModern = function isConstructor(argument) {
          if (!isCallable(argument))
            return false;
          try {
            construct2(noop2, empty, argument);
            return true;
          } catch (error) {
            return false;
          }
        };
        var isConstructorLegacy = function isConstructor(argument) {
          if (!isCallable(argument))
            return false;
          switch (classof(argument)) {
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
              return false;
          }
          try {
            return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
          } catch (error) {
            return true;
          }
        };
        isConstructorLegacy.sham = true;
        module3.exports = !construct2 || fails(function() {
          var called;
          return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
            called = true;
          }) || called;
        }) ? isConstructorLegacy : isConstructorModern;
      }, { "../internals/classof": 138, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/get-built-in": 182, "../internals/inspect-source": 197, "../internals/is-callable": 203 }], 205: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        var isCallable = require2("../internals/is-callable");
        var replacement = /#|\.prototype\./;
        var isForced = function(feature, detection) {
          var value = data[normalize(feature)];
          return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
        };
        var normalize = isForced.normalize = function(string) {
          return String(string).replace(replacement, ".").toLowerCase();
        };
        var data = isForced.data = {};
        var NATIVE = isForced.NATIVE = "N";
        var POLYFILL = isForced.POLYFILL = "P";
        module3.exports = isForced;
      }, { "../internals/fails": 171, "../internals/is-callable": 203 }], 206: [function(require2, module3, exports3) {
        var isObject2 = require2("../internals/is-object");
        var floor = Math.floor;
        module3.exports = Number.isInteger || function isInteger(it) {
          return !isObject2(it) && isFinite(it) && floor(it) === it;
        };
      }, { "../internals/is-object": 208 }], 207: [function(require2, module3, exports3) {
        module3.exports = function(it) {
          return it === null || it === void 0;
        };
      }, {}], 208: [function(require2, module3, exports3) {
        var isCallable = require2("../internals/is-callable");
        module3.exports = function(it) {
          return typeof it == "object" ? it !== null : isCallable(it);
        };
      }, { "../internals/is-callable": 203 }], 209: [function(require2, module3, exports3) {
        var isObject2 = require2("../internals/is-object");
        module3.exports = function(argument) {
          return isObject2(argument) || argument === null;
        };
      }, { "../internals/is-object": 208 }], 210: [function(require2, module3, exports3) {
        module3.exports = false;
      }, {}], 211: [function(require2, module3, exports3) {
        var isObject2 = require2("../internals/is-object");
        var classof = require2("../internals/classof-raw");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var MATCH = wellKnownSymbol("match");
        module3.exports = function(it) {
          var isRegExp;
          return isObject2(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) === "RegExp");
        };
      }, { "../internals/classof-raw": 137, "../internals/is-object": 208, "../internals/well-known-symbol": 306 }], 212: [function(require2, module3, exports3) {
        var getBuiltIn = require2("../internals/get-built-in");
        var isCallable = require2("../internals/is-callable");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var USE_SYMBOL_AS_UID = require2("../internals/use-symbol-as-uid");
        var $Object = Object;
        module3.exports = USE_SYMBOL_AS_UID ? function(it) {
          return typeof it == "symbol";
        } : function(it) {
          var $Symbol = getBuiltIn("Symbol");
          return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
        };
      }, { "../internals/get-built-in": 182, "../internals/is-callable": 203, "../internals/object-is-prototype-of": 238, "../internals/use-symbol-as-uid": 300 }], 213: [function(require2, module3, exports3) {
        var bind = require2("../internals/function-bind-context");
        var call = require2("../internals/function-call");
        var anObject = require2("../internals/an-object");
        var tryToString = require2("../internals/try-to-string");
        var isArrayIteratorMethod = require2("../internals/is-array-iterator-method");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var getIterator = require2("../internals/get-iterator");
        var getIteratorMethod = require2("../internals/get-iterator-method");
        var iteratorClose = require2("../internals/iterator-close");
        var $TypeError = TypeError;
        var Result = function(stopped, result) {
          this.stopped = stopped;
          this.result = result;
        };
        var ResultPrototype = Result.prototype;
        module3.exports = function(iterable, unboundFunction, options) {
          var that = options && options.that;
          var AS_ENTRIES = !!(options && options.AS_ENTRIES);
          var IS_RECORD = !!(options && options.IS_RECORD);
          var IS_ITERATOR = !!(options && options.IS_ITERATOR);
          var INTERRUPTED = !!(options && options.INTERRUPTED);
          var fn = bind(unboundFunction, that);
          var iterator, iterFn, index2, length, result, next, step;
          var stop = function(condition) {
            if (iterator)
              iteratorClose(iterator, "normal", condition);
            return new Result(true, condition);
          };
          var callFn = function(value) {
            if (AS_ENTRIES) {
              anObject(value);
              return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            }
            return INTERRUPTED ? fn(value, stop) : fn(value);
          };
          if (IS_RECORD) {
            iterator = iterable.iterator;
          } else if (IS_ITERATOR) {
            iterator = iterable;
          } else {
            iterFn = getIteratorMethod(iterable);
            if (!iterFn)
              throw new $TypeError(tryToString(iterable) + " is not iterable");
            if (isArrayIteratorMethod(iterFn)) {
              for (index2 = 0, length = lengthOfArrayLike(iterable); length > index2; index2++) {
                result = callFn(iterable[index2]);
                if (result && isPrototypeOf(ResultPrototype, result))
                  return result;
              }
              return new Result(false);
            }
            iterator = getIterator(iterable, iterFn);
          }
          next = IS_RECORD ? iterable.next : iterator.next;
          while (!(step = call(next, iterator)).done) {
            try {
              result = callFn(step.value);
            } catch (error) {
              iteratorClose(iterator, "throw", error);
            }
            if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
              return result;
          }
          return new Result(false);
        };
      }, { "../internals/an-object": 114, "../internals/function-bind-context": 175, "../internals/function-call": 177, "../internals/get-iterator": 184, "../internals/get-iterator-method": 183, "../internals/is-array-iterator-method": 200, "../internals/iterator-close": 214, "../internals/length-of-array-like": 219, "../internals/object-is-prototype-of": 238, "../internals/try-to-string": 293 }], 214: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var anObject = require2("../internals/an-object");
        var getMethod = require2("../internals/get-method");
        module3.exports = function(iterator, kind, value) {
          var innerResult, innerError;
          anObject(iterator);
          try {
            innerResult = getMethod(iterator, "return");
            if (!innerResult) {
              if (kind === "throw")
                throw value;
              return value;
            }
            innerResult = call(innerResult, iterator);
          } catch (error) {
            innerError = true;
            innerResult = error;
          }
          if (kind === "throw")
            throw value;
          if (innerError)
            throw innerResult;
          anObject(innerResult);
          return value;
        };
      }, { "../internals/an-object": 114, "../internals/function-call": 177, "../internals/get-method": 186 }], 215: [function(require2, module3, exports3) {
        var IteratorPrototype = require2("../internals/iterators-core").IteratorPrototype;
        var create2 = require2("../internals/object-create");
        var createPropertyDescriptor = require2("../internals/create-property-descriptor");
        var setToStringTag = require2("../internals/set-to-string-tag");
        var Iterators = require2("../internals/iterators");
        var returnThis = function() {
          return this;
        };
        module3.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
          var TO_STRING_TAG = NAME + " Iterator";
          IteratorConstructor.prototype = create2(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
          setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
          Iterators[TO_STRING_TAG] = returnThis;
          return IteratorConstructor;
        };
      }, { "../internals/create-property-descriptor": 146, "../internals/iterators": 218, "../internals/iterators-core": 217, "../internals/object-create": 229, "../internals/set-to-string-tag": 266 }], 216: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var call = require2("../internals/function-call");
        var IS_PURE = require2("../internals/is-pure");
        var FunctionName = require2("../internals/function-name");
        var isCallable = require2("../internals/is-callable");
        var createIteratorConstructor = require2("../internals/iterator-create-constructor");
        var getPrototypeOf2 = require2("../internals/object-get-prototype-of");
        var setPrototypeOf2 = require2("../internals/object-set-prototype-of");
        var setToStringTag = require2("../internals/set-to-string-tag");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var defineBuiltIn = require2("../internals/define-built-in");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var Iterators = require2("../internals/iterators");
        var IteratorsCore = require2("../internals/iterators-core");
        var PROPER_FUNCTION_NAME = FunctionName.PROPER;
        var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
        var IteratorPrototype = IteratorsCore.IteratorPrototype;
        var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
        var ITERATOR = wellKnownSymbol("iterator");
        var KEYS = "keys";
        var VALUES = "values";
        var ENTRIES = "entries";
        var returnThis = function() {
          return this;
        };
        module3.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
          createIteratorConstructor(IteratorConstructor, NAME, next);
          var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator)
              return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype)
              return IterablePrototype[KIND];
            switch (KIND) {
              case KEYS:
                return function keys() {
                  return new IteratorConstructor(this, KIND);
                };
              case VALUES:
                return function values() {
                  return new IteratorConstructor(this, KIND);
                };
              case ENTRIES:
                return function entries2() {
                  return new IteratorConstructor(this, KIND);
                };
            }
            return function() {
              return new IteratorConstructor(this);
            };
          };
          var TO_STRING_TAG = NAME + " Iterator";
          var INCORRECT_VALUES_NAME = false;
          var IterablePrototype = Iterable.prototype;
          var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
          var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
          var anyNativeIterator = NAME === "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
          var CurrentIteratorPrototype, methods, KEY;
          if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf2(anyNativeIterator.call(new Iterable()));
            if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
              if (!IS_PURE && getPrototypeOf2(CurrentIteratorPrototype) !== IteratorPrototype) {
                if (setPrototypeOf2) {
                  setPrototypeOf2(CurrentIteratorPrototype, IteratorPrototype);
                } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                  defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
                }
              }
              setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
              if (IS_PURE)
                Iterators[TO_STRING_TAG] = returnThis;
            }
          }
          if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
              createNonEnumerableProperty(IterablePrototype, "name", VALUES);
            } else {
              INCORRECT_VALUES_NAME = true;
              defaultIterator = function values() {
                return call(nativeIterator, this);
              };
            }
          }
          if (DEFAULT) {
            methods = {
              values: getIterationMethod(VALUES),
              keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
              entries: getIterationMethod(ENTRIES)
            };
            if (FORCED)
              for (KEY in methods) {
                if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                  defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
                }
              }
            else
              $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
          }
          if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
            defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
          }
          Iterators[NAME] = defaultIterator;
          return methods;
        };
      }, { "../internals/create-non-enumerable-property": 145, "../internals/define-built-in": 149, "../internals/export": 170, "../internals/function-call": 177, "../internals/function-name": 178, "../internals/is-callable": 203, "../internals/is-pure": 210, "../internals/iterator-create-constructor": 215, "../internals/iterators": 218, "../internals/iterators-core": 217, "../internals/object-get-prototype-of": 236, "../internals/object-set-prototype-of": 242, "../internals/set-to-string-tag": 266, "../internals/well-known-symbol": 306 }], 217: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        var isCallable = require2("../internals/is-callable");
        var isObject2 = require2("../internals/is-object");
        var create2 = require2("../internals/object-create");
        var getPrototypeOf2 = require2("../internals/object-get-prototype-of");
        var defineBuiltIn = require2("../internals/define-built-in");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var IS_PURE = require2("../internals/is-pure");
        var ITERATOR = wellKnownSymbol("iterator");
        var BUGGY_SAFARI_ITERATORS = false;
        var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
        if ([].keys) {
          arrayIterator = [].keys();
          if (!("next" in arrayIterator))
            BUGGY_SAFARI_ITERATORS = true;
          else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf2(getPrototypeOf2(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
              IteratorPrototype = PrototypeOfArrayIteratorPrototype;
          }
        }
        var NEW_ITERATOR_PROTOTYPE = !isObject2(IteratorPrototype) || fails(function() {
          var test = {};
          return IteratorPrototype[ITERATOR].call(test) !== test;
        });
        if (NEW_ITERATOR_PROTOTYPE)
          IteratorPrototype = {};
        else if (IS_PURE)
          IteratorPrototype = create2(IteratorPrototype);
        if (!isCallable(IteratorPrototype[ITERATOR])) {
          defineBuiltIn(IteratorPrototype, ITERATOR, function() {
            return this;
          });
        }
        module3.exports = {
          IteratorPrototype,
          BUGGY_SAFARI_ITERATORS
        };
      }, { "../internals/define-built-in": 149, "../internals/fails": 171, "../internals/is-callable": 203, "../internals/is-object": 208, "../internals/is-pure": 210, "../internals/object-create": 229, "../internals/object-get-prototype-of": 236, "../internals/well-known-symbol": 306 }], 218: [function(require2, module3, exports3) {
        arguments[4][190][0].apply(exports3, arguments);
      }, { "dup": 190 }], 219: [function(require2, module3, exports3) {
        var toLength = require2("../internals/to-length");
        module3.exports = function(obj) {
          return toLength(obj.length);
        };
      }, { "../internals/to-length": 284 }], 220: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var fails = require2("../internals/fails");
        var isCallable = require2("../internals/is-callable");
        var hasOwn2 = require2("../internals/has-own-property");
        var DESCRIPTORS = require2("../internals/descriptors");
        var CONFIGURABLE_FUNCTION_NAME = require2("../internals/function-name").CONFIGURABLE;
        var inspectSource = require2("../internals/inspect-source");
        var InternalStateModule = require2("../internals/internal-state");
        var enforceInternalState = InternalStateModule.enforce;
        var getInternalState = InternalStateModule.get;
        var $String = String;
        var defineProperty = Object.defineProperty;
        var stringSlice = uncurryThis("".slice);
        var replace = uncurryThis("".replace);
        var join = uncurryThis([].join);
        var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
          return defineProperty(function() {
          }, "length", { value: 8 }).length !== 8;
        });
        var TEMPLATE = String(String).split("String");
        var makeBuiltIn = module3.exports = function(value, name, options) {
          if (stringSlice($String(name), 0, 7) === "Symbol(") {
            name = "[" + replace($String(name), /^Symbol\(([^)]*)\)/, "$1") + "]";
          }
          if (options && options.getter)
            name = "get " + name;
          if (options && options.setter)
            name = "set " + name;
          if (!hasOwn2(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
            if (DESCRIPTORS)
              defineProperty(value, "name", { value: name, configurable: true });
            else
              value.name = name;
          }
          if (CONFIGURABLE_LENGTH && options && hasOwn2(options, "arity") && value.length !== options.arity) {
            defineProperty(value, "length", { value: options.arity });
          }
          try {
            if (options && hasOwn2(options, "constructor") && options.constructor) {
              if (DESCRIPTORS)
                defineProperty(value, "prototype", { writable: false });
            } else if (value.prototype)
              value.prototype = void 0;
          } catch (error) {
          }
          var state = enforceInternalState(value);
          if (!hasOwn2(state, "source")) {
            state.source = join(TEMPLATE, typeof name == "string" ? name : "");
          }
          return value;
        };
        Function.prototype.toString = makeBuiltIn(function toString() {
          return isCallable(this) && getInternalState(this).source || inspectSource(this);
        }, "toString");
      }, { "../internals/descriptors": 153, "../internals/fails": 171, "../internals/function-name": 178, "../internals/function-uncurry-this": 181, "../internals/has-own-property": 189, "../internals/inspect-source": 197, "../internals/internal-state": 199, "../internals/is-callable": 203 }], 221: [function(require2, module3, exports3) {
        var sign = require2("../internals/math-sign");
        var abs = Math.abs;
        var EPSILON = 2220446049250313e-31;
        var INVERSE_EPSILON = 1 / EPSILON;
        var roundTiesToEven = function(n2) {
          return n2 + INVERSE_EPSILON - INVERSE_EPSILON;
        };
        module3.exports = function(x, FLOAT_EPSILON, FLOAT_MAX_VALUE, FLOAT_MIN_VALUE) {
          var n2 = +x;
          var absolute = abs(n2);
          var s2 = sign(n2);
          if (absolute < FLOAT_MIN_VALUE)
            return s2 * roundTiesToEven(absolute / FLOAT_MIN_VALUE / FLOAT_EPSILON) * FLOAT_MIN_VALUE * FLOAT_EPSILON;
          var a = (1 + FLOAT_EPSILON / EPSILON) * absolute;
          var result = a - (a - absolute);
          if (result > FLOAT_MAX_VALUE || result !== result)
            return s2 * Infinity;
          return s2 * result;
        };
      }, { "../internals/math-sign": 223 }], 222: [function(require2, module3, exports3) {
        var floatRound = require2("../internals/math-float-round");
        var FLOAT32_EPSILON = 11920928955078125e-23;
        var FLOAT32_MAX_VALUE = 34028234663852886e22;
        var FLOAT32_MIN_VALUE = 11754943508222875e-54;
        module3.exports = Math.fround || function fround(x) {
          return floatRound(x, FLOAT32_EPSILON, FLOAT32_MAX_VALUE, FLOAT32_MIN_VALUE);
        };
      }, { "../internals/math-float-round": 221 }], 223: [function(require2, module3, exports3) {
        module3.exports = Math.sign || function sign(x) {
          var n2 = +x;
          return n2 === 0 || n2 !== n2 ? n2 : n2 < 0 ? -1 : 1;
        };
      }, {}], 224: [function(require2, module3, exports3) {
        var ceil = Math.ceil;
        var floor = Math.floor;
        module3.exports = Math.trunc || function trunc(x) {
          var n2 = +x;
          return (n2 > 0 ? floor : ceil)(n2);
        };
      }, {}], 225: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var safeGetBuiltIn = require2("../internals/safe-get-built-in");
        var bind = require2("../internals/function-bind-context");
        var macrotask = require2("../internals/task").set;
        var Queue = require2("../internals/queue");
        var IS_IOS = require2("../internals/engine-is-ios");
        var IS_IOS_PEBBLE = require2("../internals/engine-is-ios-pebble");
        var IS_WEBOS_WEBKIT = require2("../internals/engine-is-webos-webkit");
        var IS_NODE = require2("../internals/engine-is-node");
        var MutationObserver = global3.MutationObserver || global3.WebKitMutationObserver;
        var document2 = global3.document;
        var process = global3.process;
        var Promise2 = global3.Promise;
        var microtask = safeGetBuiltIn("queueMicrotask");
        var notify, toggle, node, promise, then;
        if (!microtask) {
          var queue2 = new Queue();
          var flush = function() {
            var parent, fn;
            if (IS_NODE && (parent = process.domain))
              parent.exit();
            while (fn = queue2.get())
              try {
                fn();
              } catch (error) {
                if (queue2.head)
                  notify();
                throw error;
              }
            if (parent)
              parent.enter();
          };
          if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
            toggle = true;
            node = document2.createTextNode("");
            new MutationObserver(flush).observe(node, { characterData: true });
            notify = function() {
              node.data = toggle = !toggle;
            };
          } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
            promise = Promise2.resolve(void 0);
            promise.constructor = Promise2;
            then = bind(promise.then, promise);
            notify = function() {
              then(flush);
            };
          } else if (IS_NODE) {
            notify = function() {
              process.nextTick(flush);
            };
          } else {
            macrotask = bind(macrotask, global3);
            notify = function() {
              macrotask(flush);
            };
          }
          microtask = function(fn) {
            if (!queue2.head)
              notify();
            queue2.add(fn);
          };
        }
        module3.exports = microtask;
      }, { "../internals/engine-is-ios": 163, "../internals/engine-is-ios-pebble": 162, "../internals/engine-is-node": 164, "../internals/engine-is-webos-webkit": 165, "../internals/function-bind-context": 175, "../internals/global": 188, "../internals/queue": 254, "../internals/safe-get-built-in": 263, "../internals/task": 277 }], 226: [function(require2, module3, exports3) {
        var aCallable = require2("../internals/a-callable");
        var $TypeError = TypeError;
        var PromiseCapability = function(C) {
          var resolve2, reject;
          this.promise = new C(function($$resolve, $$reject) {
            if (resolve2 !== void 0 || reject !== void 0)
              throw new $TypeError("Bad Promise constructor");
            resolve2 = $$resolve;
            reject = $$reject;
          });
          this.resolve = aCallable(resolve2);
          this.reject = aCallable(reject);
        };
        module3.exports.f = function(C) {
          return new PromiseCapability(C);
        };
      }, { "../internals/a-callable": 108 }], 227: [function(require2, module3, exports3) {
        var isRegExp = require2("../internals/is-regexp");
        var $TypeError = TypeError;
        module3.exports = function(it) {
          if (isRegExp(it)) {
            throw new $TypeError("The method doesn't accept regular expressions");
          }
          return it;
        };
      }, { "../internals/is-regexp": 211 }], 228: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var call = require2("../internals/function-call");
        var fails = require2("../internals/fails");
        var objectKeys2 = require2("../internals/object-keys");
        var getOwnPropertySymbolsModule = require2("../internals/object-get-own-property-symbols");
        var propertyIsEnumerableModule = require2("../internals/object-property-is-enumerable");
        var toObject = require2("../internals/to-object");
        var IndexedObject = require2("../internals/indexed-object");
        var $assign = Object.assign;
        var defineProperty = Object.defineProperty;
        var concat = uncurryThis([].concat);
        module3.exports = !$assign || fails(function() {
          if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, "a", {
            enumerable: true,
            get: function() {
              defineProperty(this, "b", {
                value: 3,
                enumerable: false
              });
            }
          }), { b: 2 })).b !== 1)
            return true;
          var A = {};
          var B = {};
          var symbol = Symbol("assign detection");
          var alphabet = "abcdefghijklmnopqrst";
          A[symbol] = 7;
          alphabet.split("").forEach(function(chr) {
            B[chr] = chr;
          });
          return $assign({}, A)[symbol] !== 7 || objectKeys2($assign({}, B)).join("") !== alphabet;
        }) ? function assign2(target, source) {
          var T = toObject(target);
          var argumentsLength = arguments.length;
          var index2 = 1;
          var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
          var propertyIsEnumerable = propertyIsEnumerableModule.f;
          while (argumentsLength > index2) {
            var S = IndexedObject(arguments[index2++]);
            var keys = getOwnPropertySymbols ? concat(objectKeys2(S), getOwnPropertySymbols(S)) : objectKeys2(S);
            var length = keys.length;
            var j = 0;
            var key;
            while (length > j) {
              key = keys[j++];
              if (!DESCRIPTORS || call(propertyIsEnumerable, S, key))
                T[key] = S[key];
            }
          }
          return T;
        } : $assign;
      }, { "../internals/descriptors": 153, "../internals/fails": 171, "../internals/function-call": 177, "../internals/function-uncurry-this": 181, "../internals/indexed-object": 195, "../internals/object-get-own-property-symbols": 235, "../internals/object-keys": 240, "../internals/object-property-is-enumerable": 241, "../internals/to-object": 285 }], 229: [function(require2, module3, exports3) {
        var anObject = require2("../internals/an-object");
        var definePropertiesModule = require2("../internals/object-define-properties");
        var enumBugKeys = require2("../internals/enum-bug-keys");
        var hiddenKeys = require2("../internals/hidden-keys");
        var html2 = require2("../internals/html");
        var documentCreateElement = require2("../internals/document-create-element");
        var sharedKey = require2("../internals/shared-key");
        var GT = ">";
        var LT = "<";
        var PROTOTYPE = "prototype";
        var SCRIPT = "script";
        var IE_PROTO = sharedKey("IE_PROTO");
        var EmptyConstructor = function() {
        };
        var scriptTag = function(content) {
          return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
        };
        var NullProtoObjectViaActiveX = function(activeXDocument2) {
          activeXDocument2.write(scriptTag(""));
          activeXDocument2.close();
          var temp = activeXDocument2.parentWindow.Object;
          activeXDocument2 = null;
          return temp;
        };
        var NullProtoObjectViaIFrame = function() {
          var iframe = documentCreateElement("iframe");
          var JS = "java" + SCRIPT + ":";
          var iframeDocument;
          iframe.style.display = "none";
          html2.appendChild(iframe);
          iframe.src = String(JS);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(scriptTag("document.F=Object"));
          iframeDocument.close();
          return iframeDocument.F;
        };
        var activeXDocument;
        var NullProtoObject = function() {
          try {
            activeXDocument = new ActiveXObject("htmlfile");
          } catch (error) {
          }
          NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
          var length = enumBugKeys.length;
          while (length--)
            delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
          return NullProtoObject();
        };
        hiddenKeys[IE_PROTO] = true;
        module3.exports = Object.create || function create2(O, Properties) {
          var result;
          if (O !== null) {
            EmptyConstructor[PROTOTYPE] = anObject(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE] = null;
            result[IE_PROTO] = O;
          } else
            result = NullProtoObject();
          return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
        };
      }, { "../internals/an-object": 114, "../internals/document-create-element": 154, "../internals/enum-bug-keys": 169, "../internals/hidden-keys": 190, "../internals/html": 192, "../internals/object-define-properties": 230, "../internals/shared-key": 267 }], 230: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var V8_PROTOTYPE_DEFINE_BUG = require2("../internals/v8-prototype-define-bug");
        var definePropertyModule = require2("../internals/object-define-property");
        var anObject = require2("../internals/an-object");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var objectKeys2 = require2("../internals/object-keys");
        exports3.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
          anObject(O);
          var props = toIndexedObject(Properties);
          var keys = objectKeys2(Properties);
          var length = keys.length;
          var index2 = 0;
          var key;
          while (length > index2)
            definePropertyModule.f(O, key = keys[index2++], props[key]);
          return O;
        };
      }, { "../internals/an-object": 114, "../internals/descriptors": 153, "../internals/object-define-property": 231, "../internals/object-keys": 240, "../internals/to-indexed-object": 282, "../internals/v8-prototype-define-bug": 301 }], 231: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var IE8_DOM_DEFINE = require2("../internals/ie8-dom-define");
        var V8_PROTOTYPE_DEFINE_BUG = require2("../internals/v8-prototype-define-bug");
        var anObject = require2("../internals/an-object");
        var toPropertyKey = require2("../internals/to-property-key");
        var $TypeError = TypeError;
        var $defineProperty = Object.defineProperty;
        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var ENUMERABLE = "enumerable";
        var CONFIGURABLE = "configurable";
        var WRITABLE = "writable";
        exports3.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPropertyKey(P);
          anObject(Attributes);
          if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
            var current = $getOwnPropertyDescriptor(O, P);
            if (current && current[WRITABLE]) {
              O[P] = Attributes.value;
              Attributes = {
                configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
                enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
                writable: false
              };
            }
          }
          return $defineProperty(O, P, Attributes);
        } : $defineProperty : function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPropertyKey(P);
          anObject(Attributes);
          if (IE8_DOM_DEFINE)
            try {
              return $defineProperty(O, P, Attributes);
            } catch (error) {
            }
          if ("get" in Attributes || "set" in Attributes)
            throw new $TypeError("Accessors not supported");
          if ("value" in Attributes)
            O[P] = Attributes.value;
          return O;
        };
      }, { "../internals/an-object": 114, "../internals/descriptors": 153, "../internals/ie8-dom-define": 193, "../internals/to-property-key": 289, "../internals/v8-prototype-define-bug": 301 }], 232: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var call = require2("../internals/function-call");
        var propertyIsEnumerableModule = require2("../internals/object-property-is-enumerable");
        var createPropertyDescriptor = require2("../internals/create-property-descriptor");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var toPropertyKey = require2("../internals/to-property-key");
        var hasOwn2 = require2("../internals/has-own-property");
        var IE8_DOM_DEFINE = require2("../internals/ie8-dom-define");
        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        exports3.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor2(O, P) {
          O = toIndexedObject(O);
          P = toPropertyKey(P);
          if (IE8_DOM_DEFINE)
            try {
              return $getOwnPropertyDescriptor(O, P);
            } catch (error) {
            }
          if (hasOwn2(O, P))
            return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
        };
      }, { "../internals/create-property-descriptor": 146, "../internals/descriptors": 153, "../internals/function-call": 177, "../internals/has-own-property": 189, "../internals/ie8-dom-define": 193, "../internals/object-property-is-enumerable": 241, "../internals/to-indexed-object": 282, "../internals/to-property-key": 289 }], 233: [function(require2, module3, exports3) {
        var classof = require2("../internals/classof-raw");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var $getOwnPropertyNames = require2("../internals/object-get-own-property-names").f;
        var arraySlice = require2("../internals/array-slice");
        var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        var getWindowNames = function(it) {
          try {
            return $getOwnPropertyNames(it);
          } catch (error) {
            return arraySlice(windowNames);
          }
        };
        module3.exports.f = function getOwnPropertyNames(it) {
          return windowNames && classof(it) === "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
        };
      }, { "../internals/array-slice": 131, "../internals/classof-raw": 137, "../internals/object-get-own-property-names": 234, "../internals/to-indexed-object": 282 }], 234: [function(require2, module3, exports3) {
        var internalObjectKeys = require2("../internals/object-keys-internal");
        var enumBugKeys = require2("../internals/enum-bug-keys");
        var hiddenKeys = enumBugKeys.concat("length", "prototype");
        exports3.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
          return internalObjectKeys(O, hiddenKeys);
        };
      }, { "../internals/enum-bug-keys": 169, "../internals/object-keys-internal": 239 }], 235: [function(require2, module3, exports3) {
        exports3.f = Object.getOwnPropertySymbols;
      }, {}], 236: [function(require2, module3, exports3) {
        var hasOwn2 = require2("../internals/has-own-property");
        var isCallable = require2("../internals/is-callable");
        var toObject = require2("../internals/to-object");
        var sharedKey = require2("../internals/shared-key");
        var CORRECT_PROTOTYPE_GETTER = require2("../internals/correct-prototype-getter");
        var IE_PROTO = sharedKey("IE_PROTO");
        var $Object = Object;
        var ObjectPrototype = $Object.prototype;
        module3.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
          var object = toObject(O);
          if (hasOwn2(object, IE_PROTO))
            return object[IE_PROTO];
          var constructor = object.constructor;
          if (isCallable(constructor) && object instanceof constructor) {
            return constructor.prototype;
          }
          return object instanceof $Object ? ObjectPrototype : null;
        };
      }, { "../internals/correct-prototype-getter": 143, "../internals/has-own-property": 189, "../internals/is-callable": 203, "../internals/shared-key": 267, "../internals/to-object": 285 }], 237: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        var isObject2 = require2("../internals/is-object");
        var classof = require2("../internals/classof-raw");
        var ARRAY_BUFFER_NON_EXTENSIBLE = require2("../internals/array-buffer-non-extensible");
        var $isExtensible = Object.isExtensible;
        var FAILS_ON_PRIMITIVES = fails(function() {
        });
        module3.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
          if (!isObject2(it))
            return false;
          if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) === "ArrayBuffer")
            return false;
          return $isExtensible ? $isExtensible(it) : true;
        } : $isExtensible;
      }, { "../internals/array-buffer-non-extensible": 116, "../internals/classof-raw": 137, "../internals/fails": 171, "../internals/is-object": 208 }], 238: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        module3.exports = uncurryThis({}.isPrototypeOf);
      }, { "../internals/function-uncurry-this": 181 }], 239: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var hasOwn2 = require2("../internals/has-own-property");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var indexOf = require2("../internals/array-includes").indexOf;
        var hiddenKeys = require2("../internals/hidden-keys");
        var push = uncurryThis([].push);
        module3.exports = function(object, names) {
          var O = toIndexedObject(object);
          var i = 0;
          var result = [];
          var key;
          for (key in O)
            !hasOwn2(hiddenKeys, key) && hasOwn2(O, key) && push(result, key);
          while (names.length > i)
            if (hasOwn2(O, key = names[i++])) {
              ~indexOf(result, key) || push(result, key);
            }
          return result;
        };
      }, { "../internals/array-includes": 124, "../internals/function-uncurry-this": 181, "../internals/has-own-property": 189, "../internals/hidden-keys": 190, "../internals/to-indexed-object": 282 }], 240: [function(require2, module3, exports3) {
        var internalObjectKeys = require2("../internals/object-keys-internal");
        var enumBugKeys = require2("../internals/enum-bug-keys");
        module3.exports = Object.keys || function keys(O) {
          return internalObjectKeys(O, enumBugKeys);
        };
      }, { "../internals/enum-bug-keys": 169, "../internals/object-keys-internal": 239 }], 241: [function(require2, module3, exports3) {
        var $propertyIsEnumerable = {}.propertyIsEnumerable;
        var getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor;
        var NASHORN_BUG = getOwnPropertyDescriptor2 && !$propertyIsEnumerable.call({ 1: 2 }, 1);
        exports3.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
          var descriptor = getOwnPropertyDescriptor2(this, V);
          return !!descriptor && descriptor.enumerable;
        } : $propertyIsEnumerable;
      }, {}], 242: [function(require2, module3, exports3) {
        var uncurryThisAccessor = require2("../internals/function-uncurry-this-accessor");
        var anObject = require2("../internals/an-object");
        var aPossiblePrototype = require2("../internals/a-possible-prototype");
        module3.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var CORRECT_SETTER = false;
          var test = {};
          var setter;
          try {
            setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
            setter(test, []);
            CORRECT_SETTER = test instanceof Array;
          } catch (error) {
          }
          return function setPrototypeOf2(O, proto) {
            anObject(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER)
              setter(O, proto);
            else
              O.__proto__ = proto;
            return O;
          };
        }() : void 0);
      }, { "../internals/a-possible-prototype": 110, "../internals/an-object": 114, "../internals/function-uncurry-this-accessor": 179 }], 243: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var fails = require2("../internals/fails");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var objectGetPrototypeOf = require2("../internals/object-get-prototype-of");
        var objectKeys2 = require2("../internals/object-keys");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var $propertyIsEnumerable = require2("../internals/object-property-is-enumerable").f;
        var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
        var push = uncurryThis([].push);
        var IE_BUG = DESCRIPTORS && fails(function() {
          var O = /* @__PURE__ */ Object.create(null);
          O[2] = 2;
          return !propertyIsEnumerable(O, 2);
        });
        var createMethod = function(TO_ENTRIES) {
          return function(it) {
            var O = toIndexedObject(it);
            var keys = objectKeys2(O);
            var IE_WORKAROUND = IE_BUG && objectGetPrototypeOf(O) === null;
            var length = keys.length;
            var i = 0;
            var result = [];
            var key;
            while (length > i) {
              key = keys[i++];
              if (!DESCRIPTORS || (IE_WORKAROUND ? key in O : propertyIsEnumerable(O, key))) {
                push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
              }
            }
            return result;
          };
        };
        module3.exports = {
          // `Object.entries` method
          // https://tc39.es/ecma262/#sec-object.entries
          entries: createMethod(true),
          // `Object.values` method
          // https://tc39.es/ecma262/#sec-object.values
          values: createMethod(false)
        };
      }, { "../internals/descriptors": 153, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/object-get-prototype-of": 236, "../internals/object-keys": 240, "../internals/object-property-is-enumerable": 241, "../internals/to-indexed-object": 282 }], 244: [function(require2, module3, exports3) {
        var TO_STRING_TAG_SUPPORT = require2("../internals/to-string-tag-support");
        var classof = require2("../internals/classof");
        module3.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
          return "[object " + classof(this) + "]";
        };
      }, { "../internals/classof": 138, "../internals/to-string-tag-support": 290 }], 245: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var isCallable = require2("../internals/is-callable");
        var isObject2 = require2("../internals/is-object");
        var $TypeError = TypeError;
        module3.exports = function(input, pref) {
          var fn, val;
          if (pref === "string" && isCallable(fn = input.toString) && !isObject2(val = call(fn, input)))
            return val;
          if (isCallable(fn = input.valueOf) && !isObject2(val = call(fn, input)))
            return val;
          if (pref !== "string" && isCallable(fn = input.toString) && !isObject2(val = call(fn, input)))
            return val;
          throw new $TypeError("Can't convert object to primitive value");
        };
      }, { "../internals/function-call": 177, "../internals/is-callable": 203, "../internals/is-object": 208 }], 246: [function(require2, module3, exports3) {
        var getBuiltIn = require2("../internals/get-built-in");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var getOwnPropertyNamesModule = require2("../internals/object-get-own-property-names");
        var getOwnPropertySymbolsModule = require2("../internals/object-get-own-property-symbols");
        var anObject = require2("../internals/an-object");
        var concat = uncurryThis([].concat);
        module3.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
          var keys = getOwnPropertyNamesModule.f(anObject(it));
          var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
          return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
        };
      }, { "../internals/an-object": 114, "../internals/function-uncurry-this": 181, "../internals/get-built-in": 182, "../internals/object-get-own-property-names": 234, "../internals/object-get-own-property-symbols": 235 }], 247: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        module3.exports = global3;
      }, { "../internals/global": 188 }], 248: [function(require2, module3, exports3) {
        module3.exports = function(exec) {
          try {
            return { error: false, value: exec() };
          } catch (error) {
            return { error: true, value: error };
          }
        };
      }, {}], 249: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var NativePromiseConstructor = require2("../internals/promise-native-constructor");
        var isCallable = require2("../internals/is-callable");
        var isForced = require2("../internals/is-forced");
        var inspectSource = require2("../internals/inspect-source");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var IS_BROWSER = require2("../internals/engine-is-browser");
        var IS_DENO = require2("../internals/engine-is-deno");
        var IS_PURE = require2("../internals/is-pure");
        var V8_VERSION = require2("../internals/engine-v8-version");
        var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
        var SPECIES = wellKnownSymbol("species");
        var SUBCLASSING = false;
        var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global3.PromiseRejectionEvent);
        var FORCED_PROMISE_CONSTRUCTOR = isForced("Promise", function() {
          var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
          var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
          if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
            return true;
          if (IS_PURE && !(NativePromisePrototype["catch"] && NativePromisePrototype["finally"]))
            return true;
          if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
            var promise = new NativePromiseConstructor(function(resolve2) {
              resolve2(1);
            });
            var FakePromise = function(exec) {
              exec(function() {
              }, function() {
              });
            };
            var constructor = promise.constructor = {};
            constructor[SPECIES] = FakePromise;
            SUBCLASSING = promise.then(function() {
            }) instanceof FakePromise;
            if (!SUBCLASSING)
              return true;
          }
          return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
        });
        module3.exports = {
          CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
          REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
          SUBCLASSING
        };
      }, { "../internals/engine-is-browser": 159, "../internals/engine-is-deno": 160, "../internals/engine-v8-version": 167, "../internals/global": 188, "../internals/inspect-source": 197, "../internals/is-callable": 203, "../internals/is-forced": 205, "../internals/is-pure": 210, "../internals/promise-native-constructor": 250, "../internals/well-known-symbol": 306 }], 250: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        module3.exports = global3.Promise;
      }, { "../internals/global": 188 }], 251: [function(require2, module3, exports3) {
        var anObject = require2("../internals/an-object");
        var isObject2 = require2("../internals/is-object");
        var newPromiseCapability = require2("../internals/new-promise-capability");
        module3.exports = function(C, x) {
          anObject(C);
          if (isObject2(x) && x.constructor === C)
            return x;
          var promiseCapability = newPromiseCapability.f(C);
          var resolve2 = promiseCapability.resolve;
          resolve2(x);
          return promiseCapability.promise;
        };
      }, { "../internals/an-object": 114, "../internals/is-object": 208, "../internals/new-promise-capability": 226 }], 252: [function(require2, module3, exports3) {
        var NativePromiseConstructor = require2("../internals/promise-native-constructor");
        var checkCorrectnessOfIteration = require2("../internals/check-correctness-of-iteration");
        var FORCED_PROMISE_CONSTRUCTOR = require2("../internals/promise-constructor-detection").CONSTRUCTOR;
        module3.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function(iterable) {
          NativePromiseConstructor.all(iterable).then(void 0, function() {
          });
        });
      }, { "../internals/check-correctness-of-iteration": 136, "../internals/promise-constructor-detection": 249, "../internals/promise-native-constructor": 250 }], 253: [function(require2, module3, exports3) {
        var defineProperty = require2("../internals/object-define-property").f;
        module3.exports = function(Target, Source, key) {
          key in Target || defineProperty(Target, key, {
            configurable: true,
            get: function() {
              return Source[key];
            },
            set: function(it) {
              Source[key] = it;
            }
          });
        };
      }, { "../internals/object-define-property": 231 }], 254: [function(require2, module3, exports3) {
        var Queue = function() {
          this.head = null;
          this.tail = null;
        };
        Queue.prototype = {
          add: function(item) {
            var entry = { item, next: null };
            var tail = this.tail;
            if (tail)
              tail.next = entry;
            else
              this.head = entry;
            this.tail = entry;
          },
          get: function() {
            var entry = this.head;
            if (entry) {
              var next = this.head = entry.next;
              if (next === null)
                this.tail = null;
              return entry.item;
            }
          }
        };
        module3.exports = Queue;
      }, {}], 255: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var anObject = require2("../internals/an-object");
        var isCallable = require2("../internals/is-callable");
        var classof = require2("../internals/classof-raw");
        var regexpExec = require2("../internals/regexp-exec");
        var $TypeError = TypeError;
        module3.exports = function(R, S) {
          var exec = R.exec;
          if (isCallable(exec)) {
            var result = call(exec, R, S);
            if (result !== null)
              anObject(result);
            return result;
          }
          if (classof(R) === "RegExp")
            return call(regexpExec, R, S);
          throw new $TypeError("RegExp#exec called on incompatible receiver");
        };
      }, { "../internals/an-object": 114, "../internals/classof-raw": 137, "../internals/function-call": 177, "../internals/is-callable": 203, "../internals/regexp-exec": 256 }], 256: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var toString = require2("../internals/to-string");
        var regexpFlags = require2("../internals/regexp-flags");
        var stickyHelpers = require2("../internals/regexp-sticky-helpers");
        var shared = require2("../internals/shared");
        var create2 = require2("../internals/object-create");
        var getInternalState = require2("../internals/internal-state").get;
        var UNSUPPORTED_DOT_ALL = require2("../internals/regexp-unsupported-dot-all");
        var UNSUPPORTED_NCG = require2("../internals/regexp-unsupported-ncg");
        var nativeReplace = shared("native-string-replace", String.prototype.replace);
        var nativeExec = RegExp.prototype.exec;
        var patchedExec = nativeExec;
        var charAt = uncurryThis("".charAt);
        var indexOf = uncurryThis("".indexOf);
        var replace = uncurryThis("".replace);
        var stringSlice = uncurryThis("".slice);
        var UPDATES_LAST_INDEX_WRONG = function() {
          var re1 = /a/;
          var re2 = /b*/g;
          call(nativeExec, re1, "a");
          call(nativeExec, re2, "a");
          return re1.lastIndex !== 0 || re2.lastIndex !== 0;
        }();
        var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;
        var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
        var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;
        if (PATCH) {
          patchedExec = function exec(string) {
            var re = this;
            var state = getInternalState(re);
            var str = toString(string);
            var raw = state.raw;
            var result, reCopy, lastIndex, match, i, object, group;
            if (raw) {
              raw.lastIndex = re.lastIndex;
              result = call(patchedExec, raw, str);
              re.lastIndex = raw.lastIndex;
              return result;
            }
            var groups = state.groups;
            var sticky = UNSUPPORTED_Y && re.sticky;
            var flags = call(regexpFlags, re);
            var source = re.source;
            var charsAdded = 0;
            var strCopy = str;
            if (sticky) {
              flags = replace(flags, "y", "");
              if (indexOf(flags, "g") === -1) {
                flags += "g";
              }
              strCopy = stringSlice(str, re.lastIndex);
              if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== "\n")) {
                source = "(?: " + source + ")";
                strCopy = " " + strCopy;
                charsAdded++;
              }
              reCopy = new RegExp("^(?:" + source + ")", flags);
            }
            if (NPCG_INCLUDED) {
              reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
            }
            if (UPDATES_LAST_INDEX_WRONG)
              lastIndex = re.lastIndex;
            match = call(nativeExec, sticky ? reCopy : re, strCopy);
            if (sticky) {
              if (match) {
                match.input = stringSlice(match.input, charsAdded);
                match[0] = stringSlice(match[0], charsAdded);
                match.index = re.lastIndex;
                re.lastIndex += match[0].length;
              } else
                re.lastIndex = 0;
            } else if (UPDATES_LAST_INDEX_WRONG && match) {
              re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
            }
            if (NPCG_INCLUDED && match && match.length > 1) {
              call(nativeReplace, match[0], reCopy, function() {
                for (i = 1; i < arguments.length - 2; i++) {
                  if (arguments[i] === void 0)
                    match[i] = void 0;
                }
              });
            }
            if (match && groups) {
              match.groups = object = create2(null);
              for (i = 0; i < groups.length; i++) {
                group = groups[i];
                object[group[0]] = match[group[1]];
              }
            }
            return match;
          };
        }
        module3.exports = patchedExec;
      }, { "../internals/function-call": 177, "../internals/function-uncurry-this": 181, "../internals/internal-state": 199, "../internals/object-create": 229, "../internals/regexp-flags": 257, "../internals/regexp-sticky-helpers": 259, "../internals/regexp-unsupported-dot-all": 260, "../internals/regexp-unsupported-ncg": 261, "../internals/shared": 269, "../internals/to-string": 291 }], 257: [function(require2, module3, exports3) {
        var anObject = require2("../internals/an-object");
        module3.exports = function() {
          var that = anObject(this);
          var result = "";
          if (that.hasIndices)
            result += "d";
          if (that.global)
            result += "g";
          if (that.ignoreCase)
            result += "i";
          if (that.multiline)
            result += "m";
          if (that.dotAll)
            result += "s";
          if (that.unicode)
            result += "u";
          if (that.unicodeSets)
            result += "v";
          if (that.sticky)
            result += "y";
          return result;
        };
      }, { "../internals/an-object": 114 }], 258: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var hasOwn2 = require2("../internals/has-own-property");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var regExpFlags = require2("../internals/regexp-flags");
        var RegExpPrototype = RegExp.prototype;
        module3.exports = function(R) {
          var flags = R.flags;
          return flags === void 0 && !("flags" in RegExpPrototype) && !hasOwn2(R, "flags") && isPrototypeOf(RegExpPrototype, R) ? call(regExpFlags, R) : flags;
        };
      }, { "../internals/function-call": 177, "../internals/has-own-property": 189, "../internals/object-is-prototype-of": 238, "../internals/regexp-flags": 257 }], 259: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        var global3 = require2("../internals/global");
        var $RegExp = global3.RegExp;
        var UNSUPPORTED_Y = fails(function() {
          var re = $RegExp("a", "y");
          re.lastIndex = 2;
          return re.exec("abcd") !== null;
        });
        var MISSED_STICKY = UNSUPPORTED_Y || fails(function() {
          return !$RegExp("a", "y").sticky;
        });
        var BROKEN_CARET = UNSUPPORTED_Y || fails(function() {
          var re = $RegExp("^r", "gy");
          re.lastIndex = 2;
          return re.exec("str") !== null;
        });
        module3.exports = {
          BROKEN_CARET,
          MISSED_STICKY,
          UNSUPPORTED_Y
        };
      }, { "../internals/fails": 171, "../internals/global": 188 }], 260: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        var global3 = require2("../internals/global");
        var $RegExp = global3.RegExp;
        module3.exports = fails(function() {
          var re = $RegExp(".", "s");
          return !(re.dotAll && re.test("\n") && re.flags === "s");
        });
      }, { "../internals/fails": 171, "../internals/global": 188 }], 261: [function(require2, module3, exports3) {
        var fails = require2("../internals/fails");
        var global3 = require2("../internals/global");
        var $RegExp = global3.RegExp;
        module3.exports = fails(function() {
          var re = $RegExp("(?<a>b)", "g");
          return re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc";
        });
      }, { "../internals/fails": 171, "../internals/global": 188 }], 262: [function(require2, module3, exports3) {
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var $TypeError = TypeError;
        module3.exports = function(it) {
          if (isNullOrUndefined(it))
            throw new $TypeError("Can't call method on " + it);
          return it;
        };
      }, { "../internals/is-null-or-undefined": 207 }], 263: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var DESCRIPTORS = require2("../internals/descriptors");
        var getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor;
        module3.exports = function(name) {
          if (!DESCRIPTORS)
            return global3[name];
          var descriptor = getOwnPropertyDescriptor2(global3, name);
          return descriptor && descriptor.value;
        };
      }, { "../internals/descriptors": 153, "../internals/global": 188 }], 264: [function(require2, module3, exports3) {
        module3.exports = Object.is || function is(x, y) {
          return x === y ? x !== 0 || 1 / x === 1 / y : x !== x && y !== y;
        };
      }, {}], 265: [function(require2, module3, exports3) {
        var getBuiltIn = require2("../internals/get-built-in");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var DESCRIPTORS = require2("../internals/descriptors");
        var SPECIES = wellKnownSymbol("species");
        module3.exports = function(CONSTRUCTOR_NAME) {
          var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
          if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
            defineBuiltInAccessor(Constructor, SPECIES, {
              configurable: true,
              get: function() {
                return this;
              }
            });
          }
        };
      }, { "../internals/define-built-in-accessor": 148, "../internals/descriptors": 153, "../internals/get-built-in": 182, "../internals/well-known-symbol": 306 }], 266: [function(require2, module3, exports3) {
        var defineProperty = require2("../internals/object-define-property").f;
        var hasOwn2 = require2("../internals/has-own-property");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        module3.exports = function(target, TAG, STATIC) {
          if (target && !STATIC)
            target = target.prototype;
          if (target && !hasOwn2(target, TO_STRING_TAG)) {
            defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
          }
        };
      }, { "../internals/has-own-property": 189, "../internals/object-define-property": 231, "../internals/well-known-symbol": 306 }], 267: [function(require2, module3, exports3) {
        var shared = require2("../internals/shared");
        var uid2 = require2("../internals/uid");
        var keys = shared("keys");
        module3.exports = function(key) {
          return keys[key] || (keys[key] = uid2(key));
        };
      }, { "../internals/shared": 269, "../internals/uid": 299 }], 268: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var defineGlobalProperty = require2("../internals/define-global-property");
        var SHARED = "__core-js_shared__";
        var store = global3[SHARED] || defineGlobalProperty(SHARED, {});
        module3.exports = store;
      }, { "../internals/define-global-property": 151, "../internals/global": 188 }], 269: [function(require2, module3, exports3) {
        var IS_PURE = require2("../internals/is-pure");
        var store = require2("../internals/shared-store");
        (module3.exports = function(key, value) {
          return store[key] || (store[key] = value !== void 0 ? value : {});
        })("versions", []).push({
          version: "3.35.0",
          mode: IS_PURE ? "pure" : "global",
          copyright: "© 2014-2023 Denis Pushkarev (zloirock.ru)",
          license: "https://github.com/zloirock/core-js/blob/v3.35.0/LICENSE",
          source: "https://github.com/zloirock/core-js"
        });
      }, { "../internals/is-pure": 210, "../internals/shared-store": 268 }], 270: [function(require2, module3, exports3) {
        var anObject = require2("../internals/an-object");
        var aConstructor = require2("../internals/a-constructor");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var SPECIES = wellKnownSymbol("species");
        module3.exports = function(O, defaultConstructor) {
          var C = anObject(O).constructor;
          var S;
          return C === void 0 || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
        };
      }, { "../internals/a-constructor": 109, "../internals/an-object": 114, "../internals/is-null-or-undefined": 207, "../internals/well-known-symbol": 306 }], 271: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var toString = require2("../internals/to-string");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var charAt = uncurryThis("".charAt);
        var charCodeAt = uncurryThis("".charCodeAt);
        var stringSlice = uncurryThis("".slice);
        var createMethod = function(CONVERT_TO_STRING) {
          return function($this, pos) {
            var S = toString(requireObjectCoercible($this));
            var position = toIntegerOrInfinity(pos);
            var size2 = S.length;
            var first, second;
            if (position < 0 || position >= size2)
              return CONVERT_TO_STRING ? "" : void 0;
            first = charCodeAt(S, position);
            return first < 55296 || first > 56319 || position + 1 === size2 || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
          };
        };
        module3.exports = {
          // `String.prototype.codePointAt` method
          // https://tc39.es/ecma262/#sec-string.prototype.codepointat
          codeAt: createMethod(false),
          // `String.prototype.at` method
          // https://github.com/mathiasbynens/String.prototype.at
          charAt: createMethod(true)
        };
      }, { "../internals/function-uncurry-this": 181, "../internals/require-object-coercible": 262, "../internals/to-integer-or-infinity": 283, "../internals/to-string": 291 }], 272: [function(require2, module3, exports3) {
        var PROPER_FUNCTION_NAME = require2("../internals/function-name").PROPER;
        var fails = require2("../internals/fails");
        var whitespaces = require2("../internals/whitespaces");
        var non = "​᠎";
        module3.exports = function(METHOD_NAME) {
          return fails(function() {
            return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
          });
        };
      }, { "../internals/fails": 171, "../internals/function-name": 178, "../internals/whitespaces": 307 }], 273: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var toString = require2("../internals/to-string");
        var whitespaces = require2("../internals/whitespaces");
        var replace = uncurryThis("".replace);
        var ltrim = RegExp("^[" + whitespaces + "]+");
        var rtrim2 = RegExp("(^|[^" + whitespaces + "])[" + whitespaces + "]+$");
        var createMethod = function(TYPE) {
          return function($this) {
            var string = toString(requireObjectCoercible($this));
            if (TYPE & 1)
              string = replace(string, ltrim, "");
            if (TYPE & 2)
              string = replace(string, rtrim2, "$1");
            return string;
          };
        };
        module3.exports = {
          // `String.prototype.{ trimLeft, trimStart }` methods
          // https://tc39.es/ecma262/#sec-string.prototype.trimstart
          start: createMethod(1),
          // `String.prototype.{ trimRight, trimEnd }` methods
          // https://tc39.es/ecma262/#sec-string.prototype.trimend
          end: createMethod(2),
          // `String.prototype.trim` method
          // https://tc39.es/ecma262/#sec-string.prototype.trim
          trim: createMethod(3)
        };
      }, { "../internals/function-uncurry-this": 181, "../internals/require-object-coercible": 262, "../internals/to-string": 291, "../internals/whitespaces": 307 }], 274: [function(require2, module3, exports3) {
        var V8_VERSION = require2("../internals/engine-v8-version");
        var fails = require2("../internals/fails");
        var global3 = require2("../internals/global");
        var $String = global3.String;
        module3.exports = !!Object.getOwnPropertySymbols && !fails(function() {
          var symbol = Symbol("symbol detection");
          return !$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
          !Symbol.sham && V8_VERSION && V8_VERSION < 41;
        });
      }, { "../internals/engine-v8-version": 167, "../internals/fails": 171, "../internals/global": 188 }], 275: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var getBuiltIn = require2("../internals/get-built-in");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var defineBuiltIn = require2("../internals/define-built-in");
        module3.exports = function() {
          var Symbol2 = getBuiltIn("Symbol");
          var SymbolPrototype = Symbol2 && Symbol2.prototype;
          var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
          var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
          if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
            defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function(hint) {
              return call(valueOf, this);
            }, { arity: 1 });
          }
        };
      }, { "../internals/define-built-in": 149, "../internals/function-call": 177, "../internals/get-built-in": 182, "../internals/well-known-symbol": 306 }], 276: [function(require2, module3, exports3) {
        var NATIVE_SYMBOL = require2("../internals/symbol-constructor-detection");
        module3.exports = NATIVE_SYMBOL && !!Symbol["for"] && !!Symbol.keyFor;
      }, { "../internals/symbol-constructor-detection": 274 }], 277: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var apply2 = require2("../internals/function-apply");
        var bind = require2("../internals/function-bind-context");
        var isCallable = require2("../internals/is-callable");
        var hasOwn2 = require2("../internals/has-own-property");
        var fails = require2("../internals/fails");
        var html2 = require2("../internals/html");
        var arraySlice = require2("../internals/array-slice");
        var createElement = require2("../internals/document-create-element");
        var validateArgumentsLength = require2("../internals/validate-arguments-length");
        var IS_IOS = require2("../internals/engine-is-ios");
        var IS_NODE = require2("../internals/engine-is-node");
        var set2 = global3.setImmediate;
        var clear2 = global3.clearImmediate;
        var process = global3.process;
        var Dispatch = global3.Dispatch;
        var Function2 = global3.Function;
        var MessageChannel = global3.MessageChannel;
        var String2 = global3.String;
        var counter = 0;
        var queue2 = {};
        var ONREADYSTATECHANGE = "onreadystatechange";
        var $location, defer, channel, port;
        fails(function() {
          $location = global3.location;
        });
        var run = function(id) {
          if (hasOwn2(queue2, id)) {
            var fn = queue2[id];
            delete queue2[id];
            fn();
          }
        };
        var runner = function(id) {
          return function() {
            run(id);
          };
        };
        var eventListener = function(event) {
          run(event.data);
        };
        var globalPostMessageDefer = function(id) {
          global3.postMessage(String2(id), $location.protocol + "//" + $location.host);
        };
        if (!set2 || !clear2) {
          set2 = function setImmediate(handler) {
            validateArgumentsLength(arguments.length, 1);
            var fn = isCallable(handler) ? handler : Function2(handler);
            var args = arraySlice(arguments, 1);
            queue2[++counter] = function() {
              apply2(fn, void 0, args);
            };
            defer(counter);
            return counter;
          };
          clear2 = function clearImmediate(id) {
            delete queue2[id];
          };
          if (IS_NODE) {
            defer = function(id) {
              process.nextTick(runner(id));
            };
          } else if (Dispatch && Dispatch.now) {
            defer = function(id) {
              Dispatch.now(runner(id));
            };
          } else if (MessageChannel && !IS_IOS) {
            channel = new MessageChannel();
            port = channel.port2;
            channel.port1.onmessage = eventListener;
            defer = bind(port.postMessage, port);
          } else if (global3.addEventListener && isCallable(global3.postMessage) && !global3.importScripts && $location && $location.protocol !== "file:" && !fails(globalPostMessageDefer)) {
            defer = globalPostMessageDefer;
            global3.addEventListener("message", eventListener, false);
          } else if (ONREADYSTATECHANGE in createElement("script")) {
            defer = function(id) {
              html2.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
                html2.removeChild(this);
                run(id);
              };
            };
          } else {
            defer = function(id) {
              setTimeout(runner(id), 0);
            };
          }
        }
        module3.exports = {
          set: set2,
          clear: clear2
        };
      }, { "../internals/array-slice": 131, "../internals/document-create-element": 154, "../internals/engine-is-ios": 163, "../internals/engine-is-node": 164, "../internals/fails": 171, "../internals/function-apply": 174, "../internals/function-bind-context": 175, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/html": 192, "../internals/is-callable": 203, "../internals/validate-arguments-length": 302 }], 278: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        module3.exports = uncurryThis(1 .valueOf);
      }, { "../internals/function-uncurry-this": 181 }], 279: [function(require2, module3, exports3) {
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var max = Math.max;
        var min = Math.min;
        module3.exports = function(index2, length) {
          var integer = toIntegerOrInfinity(index2);
          return integer < 0 ? max(integer + length, 0) : min(integer, length);
        };
      }, { "../internals/to-integer-or-infinity": 283 }], 280: [function(require2, module3, exports3) {
        var toPrimitive = require2("../internals/to-primitive");
        var $TypeError = TypeError;
        module3.exports = function(argument) {
          var prim = toPrimitive(argument, "number");
          if (typeof prim == "number")
            throw new $TypeError("Can't convert number to bigint");
          return BigInt(prim);
        };
      }, { "../internals/to-primitive": 288 }], 281: [function(require2, module3, exports3) {
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var toLength = require2("../internals/to-length");
        var $RangeError = RangeError;
        module3.exports = function(it) {
          if (it === void 0)
            return 0;
          var number = toIntegerOrInfinity(it);
          var length = toLength(number);
          if (number !== length)
            throw new $RangeError("Wrong length or index");
          return length;
        };
      }, { "../internals/to-integer-or-infinity": 283, "../internals/to-length": 284 }], 282: [function(require2, module3, exports3) {
        var IndexedObject = require2("../internals/indexed-object");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        module3.exports = function(it) {
          return IndexedObject(requireObjectCoercible(it));
        };
      }, { "../internals/indexed-object": 195, "../internals/require-object-coercible": 262 }], 283: [function(require2, module3, exports3) {
        var trunc = require2("../internals/math-trunc");
        module3.exports = function(argument) {
          var number = +argument;
          return number !== number || number === 0 ? 0 : trunc(number);
        };
      }, { "../internals/math-trunc": 224 }], 284: [function(require2, module3, exports3) {
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var min = Math.min;
        module3.exports = function(argument) {
          return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
        };
      }, { "../internals/to-integer-or-infinity": 283 }], 285: [function(require2, module3, exports3) {
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var $Object = Object;
        module3.exports = function(argument) {
          return $Object(requireObjectCoercible(argument));
        };
      }, { "../internals/require-object-coercible": 262 }], 286: [function(require2, module3, exports3) {
        var toPositiveInteger = require2("../internals/to-positive-integer");
        var $RangeError = RangeError;
        module3.exports = function(it, BYTES) {
          var offset = toPositiveInteger(it);
          if (offset % BYTES)
            throw new $RangeError("Wrong offset");
          return offset;
        };
      }, { "../internals/to-positive-integer": 287 }], 287: [function(require2, module3, exports3) {
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var $RangeError = RangeError;
        module3.exports = function(it) {
          var result = toIntegerOrInfinity(it);
          if (result < 0)
            throw new $RangeError("The argument can't be less than 0");
          return result;
        };
      }, { "../internals/to-integer-or-infinity": 283 }], 288: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var isObject2 = require2("../internals/is-object");
        var isSymbol2 = require2("../internals/is-symbol");
        var getMethod = require2("../internals/get-method");
        var ordinaryToPrimitive = require2("../internals/ordinary-to-primitive");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var $TypeError = TypeError;
        var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
        module3.exports = function(input, pref) {
          if (!isObject2(input) || isSymbol2(input))
            return input;
          var exoticToPrim = getMethod(input, TO_PRIMITIVE);
          var result;
          if (exoticToPrim) {
            if (pref === void 0)
              pref = "default";
            result = call(exoticToPrim, input, pref);
            if (!isObject2(result) || isSymbol2(result))
              return result;
            throw new $TypeError("Can't convert object to primitive value");
          }
          if (pref === void 0)
            pref = "number";
          return ordinaryToPrimitive(input, pref);
        };
      }, { "../internals/function-call": 177, "../internals/get-method": 186, "../internals/is-object": 208, "../internals/is-symbol": 212, "../internals/ordinary-to-primitive": 245, "../internals/well-known-symbol": 306 }], 289: [function(require2, module3, exports3) {
        var toPrimitive = require2("../internals/to-primitive");
        var isSymbol2 = require2("../internals/is-symbol");
        module3.exports = function(argument) {
          var key = toPrimitive(argument, "string");
          return isSymbol2(key) ? key : key + "";
        };
      }, { "../internals/is-symbol": 212, "../internals/to-primitive": 288 }], 290: [function(require2, module3, exports3) {
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var test = {};
        test[TO_STRING_TAG] = "z";
        module3.exports = String(test) === "[object z]";
      }, { "../internals/well-known-symbol": 306 }], 291: [function(require2, module3, exports3) {
        var classof = require2("../internals/classof");
        var $String = String;
        module3.exports = function(argument) {
          if (classof(argument) === "Symbol")
            throw new TypeError("Cannot convert a Symbol value to a string");
          return $String(argument);
        };
      }, { "../internals/classof": 138 }], 292: [function(require2, module3, exports3) {
        var round = Math.round;
        module3.exports = function(it) {
          var value = round(it);
          return value < 0 ? 0 : value > 255 ? 255 : value & 255;
        };
      }, {}], 293: [function(require2, module3, exports3) {
        var $String = String;
        module3.exports = function(argument) {
          try {
            return $String(argument);
          } catch (error) {
            return "Object";
          }
        };
      }, {}], 294: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var global3 = require2("../internals/global");
        var call = require2("../internals/function-call");
        var DESCRIPTORS = require2("../internals/descriptors");
        var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require2("../internals/typed-array-constructors-require-wrappers");
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var ArrayBufferModule = require2("../internals/array-buffer");
        var anInstance = require2("../internals/an-instance");
        var createPropertyDescriptor = require2("../internals/create-property-descriptor");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var isIntegralNumber = require2("../internals/is-integral-number");
        var toLength = require2("../internals/to-length");
        var toIndex = require2("../internals/to-index");
        var toOffset = require2("../internals/to-offset");
        var toUint8Clamped = require2("../internals/to-uint8-clamped");
        var toPropertyKey = require2("../internals/to-property-key");
        var hasOwn2 = require2("../internals/has-own-property");
        var classof = require2("../internals/classof");
        var isObject2 = require2("../internals/is-object");
        var isSymbol2 = require2("../internals/is-symbol");
        var create2 = require2("../internals/object-create");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var setPrototypeOf2 = require2("../internals/object-set-prototype-of");
        var getOwnPropertyNames = require2("../internals/object-get-own-property-names").f;
        var typedArrayFrom = require2("../internals/typed-array-from");
        var forEach = require2("../internals/array-iteration").forEach;
        var setSpecies = require2("../internals/set-species");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var definePropertyModule = require2("../internals/object-define-property");
        var getOwnPropertyDescriptorModule = require2("../internals/object-get-own-property-descriptor");
        var arrayFromConstructorAndList = require2("../internals/array-from-constructor-and-list");
        var InternalStateModule = require2("../internals/internal-state");
        var inheritIfRequired = require2("../internals/inherit-if-required");
        var getInternalState = InternalStateModule.get;
        var setInternalState = InternalStateModule.set;
        var enforceInternalState = InternalStateModule.enforce;
        var nativeDefineProperty = definePropertyModule.f;
        var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var RangeError2 = global3.RangeError;
        var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
        var ArrayBufferPrototype = ArrayBuffer2.prototype;
        var DataView2 = ArrayBufferModule.DataView;
        var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
        var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
        var TypedArray = ArrayBufferViewCore.TypedArray;
        var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
        var isTypedArray = ArrayBufferViewCore.isTypedArray;
        var BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
        var WRONG_LENGTH = "Wrong length";
        var addGetter = function(it, key) {
          defineBuiltInAccessor(it, key, {
            configurable: true,
            get: function() {
              return getInternalState(this)[key];
            }
          });
        };
        var isArrayBuffer = function(it) {
          var klass;
          return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof(it)) === "ArrayBuffer" || klass === "SharedArrayBuffer";
        };
        var isTypedArrayIndex = function(target, key) {
          return isTypedArray(target) && !isSymbol2(key) && key in target && isIntegralNumber(+key) && key >= 0;
        };
        var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor2(target, key) {
          key = toPropertyKey(key);
          return isTypedArrayIndex(target, key) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
        };
        var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
          key = toPropertyKey(key);
          if (isTypedArrayIndex(target, key) && isObject2(descriptor) && hasOwn2(descriptor, "value") && !hasOwn2(descriptor, "get") && !hasOwn2(descriptor, "set") && !descriptor.configurable && (!hasOwn2(descriptor, "writable") || descriptor.writable) && (!hasOwn2(descriptor, "enumerable") || descriptor.enumerable)) {
            target[key] = descriptor.value;
            return target;
          }
          return nativeDefineProperty(target, key, descriptor);
        };
        if (DESCRIPTORS) {
          if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
            definePropertyModule.f = wrappedDefineProperty;
            addGetter(TypedArrayPrototype, "buffer");
            addGetter(TypedArrayPrototype, "byteOffset");
            addGetter(TypedArrayPrototype, "byteLength");
            addGetter(TypedArrayPrototype, "length");
          }
          $({ target: "Object", stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
            getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
            defineProperty: wrappedDefineProperty
          });
          module3.exports = function(TYPE, wrapper, CLAMPED) {
            var BYTES = TYPE.match(/\d+/)[0] / 8;
            var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? "Clamped" : "") + "Array";
            var GETTER = "get" + TYPE;
            var SETTER = "set" + TYPE;
            var NativeTypedArrayConstructor = global3[CONSTRUCTOR_NAME];
            var TypedArrayConstructor = NativeTypedArrayConstructor;
            var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
            var exported = {};
            var getter = function(that, index2) {
              var data = getInternalState(that);
              return data.view[GETTER](index2 * BYTES + data.byteOffset, true);
            };
            var setter = function(that, index2, value) {
              var data = getInternalState(that);
              data.view[SETTER](index2 * BYTES + data.byteOffset, CLAMPED ? toUint8Clamped(value) : value, true);
            };
            var addElement = function(that, index2) {
              nativeDefineProperty(that, index2, {
                get: function() {
                  return getter(this, index2);
                },
                set: function(value) {
                  return setter(this, index2, value);
                },
                enumerable: true
              });
            };
            if (!NATIVE_ARRAY_BUFFER_VIEWS) {
              TypedArrayConstructor = wrapper(function(that, data, offset, $length) {
                anInstance(that, TypedArrayConstructorPrototype);
                var index2 = 0;
                var byteOffset = 0;
                var buffer2, byteLength, length;
                if (!isObject2(data)) {
                  length = toIndex(data);
                  byteLength = length * BYTES;
                  buffer2 = new ArrayBuffer2(byteLength);
                } else if (isArrayBuffer(data)) {
                  buffer2 = data;
                  byteOffset = toOffset(offset, BYTES);
                  var $len = data.byteLength;
                  if ($length === void 0) {
                    if ($len % BYTES)
                      throw new RangeError2(WRONG_LENGTH);
                    byteLength = $len - byteOffset;
                    if (byteLength < 0)
                      throw new RangeError2(WRONG_LENGTH);
                  } else {
                    byteLength = toLength($length) * BYTES;
                    if (byteLength + byteOffset > $len)
                      throw new RangeError2(WRONG_LENGTH);
                  }
                  length = byteLength / BYTES;
                } else if (isTypedArray(data)) {
                  return arrayFromConstructorAndList(TypedArrayConstructor, data);
                } else {
                  return call(typedArrayFrom, TypedArrayConstructor, data);
                }
                setInternalState(that, {
                  buffer: buffer2,
                  byteOffset,
                  byteLength,
                  length,
                  view: new DataView2(buffer2)
                });
                while (index2 < length)
                  addElement(that, index2++);
              });
              if (setPrototypeOf2)
                setPrototypeOf2(TypedArrayConstructor, TypedArray);
              TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create2(TypedArrayPrototype);
            } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
              TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {
                anInstance(dummy, TypedArrayConstructorPrototype);
                return inheritIfRequired(function() {
                  if (!isObject2(data))
                    return new NativeTypedArrayConstructor(toIndex(data));
                  if (isArrayBuffer(data))
                    return $length !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
                  if (isTypedArray(data))
                    return arrayFromConstructorAndList(TypedArrayConstructor, data);
                  return call(typedArrayFrom, TypedArrayConstructor, data);
                }(), dummy, TypedArrayConstructor);
              });
              if (setPrototypeOf2)
                setPrototypeOf2(TypedArrayConstructor, TypedArray);
              forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function(key) {
                if (!(key in TypedArrayConstructor)) {
                  createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
                }
              });
              TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
            }
            if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
              createNonEnumerableProperty(TypedArrayConstructorPrototype, "constructor", TypedArrayConstructor);
            }
            enforceInternalState(TypedArrayConstructorPrototype).TypedArrayConstructor = TypedArrayConstructor;
            if (TYPED_ARRAY_TAG) {
              createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
            }
            var FORCED = TypedArrayConstructor !== NativeTypedArrayConstructor;
            exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
            $({ global: true, constructor: true, forced: FORCED, sham: !NATIVE_ARRAY_BUFFER_VIEWS }, exported);
            if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
              createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
            }
            if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
              createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
            }
            setSpecies(CONSTRUCTOR_NAME);
          };
        } else
          module3.exports = function() {
          };
      }, { "../internals/an-instance": 113, "../internals/array-buffer": 118, "../internals/array-buffer-view-core": 117, "../internals/array-from-constructor-and-list": 122, "../internals/array-iteration": 125, "../internals/classof": 138, "../internals/create-non-enumerable-property": 145, "../internals/create-property-descriptor": 146, "../internals/define-built-in-accessor": 148, "../internals/descriptors": 153, "../internals/export": 170, "../internals/function-call": 177, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/inherit-if-required": 196, "../internals/internal-state": 199, "../internals/is-integral-number": 206, "../internals/is-object": 208, "../internals/is-symbol": 212, "../internals/object-create": 229, "../internals/object-define-property": 231, "../internals/object-get-own-property-descriptor": 232, "../internals/object-get-own-property-names": 234, "../internals/object-is-prototype-of": 238, "../internals/object-set-prototype-of": 242, "../internals/set-species": 265, "../internals/to-index": 281, "../internals/to-length": 284, "../internals/to-offset": 286, "../internals/to-property-key": 289, "../internals/to-uint8-clamped": 292, "../internals/typed-array-constructors-require-wrappers": 295, "../internals/typed-array-from": 297 }], 295: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var fails = require2("../internals/fails");
        var checkCorrectnessOfIteration = require2("../internals/check-correctness-of-iteration");
        var NATIVE_ARRAY_BUFFER_VIEWS = require2("../internals/array-buffer-view-core").NATIVE_ARRAY_BUFFER_VIEWS;
        var ArrayBuffer2 = global3.ArrayBuffer;
        var Int8Array2 = global3.Int8Array;
        module3.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function() {
          Int8Array2(1);
        }) || !fails(function() {
          new Int8Array2(-1);
        }) || !checkCorrectnessOfIteration(function(iterable) {
          new Int8Array2();
          new Int8Array2(null);
          new Int8Array2(1.5);
          new Int8Array2(iterable);
        }, true) || fails(function() {
          return new Int8Array2(new ArrayBuffer2(2), 1, void 0).length !== 1;
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/check-correctness-of-iteration": 136, "../internals/fails": 171, "../internals/global": 188 }], 296: [function(require2, module3, exports3) {
        var arrayFromConstructorAndList = require2("../internals/array-from-constructor-and-list");
        var typedArraySpeciesConstructor = require2("../internals/typed-array-species-constructor");
        module3.exports = function(instance, list2) {
          return arrayFromConstructorAndList(typedArraySpeciesConstructor(instance), list2);
        };
      }, { "../internals/array-from-constructor-and-list": 122, "../internals/typed-array-species-constructor": 298 }], 297: [function(require2, module3, exports3) {
        var bind = require2("../internals/function-bind-context");
        var call = require2("../internals/function-call");
        var aConstructor = require2("../internals/a-constructor");
        var toObject = require2("../internals/to-object");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var getIterator = require2("../internals/get-iterator");
        var getIteratorMethod = require2("../internals/get-iterator-method");
        var isArrayIteratorMethod = require2("../internals/is-array-iterator-method");
        var isBigIntArray = require2("../internals/is-big-int-array");
        var aTypedArrayConstructor = require2("../internals/array-buffer-view-core").aTypedArrayConstructor;
        var toBigInt = require2("../internals/to-big-int");
        module3.exports = function from(source) {
          var C = aConstructor(this);
          var O = toObject(source);
          var argumentsLength = arguments.length;
          var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
          var mapping = mapfn !== void 0;
          var iteratorMethod = getIteratorMethod(O);
          var i, length, result, thisIsBigIntArray, value, step, iterator, next;
          if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
            iterator = getIterator(O, iteratorMethod);
            next = iterator.next;
            O = [];
            while (!(step = call(next, iterator)).done) {
              O.push(step.value);
            }
          }
          if (mapping && argumentsLength > 2) {
            mapfn = bind(mapfn, arguments[2]);
          }
          length = lengthOfArrayLike(O);
          result = new (aTypedArrayConstructor(C))(length);
          thisIsBigIntArray = isBigIntArray(result);
          for (i = 0; length > i; i++) {
            value = mapping ? mapfn(O[i], i) : O[i];
            result[i] = thisIsBigIntArray ? toBigInt(value) : +value;
          }
          return result;
        };
      }, { "../internals/a-constructor": 109, "../internals/array-buffer-view-core": 117, "../internals/function-bind-context": 175, "../internals/function-call": 177, "../internals/get-iterator": 184, "../internals/get-iterator-method": 183, "../internals/is-array-iterator-method": 200, "../internals/is-big-int-array": 202, "../internals/length-of-array-like": 219, "../internals/to-big-int": 280, "../internals/to-object": 285 }], 298: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var speciesConstructor = require2("../internals/species-constructor");
        var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
        var getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;
        module3.exports = function(originalArray) {
          return aTypedArrayConstructor(speciesConstructor(originalArray, getTypedArrayConstructor(originalArray)));
        };
      }, { "../internals/array-buffer-view-core": 117, "../internals/species-constructor": 270 }], 299: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var id = 0;
        var postfix = Math.random();
        var toString = uncurryThis(1 .toString);
        module3.exports = function(key) {
          return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
        };
      }, { "../internals/function-uncurry-this": 181 }], 300: [function(require2, module3, exports3) {
        var NATIVE_SYMBOL = require2("../internals/symbol-constructor-detection");
        module3.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
      }, { "../internals/symbol-constructor-detection": 274 }], 301: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var fails = require2("../internals/fails");
        module3.exports = DESCRIPTORS && fails(function() {
          return Object.defineProperty(function() {
          }, "prototype", {
            value: 42,
            writable: false
          }).prototype !== 42;
        });
      }, { "../internals/descriptors": 153, "../internals/fails": 171 }], 302: [function(require2, module3, exports3) {
        var $TypeError = TypeError;
        module3.exports = function(passed, required) {
          if (passed < required)
            throw new $TypeError("Not enough arguments");
          return passed;
        };
      }, {}], 303: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var isCallable = require2("../internals/is-callable");
        var WeakMap2 = global3.WeakMap;
        module3.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
      }, { "../internals/global": 188, "../internals/is-callable": 203 }], 304: [function(require2, module3, exports3) {
        var path = require2("../internals/path");
        var hasOwn2 = require2("../internals/has-own-property");
        var wrappedWellKnownSymbolModule = require2("../internals/well-known-symbol-wrapped");
        var defineProperty = require2("../internals/object-define-property").f;
        module3.exports = function(NAME) {
          var Symbol2 = path.Symbol || (path.Symbol = {});
          if (!hasOwn2(Symbol2, NAME))
            defineProperty(Symbol2, NAME, {
              value: wrappedWellKnownSymbolModule.f(NAME)
            });
        };
      }, { "../internals/has-own-property": 189, "../internals/object-define-property": 231, "../internals/path": 247, "../internals/well-known-symbol-wrapped": 305 }], 305: [function(require2, module3, exports3) {
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        exports3.f = wellKnownSymbol;
      }, { "../internals/well-known-symbol": 306 }], 306: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var shared = require2("../internals/shared");
        var hasOwn2 = require2("../internals/has-own-property");
        var uid2 = require2("../internals/uid");
        var NATIVE_SYMBOL = require2("../internals/symbol-constructor-detection");
        var USE_SYMBOL_AS_UID = require2("../internals/use-symbol-as-uid");
        var Symbol2 = global3.Symbol;
        var WellKnownSymbolsStore = shared("wks");
        var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid2;
        module3.exports = function(name) {
          if (!hasOwn2(WellKnownSymbolsStore, name)) {
            WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn2(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
          }
          return WellKnownSymbolsStore[name];
        };
      }, { "../internals/global": 188, "../internals/has-own-property": 189, "../internals/shared": 269, "../internals/symbol-constructor-detection": 274, "../internals/uid": 299, "../internals/use-symbol-as-uid": 300 }], 307: [function(require2, module3, exports3) {
        module3.exports = "	\n\v\f\r                　\u2028\u2029\uFEFF";
      }, {}], 308: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var global3 = require2("../internals/global");
        var arrayBufferModule = require2("../internals/array-buffer");
        var setSpecies = require2("../internals/set-species");
        var ARRAY_BUFFER = "ArrayBuffer";
        var ArrayBuffer2 = arrayBufferModule[ARRAY_BUFFER];
        var NativeArrayBuffer = global3[ARRAY_BUFFER];
        $({ global: true, constructor: true, forced: NativeArrayBuffer !== ArrayBuffer2 }, {
          ArrayBuffer: ArrayBuffer2
        });
        setSpecies(ARRAY_BUFFER);
      }, { "../internals/array-buffer": 118, "../internals/export": 170, "../internals/global": 188, "../internals/set-species": 265 }], 309: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var uncurryThis = require2("../internals/function-uncurry-this-clause");
        var fails = require2("../internals/fails");
        var ArrayBufferModule = require2("../internals/array-buffer");
        var anObject = require2("../internals/an-object");
        var toAbsoluteIndex = require2("../internals/to-absolute-index");
        var toLength = require2("../internals/to-length");
        var speciesConstructor = require2("../internals/species-constructor");
        var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
        var DataView2 = ArrayBufferModule.DataView;
        var DataViewPrototype = DataView2.prototype;
        var nativeArrayBufferSlice = uncurryThis(ArrayBuffer2.prototype.slice);
        var getUint8 = uncurryThis(DataViewPrototype.getUint8);
        var setUint8 = uncurryThis(DataViewPrototype.setUint8);
        var INCORRECT_SLICE = fails(function() {
          return !new ArrayBuffer2(2).slice(1, void 0).byteLength;
        });
        $({ target: "ArrayBuffer", proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
          slice: function slice(start, end) {
            if (nativeArrayBufferSlice && end === void 0) {
              return nativeArrayBufferSlice(anObject(this), start);
            }
            var length = anObject(this).byteLength;
            var first = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
            var result = new (speciesConstructor(this, ArrayBuffer2))(toLength(fin - first));
            var viewSource = new DataView2(this);
            var viewTarget = new DataView2(result);
            var index2 = 0;
            while (first < fin) {
              setUint8(viewTarget, index2++, getUint8(viewSource, first++));
            }
            return result;
          }
        });
      }, { "../internals/an-object": 114, "../internals/array-buffer": 118, "../internals/export": 170, "../internals/fails": 171, "../internals/function-uncurry-this-clause": 180, "../internals/species-constructor": 270, "../internals/to-absolute-index": 279, "../internals/to-length": 284 }], 310: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var fails = require2("../internals/fails");
        var isArray2 = require2("../internals/is-array");
        var isObject2 = require2("../internals/is-object");
        var toObject = require2("../internals/to-object");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var doesNotExceedSafeInteger = require2("../internals/does-not-exceed-safe-integer");
        var createProperty = require2("../internals/create-property");
        var arraySpeciesCreate = require2("../internals/array-species-create");
        var arrayMethodHasSpeciesSupport = require2("../internals/array-method-has-species-support");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var V8_VERSION = require2("../internals/engine-v8-version");
        var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
        var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
          var array = [];
          array[IS_CONCAT_SPREADABLE] = false;
          return array.concat()[0] !== array;
        });
        var isConcatSpreadable = function(O) {
          if (!isObject2(O))
            return false;
          var spreadable = O[IS_CONCAT_SPREADABLE];
          return spreadable !== void 0 ? !!spreadable : isArray2(O);
        };
        var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport("concat");
        $({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
          // eslint-disable-next-line no-unused-vars -- required for `.length`
          concat: function concat(arg) {
            var O = toObject(this);
            var A = arraySpeciesCreate(O, 0);
            var n2 = 0;
            var i, k, length, len, E2;
            for (i = -1, length = arguments.length; i < length; i++) {
              E2 = i === -1 ? O : arguments[i];
              if (isConcatSpreadable(E2)) {
                len = lengthOfArrayLike(E2);
                doesNotExceedSafeInteger(n2 + len);
                for (k = 0; k < len; k++, n2++)
                  if (k in E2)
                    createProperty(A, n2, E2[k]);
              } else {
                doesNotExceedSafeInteger(n2 + 1);
                createProperty(A, n2++, E2);
              }
            }
            A.length = n2;
            return A;
          }
        });
      }, { "../internals/array-method-has-species-support": 127, "../internals/array-species-create": 134, "../internals/create-property": 147, "../internals/does-not-exceed-safe-integer": 155, "../internals/engine-v8-version": 167, "../internals/export": 170, "../internals/fails": 171, "../internals/is-array": 201, "../internals/is-object": 208, "../internals/length-of-array-like": 219, "../internals/to-object": 285, "../internals/well-known-symbol": 306 }], 311: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var fill = require2("../internals/array-fill");
        var addToUnscopables = require2("../internals/add-to-unscopables");
        $({ target: "Array", proto: true }, {
          fill
        });
        addToUnscopables("fill");
      }, { "../internals/add-to-unscopables": 111, "../internals/array-fill": 120, "../internals/export": 170 }], 312: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var $filter = require2("../internals/array-iteration").filter;
        var arrayMethodHasSpeciesSupport = require2("../internals/array-method-has-species-support");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
          filter: function filter(callbackfn) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
      }, { "../internals/array-iteration": 125, "../internals/array-method-has-species-support": 127, "../internals/export": 170 }], 313: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var $find = require2("../internals/array-iteration").find;
        var addToUnscopables = require2("../internals/add-to-unscopables");
        var FIND = "find";
        var SKIPS_HOLES = true;
        if (FIND in [])
          Array(1)[FIND](function() {
            SKIPS_HOLES = false;
          });
        $({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
          find: function find(callbackfn) {
            return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
        addToUnscopables(FIND);
      }, { "../internals/add-to-unscopables": 111, "../internals/array-iteration": 125, "../internals/export": 170 }], 314: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var from = require2("../internals/array-from");
        var checkCorrectnessOfIteration = require2("../internals/check-correctness-of-iteration");
        var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
          Array.from(iterable);
        });
        $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
          from
        });
      }, { "../internals/array-from": 123, "../internals/check-correctness-of-iteration": 136, "../internals/export": 170 }], 315: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var $includes = require2("../internals/array-includes").includes;
        var fails = require2("../internals/fails");
        var addToUnscopables = require2("../internals/add-to-unscopables");
        var BROKEN_ON_SPARSE = fails(function() {
          return !Array(1).includes();
        });
        $({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
          includes: function includes(el) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
        addToUnscopables("includes");
      }, { "../internals/add-to-unscopables": 111, "../internals/array-includes": 124, "../internals/export": 170, "../internals/fails": 171 }], 316: [function(require2, module3, exports3) {
        var toIndexedObject = require2("../internals/to-indexed-object");
        var addToUnscopables = require2("../internals/add-to-unscopables");
        var Iterators = require2("../internals/iterators");
        var InternalStateModule = require2("../internals/internal-state");
        var defineProperty = require2("../internals/object-define-property").f;
        var defineIterator = require2("../internals/iterator-define");
        var createIterResultObject = require2("../internals/create-iter-result-object");
        var IS_PURE = require2("../internals/is-pure");
        var DESCRIPTORS = require2("../internals/descriptors");
        var ARRAY_ITERATOR = "Array Iterator";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
        module3.exports = defineIterator(Array, "Array", function(iterated, kind) {
          setInternalState(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject(iterated),
            // target
            index: 0,
            // next index
            kind
            // kind
          });
        }, function() {
          var state = getInternalState(this);
          var target = state.target;
          var index2 = state.index++;
          if (!target || index2 >= target.length) {
            state.target = void 0;
            return createIterResultObject(void 0, true);
          }
          switch (state.kind) {
            case "keys":
              return createIterResultObject(index2, false);
            case "values":
              return createIterResultObject(target[index2], false);
          }
          return createIterResultObject([index2, target[index2]], false);
        }, "values");
        var values = Iterators.Arguments = Iterators.Array;
        addToUnscopables("keys");
        addToUnscopables("values");
        addToUnscopables("entries");
        if (!IS_PURE && DESCRIPTORS && values.name !== "values")
          try {
            defineProperty(values, "name", { value: "values" });
          } catch (error) {
          }
      }, { "../internals/add-to-unscopables": 111, "../internals/create-iter-result-object": 144, "../internals/descriptors": 153, "../internals/internal-state": 199, "../internals/is-pure": 210, "../internals/iterator-define": 216, "../internals/iterators": 218, "../internals/object-define-property": 231, "../internals/to-indexed-object": 282 }], 317: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var IndexedObject = require2("../internals/indexed-object");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var arrayMethodIsStrict = require2("../internals/array-method-is-strict");
        var nativeJoin = uncurryThis([].join);
        var ES3_STRINGS = IndexedObject !== Object;
        var FORCED = ES3_STRINGS || !arrayMethodIsStrict("join", ",");
        $({ target: "Array", proto: true, forced: FORCED }, {
          join: function join(separator) {
            return nativeJoin(toIndexedObject(this), separator === void 0 ? "," : separator);
          }
        });
      }, { "../internals/array-method-is-strict": 128, "../internals/export": 170, "../internals/function-uncurry-this": 181, "../internals/indexed-object": 195, "../internals/to-indexed-object": 282 }], 318: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var $map = require2("../internals/array-iteration").map;
        var arrayMethodHasSpeciesSupport = require2("../internals/array-method-has-species-support");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
          map: function map(callbackfn) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
      }, { "../internals/array-iteration": 125, "../internals/array-method-has-species-support": 127, "../internals/export": 170 }], 319: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var isArray2 = require2("../internals/is-array");
        var isConstructor = require2("../internals/is-constructor");
        var isObject2 = require2("../internals/is-object");
        var toAbsoluteIndex = require2("../internals/to-absolute-index");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var createProperty = require2("../internals/create-property");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var arrayMethodHasSpeciesSupport = require2("../internals/array-method-has-species-support");
        var nativeSlice = require2("../internals/array-slice");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
        var SPECIES = wellKnownSymbol("species");
        var $Array = Array;
        var max = Math.max;
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
          slice: function slice(start, end) {
            var O = toIndexedObject(this);
            var length = lengthOfArrayLike(O);
            var k = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
            var Constructor, result, n2;
            if (isArray2(O)) {
              Constructor = O.constructor;
              if (isConstructor(Constructor) && (Constructor === $Array || isArray2(Constructor.prototype))) {
                Constructor = void 0;
              } else if (isObject2(Constructor)) {
                Constructor = Constructor[SPECIES];
                if (Constructor === null)
                  Constructor = void 0;
              }
              if (Constructor === $Array || Constructor === void 0) {
                return nativeSlice(O, k, fin);
              }
            }
            result = new (Constructor === void 0 ? $Array : Constructor)(max(fin - k, 0));
            for (n2 = 0; k < fin; k++, n2++)
              if (k in O)
                createProperty(result, n2, O[k]);
            result.length = n2;
            return result;
          }
        });
      }, { "../internals/array-method-has-species-support": 127, "../internals/array-slice": 131, "../internals/create-property": 147, "../internals/export": 170, "../internals/is-array": 201, "../internals/is-constructor": 204, "../internals/is-object": 208, "../internals/length-of-array-like": 219, "../internals/to-absolute-index": 279, "../internals/to-indexed-object": 282, "../internals/well-known-symbol": 306 }], 320: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var aCallable = require2("../internals/a-callable");
        var toObject = require2("../internals/to-object");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var deletePropertyOrThrow = require2("../internals/delete-property-or-throw");
        var toString = require2("../internals/to-string");
        var fails = require2("../internals/fails");
        var internalSort = require2("../internals/array-sort");
        var arrayMethodIsStrict = require2("../internals/array-method-is-strict");
        var FF = require2("../internals/engine-ff-version");
        var IE_OR_EDGE = require2("../internals/engine-is-ie-or-edge");
        var V8 = require2("../internals/engine-v8-version");
        var WEBKIT = require2("../internals/engine-webkit-version");
        var test = [];
        var nativeSort = uncurryThis(test.sort);
        var push = uncurryThis(test.push);
        var FAILS_ON_UNDEFINED = fails(function() {
          test.sort(void 0);
        });
        var FAILS_ON_NULL = fails(function() {
          test.sort(null);
        });
        var STRICT_METHOD = arrayMethodIsStrict("sort");
        var STABLE_SORT = !fails(function() {
          if (V8)
            return V8 < 70;
          if (FF && FF > 3)
            return;
          if (IE_OR_EDGE)
            return true;
          if (WEBKIT)
            return WEBKIT < 603;
          var result = "";
          var code, chr, value, index2;
          for (code = 65; code < 76; code++) {
            chr = String.fromCharCode(code);
            switch (code) {
              case 66:
              case 69:
              case 70:
              case 72:
                value = 3;
                break;
              case 68:
              case 71:
                value = 4;
                break;
              default:
                value = 2;
            }
            for (index2 = 0; index2 < 47; index2++) {
              test.push({ k: chr + index2, v: value });
            }
          }
          test.sort(function(a, b) {
            return b.v - a.v;
          });
          for (index2 = 0; index2 < test.length; index2++) {
            chr = test[index2].k.charAt(0);
            if (result.charAt(result.length - 1) !== chr)
              result += chr;
          }
          return result !== "DGBEFHACIJK";
        });
        var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
        var getSortCompare = function(comparefn) {
          return function(x, y) {
            if (y === void 0)
              return -1;
            if (x === void 0)
              return 1;
            if (comparefn !== void 0)
              return +comparefn(x, y) || 0;
            return toString(x) > toString(y) ? 1 : -1;
          };
        };
        $({ target: "Array", proto: true, forced: FORCED }, {
          sort: function sort(comparefn) {
            if (comparefn !== void 0)
              aCallable(comparefn);
            var array = toObject(this);
            if (STABLE_SORT)
              return comparefn === void 0 ? nativeSort(array) : nativeSort(array, comparefn);
            var items = [];
            var arrayLength = lengthOfArrayLike(array);
            var itemsLength, index2;
            for (index2 = 0; index2 < arrayLength; index2++) {
              if (index2 in array)
                push(items, array[index2]);
            }
            internalSort(items, getSortCompare(comparefn));
            itemsLength = lengthOfArrayLike(items);
            index2 = 0;
            while (index2 < itemsLength)
              array[index2] = items[index2++];
            while (index2 < arrayLength)
              deletePropertyOrThrow(array, index2++);
            return array;
          }
        });
      }, { "../internals/a-callable": 108, "../internals/array-method-is-strict": 128, "../internals/array-sort": 132, "../internals/delete-property-or-throw": 152, "../internals/engine-ff-version": 158, "../internals/engine-is-ie-or-edge": 161, "../internals/engine-v8-version": 167, "../internals/engine-webkit-version": 168, "../internals/export": 170, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/length-of-array-like": 219, "../internals/to-object": 285, "../internals/to-string": 291 }], 321: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var toObject = require2("../internals/to-object");
        var toAbsoluteIndex = require2("../internals/to-absolute-index");
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var setArrayLength = require2("../internals/array-set-length");
        var doesNotExceedSafeInteger = require2("../internals/does-not-exceed-safe-integer");
        var arraySpeciesCreate = require2("../internals/array-species-create");
        var createProperty = require2("../internals/create-property");
        var deletePropertyOrThrow = require2("../internals/delete-property-or-throw");
        var arrayMethodHasSpeciesSupport = require2("../internals/array-method-has-species-support");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
        var max = Math.max;
        var min = Math.min;
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
          splice: function splice(start, deleteCount) {
            var O = toObject(this);
            var len = lengthOfArrayLike(O);
            var actualStart = toAbsoluteIndex(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from, to;
            if (argumentsLength === 0) {
              insertCount = actualDeleteCount = 0;
            } else if (argumentsLength === 1) {
              insertCount = 0;
              actualDeleteCount = len - actualStart;
            } else {
              insertCount = argumentsLength - 2;
              actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
            }
            doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
            A = arraySpeciesCreate(O, actualDeleteCount);
            for (k = 0; k < actualDeleteCount; k++) {
              from = actualStart + k;
              if (from in O)
                createProperty(A, k, O[from]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
              for (k = actualStart; k < len - actualDeleteCount; k++) {
                from = k + actualDeleteCount;
                to = k + insertCount;
                if (from in O)
                  O[to] = O[from];
                else
                  deletePropertyOrThrow(O, to);
              }
              for (k = len; k > len - actualDeleteCount + insertCount; k--)
                deletePropertyOrThrow(O, k - 1);
            } else if (insertCount > actualDeleteCount) {
              for (k = len - actualDeleteCount; k > actualStart; k--) {
                from = k + actualDeleteCount - 1;
                to = k + insertCount - 1;
                if (from in O)
                  O[to] = O[from];
                else
                  deletePropertyOrThrow(O, to);
              }
            }
            for (k = 0; k < insertCount; k++) {
              O[k + actualStart] = arguments[k + 2];
            }
            setArrayLength(O, len - actualDeleteCount + insertCount);
            return A;
          }
        });
      }, { "../internals/array-method-has-species-support": 127, "../internals/array-set-length": 130, "../internals/array-species-create": 134, "../internals/create-property": 147, "../internals/delete-property-or-throw": 152, "../internals/does-not-exceed-safe-integer": 155, "../internals/export": 170, "../internals/length-of-array-like": 219, "../internals/to-absolute-index": 279, "../internals/to-integer-or-infinity": 283, "../internals/to-object": 285 }], 322: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var FUNCTION_NAME_EXISTS = require2("../internals/function-name").EXISTS;
        var uncurryThis = require2("../internals/function-uncurry-this");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var FunctionPrototype = Function.prototype;
        var functionToString = uncurryThis(FunctionPrototype.toString);
        var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
        var regExpExec = uncurryThis(nameRE.exec);
        var NAME = "name";
        if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
          defineBuiltInAccessor(FunctionPrototype, NAME, {
            configurable: true,
            get: function() {
              try {
                return regExpExec(nameRE, functionToString(this))[1];
              } catch (error) {
                return "";
              }
            }
          });
        }
      }, { "../internals/define-built-in-accessor": 148, "../internals/descriptors": 153, "../internals/function-name": 178, "../internals/function-uncurry-this": 181 }], 323: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var getBuiltIn = require2("../internals/get-built-in");
        var apply2 = require2("../internals/function-apply");
        var call = require2("../internals/function-call");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var fails = require2("../internals/fails");
        var isCallable = require2("../internals/is-callable");
        var isSymbol2 = require2("../internals/is-symbol");
        var arraySlice = require2("../internals/array-slice");
        var getReplacerFunction = require2("../internals/get-json-replacer-function");
        var NATIVE_SYMBOL = require2("../internals/symbol-constructor-detection");
        var $String = String;
        var $stringify = getBuiltIn("JSON", "stringify");
        var exec = uncurryThis(/./.exec);
        var charAt = uncurryThis("".charAt);
        var charCodeAt = uncurryThis("".charCodeAt);
        var replace = uncurryThis("".replace);
        var numberToString = uncurryThis(1 .toString);
        var tester = /[\uD800-\uDFFF]/g;
        var low = /^[\uD800-\uDBFF]$/;
        var hi = /^[\uDC00-\uDFFF]$/;
        var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function() {
          var symbol = getBuiltIn("Symbol")("stringify detection");
          return $stringify([symbol]) !== "[null]" || $stringify({ a: symbol }) !== "{}" || $stringify(Object(symbol)) !== "{}";
        });
        var ILL_FORMED_UNICODE = fails(function() {
          return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
        });
        var stringifyWithSymbolsFix = function(it, replacer2) {
          var args = arraySlice(arguments);
          var $replacer = getReplacerFunction(replacer2);
          if (!isCallable($replacer) && (it === void 0 || isSymbol2(it)))
            return;
          args[1] = function(key, value) {
            if (isCallable($replacer))
              value = call($replacer, this, $String(key), value);
            if (!isSymbol2(value))
              return value;
          };
          return apply2($stringify, null, args);
        };
        var fixIllFormed = function(match, offset, string) {
          var prev = charAt(string, offset - 1);
          var next = charAt(string, offset + 1);
          if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
            return "\\u" + numberToString(charCodeAt(match, 0), 16);
          }
          return match;
        };
        if ($stringify) {
          $({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            stringify: function stringify2(it, replacer2, space) {
              var args = arraySlice(arguments);
              var result = apply2(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
              return ILL_FORMED_UNICODE && typeof result == "string" ? replace(result, tester, fixIllFormed) : result;
            }
          });
        }
      }, { "../internals/array-slice": 131, "../internals/export": 170, "../internals/fails": 171, "../internals/function-apply": 174, "../internals/function-call": 177, "../internals/function-uncurry-this": 181, "../internals/get-built-in": 182, "../internals/get-json-replacer-function": 185, "../internals/is-callable": 203, "../internals/is-symbol": 212, "../internals/symbol-constructor-detection": 274 }], 324: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var IS_PURE = require2("../internals/is-pure");
        var DESCRIPTORS = require2("../internals/descriptors");
        var global3 = require2("../internals/global");
        var path = require2("../internals/path");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var isForced = require2("../internals/is-forced");
        var hasOwn2 = require2("../internals/has-own-property");
        var inheritIfRequired = require2("../internals/inherit-if-required");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var isSymbol2 = require2("../internals/is-symbol");
        var toPrimitive = require2("../internals/to-primitive");
        var fails = require2("../internals/fails");
        var getOwnPropertyNames = require2("../internals/object-get-own-property-names").f;
        var getOwnPropertyDescriptor2 = require2("../internals/object-get-own-property-descriptor").f;
        var defineProperty = require2("../internals/object-define-property").f;
        var thisNumberValue = require2("../internals/this-number-value");
        var trim = require2("../internals/string-trim").trim;
        var NUMBER = "Number";
        var NativeNumber = global3[NUMBER];
        var PureNumberNamespace = path[NUMBER];
        var NumberPrototype = NativeNumber.prototype;
        var TypeError2 = global3.TypeError;
        var stringSlice = uncurryThis("".slice);
        var charCodeAt = uncurryThis("".charCodeAt);
        var toNumeric = function(value) {
          var primValue = toPrimitive(value, "number");
          return typeof primValue == "bigint" ? primValue : toNumber2(primValue);
        };
        var toNumber2 = function(argument) {
          var it = toPrimitive(argument, "number");
          var first, third, radix, maxCode, digits, length, index2, code;
          if (isSymbol2(it))
            throw new TypeError2("Cannot convert a Symbol value to a number");
          if (typeof it == "string" && it.length > 2) {
            it = trim(it);
            first = charCodeAt(it, 0);
            if (first === 43 || first === 45) {
              third = charCodeAt(it, 2);
              if (third === 88 || third === 120)
                return NaN;
            } else if (first === 48) {
              switch (charCodeAt(it, 1)) {
                case 66:
                case 98:
                  radix = 2;
                  maxCode = 49;
                  break;
                case 79:
                case 111:
                  radix = 8;
                  maxCode = 55;
                  break;
                default:
                  return +it;
              }
              digits = stringSlice(it, 2);
              length = digits.length;
              for (index2 = 0; index2 < length; index2++) {
                code = charCodeAt(digits, index2);
                if (code < 48 || code > maxCode)
                  return NaN;
              }
              return parseInt(digits, radix);
            }
          }
          return +it;
        };
        var FORCED = isForced(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"));
        var calledWithNew = function(dummy) {
          return isPrototypeOf(NumberPrototype, dummy) && fails(function() {
            thisNumberValue(dummy);
          });
        };
        var NumberWrapper = function Number2(value) {
          var n2 = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
          return calledWithNew(this) ? inheritIfRequired(Object(n2), this, NumberWrapper) : n2;
        };
        NumberWrapper.prototype = NumberPrototype;
        if (FORCED && !IS_PURE)
          NumberPrototype.constructor = NumberWrapper;
        $({ global: true, constructor: true, wrap: true, forced: FORCED }, {
          Number: NumberWrapper
        });
        var copyConstructorProperties = function(target, source) {
          for (var keys = DESCRIPTORS ? getOwnPropertyNames(source) : (
            // ES3:
            "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(",")
          ), j = 0, key; keys.length > j; j++) {
            if (hasOwn2(source, key = keys[j]) && !hasOwn2(target, key)) {
              defineProperty(target, key, getOwnPropertyDescriptor2(source, key));
            }
          }
        };
        if (IS_PURE && PureNumberNamespace)
          copyConstructorProperties(path[NUMBER], PureNumberNamespace);
        if (FORCED || IS_PURE)
          copyConstructorProperties(path[NUMBER], NativeNumber);
      }, { "../internals/descriptors": 153, "../internals/export": 170, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/inherit-if-required": 196, "../internals/is-forced": 205, "../internals/is-pure": 210, "../internals/is-symbol": 212, "../internals/object-define-property": 231, "../internals/object-get-own-property-descriptor": 232, "../internals/object-get-own-property-names": 234, "../internals/object-is-prototype-of": 238, "../internals/path": 247, "../internals/string-trim": 273, "../internals/this-number-value": 278, "../internals/to-primitive": 288 }], 325: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var assign2 = require2("../internals/object-assign");
        $({ target: "Object", stat: true, arity: 2, forced: Object.assign !== assign2 }, {
          assign: assign2
        });
      }, { "../internals/export": 170, "../internals/object-assign": 228 }], 326: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var $entries = require2("../internals/object-to-array").entries;
        $({ target: "Object", stat: true }, {
          entries: function entries2(O) {
            return $entries(O);
          }
        });
      }, { "../internals/export": 170, "../internals/object-to-array": 243 }], 327: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var NATIVE_SYMBOL = require2("../internals/symbol-constructor-detection");
        var fails = require2("../internals/fails");
        var getOwnPropertySymbolsModule = require2("../internals/object-get-own-property-symbols");
        var toObject = require2("../internals/to-object");
        var FORCED = !NATIVE_SYMBOL || fails(function() {
          getOwnPropertySymbolsModule.f(1);
        });
        $({ target: "Object", stat: true, forced: FORCED }, {
          getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
            return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
          }
        });
      }, { "../internals/export": 170, "../internals/fails": 171, "../internals/object-get-own-property-symbols": 235, "../internals/symbol-constructor-detection": 274, "../internals/to-object": 285 }], 328: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var toObject = require2("../internals/to-object");
        var nativeKeys = require2("../internals/object-keys");
        var fails = require2("../internals/fails");
        var FAILS_ON_PRIMITIVES = fails(function() {
          nativeKeys(1);
        });
        $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
          keys: function keys(it) {
            return nativeKeys(toObject(it));
          }
        });
      }, { "../internals/export": 170, "../internals/fails": 171, "../internals/object-keys": 240, "../internals/to-object": 285 }], 329: [function(require2, module3, exports3) {
        var TO_STRING_TAG_SUPPORT = require2("../internals/to-string-tag-support");
        var defineBuiltIn = require2("../internals/define-built-in");
        var toString = require2("../internals/object-to-string");
        if (!TO_STRING_TAG_SUPPORT) {
          defineBuiltIn(Object.prototype, "toString", toString, { unsafe: true });
        }
      }, { "../internals/define-built-in": 149, "../internals/object-to-string": 244, "../internals/to-string-tag-support": 290 }], 330: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var call = require2("../internals/function-call");
        var aCallable = require2("../internals/a-callable");
        var newPromiseCapabilityModule = require2("../internals/new-promise-capability");
        var perform = require2("../internals/perform");
        var iterate = require2("../internals/iterate");
        var PROMISE_STATICS_INCORRECT_ITERATION = require2("../internals/promise-statics-incorrect-iteration");
        $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
          all: function all(iterable) {
            var C = this;
            var capability = newPromiseCapabilityModule.f(C);
            var resolve2 = capability.resolve;
            var reject = capability.reject;
            var result = perform(function() {
              var $promiseResolve = aCallable(C.resolve);
              var values = [];
              var counter = 0;
              var remaining = 1;
              iterate(iterable, function(promise) {
                var index2 = counter++;
                var alreadyCalled = false;
                remaining++;
                call($promiseResolve, C, promise).then(function(value) {
                  if (alreadyCalled)
                    return;
                  alreadyCalled = true;
                  values[index2] = value;
                  --remaining || resolve2(values);
                }, reject);
              });
              --remaining || resolve2(values);
            });
            if (result.error)
              reject(result.value);
            return capability.promise;
          }
        });
      }, { "../internals/a-callable": 108, "../internals/export": 170, "../internals/function-call": 177, "../internals/iterate": 213, "../internals/new-promise-capability": 226, "../internals/perform": 248, "../internals/promise-statics-incorrect-iteration": 252 }], 331: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var IS_PURE = require2("../internals/is-pure");
        var FORCED_PROMISE_CONSTRUCTOR = require2("../internals/promise-constructor-detection").CONSTRUCTOR;
        var NativePromiseConstructor = require2("../internals/promise-native-constructor");
        var getBuiltIn = require2("../internals/get-built-in");
        var isCallable = require2("../internals/is-callable");
        var defineBuiltIn = require2("../internals/define-built-in");
        var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
        $({ target: "Promise", proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
          "catch": function(onRejected) {
            return this.then(void 0, onRejected);
          }
        });
        if (!IS_PURE && isCallable(NativePromiseConstructor)) {
          var method = getBuiltIn("Promise").prototype["catch"];
          if (NativePromisePrototype["catch"] !== method) {
            defineBuiltIn(NativePromisePrototype, "catch", method, { unsafe: true });
          }
        }
      }, { "../internals/define-built-in": 149, "../internals/export": 170, "../internals/get-built-in": 182, "../internals/is-callable": 203, "../internals/is-pure": 210, "../internals/promise-constructor-detection": 249, "../internals/promise-native-constructor": 250 }], 332: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var IS_PURE = require2("../internals/is-pure");
        var IS_NODE = require2("../internals/engine-is-node");
        var global3 = require2("../internals/global");
        var call = require2("../internals/function-call");
        var defineBuiltIn = require2("../internals/define-built-in");
        var setPrototypeOf2 = require2("../internals/object-set-prototype-of");
        var setToStringTag = require2("../internals/set-to-string-tag");
        var setSpecies = require2("../internals/set-species");
        var aCallable = require2("../internals/a-callable");
        var isCallable = require2("../internals/is-callable");
        var isObject2 = require2("../internals/is-object");
        var anInstance = require2("../internals/an-instance");
        var speciesConstructor = require2("../internals/species-constructor");
        var task = require2("../internals/task").set;
        var microtask = require2("../internals/microtask");
        var hostReportErrors = require2("../internals/host-report-errors");
        var perform = require2("../internals/perform");
        var Queue = require2("../internals/queue");
        var InternalStateModule = require2("../internals/internal-state");
        var NativePromiseConstructor = require2("../internals/promise-native-constructor");
        var PromiseConstructorDetection = require2("../internals/promise-constructor-detection");
        var newPromiseCapabilityModule = require2("../internals/new-promise-capability");
        var PROMISE = "Promise";
        var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
        var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
        var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
        var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
        var setInternalState = InternalStateModule.set;
        var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
        var PromiseConstructor = NativePromiseConstructor;
        var PromisePrototype = NativePromisePrototype;
        var TypeError2 = global3.TypeError;
        var document2 = global3.document;
        var process = global3.process;
        var newPromiseCapability = newPromiseCapabilityModule.f;
        var newGenericPromiseCapability = newPromiseCapability;
        var DISPATCH_EVENT = !!(document2 && document2.createEvent && global3.dispatchEvent);
        var UNHANDLED_REJECTION = "unhandledrejection";
        var REJECTION_HANDLED = "rejectionhandled";
        var PENDING = 0;
        var FULFILLED = 1;
        var REJECTED = 2;
        var HANDLED = 1;
        var UNHANDLED = 2;
        var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
        var isThenable = function(it) {
          var then;
          return isObject2(it) && isCallable(then = it.then) ? then : false;
        };
        var callReaction = function(reaction, state) {
          var value = state.value;
          var ok = state.state === FULFILLED;
          var handler = ok ? reaction.ok : reaction.fail;
          var resolve2 = reaction.resolve;
          var reject = reaction.reject;
          var domain = reaction.domain;
          var result, then, exited;
          try {
            if (handler) {
              if (!ok) {
                if (state.rejection === UNHANDLED)
                  onHandleUnhandled(state);
                state.rejection = HANDLED;
              }
              if (handler === true)
                result = value;
              else {
                if (domain)
                  domain.enter();
                result = handler(value);
                if (domain) {
                  domain.exit();
                  exited = true;
                }
              }
              if (result === reaction.promise) {
                reject(new TypeError2("Promise-chain cycle"));
              } else if (then = isThenable(result)) {
                call(then, result, resolve2, reject);
              } else
                resolve2(result);
            } else
              reject(value);
          } catch (error) {
            if (domain && !exited)
              domain.exit();
            reject(error);
          }
        };
        var notify = function(state, isReject) {
          if (state.notified)
            return;
          state.notified = true;
          microtask(function() {
            var reactions = state.reactions;
            var reaction;
            while (reaction = reactions.get()) {
              callReaction(reaction, state);
            }
            state.notified = false;
            if (isReject && !state.rejection)
              onUnhandled(state);
          });
        };
        var dispatchEvent = function(name, promise, reason) {
          var event, handler;
          if (DISPATCH_EVENT) {
            event = document2.createEvent("Event");
            event.promise = promise;
            event.reason = reason;
            event.initEvent(name, false, true);
            global3.dispatchEvent(event);
          } else
            event = { promise, reason };
          if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global3["on" + name]))
            handler(event);
          else if (name === UNHANDLED_REJECTION)
            hostReportErrors("Unhandled promise rejection", reason);
        };
        var onUnhandled = function(state) {
          call(task, global3, function() {
            var promise = state.facade;
            var value = state.value;
            var IS_UNHANDLED = isUnhandled(state);
            var result;
            if (IS_UNHANDLED) {
              result = perform(function() {
                if (IS_NODE) {
                  process.emit("unhandledRejection", value, promise);
                } else
                  dispatchEvent(UNHANDLED_REJECTION, promise, value);
              });
              state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
              if (result.error)
                throw result.value;
            }
          });
        };
        var isUnhandled = function(state) {
          return state.rejection !== HANDLED && !state.parent;
        };
        var onHandleUnhandled = function(state) {
          call(task, global3, function() {
            var promise = state.facade;
            if (IS_NODE) {
              process.emit("rejectionHandled", promise);
            } else
              dispatchEvent(REJECTION_HANDLED, promise, state.value);
          });
        };
        var bind = function(fn, state, unwrap) {
          return function(value) {
            fn(state, value, unwrap);
          };
        };
        var internalReject = function(state, value, unwrap) {
          if (state.done)
            return;
          state.done = true;
          if (unwrap)
            state = unwrap;
          state.value = value;
          state.state = REJECTED;
          notify(state, true);
        };
        var internalResolve = function(state, value, unwrap) {
          if (state.done)
            return;
          state.done = true;
          if (unwrap)
            state = unwrap;
          try {
            if (state.facade === value)
              throw new TypeError2("Promise can't be resolved itself");
            var then = isThenable(value);
            if (then) {
              microtask(function() {
                var wrapper = { done: false };
                try {
                  call(
                    then,
                    value,
                    bind(internalResolve, wrapper, state),
                    bind(internalReject, wrapper, state)
                  );
                } catch (error) {
                  internalReject(wrapper, error, state);
                }
              });
            } else {
              state.value = value;
              state.state = FULFILLED;
              notify(state, false);
            }
          } catch (error) {
            internalReject({ done: false }, error, state);
          }
        };
        if (FORCED_PROMISE_CONSTRUCTOR) {
          PromiseConstructor = function Promise2(executor) {
            anInstance(this, PromisePrototype);
            aCallable(executor);
            call(Internal, this);
            var state = getInternalPromiseState(this);
            try {
              executor(bind(internalResolve, state), bind(internalReject, state));
            } catch (error) {
              internalReject(state, error);
            }
          };
          PromisePrototype = PromiseConstructor.prototype;
          Internal = function Promise2(executor) {
            setInternalState(this, {
              type: PROMISE,
              done: false,
              notified: false,
              parent: false,
              reactions: new Queue(),
              rejection: false,
              state: PENDING,
              value: void 0
            });
          };
          Internal.prototype = defineBuiltIn(PromisePrototype, "then", function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
            state.parent = true;
            reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
            reaction.fail = isCallable(onRejected) && onRejected;
            reaction.domain = IS_NODE ? process.domain : void 0;
            if (state.state === PENDING)
              state.reactions.add(reaction);
            else
              microtask(function() {
                callReaction(reaction, state);
              });
            return reaction.promise;
          });
          OwnPromiseCapability = function() {
            var promise = new Internal();
            var state = getInternalPromiseState(promise);
            this.promise = promise;
            this.resolve = bind(internalResolve, state);
            this.reject = bind(internalReject, state);
          };
          newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
            return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
          };
          if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
            nativeThen = NativePromisePrototype.then;
            if (!NATIVE_PROMISE_SUBCLASSING) {
              defineBuiltIn(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
                var that = this;
                return new PromiseConstructor(function(resolve2, reject) {
                  call(nativeThen, that, resolve2, reject);
                }).then(onFulfilled, onRejected);
              }, { unsafe: true });
            }
            try {
              delete NativePromisePrototype.constructor;
            } catch (error) {
            }
            if (setPrototypeOf2) {
              setPrototypeOf2(NativePromisePrototype, PromisePrototype);
            }
          }
        }
        $({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
          Promise: PromiseConstructor
        });
        setToStringTag(PromiseConstructor, PROMISE, false, true);
        setSpecies(PROMISE);
      }, { "../internals/a-callable": 108, "../internals/an-instance": 113, "../internals/define-built-in": 149, "../internals/engine-is-node": 164, "../internals/export": 170, "../internals/function-call": 177, "../internals/global": 188, "../internals/host-report-errors": 191, "../internals/internal-state": 199, "../internals/is-callable": 203, "../internals/is-object": 208, "../internals/is-pure": 210, "../internals/microtask": 225, "../internals/new-promise-capability": 226, "../internals/object-set-prototype-of": 242, "../internals/perform": 248, "../internals/promise-constructor-detection": 249, "../internals/promise-native-constructor": 250, "../internals/queue": 254, "../internals/set-species": 265, "../internals/set-to-string-tag": 266, "../internals/species-constructor": 270, "../internals/task": 277 }], 333: [function(require2, module3, exports3) {
        require2("../modules/es.promise.constructor");
        require2("../modules/es.promise.all");
        require2("../modules/es.promise.catch");
        require2("../modules/es.promise.race");
        require2("../modules/es.promise.reject");
        require2("../modules/es.promise.resolve");
      }, { "../modules/es.promise.all": 330, "../modules/es.promise.catch": 331, "../modules/es.promise.constructor": 332, "../modules/es.promise.race": 334, "../modules/es.promise.reject": 335, "../modules/es.promise.resolve": 336 }], 334: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var call = require2("../internals/function-call");
        var aCallable = require2("../internals/a-callable");
        var newPromiseCapabilityModule = require2("../internals/new-promise-capability");
        var perform = require2("../internals/perform");
        var iterate = require2("../internals/iterate");
        var PROMISE_STATICS_INCORRECT_ITERATION = require2("../internals/promise-statics-incorrect-iteration");
        $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
          race: function race(iterable) {
            var C = this;
            var capability = newPromiseCapabilityModule.f(C);
            var reject = capability.reject;
            var result = perform(function() {
              var $promiseResolve = aCallable(C.resolve);
              iterate(iterable, function(promise) {
                call($promiseResolve, C, promise).then(capability.resolve, reject);
              });
            });
            if (result.error)
              reject(result.value);
            return capability.promise;
          }
        });
      }, { "../internals/a-callable": 108, "../internals/export": 170, "../internals/function-call": 177, "../internals/iterate": 213, "../internals/new-promise-capability": 226, "../internals/perform": 248, "../internals/promise-statics-incorrect-iteration": 252 }], 335: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var newPromiseCapabilityModule = require2("../internals/new-promise-capability");
        var FORCED_PROMISE_CONSTRUCTOR = require2("../internals/promise-constructor-detection").CONSTRUCTOR;
        $({ target: "Promise", stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
          reject: function reject(r) {
            var capability = newPromiseCapabilityModule.f(this);
            var capabilityReject = capability.reject;
            capabilityReject(r);
            return capability.promise;
          }
        });
      }, { "../internals/export": 170, "../internals/new-promise-capability": 226, "../internals/promise-constructor-detection": 249 }], 336: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var getBuiltIn = require2("../internals/get-built-in");
        var IS_PURE = require2("../internals/is-pure");
        var NativePromiseConstructor = require2("../internals/promise-native-constructor");
        var FORCED_PROMISE_CONSTRUCTOR = require2("../internals/promise-constructor-detection").CONSTRUCTOR;
        var promiseResolve = require2("../internals/promise-resolve");
        var PromiseConstructorWrapper = getBuiltIn("Promise");
        var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;
        $({ target: "Promise", stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
          resolve: function resolve2(x) {
            return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
          }
        });
      }, { "../internals/export": 170, "../internals/get-built-in": 182, "../internals/is-pure": 210, "../internals/promise-constructor-detection": 249, "../internals/promise-native-constructor": 250, "../internals/promise-resolve": 251 }], 337: [function(require2, module3, exports3) {
        var DESCRIPTORS = require2("../internals/descriptors");
        var global3 = require2("../internals/global");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var isForced = require2("../internals/is-forced");
        var inheritIfRequired = require2("../internals/inherit-if-required");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var create2 = require2("../internals/object-create");
        var getOwnPropertyNames = require2("../internals/object-get-own-property-names").f;
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var isRegExp = require2("../internals/is-regexp");
        var toString = require2("../internals/to-string");
        var getRegExpFlags = require2("../internals/regexp-get-flags");
        var stickyHelpers = require2("../internals/regexp-sticky-helpers");
        var proxyAccessor = require2("../internals/proxy-accessor");
        var defineBuiltIn = require2("../internals/define-built-in");
        var fails = require2("../internals/fails");
        var hasOwn2 = require2("../internals/has-own-property");
        var enforceInternalState = require2("../internals/internal-state").enforce;
        var setSpecies = require2("../internals/set-species");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var UNSUPPORTED_DOT_ALL = require2("../internals/regexp-unsupported-dot-all");
        var UNSUPPORTED_NCG = require2("../internals/regexp-unsupported-ncg");
        var MATCH = wellKnownSymbol("match");
        var NativeRegExp = global3.RegExp;
        var RegExpPrototype = NativeRegExp.prototype;
        var SyntaxError2 = global3.SyntaxError;
        var exec = uncurryThis(RegExpPrototype.exec);
        var charAt = uncurryThis("".charAt);
        var replace = uncurryThis("".replace);
        var stringIndexOf2 = uncurryThis("".indexOf);
        var stringSlice = uncurryThis("".slice);
        var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
        var re1 = /a/g;
        var re2 = /a/g;
        var CORRECT_NEW = new NativeRegExp(re1) !== re1;
        var MISSED_STICKY = stickyHelpers.MISSED_STICKY;
        var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
        var BASE_FORCED = DESCRIPTORS && (!CORRECT_NEW || MISSED_STICKY || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails(function() {
          re2[MATCH] = false;
          return NativeRegExp(re1) !== re1 || NativeRegExp(re2) === re2 || String(NativeRegExp(re1, "i")) !== "/a/i";
        }));
        var handleDotAll = function(string) {
          var length = string.length;
          var index3 = 0;
          var result = "";
          var brackets = false;
          var chr;
          for (; index3 <= length; index3++) {
            chr = charAt(string, index3);
            if (chr === "\\") {
              result += chr + charAt(string, ++index3);
              continue;
            }
            if (!brackets && chr === ".") {
              result += "[\\s\\S]";
            } else {
              if (chr === "[") {
                brackets = true;
              } else if (chr === "]") {
                brackets = false;
              }
              result += chr;
            }
          }
          return result;
        };
        var handleNCG = function(string) {
          var length = string.length;
          var index3 = 0;
          var result = "";
          var named = [];
          var names = create2(null);
          var brackets = false;
          var ncg = false;
          var groupid = 0;
          var groupname = "";
          var chr;
          for (; index3 <= length; index3++) {
            chr = charAt(string, index3);
            if (chr === "\\") {
              chr += charAt(string, ++index3);
            } else if (chr === "]") {
              brackets = false;
            } else if (!brackets)
              switch (true) {
                case chr === "[":
                  brackets = true;
                  break;
                case chr === "(":
                  if (exec(IS_NCG, stringSlice(string, index3 + 1))) {
                    index3 += 2;
                    ncg = true;
                  }
                  result += chr;
                  groupid++;
                  continue;
                case (chr === ">" && ncg):
                  if (groupname === "" || hasOwn2(names, groupname)) {
                    throw new SyntaxError2("Invalid capture group name");
                  }
                  names[groupname] = true;
                  named[named.length] = [groupname, groupid];
                  ncg = false;
                  groupname = "";
                  continue;
              }
            if (ncg)
              groupname += chr;
            else
              result += chr;
          }
          return [result, named];
        };
        if (isForced("RegExp", BASE_FORCED)) {
          var RegExpWrapper = function RegExp2(pattern, flags) {
            var thisIsRegExp = isPrototypeOf(RegExpPrototype, this);
            var patternIsRegExp = isRegExp(pattern);
            var flagsAreUndefined = flags === void 0;
            var groups = [];
            var rawPattern = pattern;
            var rawFlags, dotAll, sticky, handled, result, state;
            if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
              return pattern;
            }
            if (patternIsRegExp || isPrototypeOf(RegExpPrototype, pattern)) {
              pattern = pattern.source;
              if (flagsAreUndefined)
                flags = getRegExpFlags(rawPattern);
            }
            pattern = pattern === void 0 ? "" : toString(pattern);
            flags = flags === void 0 ? "" : toString(flags);
            rawPattern = pattern;
            if (UNSUPPORTED_DOT_ALL && "dotAll" in re1) {
              dotAll = !!flags && stringIndexOf2(flags, "s") > -1;
              if (dotAll)
                flags = replace(flags, /s/g, "");
            }
            rawFlags = flags;
            if (MISSED_STICKY && "sticky" in re1) {
              sticky = !!flags && stringIndexOf2(flags, "y") > -1;
              if (sticky && UNSUPPORTED_Y)
                flags = replace(flags, /y/g, "");
            }
            if (UNSUPPORTED_NCG) {
              handled = handleNCG(pattern);
              pattern = handled[0];
              groups = handled[1];
            }
            result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
            if (dotAll || sticky || groups.length) {
              state = enforceInternalState(result);
              if (dotAll) {
                state.dotAll = true;
                state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
              }
              if (sticky)
                state.sticky = true;
              if (groups.length)
                state.groups = groups;
            }
            if (pattern !== rawPattern)
              try {
                createNonEnumerableProperty(result, "source", rawPattern === "" ? "(?:)" : rawPattern);
              } catch (error) {
              }
            return result;
          };
          for (var keys = getOwnPropertyNames(NativeRegExp), index2 = 0; keys.length > index2; ) {
            proxyAccessor(RegExpWrapper, NativeRegExp, keys[index2++]);
          }
          RegExpPrototype.constructor = RegExpWrapper;
          RegExpWrapper.prototype = RegExpPrototype;
          defineBuiltIn(global3, "RegExp", RegExpWrapper, { constructor: true });
        }
        setSpecies("RegExp");
      }, { "../internals/create-non-enumerable-property": 145, "../internals/define-built-in": 149, "../internals/descriptors": 153, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/inherit-if-required": 196, "../internals/internal-state": 199, "../internals/is-forced": 205, "../internals/is-regexp": 211, "../internals/object-create": 229, "../internals/object-get-own-property-names": 234, "../internals/object-is-prototype-of": 238, "../internals/proxy-accessor": 253, "../internals/regexp-get-flags": 258, "../internals/regexp-sticky-helpers": 259, "../internals/regexp-unsupported-dot-all": 260, "../internals/regexp-unsupported-ncg": 261, "../internals/set-species": 265, "../internals/to-string": 291, "../internals/well-known-symbol": 306 }], 338: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var exec = require2("../internals/regexp-exec");
        $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
          exec
        });
      }, { "../internals/export": 170, "../internals/regexp-exec": 256 }], 339: [function(require2, module3, exports3) {
        var PROPER_FUNCTION_NAME = require2("../internals/function-name").PROPER;
        var defineBuiltIn = require2("../internals/define-built-in");
        var anObject = require2("../internals/an-object");
        var $toString = require2("../internals/to-string");
        var fails = require2("../internals/fails");
        var getRegExpFlags = require2("../internals/regexp-get-flags");
        var TO_STRING = "toString";
        var RegExpPrototype = RegExp.prototype;
        var nativeToString = RegExpPrototype[TO_STRING];
        var NOT_GENERIC = fails(function() {
          return nativeToString.call({ source: "a", flags: "b" }) !== "/a/b";
        });
        var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name !== TO_STRING;
        if (NOT_GENERIC || INCORRECT_NAME) {
          defineBuiltIn(RegExpPrototype, TO_STRING, function toString() {
            var R = anObject(this);
            var pattern = $toString(R.source);
            var flags = $toString(getRegExpFlags(R));
            return "/" + pattern + "/" + flags;
          }, { unsafe: true });
        }
      }, { "../internals/an-object": 114, "../internals/define-built-in": 149, "../internals/fails": 171, "../internals/function-name": 178, "../internals/regexp-get-flags": 258, "../internals/to-string": 291 }], 340: [function(require2, module3, exports3) {
        var collection = require2("../internals/collection");
        var collectionStrong = require2("../internals/collection-strong");
        collection("Set", function(init) {
          return function Set2() {
            return init(this, arguments.length ? arguments[0] : void 0);
          };
        }, collectionStrong);
      }, { "../internals/collection": 140, "../internals/collection-strong": 139 }], 341: [function(require2, module3, exports3) {
        require2("../modules/es.set.constructor");
      }, { "../modules/es.set.constructor": 340 }], 342: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var notARegExp = require2("../internals/not-a-regexp");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var toString = require2("../internals/to-string");
        var correctIsRegExpLogic = require2("../internals/correct-is-regexp-logic");
        var stringIndexOf2 = uncurryThis("".indexOf);
        $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
          includes: function includes(searchString) {
            return !!~stringIndexOf2(
              toString(requireObjectCoercible(this)),
              toString(notARegExp(searchString)),
              arguments.length > 1 ? arguments[1] : void 0
            );
          }
        });
      }, { "../internals/correct-is-regexp-logic": 142, "../internals/export": 170, "../internals/function-uncurry-this": 181, "../internals/not-a-regexp": 227, "../internals/require-object-coercible": 262, "../internals/to-string": 291 }], 343: [function(require2, module3, exports3) {
        var charAt = require2("../internals/string-multibyte").charAt;
        var toString = require2("../internals/to-string");
        var InternalStateModule = require2("../internals/internal-state");
        var defineIterator = require2("../internals/iterator-define");
        var createIterResultObject = require2("../internals/create-iter-result-object");
        var STRING_ITERATOR = "String Iterator";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
        defineIterator(String, "String", function(iterated) {
          setInternalState(this, {
            type: STRING_ITERATOR,
            string: toString(iterated),
            index: 0
          });
        }, function next() {
          var state = getInternalState(this);
          var string = state.string;
          var index2 = state.index;
          var point;
          if (index2 >= string.length)
            return createIterResultObject(void 0, true);
          point = charAt(string, index2);
          state.index += point.length;
          return createIterResultObject(point, false);
        });
      }, { "../internals/create-iter-result-object": 144, "../internals/internal-state": 199, "../internals/iterator-define": 216, "../internals/string-multibyte": 271, "../internals/to-string": 291 }], 344: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var fixRegExpWellKnownSymbolLogic = require2("../internals/fix-regexp-well-known-symbol-logic");
        var anObject = require2("../internals/an-object");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var toLength = require2("../internals/to-length");
        var toString = require2("../internals/to-string");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var getMethod = require2("../internals/get-method");
        var advanceStringIndex = require2("../internals/advance-string-index");
        var regExpExec = require2("../internals/regexp-exec-abstract");
        fixRegExpWellKnownSymbolLogic("match", function(MATCH, nativeMatch, maybeCallNative) {
          return [
            // `String.prototype.match` method
            // https://tc39.es/ecma262/#sec-string.prototype.match
            function match(regexp) {
              var O = requireObjectCoercible(this);
              var matcher = isNullOrUndefined(regexp) ? void 0 : getMethod(regexp, MATCH);
              return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
            },
            // `RegExp.prototype[@@match]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
            function(string) {
              var rx = anObject(this);
              var S = toString(string);
              var res = maybeCallNative(nativeMatch, rx, S);
              if (res.done)
                return res.value;
              if (!rx.global)
                return regExpExec(rx, S);
              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
              var A = [];
              var n2 = 0;
              var result;
              while ((result = regExpExec(rx, S)) !== null) {
                var matchStr = toString(result[0]);
                A[n2] = matchStr;
                if (matchStr === "")
                  rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                n2++;
              }
              return n2 === 0 ? null : A;
            }
          ];
        });
      }, { "../internals/advance-string-index": 112, "../internals/an-object": 114, "../internals/fix-regexp-well-known-symbol-logic": 172, "../internals/function-call": 177, "../internals/get-method": 186, "../internals/is-null-or-undefined": 207, "../internals/regexp-exec-abstract": 255, "../internals/require-object-coercible": 262, "../internals/to-length": 284, "../internals/to-string": 291 }], 345: [function(require2, module3, exports3) {
        var apply2 = require2("../internals/function-apply");
        var call = require2("../internals/function-call");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var fixRegExpWellKnownSymbolLogic = require2("../internals/fix-regexp-well-known-symbol-logic");
        var fails = require2("../internals/fails");
        var anObject = require2("../internals/an-object");
        var isCallable = require2("../internals/is-callable");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var toIntegerOrInfinity = require2("../internals/to-integer-or-infinity");
        var toLength = require2("../internals/to-length");
        var toString = require2("../internals/to-string");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var advanceStringIndex = require2("../internals/advance-string-index");
        var getMethod = require2("../internals/get-method");
        var getSubstitution = require2("../internals/get-substitution");
        var regExpExec = require2("../internals/regexp-exec-abstract");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var REPLACE = wellKnownSymbol("replace");
        var max = Math.max;
        var min = Math.min;
        var concat = uncurryThis([].concat);
        var push = uncurryThis([].push);
        var stringIndexOf2 = uncurryThis("".indexOf);
        var stringSlice = uncurryThis("".slice);
        var maybeToString = function(it) {
          return it === void 0 ? it : String(it);
        };
        var REPLACE_KEEPS_$0 = function() {
          return "a".replace(/./, "$0") === "$0";
        }();
        var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
          if (/./[REPLACE]) {
            return /./[REPLACE]("a", "$0") === "";
          }
          return false;
        }();
        var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
          var re = /./;
          re.exec = function() {
            var result = [];
            result.groups = { a: "7" };
            return result;
          };
          return "".replace(re, "$<a>") !== "7";
        });
        fixRegExpWellKnownSymbolLogic("replace", function(_, nativeReplace, maybeCallNative) {
          var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
          return [
            // `String.prototype.replace` method
            // https://tc39.es/ecma262/#sec-string.prototype.replace
            function replace(searchValue, replaceValue) {
              var O = requireObjectCoercible(this);
              var replacer2 = isNullOrUndefined(searchValue) ? void 0 : getMethod(searchValue, REPLACE);
              return replacer2 ? call(replacer2, searchValue, O, replaceValue) : call(nativeReplace, toString(O), searchValue, replaceValue);
            },
            // `RegExp.prototype[@@replace]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
            function(string, replaceValue) {
              var rx = anObject(this);
              var S = toString(string);
              if (typeof replaceValue == "string" && stringIndexOf2(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf2(replaceValue, "$<") === -1) {
                var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
                if (res.done)
                  return res.value;
              }
              var functionalReplace = isCallable(replaceValue);
              if (!functionalReplace)
                replaceValue = toString(replaceValue);
              var global3 = rx.global;
              var fullUnicode;
              if (global3) {
                fullUnicode = rx.unicode;
                rx.lastIndex = 0;
              }
              var results = [];
              var result;
              while (true) {
                result = regExpExec(rx, S);
                if (result === null)
                  break;
                push(results, result);
                if (!global3)
                  break;
                var matchStr = toString(result[0]);
                if (matchStr === "")
                  rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
              }
              var accumulatedResult = "";
              var nextSourcePosition = 0;
              for (var i = 0; i < results.length; i++) {
                result = results[i];
                var matched = toString(result[0]);
                var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
                var captures = [];
                var replacement;
                for (var j = 1; j < result.length; j++)
                  push(captures, maybeToString(result[j]));
                var namedCaptures = result.groups;
                if (functionalReplace) {
                  var replacerArgs = concat([matched], captures, position, S);
                  if (namedCaptures !== void 0)
                    push(replacerArgs, namedCaptures);
                  replacement = toString(apply2(replaceValue, void 0, replacerArgs));
                } else {
                  replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                }
                if (position >= nextSourcePosition) {
                  accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
                  nextSourcePosition = position + matched.length;
                }
              }
              return accumulatedResult + stringSlice(S, nextSourcePosition);
            }
          ];
        }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);
      }, { "../internals/advance-string-index": 112, "../internals/an-object": 114, "../internals/fails": 171, "../internals/fix-regexp-well-known-symbol-logic": 172, "../internals/function-apply": 174, "../internals/function-call": 177, "../internals/function-uncurry-this": 181, "../internals/get-method": 186, "../internals/get-substitution": 187, "../internals/is-callable": 203, "../internals/is-null-or-undefined": 207, "../internals/regexp-exec-abstract": 255, "../internals/require-object-coercible": 262, "../internals/to-integer-or-infinity": 283, "../internals/to-length": 284, "../internals/to-string": 291, "../internals/well-known-symbol": 306 }], 346: [function(require2, module3, exports3) {
        var call = require2("../internals/function-call");
        var fixRegExpWellKnownSymbolLogic = require2("../internals/fix-regexp-well-known-symbol-logic");
        var anObject = require2("../internals/an-object");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var sameValue = require2("../internals/same-value");
        var toString = require2("../internals/to-string");
        var getMethod = require2("../internals/get-method");
        var regExpExec = require2("../internals/regexp-exec-abstract");
        fixRegExpWellKnownSymbolLogic("search", function(SEARCH, nativeSearch, maybeCallNative) {
          return [
            // `String.prototype.search` method
            // https://tc39.es/ecma262/#sec-string.prototype.search
            function search(regexp) {
              var O = requireObjectCoercible(this);
              var searcher = isNullOrUndefined(regexp) ? void 0 : getMethod(regexp, SEARCH);
              return searcher ? call(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString(O));
            },
            // `RegExp.prototype[@@search]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
            function(string) {
              var rx = anObject(this);
              var S = toString(string);
              var res = maybeCallNative(nativeSearch, rx, S);
              if (res.done)
                return res.value;
              var previousLastIndex = rx.lastIndex;
              if (!sameValue(previousLastIndex, 0))
                rx.lastIndex = 0;
              var result = regExpExec(rx, S);
              if (!sameValue(rx.lastIndex, previousLastIndex))
                rx.lastIndex = previousLastIndex;
              return result === null ? -1 : result.index;
            }
          ];
        });
      }, { "../internals/an-object": 114, "../internals/fix-regexp-well-known-symbol-logic": 172, "../internals/function-call": 177, "../internals/get-method": 186, "../internals/is-null-or-undefined": 207, "../internals/regexp-exec-abstract": 255, "../internals/require-object-coercible": 262, "../internals/same-value": 264, "../internals/to-string": 291 }], 347: [function(require2, module3, exports3) {
        var apply2 = require2("../internals/function-apply");
        var call = require2("../internals/function-call");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var fixRegExpWellKnownSymbolLogic = require2("../internals/fix-regexp-well-known-symbol-logic");
        var anObject = require2("../internals/an-object");
        var isNullOrUndefined = require2("../internals/is-null-or-undefined");
        var isRegExp = require2("../internals/is-regexp");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var speciesConstructor = require2("../internals/species-constructor");
        var advanceStringIndex = require2("../internals/advance-string-index");
        var toLength = require2("../internals/to-length");
        var toString = require2("../internals/to-string");
        var getMethod = require2("../internals/get-method");
        var arraySlice = require2("../internals/array-slice");
        var callRegExpExec = require2("../internals/regexp-exec-abstract");
        var regexpExec = require2("../internals/regexp-exec");
        var stickyHelpers = require2("../internals/regexp-sticky-helpers");
        var fails = require2("../internals/fails");
        var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
        var MAX_UINT32 = 4294967295;
        var min = Math.min;
        var $push = [].push;
        var exec = uncurryThis(/./.exec);
        var push = uncurryThis($push);
        var stringSlice = uncurryThis("".slice);
        var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
          var re = /(?:)/;
          var originalExec = re.exec;
          re.exec = function() {
            return originalExec.apply(this, arguments);
          };
          var result = "ab".split(re);
          return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
        });
        fixRegExpWellKnownSymbolLogic("split", function(SPLIT, nativeSplit, maybeCallNative) {
          var internalSplit;
          if ("abbc".split(/(b)*/)[1] === "c" || // eslint-disable-next-line regexp/no-empty-group -- required for testing
          "test".split(/(?:)/, -1).length !== 4 || "ab".split(/(?:ab)*/).length !== 2 || ".".split(/(.?)(.?)/).length !== 4 || // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
          ".".split(/()()/).length > 1 || "".split(/.?/).length) {
            internalSplit = function(separator, limit) {
              var string = toString(requireObjectCoercible(this));
              var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
              if (lim === 0)
                return [];
              if (separator === void 0)
                return [string];
              if (!isRegExp(separator)) {
                return call(nativeSplit, string, separator, lim);
              }
              var output = [];
              var flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.unicode ? "u" : "") + (separator.sticky ? "y" : "");
              var lastLastIndex = 0;
              var separatorCopy = new RegExp(separator.source, flags + "g");
              var match, lastIndex, lastLength;
              while (match = call(regexpExec, separatorCopy, string)) {
                lastIndex = separatorCopy.lastIndex;
                if (lastIndex > lastLastIndex) {
                  push(output, stringSlice(string, lastLastIndex, match.index));
                  if (match.length > 1 && match.index < string.length)
                    apply2($push, output, arraySlice(match, 1));
                  lastLength = match[0].length;
                  lastLastIndex = lastIndex;
                  if (output.length >= lim)
                    break;
                }
                if (separatorCopy.lastIndex === match.index)
                  separatorCopy.lastIndex++;
              }
              if (lastLastIndex === string.length) {
                if (lastLength || !exec(separatorCopy, ""))
                  push(output, "");
              } else
                push(output, stringSlice(string, lastLastIndex));
              return output.length > lim ? arraySlice(output, 0, lim) : output;
            };
          } else if ("0".split(void 0, 0).length) {
            internalSplit = function(separator, limit) {
              return separator === void 0 && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
            };
          } else
            internalSplit = nativeSplit;
          return [
            // `String.prototype.split` method
            // https://tc39.es/ecma262/#sec-string.prototype.split
            function split(separator, limit) {
              var O = requireObjectCoercible(this);
              var splitter = isNullOrUndefined(separator) ? void 0 : getMethod(separator, SPLIT);
              return splitter ? call(splitter, separator, O, limit) : call(internalSplit, toString(O), separator, limit);
            },
            // `RegExp.prototype[@@split]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
            //
            // NOTE: This cannot be properly polyfilled in engines that don't support
            // the 'y' flag.
            function(string, limit) {
              var rx = anObject(this);
              var S = toString(string);
              var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);
              if (res.done)
                return res.value;
              var C = speciesConstructor(rx, RegExp);
              var unicodeMatching = rx.unicode;
              var flags = (rx.ignoreCase ? "i" : "") + (rx.multiline ? "m" : "") + (rx.unicode ? "u" : "") + (UNSUPPORTED_Y ? "g" : "y");
              var splitter = new C(UNSUPPORTED_Y ? "^(?:" + rx.source + ")" : rx, flags);
              var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
              if (lim === 0)
                return [];
              if (S.length === 0)
                return callRegExpExec(splitter, S) === null ? [S] : [];
              var p2 = 0;
              var q = 0;
              var A = [];
              while (q < S.length) {
                splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
                var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
                var e2;
                if (z === null || (e2 = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p2) {
                  q = advanceStringIndex(S, q, unicodeMatching);
                } else {
                  push(A, stringSlice(S, p2, q));
                  if (A.length === lim)
                    return A;
                  for (var i = 1; i <= z.length - 1; i++) {
                    push(A, z[i]);
                    if (A.length === lim)
                      return A;
                  }
                  q = p2 = e2;
                }
              }
              push(A, stringSlice(S, p2));
              return A;
            }
          ];
        }, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);
      }, { "../internals/advance-string-index": 112, "../internals/an-object": 114, "../internals/array-slice": 131, "../internals/fails": 171, "../internals/fix-regexp-well-known-symbol-logic": 172, "../internals/function-apply": 174, "../internals/function-call": 177, "../internals/function-uncurry-this": 181, "../internals/get-method": 186, "../internals/is-null-or-undefined": 207, "../internals/is-regexp": 211, "../internals/regexp-exec": 256, "../internals/regexp-exec-abstract": 255, "../internals/regexp-sticky-helpers": 259, "../internals/require-object-coercible": 262, "../internals/species-constructor": 270, "../internals/to-length": 284, "../internals/to-string": 291 }], 348: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var uncurryThis = require2("../internals/function-uncurry-this-clause");
        var getOwnPropertyDescriptor2 = require2("../internals/object-get-own-property-descriptor").f;
        var toLength = require2("../internals/to-length");
        var toString = require2("../internals/to-string");
        var notARegExp = require2("../internals/not-a-regexp");
        var requireObjectCoercible = require2("../internals/require-object-coercible");
        var correctIsRegExpLogic = require2("../internals/correct-is-regexp-logic");
        var IS_PURE = require2("../internals/is-pure");
        var stringSlice = uncurryThis("".slice);
        var min = Math.min;
        var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
        var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
          var descriptor = getOwnPropertyDescriptor2(String.prototype, "startsWith");
          return descriptor && !descriptor.writable;
        }();
        $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
          startsWith: function startsWith2(searchString) {
            var that = toString(requireObjectCoercible(this));
            notARegExp(searchString);
            var index2 = toLength(min(arguments.length > 1 ? arguments[1] : void 0, that.length));
            var search = toString(searchString);
            return stringSlice(that, index2, index2 + search.length) === search;
          }
        });
      }, { "../internals/correct-is-regexp-logic": 142, "../internals/export": 170, "../internals/function-uncurry-this-clause": 180, "../internals/is-pure": 210, "../internals/not-a-regexp": 227, "../internals/object-get-own-property-descriptor": 232, "../internals/require-object-coercible": 262, "../internals/to-length": 284, "../internals/to-string": 291 }], 349: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var $trim = require2("../internals/string-trim").trim;
        var forcedStringTrimMethod = require2("../internals/string-trim-forced");
        $({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
          trim: function trim() {
            return $trim(this);
          }
        });
      }, { "../internals/export": 170, "../internals/string-trim": 273, "../internals/string-trim-forced": 272 }], 350: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var global3 = require2("../internals/global");
        var call = require2("../internals/function-call");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var IS_PURE = require2("../internals/is-pure");
        var DESCRIPTORS = require2("../internals/descriptors");
        var NATIVE_SYMBOL = require2("../internals/symbol-constructor-detection");
        var fails = require2("../internals/fails");
        var hasOwn2 = require2("../internals/has-own-property");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var anObject = require2("../internals/an-object");
        var toIndexedObject = require2("../internals/to-indexed-object");
        var toPropertyKey = require2("../internals/to-property-key");
        var $toString = require2("../internals/to-string");
        var createPropertyDescriptor = require2("../internals/create-property-descriptor");
        var nativeObjectCreate = require2("../internals/object-create");
        var objectKeys2 = require2("../internals/object-keys");
        var getOwnPropertyNamesModule = require2("../internals/object-get-own-property-names");
        var getOwnPropertyNamesExternal = require2("../internals/object-get-own-property-names-external");
        var getOwnPropertySymbolsModule = require2("../internals/object-get-own-property-symbols");
        var getOwnPropertyDescriptorModule = require2("../internals/object-get-own-property-descriptor");
        var definePropertyModule = require2("../internals/object-define-property");
        var definePropertiesModule = require2("../internals/object-define-properties");
        var propertyIsEnumerableModule = require2("../internals/object-property-is-enumerable");
        var defineBuiltIn = require2("../internals/define-built-in");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var shared = require2("../internals/shared");
        var sharedKey = require2("../internals/shared-key");
        var hiddenKeys = require2("../internals/hidden-keys");
        var uid2 = require2("../internals/uid");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var wrappedWellKnownSymbolModule = require2("../internals/well-known-symbol-wrapped");
        var defineWellKnownSymbol = require2("../internals/well-known-symbol-define");
        var defineSymbolToPrimitive = require2("../internals/symbol-define-to-primitive");
        var setToStringTag = require2("../internals/set-to-string-tag");
        var InternalStateModule = require2("../internals/internal-state");
        var $forEach = require2("../internals/array-iteration").forEach;
        var HIDDEN = sharedKey("hidden");
        var SYMBOL = "Symbol";
        var PROTOTYPE = "prototype";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(SYMBOL);
        var ObjectPrototype = Object[PROTOTYPE];
        var $Symbol = global3.Symbol;
        var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
        var RangeError2 = global3.RangeError;
        var TypeError2 = global3.TypeError;
        var QObject = global3.QObject;
        var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var nativeDefineProperty = definePropertyModule.f;
        var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
        var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
        var push = uncurryThis([].push);
        var AllSymbols = shared("symbols");
        var ObjectPrototypeSymbols = shared("op-symbols");
        var WellKnownSymbolsStore = shared("wks");
        var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
        var fallbackDefineProperty = function(O, P, Attributes) {
          var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
          if (ObjectPrototypeDescriptor)
            delete ObjectPrototype[P];
          nativeDefineProperty(O, P, Attributes);
          if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
            nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
          }
        };
        var setSymbolDescriptor = DESCRIPTORS && fails(function() {
          return nativeObjectCreate(nativeDefineProperty({}, "a", {
            get: function() {
              return nativeDefineProperty(this, "a", { value: 7 }).a;
            }
          })).a !== 7;
        }) ? fallbackDefineProperty : nativeDefineProperty;
        var wrap = function(tag2, description) {
          var symbol = AllSymbols[tag2] = nativeObjectCreate(SymbolPrototype);
          setInternalState(symbol, {
            type: SYMBOL,
            tag: tag2,
            description
          });
          if (!DESCRIPTORS)
            symbol.description = description;
          return symbol;
        };
        var $defineProperty = function defineProperty(O, P, Attributes) {
          if (O === ObjectPrototype)
            $defineProperty(ObjectPrototypeSymbols, P, Attributes);
          anObject(O);
          var key = toPropertyKey(P);
          anObject(Attributes);
          if (hasOwn2(AllSymbols, key)) {
            if (!Attributes.enumerable) {
              if (!hasOwn2(O, HIDDEN))
                nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, nativeObjectCreate(null)));
              O[HIDDEN][key] = true;
            } else {
              if (hasOwn2(O, HIDDEN) && O[HIDDEN][key])
                O[HIDDEN][key] = false;
              Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
            }
            return setSymbolDescriptor(O, key, Attributes);
          }
          return nativeDefineProperty(O, key, Attributes);
        };
        var $defineProperties = function defineProperties(O, Properties) {
          anObject(O);
          var properties = toIndexedObject(Properties);
          var keys = objectKeys2(properties).concat($getOwnPropertySymbols(properties));
          $forEach(keys, function(key) {
            if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
              $defineProperty(O, key, properties[key]);
          });
          return O;
        };
        var $create = function create2(O, Properties) {
          return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(V) {
          var P = toPropertyKey(V);
          var enumerable = call(nativePropertyIsEnumerable, this, P);
          if (this === ObjectPrototype && hasOwn2(AllSymbols, P) && !hasOwn2(ObjectPrototypeSymbols, P))
            return false;
          return enumerable || !hasOwn2(this, P) || !hasOwn2(AllSymbols, P) || hasOwn2(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(O, P) {
          var it = toIndexedObject(O);
          var key = toPropertyKey(P);
          if (it === ObjectPrototype && hasOwn2(AllSymbols, key) && !hasOwn2(ObjectPrototypeSymbols, key))
            return;
          var descriptor = nativeGetOwnPropertyDescriptor(it, key);
          if (descriptor && hasOwn2(AllSymbols, key) && !(hasOwn2(it, HIDDEN) && it[HIDDEN][key])) {
            descriptor.enumerable = true;
          }
          return descriptor;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(O) {
          var names = nativeGetOwnPropertyNames(toIndexedObject(O));
          var result = [];
          $forEach(names, function(key) {
            if (!hasOwn2(AllSymbols, key) && !hasOwn2(hiddenKeys, key))
              push(result, key);
          });
          return result;
        };
        var $getOwnPropertySymbols = function(O) {
          var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
          var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
          var result = [];
          $forEach(names, function(key) {
            if (hasOwn2(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn2(ObjectPrototype, key))) {
              push(result, AllSymbols[key]);
            }
          });
          return result;
        };
        if (!NATIVE_SYMBOL) {
          $Symbol = function Symbol2() {
            if (isPrototypeOf(SymbolPrototype, this))
              throw new TypeError2("Symbol is not a constructor");
            var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
            var tag2 = uid2(description);
            var setter = function(value) {
              var $this = this === void 0 ? global3 : this;
              if ($this === ObjectPrototype)
                call(setter, ObjectPrototypeSymbols, value);
              if (hasOwn2($this, HIDDEN) && hasOwn2($this[HIDDEN], tag2))
                $this[HIDDEN][tag2] = false;
              var descriptor = createPropertyDescriptor(1, value);
              try {
                setSymbolDescriptor($this, tag2, descriptor);
              } catch (error) {
                if (!(error instanceof RangeError2))
                  throw error;
                fallbackDefineProperty($this, tag2, descriptor);
              }
            };
            if (DESCRIPTORS && USE_SETTER)
              setSymbolDescriptor(ObjectPrototype, tag2, { configurable: true, set: setter });
            return wrap(tag2, description);
          };
          SymbolPrototype = $Symbol[PROTOTYPE];
          defineBuiltIn(SymbolPrototype, "toString", function toString() {
            return getInternalState(this).tag;
          });
          defineBuiltIn($Symbol, "withoutSetter", function(description) {
            return wrap(uid2(description), description);
          });
          propertyIsEnumerableModule.f = $propertyIsEnumerable;
          definePropertyModule.f = $defineProperty;
          definePropertiesModule.f = $defineProperties;
          getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
          getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
          getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
          wrappedWellKnownSymbolModule.f = function(name) {
            return wrap(wellKnownSymbol(name), name);
          };
          if (DESCRIPTORS) {
            defineBuiltInAccessor(SymbolPrototype, "description", {
              configurable: true,
              get: function description() {
                return getInternalState(this).description;
              }
            });
            if (!IS_PURE) {
              defineBuiltIn(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
            }
          }
        }
        $({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
          Symbol: $Symbol
        });
        $forEach(objectKeys2(WellKnownSymbolsStore), function(name) {
          defineWellKnownSymbol(name);
        });
        $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
          useSetter: function() {
            USE_SETTER = true;
          },
          useSimple: function() {
            USE_SETTER = false;
          }
        });
        $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
          // `Object.create` method
          // https://tc39.es/ecma262/#sec-object.create
          create: $create,
          // `Object.defineProperty` method
          // https://tc39.es/ecma262/#sec-object.defineproperty
          defineProperty: $defineProperty,
          // `Object.defineProperties` method
          // https://tc39.es/ecma262/#sec-object.defineproperties
          defineProperties: $defineProperties,
          // `Object.getOwnPropertyDescriptor` method
          // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
          getOwnPropertyDescriptor: $getOwnPropertyDescriptor
        });
        $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
          // `Object.getOwnPropertyNames` method
          // https://tc39.es/ecma262/#sec-object.getownpropertynames
          getOwnPropertyNames: $getOwnPropertyNames
        });
        defineSymbolToPrimitive();
        setToStringTag($Symbol, SYMBOL);
        hiddenKeys[HIDDEN] = true;
      }, { "../internals/an-object": 114, "../internals/array-iteration": 125, "../internals/create-property-descriptor": 146, "../internals/define-built-in": 149, "../internals/define-built-in-accessor": 148, "../internals/descriptors": 153, "../internals/export": 170, "../internals/fails": 171, "../internals/function-call": 177, "../internals/function-uncurry-this": 181, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/hidden-keys": 190, "../internals/internal-state": 199, "../internals/is-pure": 210, "../internals/object-create": 229, "../internals/object-define-properties": 230, "../internals/object-define-property": 231, "../internals/object-get-own-property-descriptor": 232, "../internals/object-get-own-property-names": 234, "../internals/object-get-own-property-names-external": 233, "../internals/object-get-own-property-symbols": 235, "../internals/object-is-prototype-of": 238, "../internals/object-keys": 240, "../internals/object-property-is-enumerable": 241, "../internals/set-to-string-tag": 266, "../internals/shared": 269, "../internals/shared-key": 267, "../internals/symbol-constructor-detection": 274, "../internals/symbol-define-to-primitive": 275, "../internals/to-indexed-object": 282, "../internals/to-property-key": 289, "../internals/to-string": 291, "../internals/uid": 299, "../internals/well-known-symbol": 306, "../internals/well-known-symbol-define": 304, "../internals/well-known-symbol-wrapped": 305 }], 351: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var DESCRIPTORS = require2("../internals/descriptors");
        var global3 = require2("../internals/global");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var hasOwn2 = require2("../internals/has-own-property");
        var isCallable = require2("../internals/is-callable");
        var isPrototypeOf = require2("../internals/object-is-prototype-of");
        var toString = require2("../internals/to-string");
        var defineBuiltInAccessor = require2("../internals/define-built-in-accessor");
        var copyConstructorProperties = require2("../internals/copy-constructor-properties");
        var NativeSymbol = global3.Symbol;
        var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;
        if (DESCRIPTORS && isCallable(NativeSymbol) && (!("description" in SymbolPrototype) || // Safari 12 bug
        NativeSymbol().description !== void 0)) {
          var EmptyStringDescriptionStore = {};
          var SymbolWrapper = function Symbol2() {
            var description = arguments.length < 1 || arguments[0] === void 0 ? void 0 : toString(arguments[0]);
            var result = isPrototypeOf(SymbolPrototype, this) ? new NativeSymbol(description) : description === void 0 ? NativeSymbol() : NativeSymbol(description);
            if (description === "")
              EmptyStringDescriptionStore[result] = true;
            return result;
          };
          copyConstructorProperties(SymbolWrapper, NativeSymbol);
          SymbolWrapper.prototype = SymbolPrototype;
          SymbolPrototype.constructor = SymbolWrapper;
          var NATIVE_SYMBOL = String(NativeSymbol("description detection")) === "Symbol(description detection)";
          var thisSymbolValue = uncurryThis(SymbolPrototype.valueOf);
          var symbolDescriptiveString = uncurryThis(SymbolPrototype.toString);
          var regexp = /^Symbol\((.*)\)[^)]+$/;
          var replace = uncurryThis("".replace);
          var stringSlice = uncurryThis("".slice);
          defineBuiltInAccessor(SymbolPrototype, "description", {
            configurable: true,
            get: function description() {
              var symbol = thisSymbolValue(this);
              if (hasOwn2(EmptyStringDescriptionStore, symbol))
                return "";
              var string = symbolDescriptiveString(symbol);
              var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, "$1");
              return desc === "" ? void 0 : desc;
            }
          });
          $({ global: true, constructor: true, forced: true }, {
            Symbol: SymbolWrapper
          });
        }
      }, { "../internals/copy-constructor-properties": 141, "../internals/define-built-in-accessor": 148, "../internals/descriptors": 153, "../internals/export": 170, "../internals/function-uncurry-this": 181, "../internals/global": 188, "../internals/has-own-property": 189, "../internals/is-callable": 203, "../internals/object-is-prototype-of": 238, "../internals/to-string": 291 }], 352: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var getBuiltIn = require2("../internals/get-built-in");
        var hasOwn2 = require2("../internals/has-own-property");
        var toString = require2("../internals/to-string");
        var shared = require2("../internals/shared");
        var NATIVE_SYMBOL_REGISTRY = require2("../internals/symbol-registry-detection");
        var StringToSymbolRegistry = shared("string-to-symbol-registry");
        var SymbolToStringRegistry = shared("symbol-to-string-registry");
        $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
          "for": function(key) {
            var string = toString(key);
            if (hasOwn2(StringToSymbolRegistry, string))
              return StringToSymbolRegistry[string];
            var symbol = getBuiltIn("Symbol")(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
          }
        });
      }, { "../internals/export": 170, "../internals/get-built-in": 182, "../internals/has-own-property": 189, "../internals/shared": 269, "../internals/symbol-registry-detection": 276, "../internals/to-string": 291 }], 353: [function(require2, module3, exports3) {
        var defineWellKnownSymbol = require2("../internals/well-known-symbol-define");
        defineWellKnownSymbol("iterator");
      }, { "../internals/well-known-symbol-define": 304 }], 354: [function(require2, module3, exports3) {
        require2("../modules/es.symbol.constructor");
        require2("../modules/es.symbol.for");
        require2("../modules/es.symbol.key-for");
        require2("../modules/es.json.stringify");
        require2("../modules/es.object.get-own-property-symbols");
      }, { "../modules/es.json.stringify": 323, "../modules/es.object.get-own-property-symbols": 327, "../modules/es.symbol.constructor": 350, "../modules/es.symbol.for": 352, "../modules/es.symbol.key-for": 355 }], 355: [function(require2, module3, exports3) {
        var $ = require2("../internals/export");
        var hasOwn2 = require2("../internals/has-own-property");
        var isSymbol2 = require2("../internals/is-symbol");
        var tryToString = require2("../internals/try-to-string");
        var shared = require2("../internals/shared");
        var NATIVE_SYMBOL_REGISTRY = require2("../internals/symbol-registry-detection");
        var SymbolToStringRegistry = shared("symbol-to-string-registry");
        $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
          keyFor: function keyFor(sym) {
            if (!isSymbol2(sym))
              throw new TypeError(tryToString(sym) + " is not a symbol");
            if (hasOwn2(SymbolToStringRegistry, sym))
              return SymbolToStringRegistry[sym];
          }
        });
      }, { "../internals/export": 170, "../internals/has-own-property": 189, "../internals/is-symbol": 212, "../internals/shared": 269, "../internals/symbol-registry-detection": 276, "../internals/try-to-string": 293 }], 356: [function(require2, module3, exports3) {
        var uncurryThis = require2("../internals/function-uncurry-this");
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $ArrayCopyWithin = require2("../internals/array-copy-within");
        var u$ArrayCopyWithin = uncurryThis($ArrayCopyWithin);
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("copyWithin", function copyWithin(target, start) {
          return u$ArrayCopyWithin(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-copy-within": 119, "../internals/function-uncurry-this": 181 }], 357: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $every = require2("../internals/array-iteration").every;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("every", function every(callbackfn) {
          return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-iteration": 125 }], 358: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $fill = require2("../internals/array-fill");
        var toBigInt = require2("../internals/to-big-int");
        var classof = require2("../internals/classof");
        var call = require2("../internals/function-call");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var fails = require2("../internals/fails");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var slice = uncurryThis("".slice);
        var CONVERSION_BUG = fails(function() {
          var count = 0;
          new Int8Array(2).fill({ valueOf: function() {
            return count++;
          } });
          return count !== 1;
        });
        exportTypedArrayMethod("fill", function fill(value) {
          var length = arguments.length;
          aTypedArray(this);
          var actualValue = slice(classof(this), 0, 3) === "Big" ? toBigInt(value) : +value;
          return call($fill, this, actualValue, length > 1 ? arguments[1] : void 0, length > 2 ? arguments[2] : void 0);
        }, CONVERSION_BUG);
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-fill": 120, "../internals/classof": 138, "../internals/fails": 171, "../internals/function-call": 177, "../internals/function-uncurry-this": 181, "../internals/to-big-int": 280 }], 359: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $filter = require2("../internals/array-iteration").filter;
        var fromSpeciesAndList = require2("../internals/typed-array-from-species-and-list");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("filter", function filter(callbackfn) {
          var list2 = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          return fromSpeciesAndList(this, list2);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-iteration": 125, "../internals/typed-array-from-species-and-list": 296 }], 360: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $findIndex = require2("../internals/array-iteration").findIndex;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("findIndex", function findIndex(predicate) {
          return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-iteration": 125 }], 361: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $find = require2("../internals/array-iteration").find;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("find", function find(predicate) {
          return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-iteration": 125 }], 362: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $forEach = require2("../internals/array-iteration").forEach;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("forEach", function forEach(callbackfn) {
          $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-iteration": 125 }], 363: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $includes = require2("../internals/array-includes").includes;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("includes", function includes(searchElement) {
          return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-includes": 124 }], 364: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $indexOf = require2("../internals/array-includes").indexOf;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("indexOf", function indexOf(searchElement) {
          return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-includes": 124 }], 365: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var fails = require2("../internals/fails");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var ArrayIterators = require2("../modules/es.array.iterator");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var ITERATOR = wellKnownSymbol("iterator");
        var Uint8Array2 = global3.Uint8Array;
        var arrayValues = uncurryThis(ArrayIterators.values);
        var arrayKeys = uncurryThis(ArrayIterators.keys);
        var arrayEntries = uncurryThis(ArrayIterators.entries);
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var TypedArrayPrototype = Uint8Array2 && Uint8Array2.prototype;
        var GENERIC = !fails(function() {
          TypedArrayPrototype[ITERATOR].call([1]);
        });
        var ITERATOR_IS_VALUES = !!TypedArrayPrototype && TypedArrayPrototype.values && TypedArrayPrototype[ITERATOR] === TypedArrayPrototype.values && TypedArrayPrototype.values.name === "values";
        var typedArrayValues = function values() {
          return arrayValues(aTypedArray(this));
        };
        exportTypedArrayMethod("entries", function entries2() {
          return arrayEntries(aTypedArray(this));
        }, GENERIC);
        exportTypedArrayMethod("keys", function keys() {
          return arrayKeys(aTypedArray(this));
        }, GENERIC);
        exportTypedArrayMethod("values", typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, { name: "values" });
        exportTypedArrayMethod(ITERATOR, typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, { name: "values" });
      }, { "../internals/array-buffer-view-core": 117, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/global": 188, "../internals/well-known-symbol": 306, "../modules/es.array.iterator": 316 }], 366: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var $join = uncurryThis([].join);
        exportTypedArrayMethod("join", function join(separator) {
          return $join(aTypedArray(this), separator);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/function-uncurry-this": 181 }], 367: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var apply2 = require2("../internals/function-apply");
        var $lastIndexOf = require2("../internals/array-last-index-of");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("lastIndexOf", function lastIndexOf(searchElement) {
          var length = arguments.length;
          return apply2($lastIndexOf, aTypedArray(this), length > 1 ? [searchElement, arguments[1]] : [searchElement]);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-last-index-of": 126, "../internals/function-apply": 174 }], 368: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $map = require2("../internals/array-iteration").map;
        var typedArraySpeciesConstructor = require2("../internals/typed-array-species-constructor");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("map", function map(mapfn) {
          return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : void 0, function(O, length) {
            return new (typedArraySpeciesConstructor(O))(length);
          });
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-iteration": 125, "../internals/typed-array-species-constructor": 298 }], 369: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $reduceRight = require2("../internals/array-reduce").right;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("reduceRight", function reduceRight(callbackfn) {
          var length = arguments.length;
          return $reduceRight(aTypedArray(this), callbackfn, length, length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-reduce": 129 }], 370: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $reduce = require2("../internals/array-reduce").left;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("reduce", function reduce(callbackfn) {
          var length = arguments.length;
          return $reduce(aTypedArray(this), callbackfn, length, length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-reduce": 129 }], 371: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var floor = Math.floor;
        exportTypedArrayMethod("reverse", function reverse() {
          var that = this;
          var length = aTypedArray(that).length;
          var middle = floor(length / 2);
          var index2 = 0;
          var value;
          while (index2 < middle) {
            value = that[index2];
            that[index2++] = that[--length];
            that[length] = value;
          }
          return that;
        });
      }, { "../internals/array-buffer-view-core": 117 }], 372: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var call = require2("../internals/function-call");
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var lengthOfArrayLike = require2("../internals/length-of-array-like");
        var toOffset = require2("../internals/to-offset");
        var toIndexedObject = require2("../internals/to-object");
        var fails = require2("../internals/fails");
        var RangeError2 = global3.RangeError;
        var Int8Array2 = global3.Int8Array;
        var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
        var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS = !fails(function() {
          var array = new Uint8ClampedArray(2);
          call($set, array, { length: 1, 0: 3 }, 1);
          return array[1] !== 3;
        });
        var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS && fails(function() {
          var array = new Int8Array2(2);
          array.set(1);
          array.set("2", 1);
          return array[0] !== 0 || array[1] !== 2;
        });
        exportTypedArrayMethod("set", function set2(arrayLike) {
          aTypedArray(this);
          var offset = toOffset(arguments.length > 1 ? arguments[1] : void 0, 1);
          var src = toIndexedObject(arrayLike);
          if (WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS)
            return call($set, this, src, offset);
          var length = this.length;
          var len = lengthOfArrayLike(src);
          var index2 = 0;
          if (len + offset > length)
            throw new RangeError2("Wrong length");
          while (index2 < len)
            this[offset + index2] = src[index2++];
        }, !WORKS_WITH_OBJECTS_AND_GENERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);
      }, { "../internals/array-buffer-view-core": 117, "../internals/fails": 171, "../internals/function-call": 177, "../internals/global": 188, "../internals/length-of-array-like": 219, "../internals/to-object": 285, "../internals/to-offset": 286 }], 373: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var typedArraySpeciesConstructor = require2("../internals/typed-array-species-constructor");
        var fails = require2("../internals/fails");
        var arraySlice = require2("../internals/array-slice");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var FORCED = fails(function() {
          new Int8Array(1).slice();
        });
        exportTypedArrayMethod("slice", function slice(start, end) {
          var list2 = arraySlice(aTypedArray(this), start, end);
          var C = typedArraySpeciesConstructor(this);
          var index2 = 0;
          var length = list2.length;
          var result = new C(length);
          while (length > index2)
            result[index2] = list2[index2++];
          return result;
        }, FORCED);
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-slice": 131, "../internals/fails": 171, "../internals/typed-array-species-constructor": 298 }], 374: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var $some = require2("../internals/array-iteration").some;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("some", function some(callbackfn) {
          return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-iteration": 125 }], 375: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var uncurryThis = require2("../internals/function-uncurry-this-clause");
        var fails = require2("../internals/fails");
        var aCallable = require2("../internals/a-callable");
        var internalSort = require2("../internals/array-sort");
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var FF = require2("../internals/engine-ff-version");
        var IE_OR_EDGE = require2("../internals/engine-is-ie-or-edge");
        var V8 = require2("../internals/engine-v8-version");
        var WEBKIT = require2("../internals/engine-webkit-version");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var Uint16Array2 = global3.Uint16Array;
        var nativeSort = Uint16Array2 && uncurryThis(Uint16Array2.prototype.sort);
        var ACCEPT_INCORRECT_ARGUMENTS = !!nativeSort && !(fails(function() {
          nativeSort(new Uint16Array2(2), null);
        }) && fails(function() {
          nativeSort(new Uint16Array2(2), {});
        }));
        var STABLE_SORT = !!nativeSort && !fails(function() {
          if (V8)
            return V8 < 74;
          if (FF)
            return FF < 67;
          if (IE_OR_EDGE)
            return true;
          if (WEBKIT)
            return WEBKIT < 602;
          var array = new Uint16Array2(516);
          var expected = Array(516);
          var index2, mod;
          for (index2 = 0; index2 < 516; index2++) {
            mod = index2 % 4;
            array[index2] = 515 - index2;
            expected[index2] = index2 - 2 * mod + 3;
          }
          nativeSort(array, function(a, b) {
            return (a / 4 | 0) - (b / 4 | 0);
          });
          for (index2 = 0; index2 < 516; index2++) {
            if (array[index2] !== expected[index2])
              return true;
          }
        });
        var getSortCompare = function(comparefn) {
          return function(x, y) {
            if (comparefn !== void 0)
              return +comparefn(x, y) || 0;
            if (y !== y)
              return -1;
            if (x !== x)
              return 1;
            if (x === 0 && y === 0)
              return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
            return x > y;
          };
        };
        exportTypedArrayMethod("sort", function sort(comparefn) {
          if (comparefn !== void 0)
            aCallable(comparefn);
          if (STABLE_SORT)
            return nativeSort(this, comparefn);
          return internalSort(aTypedArray(this), getSortCompare(comparefn));
        }, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);
      }, { "../internals/a-callable": 108, "../internals/array-buffer-view-core": 117, "../internals/array-sort": 132, "../internals/engine-ff-version": 158, "../internals/engine-is-ie-or-edge": 161, "../internals/engine-v8-version": 167, "../internals/engine-webkit-version": 168, "../internals/fails": 171, "../internals/function-uncurry-this-clause": 180, "../internals/global": 188 }], 376: [function(require2, module3, exports3) {
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var toLength = require2("../internals/to-length");
        var toAbsoluteIndex = require2("../internals/to-absolute-index");
        var typedArraySpeciesConstructor = require2("../internals/typed-array-species-constructor");
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        exportTypedArrayMethod("subarray", function subarray(begin, end) {
          var O = aTypedArray(this);
          var length = O.length;
          var beginIndex = toAbsoluteIndex(begin, length);
          var C = typedArraySpeciesConstructor(O);
          return new C(
            O.buffer,
            O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
            toLength((end === void 0 ? length : toAbsoluteIndex(end, length)) - beginIndex)
          );
        });
      }, { "../internals/array-buffer-view-core": 117, "../internals/to-absolute-index": 279, "../internals/to-length": 284, "../internals/typed-array-species-constructor": 298 }], 377: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var apply2 = require2("../internals/function-apply");
        var ArrayBufferViewCore = require2("../internals/array-buffer-view-core");
        var fails = require2("../internals/fails");
        var arraySlice = require2("../internals/array-slice");
        var Int8Array2 = global3.Int8Array;
        var aTypedArray = ArrayBufferViewCore.aTypedArray;
        var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
        var $toLocaleString = [].toLocaleString;
        var TO_LOCALE_STRING_BUG = !!Int8Array2 && fails(function() {
          $toLocaleString.call(new Int8Array2(1));
        });
        var FORCED = fails(function() {
          return [1, 2].toLocaleString() !== new Int8Array2([1, 2]).toLocaleString();
        }) || !fails(function() {
          Int8Array2.prototype.toLocaleString.call([1, 2]);
        });
        exportTypedArrayMethod("toLocaleString", function toLocaleString() {
          return apply2(
            $toLocaleString,
            TO_LOCALE_STRING_BUG ? arraySlice(aTypedArray(this)) : aTypedArray(this),
            arraySlice(arguments)
          );
        }, FORCED);
      }, { "../internals/array-buffer-view-core": 117, "../internals/array-slice": 131, "../internals/fails": 171, "../internals/function-apply": 174, "../internals/global": 188 }], 378: [function(require2, module3, exports3) {
        var exportTypedArrayMethod = require2("../internals/array-buffer-view-core").exportTypedArrayMethod;
        var fails = require2("../internals/fails");
        var global3 = require2("../internals/global");
        var uncurryThis = require2("../internals/function-uncurry-this");
        var Uint8Array2 = global3.Uint8Array;
        var Uint8ArrayPrototype = Uint8Array2 && Uint8Array2.prototype || {};
        var arrayToString = [].toString;
        var join = uncurryThis([].join);
        if (fails(function() {
          arrayToString.call({});
        })) {
          arrayToString = function toString() {
            return join(this);
          };
        }
        var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString !== arrayToString;
        exportTypedArrayMethod("toString", arrayToString, IS_NOT_ARRAY_METHOD);
      }, { "../internals/array-buffer-view-core": 117, "../internals/fails": 171, "../internals/function-uncurry-this": 181, "../internals/global": 188 }], 379: [function(require2, module3, exports3) {
        var createTypedArrayConstructor = require2("../internals/typed-array-constructor");
        createTypedArrayConstructor("Uint8", function(init) {
          return function Uint8Array2(data, byteOffset, length) {
            return init(this, data, byteOffset, length);
          };
        });
      }, { "../internals/typed-array-constructor": 294 }], 380: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var DOMIterables = require2("../internals/dom-iterables");
        var DOMTokenListPrototype = require2("../internals/dom-token-list-prototype");
        var forEach = require2("../internals/array-for-each");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var handlePrototype = function(CollectionPrototype) {
          if (CollectionPrototype && CollectionPrototype.forEach !== forEach)
            try {
              createNonEnumerableProperty(CollectionPrototype, "forEach", forEach);
            } catch (error) {
              CollectionPrototype.forEach = forEach;
            }
        };
        for (var COLLECTION_NAME in DOMIterables) {
          if (DOMIterables[COLLECTION_NAME]) {
            handlePrototype(global3[COLLECTION_NAME] && global3[COLLECTION_NAME].prototype);
          }
        }
        handlePrototype(DOMTokenListPrototype);
      }, { "../internals/array-for-each": 121, "../internals/create-non-enumerable-property": 145, "../internals/dom-iterables": 156, "../internals/dom-token-list-prototype": 157, "../internals/global": 188 }], 381: [function(require2, module3, exports3) {
        var global3 = require2("../internals/global");
        var DOMIterables = require2("../internals/dom-iterables");
        var DOMTokenListPrototype = require2("../internals/dom-token-list-prototype");
        var ArrayIteratorMethods = require2("../modules/es.array.iterator");
        var createNonEnumerableProperty = require2("../internals/create-non-enumerable-property");
        var setToStringTag = require2("../internals/set-to-string-tag");
        var wellKnownSymbol = require2("../internals/well-known-symbol");
        var ITERATOR = wellKnownSymbol("iterator");
        var ArrayValues = ArrayIteratorMethods.values;
        var handlePrototype = function(CollectionPrototype, COLLECTION_NAME2) {
          if (CollectionPrototype) {
            if (CollectionPrototype[ITERATOR] !== ArrayValues)
              try {
                createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
              } catch (error) {
                CollectionPrototype[ITERATOR] = ArrayValues;
              }
            setToStringTag(CollectionPrototype, COLLECTION_NAME2, true);
            if (DOMIterables[COLLECTION_NAME2])
              for (var METHOD_NAME in ArrayIteratorMethods) {
                if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])
                  try {
                    createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                  } catch (error) {
                    CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                  }
              }
          }
        };
        for (var COLLECTION_NAME in DOMIterables) {
          handlePrototype(global3[COLLECTION_NAME] && global3[COLLECTION_NAME].prototype, COLLECTION_NAME);
        }
        handlePrototype(DOMTokenListPrototype, "DOMTokenList");
      }, { "../internals/create-non-enumerable-property": 145, "../internals/dom-iterables": 156, "../internals/dom-token-list-prototype": 157, "../internals/global": 188, "../internals/set-to-string-tag": 266, "../internals/well-known-symbol": 306, "../modules/es.array.iterator": 316 }], 382: [function(require2, module3, exports3) {
        function isArray2(arg) {
          if (Array.isArray) {
            return Array.isArray(arg);
          }
          return objectToString2(arg) === "[object Array]";
        }
        exports3.isArray = isArray2;
        function isBoolean2(arg) {
          return typeof arg === "boolean";
        }
        exports3.isBoolean = isBoolean2;
        function isNull(arg) {
          return arg === null;
        }
        exports3.isNull = isNull;
        function isNullOrUndefined(arg) {
          return arg == null;
        }
        exports3.isNullOrUndefined = isNullOrUndefined;
        function isNumber(arg) {
          return typeof arg === "number";
        }
        exports3.isNumber = isNumber;
        function isString2(arg) {
          return typeof arg === "string";
        }
        exports3.isString = isString2;
        function isSymbol2(arg) {
          return typeof arg === "symbol";
        }
        exports3.isSymbol = isSymbol2;
        function isUndefined(arg) {
          return arg === void 0;
        }
        exports3.isUndefined = isUndefined;
        function isRegExp(re) {
          return objectToString2(re) === "[object RegExp]";
        }
        exports3.isRegExp = isRegExp;
        function isObject2(arg) {
          return typeof arg === "object" && arg !== null;
        }
        exports3.isObject = isObject2;
        function isDate(d) {
          return objectToString2(d) === "[object Date]";
        }
        exports3.isDate = isDate;
        function isError(e2) {
          return objectToString2(e2) === "[object Error]" || e2 instanceof Error;
        }
        exports3.isError = isError;
        function isFunction2(arg) {
          return typeof arg === "function";
        }
        exports3.isFunction = isFunction2;
        function isPrimitive(arg) {
          return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
          typeof arg === "undefined";
        }
        exports3.isPrimitive = isPrimitive;
        exports3.isBuffer = require2("buffer").Buffer.isBuffer;
        function objectToString2(o2) {
          return Object.prototype.toString.call(o2);
        }
      }, { "buffer": 103 }], 383: [function(require2, module3, exports3) {
        (function(global3) {
          var dateFormat = /* @__PURE__ */ function() {
            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|'[^']*'|'[^']*'/g;
            var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
            var timezoneClip = /[^-+\dA-Z]/g;
            return function(date, mask, utc, gmt) {
              if (arguments.length === 1 && kindOf(date) === "string" && !/\d/.test(date)) {
                mask = date;
                date = void 0;
              }
              date = date || /* @__PURE__ */ new Date();
              if (!(date instanceof Date)) {
                date = new Date(date);
              }
              if (isNaN(date)) {
                throw TypeError("Invalid date");
              }
              mask = String(dateFormat.masks[mask] || mask || dateFormat.masks["default"]);
              var maskSlice = mask.slice(0, 4);
              if (maskSlice === "UTC:" || maskSlice === "GMT:") {
                mask = mask.slice(4);
                utc = true;
                if (maskSlice === "GMT:") {
                  gmt = true;
                }
              }
              var _ = utc ? "getUTC" : "get";
              var d = date[_ + "Date"]();
              var D = date[_ + "Day"]();
              var m2 = date[_ + "Month"]();
              var y = date[_ + "FullYear"]();
              var H = date[_ + "Hours"]();
              var M = date[_ + "Minutes"]();
              var s2 = date[_ + "Seconds"]();
              var L = date[_ + "Milliseconds"]();
              var o2 = utc ? 0 : date.getTimezoneOffset();
              var W = getWeek(date);
              var N = getDayOfWeek(date);
              var flags = {
                d,
                dd: pad(d),
                ddd: dateFormat.i18n.dayNames[D],
                dddd: dateFormat.i18n.dayNames[D + 7],
                m: m2 + 1,
                mm: pad(m2 + 1),
                mmm: dateFormat.i18n.monthNames[m2],
                mmmm: dateFormat.i18n.monthNames[m2 + 12],
                yy: String(y).slice(2),
                yyyy: y,
                h: H % 12 || 12,
                hh: pad(H % 12 || 12),
                H,
                HH: pad(H),
                M,
                MM: pad(M),
                s: s2,
                ss: pad(s2),
                l: pad(L, 3),
                L: pad(Math.round(L / 10)),
                t: H < 12 ? "a" : "p",
                tt: H < 12 ? "am" : "pm",
                T: H < 12 ? "A" : "P",
                TT: H < 12 ? "AM" : "PM",
                Z: gmt ? "GMT" : utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o: (o2 > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o2) / 60) * 100 + Math.abs(o2) % 60, 4),
                S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
                W,
                N
              };
              return mask.replace(token, function(match) {
                if (match in flags) {
                  return flags[match];
                }
                return match.slice(1, match.length - 1);
              });
            };
          }();
          dateFormat.masks = {
            "default": "ddd mmm dd yyyy HH:MM:ss",
            "shortDate": "m/d/yy",
            "mediumDate": "mmm d, yyyy",
            "longDate": "mmmm d, yyyy",
            "fullDate": "dddd, mmmm d, yyyy",
            "shortTime": "h:MM TT",
            "mediumTime": "h:MM:ss TT",
            "longTime": "h:MM:ss TT Z",
            "isoDate": "yyyy-mm-dd",
            "isoTime": "HH:MM:ss",
            "isoDateTime": "yyyy-mm-dd'T'HH:MM:sso",
            "isoUtcDateTime": "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",
            "expiresHeaderFormat": "ddd, dd mmm yyyy HH:MM:ss Z"
          };
          dateFormat.i18n = {
            dayNames: [
              "Sun",
              "Mon",
              "Tue",
              "Wed",
              "Thu",
              "Fri",
              "Sat",
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            monthNames: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ]
          };
          function pad(val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) {
              val = "0" + val;
            }
            return val;
          }
          function getWeek(date) {
            var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            targetThursday.setDate(targetThursday.getDate() - (targetThursday.getDay() + 6) % 7 + 3);
            var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);
            firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3);
            var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
            targetThursday.setHours(targetThursday.getHours() - ds);
            var weekDiff = (targetThursday - firstThursday) / (864e5 * 7);
            return 1 + Math.floor(weekDiff);
          }
          function getDayOfWeek(date) {
            var dow = date.getDay();
            if (dow === 0) {
              dow = 7;
            }
            return dow;
          }
          function kindOf(val) {
            if (val === null) {
              return "null";
            }
            if (val === void 0) {
              return "undefined";
            }
            if (typeof val !== "object") {
              return typeof val;
            }
            if (Array.isArray(val)) {
              return "array";
            }
            return {}.toString.call(val).slice(8, -1).toLowerCase();
          }
          if (typeof exports3 === "object") {
            module3.exports = dateFormat;
          } else {
            global3.dateFormat = dateFormat;
          }
        })(this);
      }, {}], 384: [function(require2, module3, exports3) {
        var hasPropertyDescriptors = require2("has-property-descriptors")();
        var GetIntrinsic = require2("get-intrinsic");
        var $defineProperty = hasPropertyDescriptors && GetIntrinsic("%Object.defineProperty%", true);
        if ($defineProperty) {
          try {
            $defineProperty({}, "a", { value: 1 });
          } catch (e2) {
            $defineProperty = false;
          }
        }
        var $SyntaxError = GetIntrinsic("%SyntaxError%");
        var $TypeError = GetIntrinsic("%TypeError%");
        var gopd = require2("gopd");
        module3.exports = function defineDataProperty(obj, property, value) {
          if (!obj || typeof obj !== "object" && typeof obj !== "function") {
            throw new $TypeError("`obj` must be an object or a function`");
          }
          if (typeof property !== "string" && typeof property !== "symbol") {
            throw new $TypeError("`property` must be a string or a symbol`");
          }
          if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
            throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
          }
          if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
            throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
          }
          if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
            throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
          }
          if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
            throw new $TypeError("`loose`, if provided, must be a boolean");
          }
          var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
          var nonWritable = arguments.length > 4 ? arguments[4] : null;
          var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
          var loose = arguments.length > 6 ? arguments[6] : false;
          var desc = !!gopd && gopd(obj, property);
          if ($defineProperty) {
            $defineProperty(obj, property, {
              configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
              enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
              value,
              writable: nonWritable === null && desc ? desc.writable : !nonWritable
            });
          } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
            obj[property] = value;
          } else {
            throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
          }
        };
      }, { "get-intrinsic": 390, "gopd": 391, "has-property-descriptors": 392 }], 385: [function(require2, module3, exports3) {
        var matchHtmlRegExp = /["'&<>]/;
        module3.exports = escapeHtml;
        function escapeHtml(string) {
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape3;
          var html2 = "";
          var index2 = 0;
          var lastIndex = 0;
          for (index2 = match.index; index2 < str.length; index2++) {
            switch (str.charCodeAt(index2)) {
              case 34:
                escape3 = "&quot;";
                break;
              case 38:
                escape3 = "&amp;";
                break;
              case 39:
                escape3 = "&#39;";
                break;
              case 60:
                escape3 = "&lt;";
                break;
              case 62:
                escape3 = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index2) {
              html2 += str.substring(lastIndex, index2);
            }
            lastIndex = index2 + 1;
            html2 += escape3;
          }
          return lastIndex !== index2 ? html2 + str.substring(lastIndex, index2) : html2;
        }
      }, {}], 386: [function(require2, module3, exports3) {
        var R = typeof Reflect === "object" ? Reflect : null;
        var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
          return Function.prototype.apply.call(target, receiver, args);
        };
        var ReflectOwnKeys;
        if (R && typeof R.ownKeys === "function") {
          ReflectOwnKeys = R.ownKeys;
        } else if (Object.getOwnPropertySymbols) {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
          };
        } else {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target);
          };
        }
        function ProcessEmitWarning(warning) {
          if (console && console.warn)
            console.warn(warning);
        }
        var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
          return value !== value;
        };
        function EventEmitter() {
          EventEmitter.init.call(this);
        }
        module3.exports = EventEmitter;
        module3.exports.once = once2;
        EventEmitter.EventEmitter = EventEmitter;
        EventEmitter.prototype._events = void 0;
        EventEmitter.prototype._eventsCount = 0;
        EventEmitter.prototype._maxListeners = void 0;
        var defaultMaxListeners = 10;
        function checkListener(listener) {
          if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }
        }
        Object.defineProperty(EventEmitter, "defaultMaxListeners", {
          enumerable: true,
          get: function() {
            return defaultMaxListeners;
          },
          set: function(arg) {
            if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
            }
            defaultMaxListeners = arg;
          }
        });
        EventEmitter.init = function() {
          if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          }
          this._maxListeners = this._maxListeners || void 0;
        };
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n2) {
          if (typeof n2 !== "number" || n2 < 0 || NumberIsNaN(n2)) {
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n2 + ".");
          }
          this._maxListeners = n2;
          return this;
        };
        function _getMaxListeners(that) {
          if (that._maxListeners === void 0)
            return EventEmitter.defaultMaxListeners;
          return that._maxListeners;
        }
        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
          return _getMaxListeners(this);
        };
        EventEmitter.prototype.emit = function emit2(type) {
          var args = [];
          for (var i = 1; i < arguments.length; i++)
            args.push(arguments[i]);
          var doError = type === "error";
          var events = this._events;
          if (events !== void 0)
            doError = doError && events.error === void 0;
          else if (!doError)
            return false;
          if (doError) {
            var er;
            if (args.length > 0)
              er = args[0];
            if (er instanceof Error) {
              throw er;
            }
            var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
            err.context = er;
            throw err;
          }
          var handler = events[type];
          if (handler === void 0)
            return false;
          if (typeof handler === "function") {
            ReflectApply(handler, this, args);
          } else {
            var len = handler.length;
            var listeners = arrayClone(handler, len);
            for (var i = 0; i < len; ++i)
              ReflectApply(listeners[i], this, args);
          }
          return true;
        };
        function _addListener(target, type, listener, prepend) {
          var m2;
          var events;
          var existing;
          checkListener(listener);
          events = target._events;
          if (events === void 0) {
            events = target._events = /* @__PURE__ */ Object.create(null);
            target._eventsCount = 0;
          } else {
            if (events.newListener !== void 0) {
              target.emit(
                "newListener",
                type,
                listener.listener ? listener.listener : listener
              );
              events = target._events;
            }
            existing = events[type];
          }
          if (existing === void 0) {
            existing = events[type] = listener;
            ++target._eventsCount;
          } else {
            if (typeof existing === "function") {
              existing = events[type] = prepend ? [listener, existing] : [existing, listener];
            } else if (prepend) {
              existing.unshift(listener);
            } else {
              existing.push(listener);
            }
            m2 = _getMaxListeners(target);
            if (m2 > 0 && existing.length > m2 && !existing.warned) {
              existing.warned = true;
              var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              w.name = "MaxListenersExceededWarning";
              w.emitter = target;
              w.type = type;
              w.count = existing.length;
              ProcessEmitWarning(w);
            }
          }
          return target;
        }
        EventEmitter.prototype.addListener = function addListener(type, listener) {
          return _addListener(this, type, listener, false);
        };
        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
        EventEmitter.prototype.prependListener = function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };
        function onceWrapper() {
          if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn);
            this.fired = true;
            if (arguments.length === 0)
              return this.listener.call(this.target);
            return this.listener.apply(this.target, arguments);
          }
        }
        function _onceWrap(target, type, listener) {
          var state = { fired: false, wrapFn: void 0, target, type, listener };
          var wrapped = onceWrapper.bind(state);
          wrapped.listener = listener;
          state.wrapFn = wrapped;
          return wrapped;
        }
        EventEmitter.prototype.once = function once3(type, listener) {
          checkListener(listener);
          this.on(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.removeListener = function removeListener(type, listener) {
          var list2, events, position, i, originalListener;
          checkListener(listener);
          events = this._events;
          if (events === void 0)
            return this;
          list2 = events[type];
          if (list2 === void 0)
            return this;
          if (list2 === listener || list2.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit("removeListener", type, list2.listener || listener);
            }
          } else if (typeof list2 !== "function") {
            position = -1;
            for (i = list2.length - 1; i >= 0; i--) {
              if (list2[i] === listener || list2[i].listener === listener) {
                originalListener = list2[i].listener;
                position = i;
                break;
              }
            }
            if (position < 0)
              return this;
            if (position === 0)
              list2.shift();
            else {
              spliceOne(list2, position);
            }
            if (list2.length === 1)
              events[type] = list2[0];
            if (events.removeListener !== void 0)
              this.emit("removeListener", type, originalListener || listener);
          }
          return this;
        };
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
          var listeners, events, i;
          events = this._events;
          if (events === void 0)
            return this;
          if (events.removeListener === void 0) {
            if (arguments.length === 0) {
              this._events = /* @__PURE__ */ Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== void 0) {
              if (--this._eventsCount === 0)
                this._events = /* @__PURE__ */ Object.create(null);
              else
                delete events[type];
            }
            return this;
          }
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === "removeListener")
                continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners("removeListener");
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
            return this;
          }
          listeners = events[type];
          if (typeof listeners === "function") {
            this.removeListener(type, listeners);
          } else if (listeners !== void 0) {
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }
          return this;
        };
        function _listeners(target, type, unwrap) {
          var events = target._events;
          if (events === void 0)
            return [];
          var evlistener = events[type];
          if (evlistener === void 0)
            return [];
          if (typeof evlistener === "function")
            return unwrap ? [evlistener.listener || evlistener] : [evlistener];
          return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }
        EventEmitter.prototype.listeners = function listeners(type) {
          return _listeners(this, type, true);
        };
        EventEmitter.prototype.rawListeners = function rawListeners(type) {
          return _listeners(this, type, false);
        };
        EventEmitter.listenerCount = function(emitter, type) {
          if (typeof emitter.listenerCount === "function") {
            return emitter.listenerCount(type);
          } else {
            return listenerCount.call(emitter, type);
          }
        };
        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
          var events = this._events;
          if (events !== void 0) {
            var evlistener = events[type];
            if (typeof evlistener === "function") {
              return 1;
            } else if (evlistener !== void 0) {
              return evlistener.length;
            }
          }
          return 0;
        }
        EventEmitter.prototype.eventNames = function eventNames() {
          return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
        };
        function arrayClone(arr, n2) {
          var copy = new Array(n2);
          for (var i = 0; i < n2; ++i)
            copy[i] = arr[i];
          return copy;
        }
        function spliceOne(list2, index2) {
          for (; index2 + 1 < list2.length; index2++)
            list2[index2] = list2[index2 + 1];
          list2.pop();
        }
        function unwrapListeners(arr) {
          var ret = new Array(arr.length);
          for (var i = 0; i < ret.length; ++i) {
            ret[i] = arr[i].listener || arr[i];
          }
          return ret;
        }
        function once2(emitter, name) {
          return new Promise(function(resolve2, reject) {
            function errorListener(err) {
              emitter.removeListener(name, resolver);
              reject(err);
            }
            function resolver() {
              if (typeof emitter.removeListener === "function") {
                emitter.removeListener("error", errorListener);
              }
              resolve2([].slice.call(arguments));
            }
            eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
            if (name !== "error") {
              addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
            }
          });
        }
        function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
          if (typeof emitter.on === "function") {
            eventTargetAgnosticAddListener(emitter, "error", handler, flags);
          }
        }
        function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
          if (typeof emitter.on === "function") {
            if (flags.once) {
              emitter.once(name, listener);
            } else {
              emitter.on(name, listener);
            }
          } else if (typeof emitter.addEventListener === "function") {
            emitter.addEventListener(name, function wrapListener(arg) {
              if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
              }
              listener(arg);
            });
          } else {
            throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
          }
        }
      }, {}], 387: [function(require2, module3, exports3) {
        var isCallable = require2("is-callable");
        var toStr = Object.prototype.toString;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var forEachArray = function forEachArray2(array, iterator, receiver) {
          for (var i = 0, len = array.length; i < len; i++) {
            if (hasOwnProperty2.call(array, i)) {
              if (receiver == null) {
                iterator(array[i], i, array);
              } else {
                iterator.call(receiver, array[i], i, array);
              }
            }
          }
        };
        var forEachString = function forEachString2(string, iterator, receiver) {
          for (var i = 0, len = string.length; i < len; i++) {
            if (receiver == null) {
              iterator(string.charAt(i), i, string);
            } else {
              iterator.call(receiver, string.charAt(i), i, string);
            }
          }
        };
        var forEachObject = function forEachObject2(object, iterator, receiver) {
          for (var k in object) {
            if (hasOwnProperty2.call(object, k)) {
              if (receiver == null) {
                iterator(object[k], k, object);
              } else {
                iterator.call(receiver, object[k], k, object);
              }
            }
          }
        };
        var forEach = function forEach2(list2, iterator, thisArg) {
          if (!isCallable(iterator)) {
            throw new TypeError("iterator must be a function");
          }
          var receiver;
          if (arguments.length >= 3) {
            receiver = thisArg;
          }
          if (toStr.call(list2) === "[object Array]") {
            forEachArray(list2, iterator, receiver);
          } else if (typeof list2 === "string") {
            forEachString(list2, iterator, receiver);
          } else {
            forEachObject(list2, iterator, receiver);
          }
        };
        module3.exports = forEach;
      }, { "is-callable": 410 }], 388: [function(require2, module3, exports3) {
        var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
        var toStr = Object.prototype.toString;
        var max = Math.max;
        var funcType = "[object Function]";
        var concatty = function concatty2(a, b) {
          var arr = [];
          for (var i = 0; i < a.length; i += 1) {
            arr[i] = a[i];
          }
          for (var j = 0; j < b.length; j += 1) {
            arr[j + a.length] = b[j];
          }
          return arr;
        };
        var slicy = function slicy2(arrLike, offset) {
          var arr = [];
          for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
            arr[j] = arrLike[i];
          }
          return arr;
        };
        var joiny = function(arr, joiner) {
          var str = "";
          for (var i = 0; i < arr.length; i += 1) {
            str += arr[i];
            if (i + 1 < arr.length) {
              str += joiner;
            }
          }
          return str;
        };
        module3.exports = function bind(that) {
          var target = this;
          if (typeof target !== "function" || toStr.apply(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
          }
          var args = slicy(arguments, 1);
          var bound;
          var binder = function() {
            if (this instanceof bound) {
              var result = target.apply(
                this,
                concatty(args, arguments)
              );
              if (Object(result) === result) {
                return result;
              }
              return this;
            }
            return target.apply(
              that,
              concatty(args, arguments)
            );
          };
          var boundLength = max(0, target.length - args.length);
          var boundArgs = [];
          for (var i = 0; i < boundLength; i++) {
            boundArgs[i] = "$" + i;
          }
          bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
          if (target.prototype) {
            var Empty = function Empty2() {
            };
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
          }
          return bound;
        };
      }, {}], 389: [function(require2, module3, exports3) {
        var implementation = require2("./implementation");
        module3.exports = Function.prototype.bind || implementation;
      }, { "./implementation": 388 }], 390: [function(require2, module3, exports3) {
        var undefined$1;
        var $SyntaxError = SyntaxError;
        var $Function = Function;
        var $TypeError = TypeError;
        var getEvalledConstructor = function(expressionSyntax) {
          try {
            return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
          } catch (e2) {
          }
        };
        var $gOPD = Object.getOwnPropertyDescriptor;
        if ($gOPD) {
          try {
            $gOPD({}, "");
          } catch (e2) {
            $gOPD = null;
          }
        }
        var throwTypeError = function() {
          throw new $TypeError();
        };
        var ThrowTypeError = $gOPD ? function() {
          try {
            arguments.callee;
            return throwTypeError;
          } catch (calleeThrows) {
            try {
              return $gOPD(arguments, "callee").get;
            } catch (gOPDthrows) {
              return throwTypeError;
            }
          }
        }() : throwTypeError;
        var hasSymbols = require2("has-symbols")();
        var hasProto = require2("has-proto")();
        var getProto2 = Object.getPrototypeOf || (hasProto ? function(x) {
          return x.__proto__;
        } : null);
        var needsEval = {};
        var TypedArray = typeof Uint8Array === "undefined" || !getProto2 ? undefined$1 : getProto2(Uint8Array);
        var INTRINSICS = {
          "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
          "%Array%": Array,
          "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
          "%ArrayIteratorPrototype%": hasSymbols && getProto2 ? getProto2([][Symbol.iterator]()) : undefined$1,
          "%AsyncFromSyncIteratorPrototype%": undefined$1,
          "%AsyncFunction%": needsEval,
          "%AsyncGenerator%": needsEval,
          "%AsyncGeneratorFunction%": needsEval,
          "%AsyncIteratorPrototype%": needsEval,
          "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
          "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
          "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
          "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
          "%Boolean%": Boolean,
          "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
          "%Date%": Date,
          "%decodeURI%": decodeURI,
          "%decodeURIComponent%": decodeURIComponent,
          "%encodeURI%": encodeURI,
          "%encodeURIComponent%": encodeURIComponent,
          "%Error%": Error,
          "%eval%": eval,
          // eslint-disable-line no-eval
          "%EvalError%": EvalError,
          "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
          "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
          "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
          "%Function%": $Function,
          "%GeneratorFunction%": needsEval,
          "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
          "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
          "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
          "%isFinite%": isFinite,
          "%isNaN%": isNaN,
          "%IteratorPrototype%": hasSymbols && getProto2 ? getProto2(getProto2([][Symbol.iterator]())) : undefined$1,
          "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
          "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
          "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Map())[Symbol.iterator]()),
          "%Math%": Math,
          "%Number%": Number,
          "%Object%": Object,
          "%parseFloat%": parseFloat,
          "%parseInt%": parseInt,
          "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
          "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
          "%RangeError%": RangeError,
          "%ReferenceError%": ReferenceError,
          "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
          "%RegExp%": RegExp,
          "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
          "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Set())[Symbol.iterator]()),
          "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
          "%String%": String,
          "%StringIteratorPrototype%": hasSymbols && getProto2 ? getProto2(""[Symbol.iterator]()) : undefined$1,
          "%Symbol%": hasSymbols ? Symbol : undefined$1,
          "%SyntaxError%": $SyntaxError,
          "%ThrowTypeError%": ThrowTypeError,
          "%TypedArray%": TypedArray,
          "%TypeError%": $TypeError,
          "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
          "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
          "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
          "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
          "%URIError%": URIError,
          "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
          "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
          "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
        };
        if (getProto2) {
          try {
            null.error;
          } catch (e2) {
            var errorProto = getProto2(getProto2(e2));
            INTRINSICS["%Error.prototype%"] = errorProto;
          }
        }
        var doEval = function doEval2(name) {
          var value;
          if (name === "%AsyncFunction%") {
            value = getEvalledConstructor("async function () {}");
          } else if (name === "%GeneratorFunction%") {
            value = getEvalledConstructor("function* () {}");
          } else if (name === "%AsyncGeneratorFunction%") {
            value = getEvalledConstructor("async function* () {}");
          } else if (name === "%AsyncGenerator%") {
            var fn = doEval2("%AsyncGeneratorFunction%");
            if (fn) {
              value = fn.prototype;
            }
          } else if (name === "%AsyncIteratorPrototype%") {
            var gen = doEval2("%AsyncGenerator%");
            if (gen && getProto2) {
              value = getProto2(gen.prototype);
            }
          }
          INTRINSICS[name] = value;
          return value;
        };
        var LEGACY_ALIASES = {
          "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
          "%ArrayPrototype%": ["Array", "prototype"],
          "%ArrayProto_entries%": ["Array", "prototype", "entries"],
          "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
          "%ArrayProto_keys%": ["Array", "prototype", "keys"],
          "%ArrayProto_values%": ["Array", "prototype", "values"],
          "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
          "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
          "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
          "%BooleanPrototype%": ["Boolean", "prototype"],
          "%DataViewPrototype%": ["DataView", "prototype"],
          "%DatePrototype%": ["Date", "prototype"],
          "%ErrorPrototype%": ["Error", "prototype"],
          "%EvalErrorPrototype%": ["EvalError", "prototype"],
          "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
          "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
          "%FunctionPrototype%": ["Function", "prototype"],
          "%Generator%": ["GeneratorFunction", "prototype"],
          "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
          "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
          "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
          "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
          "%JSONParse%": ["JSON", "parse"],
          "%JSONStringify%": ["JSON", "stringify"],
          "%MapPrototype%": ["Map", "prototype"],
          "%NumberPrototype%": ["Number", "prototype"],
          "%ObjectPrototype%": ["Object", "prototype"],
          "%ObjProto_toString%": ["Object", "prototype", "toString"],
          "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
          "%PromisePrototype%": ["Promise", "prototype"],
          "%PromiseProto_then%": ["Promise", "prototype", "then"],
          "%Promise_all%": ["Promise", "all"],
          "%Promise_reject%": ["Promise", "reject"],
          "%Promise_resolve%": ["Promise", "resolve"],
          "%RangeErrorPrototype%": ["RangeError", "prototype"],
          "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
          "%RegExpPrototype%": ["RegExp", "prototype"],
          "%SetPrototype%": ["Set", "prototype"],
          "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
          "%StringPrototype%": ["String", "prototype"],
          "%SymbolPrototype%": ["Symbol", "prototype"],
          "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
          "%TypedArrayPrototype%": ["TypedArray", "prototype"],
          "%TypeErrorPrototype%": ["TypeError", "prototype"],
          "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
          "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
          "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
          "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
          "%URIErrorPrototype%": ["URIError", "prototype"],
          "%WeakMapPrototype%": ["WeakMap", "prototype"],
          "%WeakSetPrototype%": ["WeakSet", "prototype"]
        };
        var bind = require2("function-bind");
        var hasOwn2 = require2("hasown");
        var $concat = bind.call(Function.call, Array.prototype.concat);
        var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
        var $replace = bind.call(Function.call, String.prototype.replace);
        var $strSlice = bind.call(Function.call, String.prototype.slice);
        var $exec = bind.call(Function.call, RegExp.prototype.exec);
        var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
        var reEscapeChar = /\\(\\)?/g;
        var stringToPath = function stringToPath2(string) {
          var first = $strSlice(string, 0, 1);
          var last = $strSlice(string, -1);
          if (first === "%" && last !== "%") {
            throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
          } else if (last === "%" && first !== "%") {
            throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
          }
          var result = [];
          $replace(string, rePropName, function(match, number, quote, subString) {
            result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
          });
          return result;
        };
        var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
          var intrinsicName = name;
          var alias;
          if (hasOwn2(LEGACY_ALIASES, intrinsicName)) {
            alias = LEGACY_ALIASES[intrinsicName];
            intrinsicName = "%" + alias[0] + "%";
          }
          if (hasOwn2(INTRINSICS, intrinsicName)) {
            var value = INTRINSICS[intrinsicName];
            if (value === needsEval) {
              value = doEval(intrinsicName);
            }
            if (typeof value === "undefined" && !allowMissing) {
              throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
            }
            return {
              alias,
              name: intrinsicName,
              value
            };
          }
          throw new $SyntaxError("intrinsic " + name + " does not exist!");
        };
        module3.exports = function GetIntrinsic(name, allowMissing) {
          if (typeof name !== "string" || name.length === 0) {
            throw new $TypeError("intrinsic name must be a non-empty string");
          }
          if (arguments.length > 1 && typeof allowMissing !== "boolean") {
            throw new $TypeError('"allowMissing" argument must be a boolean');
          }
          if ($exec(/^%?[^%]*%?$/, name) === null) {
            throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
          }
          var parts = stringToPath(name);
          var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
          var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
          var intrinsicRealName = intrinsic.name;
          var value = intrinsic.value;
          var skipFurtherCaching = false;
          var alias = intrinsic.alias;
          if (alias) {
            intrinsicBaseName = alias[0];
            $spliceApply(parts, $concat([0, 1], alias));
          }
          for (var i = 1, isOwn = true; i < parts.length; i += 1) {
            var part = parts[i];
            var first = $strSlice(part, 0, 1);
            var last = $strSlice(part, -1);
            if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
              throw new $SyntaxError("property names with quotes must have matching quotes");
            }
            if (part === "constructor" || !isOwn) {
              skipFurtherCaching = true;
            }
            intrinsicBaseName += "." + part;
            intrinsicRealName = "%" + intrinsicBaseName + "%";
            if (hasOwn2(INTRINSICS, intrinsicRealName)) {
              value = INTRINSICS[intrinsicRealName];
            } else if (value != null) {
              if (!(part in value)) {
                if (!allowMissing) {
                  throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                }
                return void 0;
              }
              if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                  value = desc.get;
                } else {
                  value = value[part];
                }
              } else {
                isOwn = hasOwn2(value, part);
                value = value[part];
              }
              if (isOwn && !skipFurtherCaching) {
                INTRINSICS[intrinsicRealName] = value;
              }
            }
          }
          return value;
        };
      }, { "function-bind": 389, "has-proto": 393, "has-symbols": 394, "hasown": 397 }], 391: [function(require2, module3, exports3) {
        var GetIntrinsic = require2("get-intrinsic");
        var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
        if ($gOPD) {
          try {
            $gOPD([], "length");
          } catch (e2) {
            $gOPD = null;
          }
        }
        module3.exports = $gOPD;
      }, { "get-intrinsic": 390 }], 392: [function(require2, module3, exports3) {
        var GetIntrinsic = require2("get-intrinsic");
        var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
        var hasPropertyDescriptors = function hasPropertyDescriptors2() {
          if ($defineProperty) {
            try {
              $defineProperty({}, "a", { value: 1 });
              return true;
            } catch (e2) {
              return false;
            }
          }
          return false;
        };
        hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
          if (!hasPropertyDescriptors()) {
            return null;
          }
          try {
            return $defineProperty([], "length", { value: 1 }).length !== 1;
          } catch (e2) {
            return true;
          }
        };
        module3.exports = hasPropertyDescriptors;
      }, { "get-intrinsic": 390 }], 393: [function(require2, module3, exports3) {
        var test = {
          foo: {}
        };
        var $Object = Object;
        module3.exports = function hasProto() {
          return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
        };
      }, {}], 394: [function(require2, module3, exports3) {
        var origSymbol = typeof Symbol !== "undefined" && Symbol;
        var hasSymbolSham = require2("./shams");
        module3.exports = function hasNativeSymbols() {
          if (typeof origSymbol !== "function") {
            return false;
          }
          if (typeof Symbol !== "function") {
            return false;
          }
          if (typeof origSymbol("foo") !== "symbol") {
            return false;
          }
          if (typeof Symbol("bar") !== "symbol") {
            return false;
          }
          return hasSymbolSham();
        };
      }, { "./shams": 395 }], 395: [function(require2, module3, exports3) {
        module3.exports = function hasSymbols() {
          if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
            return false;
          }
          if (typeof Symbol.iterator === "symbol") {
            return true;
          }
          var obj = {};
          var sym = Symbol("test");
          var symObj = Object(sym);
          if (typeof sym === "string") {
            return false;
          }
          if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
            return false;
          }
          if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
            return false;
          }
          var symVal = 42;
          obj[sym] = symVal;
          for (sym in obj) {
            return false;
          }
          if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
            return false;
          }
          if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
            return false;
          }
          var syms = Object.getOwnPropertySymbols(obj);
          if (syms.length !== 1 || syms[0] !== sym) {
            return false;
          }
          if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
            return false;
          }
          if (typeof Object.getOwnPropertyDescriptor === "function") {
            var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
            if (descriptor.value !== symVal || descriptor.enumerable !== true) {
              return false;
            }
          }
          return true;
        };
      }, {}], 396: [function(require2, module3, exports3) {
        var hasSymbols = require2("has-symbols/shams");
        module3.exports = function hasToStringTagShams() {
          return hasSymbols() && !!Symbol.toStringTag;
        };
      }, { "has-symbols/shams": 395 }], 397: [function(require2, module3, exports3) {
        var call = Function.prototype.call;
        var $hasOwn = Object.prototype.hasOwnProperty;
        var bind = require2("function-bind");
        module3.exports = bind.call(call, $hasOwn);
      }, { "function-bind": 389 }], 398: [function(require2, module3, exports3) {
        var http = require2("http");
        var url = require2("url");
        var https = module3.exports;
        for (var key in http) {
          if (http.hasOwnProperty(key))
            https[key] = http[key];
        }
        https.request = function(params, cb) {
          params = validateParams(params);
          return http.request.call(this, params, cb);
        };
        https.get = function(params, cb) {
          params = validateParams(params);
          return http.get.call(this, params, cb);
        };
        function validateParams(params) {
          if (typeof params === "string") {
            params = url.parse(params);
          }
          if (!params.protocol) {
            params.protocol = "https:";
          }
          if (params.protocol !== "https:") {
            throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
          }
          return params;
        }
      }, { "http": 539, "url": 543 }], 399: [function(require2, module3, exports3) {
        var util = require2("util");
        var ms = require2("ms");
        module3.exports = function(t2) {
          if (typeof t2 === "number")
            return t2;
          var r = ms(t2);
          if (r === void 0) {
            var err = new Error(util.format("humanize-ms(%j) result undefined", t2));
            console.warn(err.stack);
          }
          return r;
        };
      }, { "ms": 432, "util": 489 }], 400: [function(require2, module3, exports3) {
        /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
        exports3.read = function(buffer2, offset, isLE, mLen, nBytes) {
          var e2, m2;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s2 = buffer2[offset + i];
          i += d;
          e2 = s2 & (1 << -nBits) - 1;
          s2 >>= -nBits;
          nBits += eLen;
          for (; nBits > 0; e2 = e2 * 256 + buffer2[offset + i], i += d, nBits -= 8) {
          }
          m2 = e2 & (1 << -nBits) - 1;
          e2 >>= -nBits;
          nBits += mLen;
          for (; nBits > 0; m2 = m2 * 256 + buffer2[offset + i], i += d, nBits -= 8) {
          }
          if (e2 === 0) {
            e2 = 1 - eBias;
          } else if (e2 === eMax) {
            return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
          } else {
            m2 = m2 + Math.pow(2, mLen);
            e2 = e2 - eBias;
          }
          return (s2 ? -1 : 1) * m2 * Math.pow(2, e2 - mLen);
        };
        exports3.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
          var e2, m2, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
          value = Math.abs(value);
          if (isNaN(value) || value === Infinity) {
            m2 = isNaN(value) ? 1 : 0;
            e2 = eMax;
          } else {
            e2 = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e2)) < 1) {
              e2--;
              c *= 2;
            }
            if (e2 + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e2++;
              c /= 2;
            }
            if (e2 + eBias >= eMax) {
              m2 = 0;
              e2 = eMax;
            } else if (e2 + eBias >= 1) {
              m2 = (value * c - 1) * Math.pow(2, mLen);
              e2 = e2 + eBias;
            } else {
              m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e2 = 0;
            }
          }
          for (; mLen >= 8; buffer2[offset + i] = m2 & 255, i += d, m2 /= 256, mLen -= 8) {
          }
          e2 = e2 << mLen | m2;
          eLen += mLen;
          for (; eLen > 0; buffer2[offset + i] = e2 & 255, i += d, e2 /= 256, eLen -= 8) {
          }
          buffer2[offset + i - d] |= s2 * 128;
        };
      }, {}], 401: [function(require2, module3, exports3) {
        var types = [
          require2("./nextTick"),
          require2("./queueMicrotask"),
          require2("./mutation.js"),
          require2("./messageChannel"),
          require2("./stateChange"),
          require2("./timeout")
        ];
        var draining;
        var currentQueue;
        var queueIndex = -1;
        var queue2 = [];
        var scheduled = false;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue2 = currentQueue.concat(queue2);
          } else {
            queueIndex = -1;
          }
          if (queue2.length) {
            nextTick2();
          }
        }
        function nextTick2() {
          if (draining) {
            return;
          }
          scheduled = false;
          draining = true;
          var len2 = queue2.length;
          var timeout = setTimeout(cleanUpNextTick);
          while (len2) {
            currentQueue = queue2;
            queue2 = [];
            while (currentQueue && ++queueIndex < len2) {
              currentQueue[queueIndex].run();
            }
            queueIndex = -1;
            len2 = queue2.length;
          }
          currentQueue = null;
          queueIndex = -1;
          draining = false;
          clearTimeout(timeout);
        }
        var scheduleDrain;
        var i = -1;
        var len = types.length;
        while (++i < len) {
          if (types[i] && types[i].test && types[i].test()) {
            scheduleDrain = types[i].install(nextTick2);
            break;
          }
        }
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          var fun = this.fun;
          var array = this.array;
          switch (array.length) {
            case 0:
              return fun();
            case 1:
              return fun(array[0]);
            case 2:
              return fun(array[0], array[1]);
            case 3:
              return fun(array[0], array[1], array[2]);
            default:
              return fun.apply(null, array);
          }
        };
        module3.exports = immediate;
        function immediate(task) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              args[i2 - 1] = arguments[i2];
            }
          }
          queue2.push(new Item(task, args));
          if (!scheduled && !draining) {
            scheduled = true;
            scheduleDrain();
          }
        }
      }, { "./messageChannel": 402, "./mutation.js": 403, "./nextTick": 102, "./queueMicrotask": 404, "./stateChange": 405, "./timeout": 406 }], 402: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            exports3.test = function() {
              if (global3.setImmediate) {
                return false;
              }
              return typeof global3.MessageChannel !== "undefined";
            };
            exports3.install = function(func) {
              var channel = new global3.MessageChannel();
              channel.port1.onmessage = func;
              return function() {
                channel.port2.postMessage(0);
              };
            };
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 403: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            var Mutation = global3.MutationObserver || global3.WebKitMutationObserver;
            exports3.test = function() {
              return Mutation;
            };
            exports3.install = function(handle) {
              var called = 0;
              var observer = new Mutation(handle);
              var element = global3.document.createTextNode("");
              observer.observe(element, {
                characterData: true
              });
              return function() {
                element.data = called = ++called % 2;
              };
            };
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 404: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            exports3.test = function() {
              return typeof global3.queueMicrotask === "function";
            };
            exports3.install = function(func) {
              return function() {
                global3.queueMicrotask(func);
              };
            };
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 405: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            exports3.test = function() {
              return "document" in global3 && "onreadystatechange" in global3.document.createElement("script");
            };
            exports3.install = function(handle) {
              return function() {
                var scriptEl = global3.document.createElement("script");
                scriptEl.onreadystatechange = function() {
                  handle();
                  scriptEl.onreadystatechange = null;
                  scriptEl.parentNode.removeChild(scriptEl);
                  scriptEl = null;
                };
                global3.document.documentElement.appendChild(scriptEl);
                return handle;
              };
            };
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 406: [function(require2, module3, exports3) {
        exports3.test = function() {
          return true;
        };
        exports3.install = function(t2) {
          return function() {
            setTimeout(t2, 0);
          };
        };
      }, {}], 407: [function(require2, module3, exports3) {
        if (typeof Object.create === "function") {
          module3.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            }
          };
        } else {
          module3.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {
              };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      }, {}], 408: [function(require2, module3, exports3) {
        var hasToStringTag = require2("has-tostringtag/shams")();
        var callBound = require2("call-bind/callBound");
        var $toString = callBound("Object.prototype.toString");
        var isStandardArguments = function isArguments(value) {
          if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
            return false;
          }
          return $toString(value) === "[object Arguments]";
        };
        var isLegacyArguments = function isArguments(value) {
          if (isStandardArguments(value)) {
            return true;
          }
          return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
        };
        var supportsStandardArguments = function() {
          return isStandardArguments(arguments);
        }();
        isStandardArguments.isLegacyArguments = isLegacyArguments;
        module3.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
      }, { "call-bind/callBound": 105, "has-tostringtag/shams": 396 }], 409: [function(require2, module3, exports3) {
        /*!
         * Determine if an object is a Buffer
         *
         * @author   Feross Aboukhadijeh <https://feross.org>
         * @license  MIT
         */
        module3.exports = function(obj) {
          return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
        };
        function isBuffer(obj) {
          return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
        }
        function isSlowBuffer(obj) {
          return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
        }
      }, {}], 410: [function(require2, module3, exports3) {
        var fnToStr = Function.prototype.toString;
        var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
        var badArrayLike;
        var isCallableMarker;
        if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
          try {
            badArrayLike = Object.defineProperty({}, "length", {
              get: function() {
                throw isCallableMarker;
              }
            });
            isCallableMarker = {};
            reflectApply(function() {
              throw 42;
            }, null, badArrayLike);
          } catch (_) {
            if (_ !== isCallableMarker) {
              reflectApply = null;
            }
          }
        } else {
          reflectApply = null;
        }
        var constructorRegex = /^\s*class\b/;
        var isES6ClassFn = function isES6ClassFunction(value) {
          try {
            var fnStr = fnToStr.call(value);
            return constructorRegex.test(fnStr);
          } catch (e2) {
            return false;
          }
        };
        var tryFunctionObject = function tryFunctionToStr(value) {
          try {
            if (isES6ClassFn(value)) {
              return false;
            }
            fnToStr.call(value);
            return true;
          } catch (e2) {
            return false;
          }
        };
        var toStr = Object.prototype.toString;
        var objectClass = "[object Object]";
        var fnClass = "[object Function]";
        var genClass = "[object GeneratorFunction]";
        var ddaClass = "[object HTMLAllCollection]";
        var ddaClass2 = "[object HTML document.all class]";
        var ddaClass3 = "[object HTMLCollection]";
        var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
        var isIE68 = !(0 in [,]);
        var isDDA = function isDocumentDotAll() {
          return false;
        };
        if (typeof document === "object") {
          var all = document.all;
          if (toStr.call(all) === toStr.call(document.all)) {
            isDDA = function isDocumentDotAll(value) {
              if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
                try {
                  var str = toStr.call(value);
                  return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
                } catch (e2) {
                }
              }
              return false;
            };
          }
        }
        module3.exports = reflectApply ? function isCallable(value) {
          if (isDDA(value)) {
            return true;
          }
          if (!value) {
            return false;
          }
          if (typeof value !== "function" && typeof value !== "object") {
            return false;
          }
          try {
            reflectApply(value, null, badArrayLike);
          } catch (e2) {
            if (e2 !== isCallableMarker) {
              return false;
            }
          }
          return !isES6ClassFn(value) && tryFunctionObject(value);
        } : function isCallable(value) {
          if (isDDA(value)) {
            return true;
          }
          if (!value) {
            return false;
          }
          if (typeof value !== "function" && typeof value !== "object") {
            return false;
          }
          if (hasToStringTag) {
            return tryFunctionObject(value);
          }
          if (isES6ClassFn(value)) {
            return false;
          }
          var strClass = toStr.call(value);
          if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
            return false;
          }
          return tryFunctionObject(value);
        };
      }, {}], 411: [function(require2, module3, exports3) {
        var toStr = Object.prototype.toString;
        var fnToStr = Function.prototype.toString;
        var isFnRegex = /^\s*(?:function)?\*/;
        var hasToStringTag = require2("has-tostringtag/shams")();
        var getProto2 = Object.getPrototypeOf;
        var getGeneratorFunc = function() {
          if (!hasToStringTag) {
            return false;
          }
          try {
            return Function("return function*() {}")();
          } catch (e2) {
          }
        };
        var GeneratorFunction;
        module3.exports = function isGeneratorFunction(fn) {
          if (typeof fn !== "function") {
            return false;
          }
          if (isFnRegex.test(fnToStr.call(fn))) {
            return true;
          }
          if (!hasToStringTag) {
            var str = toStr.call(fn);
            return str === "[object GeneratorFunction]";
          }
          if (!getProto2) {
            return false;
          }
          if (typeof GeneratorFunction === "undefined") {
            var generatorFunc = getGeneratorFunc();
            GeneratorFunction = generatorFunc ? getProto2(generatorFunc) : false;
          }
          return getProto2(fn) === GeneratorFunction;
        };
      }, { "has-tostringtag/shams": 396 }], 412: [function(require2, module3, exports3) {
        var whichTypedArray = require2("which-typed-array");
        module3.exports = function isTypedArray(value) {
          return !!whichTypedArray(value);
        };
      }, { "which-typed-array": 490 }], 413: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            (function(global4, factory) {
              typeof exports3 === "object" && typeof module3 !== "undefined" ? module3.exports = factory(global4) : factory(global4);
            })(typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global3 !== "undefined" ? global3 : this, function(global4) {
              global4 = global4 || {};
              var _Base64 = global4.Base64;
              var version2 = "2.6.4";
              var b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              var b64tab = function(bin) {
                var t2 = {};
                for (var i = 0, l = bin.length; i < l; i++)
                  t2[bin.charAt(i)] = i;
                return t2;
              }(b64chars);
              var fromCharCode = String.fromCharCode;
              var cb_utob = function(c) {
                if (c.length < 2) {
                  var cc = c.charCodeAt(0);
                  return cc < 128 ? c : cc < 2048 ? fromCharCode(192 | cc >>> 6) + fromCharCode(128 | cc & 63) : fromCharCode(224 | cc >>> 12 & 15) + fromCharCode(128 | cc >>> 6 & 63) + fromCharCode(128 | cc & 63);
                } else {
                  var cc = 65536 + (c.charCodeAt(0) - 55296) * 1024 + (c.charCodeAt(1) - 56320);
                  return fromCharCode(240 | cc >>> 18 & 7) + fromCharCode(128 | cc >>> 12 & 63) + fromCharCode(128 | cc >>> 6 & 63) + fromCharCode(128 | cc & 63);
                }
              };
              var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
              var utob = function(u) {
                return u.replace(re_utob, cb_utob);
              };
              var cb_encode = function(ccc) {
                var padlen = [0, 2, 1][ccc.length % 3], ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0), chars = [
                  b64chars.charAt(ord >>> 18),
                  b64chars.charAt(ord >>> 12 & 63),
                  padlen >= 2 ? "=" : b64chars.charAt(ord >>> 6 & 63),
                  padlen >= 1 ? "=" : b64chars.charAt(ord & 63)
                ];
                return chars.join("");
              };
              var btoa = global4.btoa && typeof global4.btoa == "function" ? function(b) {
                return global4.btoa(b);
              } : function(b) {
                if (b.match(/[^\x00-\xFF]/))
                  throw new RangeError(
                    "The string contains invalid characters."
                  );
                return b.replace(/[\s\S]{1,3}/g, cb_encode);
              };
              var _encode = function(u) {
                return btoa(utob(String(u)));
              };
              var mkUriSafe = function(b642) {
                return b642.replace(/[+\/]/g, function(m0) {
                  return m0 == "+" ? "-" : "_";
                }).replace(/=/g, "");
              };
              var encode2 = function(u, urisafe) {
                return urisafe ? mkUriSafe(_encode(u)) : _encode(u);
              };
              var encodeURI2 = function(u) {
                return encode2(u, true);
              };
              var fromUint8Array;
              if (global4.Uint8Array)
                fromUint8Array = function(a, urisafe) {
                  var b642 = "";
                  for (var i = 0, l = a.length; i < l; i += 3) {
                    var a0 = a[i], a1 = a[i + 1], a2 = a[i + 2];
                    var ord = a0 << 16 | a1 << 8 | a2;
                    b642 += b64chars.charAt(ord >>> 18) + b64chars.charAt(ord >>> 12 & 63) + (typeof a1 != "undefined" ? b64chars.charAt(ord >>> 6 & 63) : "=") + (typeof a2 != "undefined" ? b64chars.charAt(ord & 63) : "=");
                  }
                  return urisafe ? mkUriSafe(b642) : b642;
                };
              var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
              var cb_btou = function(cccc) {
                switch (cccc.length) {
                  case 4:
                    var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
                    return fromCharCode((offset >>> 10) + 55296) + fromCharCode((offset & 1023) + 56320);
                  case 3:
                    return fromCharCode(
                      (15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2)
                    );
                  default:
                    return fromCharCode(
                      (31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1)
                    );
                }
              };
              var btou = function(b) {
                return b.replace(re_btou, cb_btou);
              };
              var cb_decode = function(cccc) {
                var len = cccc.length, padlen = len % 4, n2 = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) | (len > 3 ? b64tab[cccc.charAt(3)] : 0), chars = [
                  fromCharCode(n2 >>> 16),
                  fromCharCode(n2 >>> 8 & 255),
                  fromCharCode(n2 & 255)
                ];
                chars.length -= [0, 0, 2, 1][padlen];
                return chars.join("");
              };
              var _atob = global4.atob && typeof global4.atob == "function" ? function(a) {
                return global4.atob(a);
              } : function(a) {
                return a.replace(/\S{1,4}/g, cb_decode);
              };
              var atob2 = function(a) {
                return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ""));
              };
              var _decode = function(a) {
                return btou(_atob(a));
              };
              var _fromURI = function(a) {
                return String(a).replace(/[-_]/g, function(m0) {
                  return m0 == "-" ? "+" : "/";
                }).replace(/[^A-Za-z0-9\+\/]/g, "");
              };
              var decode = function(a) {
                return _decode(_fromURI(a));
              };
              var toUint8Array;
              if (global4.Uint8Array)
                toUint8Array = function(a) {
                  return Uint8Array.from(atob2(_fromURI(a)), function(c) {
                    return c.charCodeAt(0);
                  });
                };
              var noConflict = function() {
                var Base642 = global4.Base64;
                global4.Base64 = _Base64;
                return Base642;
              };
              global4.Base64 = {
                VERSION: version2,
                atob: atob2,
                btoa,
                fromBase64: decode,
                toBase64: encode2,
                utob,
                encode: encode2,
                encodeURI: encodeURI2,
                btou,
                decode,
                noConflict,
                fromUint8Array,
                toUint8Array
              };
              if (typeof Object.defineProperty === "function") {
                var noEnum = function(v) {
                  return { value: v, enumerable: false, writable: true, configurable: true };
                };
                global4.Base64.extendString = function() {
                  Object.defineProperty(
                    String.prototype,
                    "fromBase64",
                    noEnum(function() {
                      return decode(this);
                    })
                  );
                  Object.defineProperty(
                    String.prototype,
                    "toBase64",
                    noEnum(function(urisafe) {
                      return encode2(this, urisafe);
                    })
                  );
                  Object.defineProperty(
                    String.prototype,
                    "toBase64URI",
                    noEnum(function() {
                      return encode2(this, true);
                    })
                  );
                };
              }
              if (global4["Meteor"]) {
                Base64 = global4.Base64;
              }
              if (typeof module3 !== "undefined" && module3.exports) {
                module3.exports.Base64 = global4.Base64;
              }
              return { Base64: global4.Base64 };
            });
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 414: [function(require2, module3, exports3) {
        var root = require2("./_root");
        var Symbol2 = root.Symbol;
        module3.exports = Symbol2;
      }, { "./_root": 421 }], 415: [function(require2, module3, exports3) {
        function arrayMap(array, iteratee) {
          var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index2 < length) {
            result[index2] = iteratee(array[index2], index2, array);
          }
          return result;
        }
        module3.exports = arrayMap;
      }, {}], 416: [function(require2, module3, exports3) {
        var Symbol2 = require2("./_Symbol"), getRawTag = require2("./_getRawTag"), objectToString2 = require2("./_objectToString");
        var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
        var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
        function baseGetTag(value) {
          if (value == null) {
            return value === void 0 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString2(value);
        }
        module3.exports = baseGetTag;
      }, { "./_Symbol": 414, "./_getRawTag": 419, "./_objectToString": 420 }], 417: [function(require2, module3, exports3) {
        var Symbol2 = require2("./_Symbol"), arrayMap = require2("./_arrayMap"), isArray2 = require2("./isArray"), isSymbol2 = require2("./isSymbol");
        var INFINITY = 1 / 0;
        var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray2(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol2(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        module3.exports = baseToString;
      }, { "./_Symbol": 414, "./_arrayMap": 415, "./isArray": 422, "./isSymbol": 426 }], 418: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            var freeGlobal = typeof global3 == "object" && global3 && global3.Object === Object && global3;
            module3.exports = freeGlobal;
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 419: [function(require2, module3, exports3) {
        var Symbol2 = require2("./_Symbol");
        var objectProto = Object.prototype;
        var hasOwnProperty2 = objectProto.hasOwnProperty;
        var nativeObjectToString = objectProto.toString;
        var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag), tag2 = value[symToStringTag];
          try {
            value[symToStringTag] = void 0;
            var unmasked = true;
          } catch (e2) {
          }
          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag2;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }
        module3.exports = getRawTag;
      }, { "./_Symbol": 414 }], 420: [function(require2, module3, exports3) {
        var objectProto = Object.prototype;
        var nativeObjectToString = objectProto.toString;
        function objectToString2(value) {
          return nativeObjectToString.call(value);
        }
        module3.exports = objectToString2;
      }, {}], 421: [function(require2, module3, exports3) {
        var freeGlobal = require2("./_freeGlobal");
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        module3.exports = root;
      }, { "./_freeGlobal": 418 }], 422: [function(require2, module3, exports3) {
        var isArray2 = Array.isArray;
        module3.exports = isArray2;
      }, {}], 423: [function(require2, module3, exports3) {
        function isObject2(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        module3.exports = isObject2;
      }, {}], 424: [function(require2, module3, exports3) {
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        module3.exports = isObjectLike;
      }, {}], 425: [function(require2, module3, exports3) {
        var baseGetTag = require2("./_baseGetTag"), isArray2 = require2("./isArray"), isObjectLike = require2("./isObjectLike");
        var stringTag = "[object String]";
        function isString2(value) {
          return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        module3.exports = isString2;
      }, { "./_baseGetTag": 416, "./isArray": 422, "./isObjectLike": 424 }], 426: [function(require2, module3, exports3) {
        var baseGetTag = require2("./_baseGetTag"), isObjectLike = require2("./isObjectLike");
        var symbolTag = "[object Symbol]";
        function isSymbol2(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        module3.exports = isSymbol2;
      }, { "./_baseGetTag": 416, "./isObjectLike": 424 }], 427: [function(require2, module3, exports3) {
        var baseToString = require2("./_baseToString");
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        module3.exports = toString;
      }, { "./_baseToString": 417 }], 428: [function(require2, module3, exports3) {
        module3.exports = merge;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function merge(dest, src, redefine) {
          if (!dest) {
            throw new TypeError("argument dest is required");
          }
          if (!src) {
            throw new TypeError("argument src is required");
          }
          if (redefine === void 0) {
            redefine = true;
          }
          Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
            if (!redefine && hasOwnProperty2.call(dest, name)) {
              return;
            }
            var descriptor = Object.getOwnPropertyDescriptor(src, name);
            Object.defineProperty(dest, name, descriptor);
          });
          return dest;
        }
      }, {}], 429: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.map.js");
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/es.regexp.constructor.js");
        require2("core-js/modules/es.regexp.to-string.js");
        function Mime() {
          this._types = /* @__PURE__ */ Object.create(null);
          this._extensions = /* @__PURE__ */ Object.create(null);
          for (var i = 0; i < arguments.length; i++) {
            this.define(arguments[i]);
          }
          this.define = this.define.bind(this);
          this.getType = this.getType.bind(this);
          this.getExtension = this.getExtension.bind(this);
        }
        Mime.prototype.define = function(typeMap, force) {
          for (var type in typeMap) {
            var extensions = typeMap[type].map(function(t2) {
              return t2.toLowerCase();
            });
            type = type.toLowerCase();
            for (var i = 0; i < extensions.length; i++) {
              var ext = extensions[i];
              if (ext[0] === "*") {
                continue;
              }
              if (!force && ext in this._types) {
                throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
              }
              this._types[ext] = type;
            }
            if (force || !this._extensions[type]) {
              var _ext = extensions[0];
              this._extensions[type] = _ext[0] !== "*" ? _ext : _ext.substr(1);
            }
          }
        };
        Mime.prototype.getType = function(path) {
          path = String(path);
          var last = path.replace(/^.*[/\\]/, "").toLowerCase();
          var ext = last.replace(/^.*\./, "").toLowerCase();
          var hasPath = last.length < path.length;
          var hasDot = ext.length < last.length - 1;
          return (hasDot || !hasPath) && this._types[ext] || null;
        };
        Mime.prototype.getExtension = function(type) {
          type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
          return type && this._extensions[type.toLowerCase()] || null;
        };
        module3.exports = Mime;
      }, { "core-js/modules/es.array.map.js": 318, "core-js/modules/es.regexp.constructor.js": 337, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/es.string.replace.js": 345 }], 430: [function(require2, module3, exports3) {
        var Mime = require2("./Mime");
        module3.exports = new Mime(require2("./types/standard"));
      }, { "./Mime": 429, "./types/standard": 431 }], 431: [function(require2, module3, exports3) {
        module3.exports = {
          "application/andrew-inset": ["ez"],
          "application/applixware": ["aw"],
          "application/atom+xml": ["atom"],
          "application/atomcat+xml": ["atomcat"],
          "application/atomdeleted+xml": ["atomdeleted"],
          "application/atomsvc+xml": ["atomsvc"],
          "application/atsc-dwd+xml": ["dwd"],
          "application/atsc-held+xml": ["held"],
          "application/atsc-rsat+xml": ["rsat"],
          "application/bdoc": ["bdoc"],
          "application/calendar+xml": ["xcs"],
          "application/ccxml+xml": ["ccxml"],
          "application/cdfx+xml": ["cdfx"],
          "application/cdmi-capability": ["cdmia"],
          "application/cdmi-container": ["cdmic"],
          "application/cdmi-domain": ["cdmid"],
          "application/cdmi-object": ["cdmio"],
          "application/cdmi-queue": ["cdmiq"],
          "application/cu-seeme": ["cu"],
          "application/dash+xml": ["mpd"],
          "application/davmount+xml": ["davmount"],
          "application/docbook+xml": ["dbk"],
          "application/dssc+der": ["dssc"],
          "application/dssc+xml": ["xdssc"],
          "application/ecmascript": ["es", "ecma"],
          "application/emma+xml": ["emma"],
          "application/emotionml+xml": ["emotionml"],
          "application/epub+zip": ["epub"],
          "application/exi": ["exi"],
          "application/express": ["exp"],
          "application/fdt+xml": ["fdt"],
          "application/font-tdpfr": ["pfr"],
          "application/geo+json": ["geojson"],
          "application/gml+xml": ["gml"],
          "application/gpx+xml": ["gpx"],
          "application/gxf": ["gxf"],
          "application/gzip": ["gz"],
          "application/hjson": ["hjson"],
          "application/hyperstudio": ["stk"],
          "application/inkml+xml": ["ink", "inkml"],
          "application/ipfix": ["ipfix"],
          "application/its+xml": ["its"],
          "application/java-archive": ["jar", "war", "ear"],
          "application/java-serialized-object": ["ser"],
          "application/java-vm": ["class"],
          "application/javascript": ["js", "mjs"],
          "application/json": ["json", "map"],
          "application/json5": ["json5"],
          "application/jsonml+json": ["jsonml"],
          "application/ld+json": ["jsonld"],
          "application/lgr+xml": ["lgr"],
          "application/lost+xml": ["lostxml"],
          "application/mac-binhex40": ["hqx"],
          "application/mac-compactpro": ["cpt"],
          "application/mads+xml": ["mads"],
          "application/manifest+json": ["webmanifest"],
          "application/marc": ["mrc"],
          "application/marcxml+xml": ["mrcx"],
          "application/mathematica": ["ma", "nb", "mb"],
          "application/mathml+xml": ["mathml"],
          "application/mbox": ["mbox"],
          "application/mediaservercontrol+xml": ["mscml"],
          "application/metalink+xml": ["metalink"],
          "application/metalink4+xml": ["meta4"],
          "application/mets+xml": ["mets"],
          "application/mmt-aei+xml": ["maei"],
          "application/mmt-usd+xml": ["musd"],
          "application/mods+xml": ["mods"],
          "application/mp21": ["m21", "mp21"],
          "application/mp4": ["mp4s", "m4p"],
          "application/msword": ["doc", "dot"],
          "application/mxf": ["mxf"],
          "application/n-quads": ["nq"],
          "application/n-triples": ["nt"],
          "application/node": ["cjs"],
          "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"],
          "application/oda": ["oda"],
          "application/oebps-package+xml": ["opf"],
          "application/ogg": ["ogx"],
          "application/omdoc+xml": ["omdoc"],
          "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"],
          "application/oxps": ["oxps"],
          "application/p2p-overlay+xml": ["relo"],
          "application/patch-ops-error+xml": ["xer"],
          "application/pdf": ["pdf"],
          "application/pgp-encrypted": ["pgp"],
          "application/pgp-signature": ["asc", "sig"],
          "application/pics-rules": ["prf"],
          "application/pkcs10": ["p10"],
          "application/pkcs7-mime": ["p7m", "p7c"],
          "application/pkcs7-signature": ["p7s"],
          "application/pkcs8": ["p8"],
          "application/pkix-attr-cert": ["ac"],
          "application/pkix-cert": ["cer"],
          "application/pkix-crl": ["crl"],
          "application/pkix-pkipath": ["pkipath"],
          "application/pkixcmp": ["pki"],
          "application/pls+xml": ["pls"],
          "application/postscript": ["ai", "eps", "ps"],
          "application/provenance+xml": ["provx"],
          "application/pskc+xml": ["pskcxml"],
          "application/raml+yaml": ["raml"],
          "application/rdf+xml": ["rdf", "owl"],
          "application/reginfo+xml": ["rif"],
          "application/relax-ng-compact-syntax": ["rnc"],
          "application/resource-lists+xml": ["rl"],
          "application/resource-lists-diff+xml": ["rld"],
          "application/rls-services+xml": ["rs"],
          "application/route-apd+xml": ["rapd"],
          "application/route-s-tsid+xml": ["sls"],
          "application/route-usd+xml": ["rusd"],
          "application/rpki-ghostbusters": ["gbr"],
          "application/rpki-manifest": ["mft"],
          "application/rpki-roa": ["roa"],
          "application/rsd+xml": ["rsd"],
          "application/rss+xml": ["rss"],
          "application/rtf": ["rtf"],
          "application/sbml+xml": ["sbml"],
          "application/scvp-cv-request": ["scq"],
          "application/scvp-cv-response": ["scs"],
          "application/scvp-vp-request": ["spq"],
          "application/scvp-vp-response": ["spp"],
          "application/sdp": ["sdp"],
          "application/senml+xml": ["senmlx"],
          "application/sensml+xml": ["sensmlx"],
          "application/set-payment-initiation": ["setpay"],
          "application/set-registration-initiation": ["setreg"],
          "application/shf+xml": ["shf"],
          "application/sieve": ["siv", "sieve"],
          "application/smil+xml": ["smi", "smil"],
          "application/sparql-query": ["rq"],
          "application/sparql-results+xml": ["srx"],
          "application/srgs": ["gram"],
          "application/srgs+xml": ["grxml"],
          "application/sru+xml": ["sru"],
          "application/ssdl+xml": ["ssdl"],
          "application/ssml+xml": ["ssml"],
          "application/swid+xml": ["swidtag"],
          "application/tei+xml": ["tei", "teicorpus"],
          "application/thraud+xml": ["tfi"],
          "application/timestamped-data": ["tsd"],
          "application/toml": ["toml"],
          "application/trig": ["trig"],
          "application/ttml+xml": ["ttml"],
          "application/ubjson": ["ubj"],
          "application/urc-ressheet+xml": ["rsheet"],
          "application/urc-targetdesc+xml": ["td"],
          "application/voicexml+xml": ["vxml"],
          "application/wasm": ["wasm"],
          "application/widget": ["wgt"],
          "application/winhlp": ["hlp"],
          "application/wsdl+xml": ["wsdl"],
          "application/wspolicy+xml": ["wspolicy"],
          "application/xaml+xml": ["xaml"],
          "application/xcap-att+xml": ["xav"],
          "application/xcap-caps+xml": ["xca"],
          "application/xcap-diff+xml": ["xdf"],
          "application/xcap-el+xml": ["xel"],
          "application/xcap-ns+xml": ["xns"],
          "application/xenc+xml": ["xenc"],
          "application/xhtml+xml": ["xhtml", "xht"],
          "application/xliff+xml": ["xlf"],
          "application/xml": ["xml", "xsl", "xsd", "rng"],
          "application/xml-dtd": ["dtd"],
          "application/xop+xml": ["xop"],
          "application/xproc+xml": ["xpl"],
          "application/xslt+xml": ["*xsl", "xslt"],
          "application/xspf+xml": ["xspf"],
          "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"],
          "application/yang": ["yang"],
          "application/yin+xml": ["yin"],
          "application/zip": ["zip"],
          "audio/3gpp": ["*3gpp"],
          "audio/adpcm": ["adp"],
          "audio/amr": ["amr"],
          "audio/basic": ["au", "snd"],
          "audio/midi": ["mid", "midi", "kar", "rmi"],
          "audio/mobile-xmf": ["mxmf"],
          "audio/mp3": ["*mp3"],
          "audio/mp4": ["m4a", "mp4a"],
          "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"],
          "audio/ogg": ["oga", "ogg", "spx", "opus"],
          "audio/s3m": ["s3m"],
          "audio/silk": ["sil"],
          "audio/wav": ["wav"],
          "audio/wave": ["*wav"],
          "audio/webm": ["weba"],
          "audio/xm": ["xm"],
          "font/collection": ["ttc"],
          "font/otf": ["otf"],
          "font/ttf": ["ttf"],
          "font/woff": ["woff"],
          "font/woff2": ["woff2"],
          "image/aces": ["exr"],
          "image/apng": ["apng"],
          "image/avif": ["avif"],
          "image/bmp": ["bmp"],
          "image/cgm": ["cgm"],
          "image/dicom-rle": ["drle"],
          "image/emf": ["emf"],
          "image/fits": ["fits"],
          "image/g3fax": ["g3"],
          "image/gif": ["gif"],
          "image/heic": ["heic"],
          "image/heic-sequence": ["heics"],
          "image/heif": ["heif"],
          "image/heif-sequence": ["heifs"],
          "image/hej2k": ["hej2"],
          "image/hsj2": ["hsj2"],
          "image/ief": ["ief"],
          "image/jls": ["jls"],
          "image/jp2": ["jp2", "jpg2"],
          "image/jpeg": ["jpeg", "jpg", "jpe"],
          "image/jph": ["jph"],
          "image/jphc": ["jhc"],
          "image/jpm": ["jpm"],
          "image/jpx": ["jpx", "jpf"],
          "image/jxr": ["jxr"],
          "image/jxra": ["jxra"],
          "image/jxrs": ["jxrs"],
          "image/jxs": ["jxs"],
          "image/jxsc": ["jxsc"],
          "image/jxsi": ["jxsi"],
          "image/jxss": ["jxss"],
          "image/ktx": ["ktx"],
          "image/ktx2": ["ktx2"],
          "image/png": ["png"],
          "image/sgi": ["sgi"],
          "image/svg+xml": ["svg", "svgz"],
          "image/t38": ["t38"],
          "image/tiff": ["tif", "tiff"],
          "image/tiff-fx": ["tfx"],
          "image/webp": ["webp"],
          "image/wmf": ["wmf"],
          "message/disposition-notification": ["disposition-notification"],
          "message/global": ["u8msg"],
          "message/global-delivery-status": ["u8dsn"],
          "message/global-disposition-notification": ["u8mdn"],
          "message/global-headers": ["u8hdr"],
          "message/rfc822": ["eml", "mime"],
          "model/3mf": ["3mf"],
          "model/gltf+json": ["gltf"],
          "model/gltf-binary": ["glb"],
          "model/iges": ["igs", "iges"],
          "model/mesh": ["msh", "mesh", "silo"],
          "model/mtl": ["mtl"],
          "model/obj": ["obj"],
          "model/step+xml": ["stpx"],
          "model/step+zip": ["stpz"],
          "model/step-xml+zip": ["stpxz"],
          "model/stl": ["stl"],
          "model/vrml": ["wrl", "vrml"],
          "model/x3d+binary": ["*x3db", "x3dbz"],
          "model/x3d+fastinfoset": ["x3db"],
          "model/x3d+vrml": ["*x3dv", "x3dvz"],
          "model/x3d+xml": ["x3d", "x3dz"],
          "model/x3d-vrml": ["x3dv"],
          "text/cache-manifest": ["appcache", "manifest"],
          "text/calendar": ["ics", "ifb"],
          "text/coffeescript": ["coffee", "litcoffee"],
          "text/css": ["css"],
          "text/csv": ["csv"],
          "text/html": ["html", "htm", "shtml"],
          "text/jade": ["jade"],
          "text/jsx": ["jsx"],
          "text/less": ["less"],
          "text/markdown": ["markdown", "md"],
          "text/mathml": ["mml"],
          "text/mdx": ["mdx"],
          "text/n3": ["n3"],
          "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"],
          "text/richtext": ["rtx"],
          "text/rtf": ["*rtf"],
          "text/sgml": ["sgml", "sgm"],
          "text/shex": ["shex"],
          "text/slim": ["slim", "slm"],
          "text/spdx": ["spdx"],
          "text/stylus": ["stylus", "styl"],
          "text/tab-separated-values": ["tsv"],
          "text/troff": ["t", "tr", "roff", "man", "me", "ms"],
          "text/turtle": ["ttl"],
          "text/uri-list": ["uri", "uris", "urls"],
          "text/vcard": ["vcard"],
          "text/vtt": ["vtt"],
          "text/xml": ["*xml"],
          "text/yaml": ["yaml", "yml"],
          "video/3gpp": ["3gp", "3gpp"],
          "video/3gpp2": ["3g2"],
          "video/h261": ["h261"],
          "video/h263": ["h263"],
          "video/h264": ["h264"],
          "video/iso.segment": ["m4s"],
          "video/jpeg": ["jpgv"],
          "video/jpm": ["*jpm", "jpgm"],
          "video/mj2": ["mj2", "mjp2"],
          "video/mp2t": ["ts"],
          "video/mp4": ["mp4", "mp4v", "mpg4"],
          "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"],
          "video/ogg": ["ogv"],
          "video/quicktime": ["qt", "mov"],
          "video/webm": ["webm"]
        };
      }, {}], 432: [function(require2, module3, exports3) {
        var s2 = 1e3;
        var m2 = s2 * 60;
        var h = m2 * 60;
        var d = h * 24;
        var w = d * 7;
        var y = d * 365.25;
        module3.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if (type === "string" && val.length > 0) {
            return parse2(val);
          } else if (type === "number" && isFinite(val)) {
            return options.long ? fmtLong(val) : fmtShort(val);
          }
          throw new Error(
            "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
          );
        };
        function parse2(str) {
          str = String(str);
          if (str.length > 100) {
            return;
          }
          var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
            str
          );
          if (!match) {
            return;
          }
          var n2 = parseFloat(match[1]);
          var type = (match[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n2 * y;
            case "weeks":
            case "week":
            case "w":
              return n2 * w;
            case "days":
            case "day":
            case "d":
              return n2 * d;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n2 * h;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n2 * m2;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n2 * s2;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n2;
            default:
              return void 0;
          }
        }
        function fmtShort(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return Math.round(ms / d) + "d";
          }
          if (msAbs >= h) {
            return Math.round(ms / h) + "h";
          }
          if (msAbs >= m2) {
            return Math.round(ms / m2) + "m";
          }
          if (msAbs >= s2) {
            return Math.round(ms / s2) + "s";
          }
          return ms + "ms";
        }
        function fmtLong(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return plural(ms, msAbs, d, "day");
          }
          if (msAbs >= h) {
            return plural(ms, msAbs, h, "hour");
          }
          if (msAbs >= m2) {
            return plural(ms, msAbs, m2, "minute");
          }
          if (msAbs >= s2) {
            return plural(ms, msAbs, s2, "second");
          }
          return ms + " ms";
        }
        function plural(ms, msAbs, n2, name) {
          var isPlural = msAbs >= n2 * 1.5;
          return Math.round(ms / n2) + " " + name + (isPlural ? "s" : "");
        }
      }, {}], 433: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            var hasMap = typeof Map === "function" && Map.prototype;
            var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
            var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
            var mapForEach = hasMap && Map.prototype.forEach;
            var hasSet = typeof Set === "function" && Set.prototype;
            var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
            var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
            var setForEach = hasSet && Set.prototype.forEach;
            var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
            var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
            var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
            var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
            var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
            var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
            var booleanValueOf = Boolean.prototype.valueOf;
            var objectToString2 = Object.prototype.toString;
            var functionToString = Function.prototype.toString;
            var $match = String.prototype.match;
            var $slice = String.prototype.slice;
            var $replace = String.prototype.replace;
            var $toUpperCase = String.prototype.toUpperCase;
            var $toLowerCase = String.prototype.toLowerCase;
            var $test = RegExp.prototype.test;
            var $concat = Array.prototype.concat;
            var $join = Array.prototype.join;
            var $arrSlice = Array.prototype.slice;
            var $floor = Math.floor;
            var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
            var gOPS = Object.getOwnPropertySymbols;
            var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
            var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
            var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
            var isEnumerable = Object.prototype.propertyIsEnumerable;
            var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
              return O.__proto__;
            } : null);
            function addNumericSeparator(num, str) {
              if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
                return str;
              }
              var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
              if (typeof num === "number") {
                var int = num < 0 ? -$floor(-num) : $floor(num);
                if (int !== num) {
                  var intStr = String(int);
                  var dec = $slice.call(str, intStr.length + 1);
                  return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
                }
              }
              return $replace.call(str, sepRegex, "$&_");
            }
            var utilInspect = require2("./util.inspect");
            var inspectCustom = utilInspect.custom;
            var inspectSymbol = isSymbol2(inspectCustom) ? inspectCustom : null;
            module3.exports = function inspect_(obj, options, depth, seen) {
              var opts = options || {};
              if (has2(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
                throw new TypeError('option "quoteStyle" must be "single" or "double"');
              }
              if (has2(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
                throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
              }
              var customInspect = has2(opts, "customInspect") ? opts.customInspect : true;
              if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
                throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
              }
              if (has2(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
                throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
              }
              if (has2(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
                throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
              }
              var numericSeparator = opts.numericSeparator;
              if (typeof obj === "undefined") {
                return "undefined";
              }
              if (obj === null) {
                return "null";
              }
              if (typeof obj === "boolean") {
                return obj ? "true" : "false";
              }
              if (typeof obj === "string") {
                return inspectString(obj, opts);
              }
              if (typeof obj === "number") {
                if (obj === 0) {
                  return Infinity / obj > 0 ? "0" : "-0";
                }
                var str = String(obj);
                return numericSeparator ? addNumericSeparator(obj, str) : str;
              }
              if (typeof obj === "bigint") {
                var bigIntStr = String(obj) + "n";
                return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
              }
              var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
              if (typeof depth === "undefined") {
                depth = 0;
              }
              if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
                return isArray2(obj) ? "[Array]" : "[Object]";
              }
              var indent = getIndent(opts, depth);
              if (typeof seen === "undefined") {
                seen = [];
              } else if (indexOf(seen, obj) >= 0) {
                return "[Circular]";
              }
              function inspect(value, from, noIndent) {
                if (from) {
                  seen = $arrSlice.call(seen);
                  seen.push(from);
                }
                if (noIndent) {
                  var newOpts = {
                    depth: opts.depth
                  };
                  if (has2(opts, "quoteStyle")) {
                    newOpts.quoteStyle = opts.quoteStyle;
                  }
                  return inspect_(value, newOpts, depth + 1, seen);
                }
                return inspect_(value, opts, depth + 1, seen);
              }
              if (typeof obj === "function" && !isRegExp(obj)) {
                var name = nameOf(obj);
                var keys = arrObjKeys(obj, inspect);
                return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
              }
              if (isSymbol2(obj)) {
                var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
                return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
              }
              if (isElement(obj)) {
                var s2 = "<" + $toLowerCase.call(String(obj.nodeName));
                var attrs = obj.attributes || [];
                for (var i = 0; i < attrs.length; i++) {
                  s2 += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
                }
                s2 += ">";
                if (obj.childNodes && obj.childNodes.length) {
                  s2 += "...";
                }
                s2 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
                return s2;
              }
              if (isArray2(obj)) {
                if (obj.length === 0) {
                  return "[]";
                }
                var xs = arrObjKeys(obj, inspect);
                if (indent && !singleLineValues(xs)) {
                  return "[" + indentedJoin(xs, indent) + "]";
                }
                return "[ " + $join.call(xs, ", ") + " ]";
              }
              if (isError(obj)) {
                var parts = arrObjKeys(obj, inspect);
                if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
                  return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
                }
                if (parts.length === 0) {
                  return "[" + String(obj) + "]";
                }
                return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
              }
              if (typeof obj === "object" && customInspect) {
                if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
                  return utilInspect(obj, { depth: maxDepth - depth });
                } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
                  return obj.inspect();
                }
              }
              if (isMap2(obj)) {
                var mapParts = [];
                if (mapForEach) {
                  mapForEach.call(obj, function(value, key) {
                    mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
                  });
                }
                return collectionOf("Map", mapSize.call(obj), mapParts, indent);
              }
              if (isSet2(obj)) {
                var setParts = [];
                if (setForEach) {
                  setForEach.call(obj, function(value) {
                    setParts.push(inspect(value, obj));
                  });
                }
                return collectionOf("Set", setSize.call(obj), setParts, indent);
              }
              if (isWeakMap(obj)) {
                return weakCollectionOf("WeakMap");
              }
              if (isWeakSet(obj)) {
                return weakCollectionOf("WeakSet");
              }
              if (isWeakRef(obj)) {
                return weakCollectionOf("WeakRef");
              }
              if (isNumber(obj)) {
                return markBoxed(inspect(Number(obj)));
              }
              if (isBigInt(obj)) {
                return markBoxed(inspect(bigIntValueOf.call(obj)));
              }
              if (isBoolean2(obj)) {
                return markBoxed(booleanValueOf.call(obj));
              }
              if (isString2(obj)) {
                return markBoxed(inspect(String(obj)));
              }
              if (typeof window !== "undefined" && obj === window) {
                return "{ [object Window] }";
              }
              if (obj === global3) {
                return "{ [object globalThis] }";
              }
              if (!isDate(obj) && !isRegExp(obj)) {
                var ys = arrObjKeys(obj, inspect);
                var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
                var protoTag = obj instanceof Object ? "" : "null prototype";
                var stringTag = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
                var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
                var tag2 = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
                if (ys.length === 0) {
                  return tag2 + "{}";
                }
                if (indent) {
                  return tag2 + "{" + indentedJoin(ys, indent) + "}";
                }
                return tag2 + "{ " + $join.call(ys, ", ") + " }";
              }
              return String(obj);
            };
            function wrapQuotes(s2, defaultStyle, opts) {
              var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
              return quoteChar + s2 + quoteChar;
            }
            function quote(s2) {
              return $replace.call(String(s2), /"/g, "&quot;");
            }
            function isArray2(obj) {
              return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
            }
            function isDate(obj) {
              return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
            }
            function isRegExp(obj) {
              return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
            }
            function isError(obj) {
              return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
            }
            function isString2(obj) {
              return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
            }
            function isNumber(obj) {
              return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
            }
            function isBoolean2(obj) {
              return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
            }
            function isSymbol2(obj) {
              if (hasShammedSymbols) {
                return obj && typeof obj === "object" && obj instanceof Symbol;
              }
              if (typeof obj === "symbol") {
                return true;
              }
              if (!obj || typeof obj !== "object" || !symToString) {
                return false;
              }
              try {
                symToString.call(obj);
                return true;
              } catch (e2) {
              }
              return false;
            }
            function isBigInt(obj) {
              if (!obj || typeof obj !== "object" || !bigIntValueOf) {
                return false;
              }
              try {
                bigIntValueOf.call(obj);
                return true;
              } catch (e2) {
              }
              return false;
            }
            var hasOwn2 = Object.prototype.hasOwnProperty || function(key) {
              return key in this;
            };
            function has2(obj, key) {
              return hasOwn2.call(obj, key);
            }
            function toStr(obj) {
              return objectToString2.call(obj);
            }
            function nameOf(f2) {
              if (f2.name) {
                return f2.name;
              }
              var m2 = $match.call(functionToString.call(f2), /^function\s*([\w$]+)/);
              if (m2) {
                return m2[1];
              }
              return null;
            }
            function indexOf(xs, x) {
              if (xs.indexOf) {
                return xs.indexOf(x);
              }
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) {
                  return i;
                }
              }
              return -1;
            }
            function isMap2(x) {
              if (!mapSize || !x || typeof x !== "object") {
                return false;
              }
              try {
                mapSize.call(x);
                try {
                  setSize.call(x);
                } catch (s2) {
                  return true;
                }
                return x instanceof Map;
              } catch (e2) {
              }
              return false;
            }
            function isWeakMap(x) {
              if (!weakMapHas || !x || typeof x !== "object") {
                return false;
              }
              try {
                weakMapHas.call(x, weakMapHas);
                try {
                  weakSetHas.call(x, weakSetHas);
                } catch (s2) {
                  return true;
                }
                return x instanceof WeakMap;
              } catch (e2) {
              }
              return false;
            }
            function isWeakRef(x) {
              if (!weakRefDeref || !x || typeof x !== "object") {
                return false;
              }
              try {
                weakRefDeref.call(x);
                return true;
              } catch (e2) {
              }
              return false;
            }
            function isSet2(x) {
              if (!setSize || !x || typeof x !== "object") {
                return false;
              }
              try {
                setSize.call(x);
                try {
                  mapSize.call(x);
                } catch (m2) {
                  return true;
                }
                return x instanceof Set;
              } catch (e2) {
              }
              return false;
            }
            function isWeakSet(x) {
              if (!weakSetHas || !x || typeof x !== "object") {
                return false;
              }
              try {
                weakSetHas.call(x, weakSetHas);
                try {
                  weakMapHas.call(x, weakMapHas);
                } catch (s2) {
                  return true;
                }
                return x instanceof WeakSet;
              } catch (e2) {
              }
              return false;
            }
            function isElement(x) {
              if (!x || typeof x !== "object") {
                return false;
              }
              if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
                return true;
              }
              return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
            }
            function inspectString(str, opts) {
              if (str.length > opts.maxStringLength) {
                var remaining = str.length - opts.maxStringLength;
                var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
                return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
              }
              var s2 = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
              return wrapQuotes(s2, "single", opts);
            }
            function lowbyte(c) {
              var n2 = c.charCodeAt(0);
              var x = {
                8: "b",
                9: "t",
                10: "n",
                12: "f",
                13: "r"
              }[n2];
              if (x) {
                return "\\" + x;
              }
              return "\\x" + (n2 < 16 ? "0" : "") + $toUpperCase.call(n2.toString(16));
            }
            function markBoxed(str) {
              return "Object(" + str + ")";
            }
            function weakCollectionOf(type) {
              return type + " { ? }";
            }
            function collectionOf(type, size2, entries2, indent) {
              var joinedEntries = indent ? indentedJoin(entries2, indent) : $join.call(entries2, ", ");
              return type + " (" + size2 + ") {" + joinedEntries + "}";
            }
            function singleLineValues(xs) {
              for (var i = 0; i < xs.length; i++) {
                if (indexOf(xs[i], "\n") >= 0) {
                  return false;
                }
              }
              return true;
            }
            function getIndent(opts, depth) {
              var baseIndent;
              if (opts.indent === "	") {
                baseIndent = "	";
              } else if (typeof opts.indent === "number" && opts.indent > 0) {
                baseIndent = $join.call(Array(opts.indent + 1), " ");
              } else {
                return null;
              }
              return {
                base: baseIndent,
                prev: $join.call(Array(depth + 1), baseIndent)
              };
            }
            function indentedJoin(xs, indent) {
              if (xs.length === 0) {
                return "";
              }
              var lineJoiner = "\n" + indent.prev + indent.base;
              return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
            }
            function arrObjKeys(obj, inspect) {
              var isArr = isArray2(obj);
              var xs = [];
              if (isArr) {
                xs.length = obj.length;
                for (var i = 0; i < obj.length; i++) {
                  xs[i] = has2(obj, i) ? inspect(obj[i], obj) : "";
                }
              }
              var syms = typeof gOPS === "function" ? gOPS(obj) : [];
              var symMap;
              if (hasShammedSymbols) {
                symMap = {};
                for (var k = 0; k < syms.length; k++) {
                  symMap["$" + syms[k]] = syms[k];
                }
              }
              for (var key in obj) {
                if (!has2(obj, key)) {
                  continue;
                }
                if (isArr && String(Number(key)) === key && key < obj.length) {
                  continue;
                }
                if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
                  continue;
                } else if ($test.call(/[^\w$]/, key)) {
                  xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
                } else {
                  xs.push(key + ": " + inspect(obj[key], obj));
                }
              }
              if (typeof gOPS === "function") {
                for (var j = 0; j < syms.length; j++) {
                  if (isEnumerable.call(obj, syms[j])) {
                    xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
                  }
                }
              }
              return xs;
            }
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "./util.inspect": 102 }], 434: [function(require2, module3, exports3) {
        var keysShim;
        if (!Object.keys) {
          var has2 = Object.prototype.hasOwnProperty;
          var toStr = Object.prototype.toString;
          var isArgs = require2("./isArguments");
          var isEnumerable = Object.prototype.propertyIsEnumerable;
          var hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
          var hasProtoEnumBug = isEnumerable.call(function() {
          }, "prototype");
          var dontEnums = [
            "toString",
            "toLocaleString",
            "valueOf",
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable",
            "constructor"
          ];
          var equalsConstructorPrototype = function(o2) {
            var ctor = o2.constructor;
            return ctor && ctor.prototype === o2;
          };
          var excludedKeys = {
            $applicationCache: true,
            $console: true,
            $external: true,
            $frame: true,
            $frameElement: true,
            $frames: true,
            $innerHeight: true,
            $innerWidth: true,
            $onmozfullscreenchange: true,
            $onmozfullscreenerror: true,
            $outerHeight: true,
            $outerWidth: true,
            $pageXOffset: true,
            $pageYOffset: true,
            $parent: true,
            $scrollLeft: true,
            $scrollTop: true,
            $scrollX: true,
            $scrollY: true,
            $self: true,
            $webkitIndexedDB: true,
            $webkitStorageInfo: true,
            $window: true
          };
          var hasAutomationEqualityBug = function() {
            if (typeof window === "undefined") {
              return false;
            }
            for (var k in window) {
              try {
                if (!excludedKeys["$" + k] && has2.call(window, k) && window[k] !== null && typeof window[k] === "object") {
                  try {
                    equalsConstructorPrototype(window[k]);
                  } catch (e2) {
                    return true;
                  }
                }
              } catch (e2) {
                return true;
              }
            }
            return false;
          }();
          var equalsConstructorPrototypeIfNotBuggy = function(o2) {
            if (typeof window === "undefined" || !hasAutomationEqualityBug) {
              return equalsConstructorPrototype(o2);
            }
            try {
              return equalsConstructorPrototype(o2);
            } catch (e2) {
              return false;
            }
          };
          keysShim = function keys(object) {
            var isObject2 = object !== null && typeof object === "object";
            var isFunction2 = toStr.call(object) === "[object Function]";
            var isArguments = isArgs(object);
            var isString2 = isObject2 && toStr.call(object) === "[object String]";
            var theKeys = [];
            if (!isObject2 && !isFunction2 && !isArguments) {
              throw new TypeError("Object.keys called on a non-object");
            }
            var skipProto = hasProtoEnumBug && isFunction2;
            if (isString2 && object.length > 0 && !has2.call(object, 0)) {
              for (var i = 0; i < object.length; ++i) {
                theKeys.push(String(i));
              }
            }
            if (isArguments && object.length > 0) {
              for (var j = 0; j < object.length; ++j) {
                theKeys.push(String(j));
              }
            } else {
              for (var name in object) {
                if (!(skipProto && name === "prototype") && has2.call(object, name)) {
                  theKeys.push(String(name));
                }
              }
            }
            if (hasDontEnumBug) {
              var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
              for (var k = 0; k < dontEnums.length; ++k) {
                if (!(skipConstructor && dontEnums[k] === "constructor") && has2.call(object, dontEnums[k])) {
                  theKeys.push(dontEnums[k]);
                }
              }
            }
            return theKeys;
          };
        }
        module3.exports = keysShim;
      }, { "./isArguments": 436 }], 435: [function(require2, module3, exports3) {
        var slice = Array.prototype.slice;
        var isArgs = require2("./isArguments");
        var origKeys = Object.keys;
        var keysShim = origKeys ? function keys(o2) {
          return origKeys(o2);
        } : require2("./implementation");
        var originalKeys = Object.keys;
        keysShim.shim = function shimObjectKeys() {
          if (Object.keys) {
            var keysWorksWithArguments = function() {
              var args = Object.keys(arguments);
              return args && args.length === arguments.length;
            }(1, 2);
            if (!keysWorksWithArguments) {
              Object.keys = function keys(object) {
                if (isArgs(object)) {
                  return originalKeys(slice.call(object));
                }
                return originalKeys(object);
              };
            }
          } else {
            Object.keys = keysShim;
          }
          return Object.keys || keysShim;
        };
        module3.exports = keysShim;
      }, { "./implementation": 434, "./isArguments": 436 }], 436: [function(require2, module3, exports3) {
        var toStr = Object.prototype.toString;
        module3.exports = function isArguments(value) {
          var str = toStr.call(value);
          var isArgs = str === "[object Arguments]";
          if (!isArgs) {
            isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
          }
          return isArgs;
        };
      }, {}], 437: [function(require2, module3, exports3) {
        var objectKeys2 = require2("object-keys");
        var hasSymbols = require2("has-symbols/shams")();
        var callBound = require2("call-bind/callBound");
        var toObject = Object;
        var $push = callBound("Array.prototype.push");
        var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
        var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
        module3.exports = function assign2(target, source1) {
          if (target == null) {
            throw new TypeError("target must be an object");
          }
          var to = toObject(target);
          if (arguments.length === 1) {
            return to;
          }
          for (var s2 = 1; s2 < arguments.length; ++s2) {
            var from = toObject(arguments[s2]);
            var keys = objectKeys2(from);
            var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
            if (getSymbols) {
              var syms = getSymbols(from);
              for (var j = 0; j < syms.length; ++j) {
                var key = syms[j];
                if ($propIsEnumerable(from, key)) {
                  $push(keys, key);
                }
              }
            }
            for (var i = 0; i < keys.length; ++i) {
              var nextKey = keys[i];
              if ($propIsEnumerable(from, nextKey)) {
                var propValue = from[nextKey];
                to[nextKey] = propValue;
              }
            }
          }
          return to;
        };
      }, { "call-bind/callBound": 105, "has-symbols/shams": 395, "object-keys": 435 }], 438: [function(require2, module3, exports3) {
        var implementation = require2("./implementation");
        var lacksProperEnumerationOrder = function() {
          if (!Object.assign) {
            return false;
          }
          var str = "abcdefghijklmnopqrst";
          var letters = str.split("");
          var map = {};
          for (var i = 0; i < letters.length; ++i) {
            map[letters[i]] = letters[i];
          }
          var obj = Object.assign({}, map);
          var actual = "";
          for (var k in obj) {
            actual += k;
          }
          return str !== actual;
        };
        var assignHasPendingExceptions = function() {
          if (!Object.assign || !Object.preventExtensions) {
            return false;
          }
          var thrower = Object.preventExtensions({ 1: 2 });
          try {
            Object.assign(thrower, "xy");
          } catch (e2) {
            return thrower[1] === "y";
          }
          return false;
        };
        module3.exports = function getPolyfill() {
          if (!Object.assign) {
            return implementation;
          }
          if (lacksProperEnumerationOrder()) {
            return implementation;
          }
          if (assignHasPendingExceptions()) {
            return implementation;
          }
          return Object.assign;
        };
      }, { "./implementation": 437 }], 439: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            function assertPath(path) {
              if (typeof path !== "string") {
                throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
              }
            }
            function normalizeStringPosix(path, allowAboveRoot) {
              var res = "";
              var lastSegmentLength = 0;
              var lastSlash = -1;
              var dots = 0;
              var code;
              for (var i = 0; i <= path.length; ++i) {
                if (i < path.length)
                  code = path.charCodeAt(i);
                else if (code === 47)
                  break;
                else
                  code = 47;
                if (code === 47) {
                  if (lastSlash === i - 1 || dots === 1)
                    ;
                  else if (lastSlash !== i - 1 && dots === 2) {
                    if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                      if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf("/");
                        if (lastSlashIndex !== res.length - 1) {
                          if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                          } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                          }
                          lastSlash = i;
                          dots = 0;
                          continue;
                        }
                      } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                      }
                    }
                    if (allowAboveRoot) {
                      if (res.length > 0)
                        res += "/..";
                      else
                        res = "..";
                      lastSegmentLength = 2;
                    }
                  } else {
                    if (res.length > 0)
                      res += "/" + path.slice(lastSlash + 1, i);
                    else
                      res = path.slice(lastSlash + 1, i);
                    lastSegmentLength = i - lastSlash - 1;
                  }
                  lastSlash = i;
                  dots = 0;
                } else if (code === 46 && dots !== -1) {
                  ++dots;
                } else {
                  dots = -1;
                }
              }
              return res;
            }
            function _format(sep, pathObject) {
              var dir = pathObject.dir || pathObject.root;
              var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
              if (!dir) {
                return base;
              }
              if (dir === pathObject.root) {
                return dir + base;
              }
              return dir + sep + base;
            }
            var posix = {
              // path.resolve([from ...], to)
              resolve: function resolve2() {
                var resolvedPath = "";
                var resolvedAbsolute = false;
                var cwd;
                for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                  var path;
                  if (i >= 0)
                    path = arguments[i];
                  else {
                    if (cwd === void 0)
                      cwd = process.cwd();
                    path = cwd;
                  }
                  assertPath(path);
                  if (path.length === 0) {
                    continue;
                  }
                  resolvedPath = path + "/" + resolvedPath;
                  resolvedAbsolute = path.charCodeAt(0) === 47;
                }
                resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
                if (resolvedAbsolute) {
                  if (resolvedPath.length > 0)
                    return "/" + resolvedPath;
                  else
                    return "/";
                } else if (resolvedPath.length > 0) {
                  return resolvedPath;
                } else {
                  return ".";
                }
              },
              normalize: function normalize(path) {
                assertPath(path);
                if (path.length === 0)
                  return ".";
                var isAbsolute = path.charCodeAt(0) === 47;
                var trailingSeparator = path.charCodeAt(path.length - 1) === 47;
                path = normalizeStringPosix(path, !isAbsolute);
                if (path.length === 0 && !isAbsolute)
                  path = ".";
                if (path.length > 0 && trailingSeparator)
                  path += "/";
                if (isAbsolute)
                  return "/" + path;
                return path;
              },
              isAbsolute: function isAbsolute(path) {
                assertPath(path);
                return path.length > 0 && path.charCodeAt(0) === 47;
              },
              join: function join() {
                if (arguments.length === 0)
                  return ".";
                var joined;
                for (var i = 0; i < arguments.length; ++i) {
                  var arg = arguments[i];
                  assertPath(arg);
                  if (arg.length > 0) {
                    if (joined === void 0)
                      joined = arg;
                    else
                      joined += "/" + arg;
                  }
                }
                if (joined === void 0)
                  return ".";
                return posix.normalize(joined);
              },
              relative: function relative(from, to) {
                assertPath(from);
                assertPath(to);
                if (from === to)
                  return "";
                from = posix.resolve(from);
                to = posix.resolve(to);
                if (from === to)
                  return "";
                var fromStart = 1;
                for (; fromStart < from.length; ++fromStart) {
                  if (from.charCodeAt(fromStart) !== 47)
                    break;
                }
                var fromEnd = from.length;
                var fromLen = fromEnd - fromStart;
                var toStart = 1;
                for (; toStart < to.length; ++toStart) {
                  if (to.charCodeAt(toStart) !== 47)
                    break;
                }
                var toEnd = to.length;
                var toLen = toEnd - toStart;
                var length = fromLen < toLen ? fromLen : toLen;
                var lastCommonSep = -1;
                var i = 0;
                for (; i <= length; ++i) {
                  if (i === length) {
                    if (toLen > length) {
                      if (to.charCodeAt(toStart + i) === 47) {
                        return to.slice(toStart + i + 1);
                      } else if (i === 0) {
                        return to.slice(toStart + i);
                      }
                    } else if (fromLen > length) {
                      if (from.charCodeAt(fromStart + i) === 47) {
                        lastCommonSep = i;
                      } else if (i === 0) {
                        lastCommonSep = 0;
                      }
                    }
                    break;
                  }
                  var fromCode = from.charCodeAt(fromStart + i);
                  var toCode = to.charCodeAt(toStart + i);
                  if (fromCode !== toCode)
                    break;
                  else if (fromCode === 47)
                    lastCommonSep = i;
                }
                var out = "";
                for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
                  if (i === fromEnd || from.charCodeAt(i) === 47) {
                    if (out.length === 0)
                      out += "..";
                    else
                      out += "/..";
                  }
                }
                if (out.length > 0)
                  return out + to.slice(toStart + lastCommonSep);
                else {
                  toStart += lastCommonSep;
                  if (to.charCodeAt(toStart) === 47)
                    ++toStart;
                  return to.slice(toStart);
                }
              },
              _makeLong: function _makeLong(path) {
                return path;
              },
              dirname: function dirname(path) {
                assertPath(path);
                if (path.length === 0)
                  return ".";
                var code = path.charCodeAt(0);
                var hasRoot = code === 47;
                var end = -1;
                var matchedSlash = true;
                for (var i = path.length - 1; i >= 1; --i) {
                  code = path.charCodeAt(i);
                  if (code === 47) {
                    if (!matchedSlash) {
                      end = i;
                      break;
                    }
                  } else {
                    matchedSlash = false;
                  }
                }
                if (end === -1)
                  return hasRoot ? "/" : ".";
                if (hasRoot && end === 1)
                  return "//";
                return path.slice(0, end);
              },
              basename: function basename(path, ext) {
                if (ext !== void 0 && typeof ext !== "string")
                  throw new TypeError('"ext" argument must be a string');
                assertPath(path);
                var start = 0;
                var end = -1;
                var matchedSlash = true;
                var i;
                if (ext !== void 0 && ext.length > 0 && ext.length <= path.length) {
                  if (ext.length === path.length && ext === path)
                    return "";
                  var extIdx = ext.length - 1;
                  var firstNonSlashEnd = -1;
                  for (i = path.length - 1; i >= 0; --i) {
                    var code = path.charCodeAt(i);
                    if (code === 47) {
                      if (!matchedSlash) {
                        start = i + 1;
                        break;
                      }
                    } else {
                      if (firstNonSlashEnd === -1) {
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                      }
                      if (extIdx >= 0) {
                        if (code === ext.charCodeAt(extIdx)) {
                          if (--extIdx === -1) {
                            end = i;
                          }
                        } else {
                          extIdx = -1;
                          end = firstNonSlashEnd;
                        }
                      }
                    }
                  }
                  if (start === end)
                    end = firstNonSlashEnd;
                  else if (end === -1)
                    end = path.length;
                  return path.slice(start, end);
                } else {
                  for (i = path.length - 1; i >= 0; --i) {
                    if (path.charCodeAt(i) === 47) {
                      if (!matchedSlash) {
                        start = i + 1;
                        break;
                      }
                    } else if (end === -1) {
                      matchedSlash = false;
                      end = i + 1;
                    }
                  }
                  if (end === -1)
                    return "";
                  return path.slice(start, end);
                }
              },
              extname: function extname(path) {
                assertPath(path);
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var preDotState = 0;
                for (var i = path.length - 1; i >= 0; --i) {
                  var code = path.charCodeAt(i);
                  if (code === 47) {
                    if (!matchedSlash) {
                      startPart = i + 1;
                      break;
                    }
                    continue;
                  }
                  if (end === -1) {
                    matchedSlash = false;
                    end = i + 1;
                  }
                  if (code === 46) {
                    if (startDot === -1)
                      startDot = i;
                    else if (preDotState !== 1)
                      preDotState = 1;
                  } else if (startDot !== -1) {
                    preDotState = -1;
                  }
                }
                if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
                preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
                preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                  return "";
                }
                return path.slice(startDot, end);
              },
              format: function format(pathObject) {
                if (pathObject === null || typeof pathObject !== "object") {
                  throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
                }
                return _format("/", pathObject);
              },
              parse: function parse2(path) {
                assertPath(path);
                var ret = { root: "", dir: "", base: "", ext: "", name: "" };
                if (path.length === 0)
                  return ret;
                var code = path.charCodeAt(0);
                var isAbsolute = code === 47;
                var start;
                if (isAbsolute) {
                  ret.root = "/";
                  start = 1;
                } else {
                  start = 0;
                }
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var i = path.length - 1;
                var preDotState = 0;
                for (; i >= start; --i) {
                  code = path.charCodeAt(i);
                  if (code === 47) {
                    if (!matchedSlash) {
                      startPart = i + 1;
                      break;
                    }
                    continue;
                  }
                  if (end === -1) {
                    matchedSlash = false;
                    end = i + 1;
                  }
                  if (code === 46) {
                    if (startDot === -1)
                      startDot = i;
                    else if (preDotState !== 1)
                      preDotState = 1;
                  } else if (startDot !== -1) {
                    preDotState = -1;
                  }
                }
                if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
                preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
                preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                  if (end !== -1) {
                    if (startPart === 0 && isAbsolute)
                      ret.base = ret.name = path.slice(1, end);
                    else
                      ret.base = ret.name = path.slice(startPart, end);
                  }
                } else {
                  if (startPart === 0 && isAbsolute) {
                    ret.name = path.slice(1, startDot);
                    ret.base = path.slice(1, end);
                  } else {
                    ret.name = path.slice(startPart, startDot);
                    ret.base = path.slice(startPart, end);
                  }
                  ret.ext = path.slice(startDot, end);
                }
                if (startPart > 0)
                  ret.dir = path.slice(0, startPart - 1);
                else if (isAbsolute)
                  ret.dir = "/";
                return ret;
              },
              sep: "/",
              delimiter: ":",
              win32: null,
              posix: null
            };
            posix.posix = posix;
            module3.exports = posix;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 538 }], 440: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            (function() {
              var objectTypes = {
                "function": true,
                "object": true
              };
              var root = objectTypes[typeof window] && window || this;
              var freeExports = objectTypes[typeof exports3] && exports3;
              var freeModule = objectTypes[typeof module3] && module3 && !module3.nodeType && module3;
              var freeGlobal = freeExports && freeModule && typeof global3 == "object" && global3;
              if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
                root = freeGlobal;
              }
              var maxSafeInteger = Math.pow(2, 53) - 1;
              var reOpera = /\bOpera/;
              var objectProto = Object.prototype;
              var hasOwnProperty2 = objectProto.hasOwnProperty;
              var toString = objectProto.toString;
              function capitalize2(string) {
                string = String(string);
                return string.charAt(0).toUpperCase() + string.slice(1);
              }
              function cleanupOS(os, pattern, label) {
                var data = {
                  "10.0": "10",
                  "6.4": "10 Technical Preview",
                  "6.3": "8.1",
                  "6.2": "8",
                  "6.1": "Server 2008 R2 / 7",
                  "6.0": "Server 2008 / Vista",
                  "5.2": "Server 2003 / XP 64-bit",
                  "5.1": "XP",
                  "5.01": "2000 SP1",
                  "5.0": "2000",
                  "4.0": "NT",
                  "4.90": "ME"
                };
                if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) && (data = data[/[\d.]+$/.exec(os)])) {
                  os = "Windows " + data;
                }
                os = String(os);
                if (pattern && label) {
                  os = os.replace(RegExp(pattern, "i"), label);
                }
                os = format(
                  os.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]
                );
                return os;
              }
              function each(object, callback) {
                var index2 = -1, length = object ? object.length : 0;
                if (typeof length == "number" && length > -1 && length <= maxSafeInteger) {
                  while (++index2 < length) {
                    callback(object[index2], index2, object);
                  }
                } else {
                  forOwn(object, callback);
                }
              }
              function format(string) {
                string = trim(string);
                return /^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize2(string);
              }
              function forOwn(object, callback) {
                for (var key in object) {
                  if (hasOwnProperty2.call(object, key)) {
                    callback(object[key], key, object);
                  }
                }
              }
              function getClassOf(value) {
                return value == null ? capitalize2(value) : toString.call(value).slice(8, -1);
              }
              function isHostType(object, property) {
                var type = object != null ? typeof object[property] : "number";
                return !/^(?:boolean|number|string|undefined)$/.test(type) && (type == "object" ? !!object[property] : true);
              }
              function qualify(string) {
                return String(string).replace(/([ -])(?!$)/g, "$1?");
              }
              function reduce(array, callback) {
                var accumulator = null;
                each(array, function(value, index2) {
                  accumulator = callback(accumulator, value, index2, array);
                });
                return accumulator;
              }
              function trim(string) {
                return String(string).replace(/^ +| +$/g, "");
              }
              function parse2(ua) {
                var context = root;
                var isCustomContext = ua && typeof ua == "object" && getClassOf(ua) != "String";
                if (isCustomContext) {
                  context = ua;
                  ua = null;
                }
                var nav = context.navigator || {};
                var userAgent = nav.userAgent || "";
                ua || (ua = userAgent);
                var likeChrome = isCustomContext ? !!nav.likeChrome : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());
                var objectClass = "Object", airRuntimeClass = isCustomContext ? objectClass : "ScriptBridgingProxyObject", enviroClass = isCustomContext ? objectClass : "Environment", javaClass = isCustomContext && context.java ? "JavaPackage" : getClassOf(context.java), phantomClass = isCustomContext ? objectClass : "RuntimeObject";
                var java = /\bJava/.test(javaClass) && context.java;
                var rhino = java && getClassOf(context.environment) == enviroClass;
                var alpha = java ? "a" : "α";
                var beta = java ? "b" : "β";
                var doc = context.document || {};
                var opera = context.operamini || context.opera;
                var operaClass = reOpera.test(operaClass = isCustomContext && opera ? opera["[[Class]]"] : getClassOf(opera)) ? operaClass : opera = null;
                var data;
                var arch = ua;
                var description = [];
                var prerelease = null;
                var useFeatures = ua == userAgent;
                var version2 = useFeatures && opera && typeof opera.version == "function" && opera.version();
                var isSpecialCasedOS;
                var layout = getLayout([
                  { "label": "EdgeHTML", "pattern": "Edge" },
                  "Trident",
                  { "label": "WebKit", "pattern": "AppleWebKit" },
                  "iCab",
                  "Presto",
                  "NetFront",
                  "Tasman",
                  "KHTML",
                  "Gecko"
                ]);
                var name = getName([
                  "Adobe AIR",
                  "Arora",
                  "Avant Browser",
                  "Breach",
                  "Camino",
                  "Electron",
                  "Epiphany",
                  "Fennec",
                  "Flock",
                  "Galeon",
                  "GreenBrowser",
                  "iCab",
                  "Iceweasel",
                  "K-Meleon",
                  "Konqueror",
                  "Lunascape",
                  "Maxthon",
                  { "label": "Microsoft Edge", "pattern": "(?:Edge|Edg|EdgA|EdgiOS)" },
                  "Midori",
                  "Nook Browser",
                  "PaleMoon",
                  "PhantomJS",
                  "Raven",
                  "Rekonq",
                  "RockMelt",
                  { "label": "Samsung Internet", "pattern": "SamsungBrowser" },
                  "SeaMonkey",
                  { "label": "Silk", "pattern": "(?:Cloud9|Silk-Accelerated)" },
                  "Sleipnir",
                  "SlimBrowser",
                  { "label": "SRWare Iron", "pattern": "Iron" },
                  "Sunrise",
                  "Swiftfox",
                  "Vivaldi",
                  "Waterfox",
                  "WebPositive",
                  { "label": "Yandex Browser", "pattern": "YaBrowser" },
                  { "label": "UC Browser", "pattern": "UCBrowser" },
                  "Opera Mini",
                  { "label": "Opera Mini", "pattern": "OPiOS" },
                  "Opera",
                  { "label": "Opera", "pattern": "OPR" },
                  "Chromium",
                  "Chrome",
                  { "label": "Chrome", "pattern": "(?:HeadlessChrome)" },
                  { "label": "Chrome Mobile", "pattern": "(?:CriOS|CrMo)" },
                  { "label": "Firefox", "pattern": "(?:Firefox|Minefield)" },
                  { "label": "Firefox for iOS", "pattern": "FxiOS" },
                  { "label": "IE", "pattern": "IEMobile" },
                  { "label": "IE", "pattern": "MSIE" },
                  "Safari"
                ]);
                var product = getProduct([
                  { "label": "BlackBerry", "pattern": "BB10" },
                  "BlackBerry",
                  { "label": "Galaxy S", "pattern": "GT-I9000" },
                  { "label": "Galaxy S2", "pattern": "GT-I9100" },
                  { "label": "Galaxy S3", "pattern": "GT-I9300" },
                  { "label": "Galaxy S4", "pattern": "GT-I9500" },
                  { "label": "Galaxy S5", "pattern": "SM-G900" },
                  { "label": "Galaxy S6", "pattern": "SM-G920" },
                  { "label": "Galaxy S6 Edge", "pattern": "SM-G925" },
                  { "label": "Galaxy S7", "pattern": "SM-G930" },
                  { "label": "Galaxy S7 Edge", "pattern": "SM-G935" },
                  "Google TV",
                  "Lumia",
                  "iPad",
                  "iPod",
                  "iPhone",
                  "Kindle",
                  { "label": "Kindle Fire", "pattern": "(?:Cloud9|Silk-Accelerated)" },
                  "Nexus",
                  "Nook",
                  "PlayBook",
                  "PlayStation Vita",
                  "PlayStation",
                  "TouchPad",
                  "Transformer",
                  { "label": "Wii U", "pattern": "WiiU" },
                  "Wii",
                  "Xbox One",
                  { "label": "Xbox 360", "pattern": "Xbox" },
                  "Xoom"
                ]);
                var manufacturer = getManufacturer({
                  "Apple": { "iPad": 1, "iPhone": 1, "iPod": 1 },
                  "Alcatel": {},
                  "Archos": {},
                  "Amazon": { "Kindle": 1, "Kindle Fire": 1 },
                  "Asus": { "Transformer": 1 },
                  "Barnes & Noble": { "Nook": 1 },
                  "BlackBerry": { "PlayBook": 1 },
                  "Google": { "Google TV": 1, "Nexus": 1 },
                  "HP": { "TouchPad": 1 },
                  "HTC": {},
                  "Huawei": {},
                  "Lenovo": {},
                  "LG": {},
                  "Microsoft": { "Xbox": 1, "Xbox One": 1 },
                  "Motorola": { "Xoom": 1 },
                  "Nintendo": { "Wii U": 1, "Wii": 1 },
                  "Nokia": { "Lumia": 1 },
                  "Oppo": {},
                  "Samsung": { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 },
                  "Sony": { "PlayStation": 1, "PlayStation Vita": 1 },
                  "Xiaomi": { "Mi": 1, "Redmi": 1 }
                });
                var os = getOS([
                  "Windows Phone",
                  "KaiOS",
                  "Android",
                  "CentOS",
                  { "label": "Chrome OS", "pattern": "CrOS" },
                  "Debian",
                  { "label": "DragonFly BSD", "pattern": "DragonFly" },
                  "Fedora",
                  "FreeBSD",
                  "Gentoo",
                  "Haiku",
                  "Kubuntu",
                  "Linux Mint",
                  "OpenBSD",
                  "Red Hat",
                  "SuSE",
                  "Ubuntu",
                  "Xubuntu",
                  "Cygwin",
                  "Symbian OS",
                  "hpwOS",
                  "webOS ",
                  "webOS",
                  "Tablet OS",
                  "Tizen",
                  "Linux",
                  "Mac OS X",
                  "Macintosh",
                  "Mac",
                  "Windows 98;",
                  "Windows "
                ]);
                function getLayout(guesses) {
                  return reduce(guesses, function(result, guess) {
                    return result || RegExp("\\b" + (guess.pattern || qualify(guess)) + "\\b", "i").exec(ua) && (guess.label || guess);
                  });
                }
                function getManufacturer(guesses) {
                  return reduce(guesses, function(result, value, key) {
                    return result || (value[product] || value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] || RegExp("\\b" + qualify(key) + "(?:\\b|\\w*\\d)", "i").exec(ua)) && key;
                  });
                }
                function getName(guesses) {
                  return reduce(guesses, function(result, guess) {
                    return result || RegExp("\\b" + (guess.pattern || qualify(guess)) + "\\b", "i").exec(ua) && (guess.label || guess);
                  });
                }
                function getOS(guesses) {
                  return reduce(guesses, function(result, guess) {
                    var pattern = guess.pattern || qualify(guess);
                    if (!result && (result = RegExp("\\b" + pattern + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(ua))) {
                      result = cleanupOS(result, pattern, guess.label || guess);
                    }
                    return result;
                  });
                }
                function getProduct(guesses) {
                  return reduce(guesses, function(result, guess) {
                    var pattern = guess.pattern || qualify(guess);
                    if (!result && (result = RegExp("\\b" + pattern + " *\\d+[.\\w_]*", "i").exec(ua) || RegExp("\\b" + pattern + " *\\w+-[\\w]*", "i").exec(ua) || RegExp("\\b" + pattern + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(ua))) {
                      if ((result = String(guess.label && !RegExp(pattern, "i").test(guess.label) ? guess.label : result).split("/"))[1] && !/[\d.]+/.test(result[0])) {
                        result[0] += " " + result[1];
                      }
                      guess = guess.label || guess;
                      result = format(result[0].replace(RegExp(pattern, "i"), guess).replace(RegExp("; *(?:" + guess + "[_-])?", "i"), " ").replace(RegExp("(" + guess + ")[-_.]?(\\w)", "i"), "$1 $2"));
                    }
                    return result;
                  });
                }
                function getVersion(patterns) {
                  return reduce(patterns, function(result, pattern) {
                    return result || (RegExp(pattern + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(ua) || 0)[1] || null;
                  });
                }
                function toStringPlatform() {
                  return this.description || "";
                }
                layout && (layout = [layout]);
                if (/\bAndroid\b/.test(os) && !product && (data = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(ua))) {
                  product = trim(data[1]).replace(/^[a-z]{2}-[a-z]{2};\s*/i, "") || null;
                }
                if (manufacturer && !product) {
                  product = getProduct([manufacturer]);
                } else if (manufacturer && product) {
                  product = product.replace(RegExp("^(" + qualify(manufacturer) + ")[-_.\\s]", "i"), manufacturer + " ").replace(RegExp("^(" + qualify(manufacturer) + ")[-_.]?(\\w)", "i"), manufacturer + " $2");
                }
                if (data = /\bGoogle TV\b/.exec(product)) {
                  product = data[0];
                }
                if (/\bSimulator\b/i.test(ua)) {
                  product = (product ? product + " " : "") + "Simulator";
                }
                if (name == "Opera Mini" && /\bOPiOS\b/.test(ua)) {
                  description.push("running in Turbo/Uncompressed mode");
                }
                if (name == "IE" && /\blike iPhone OS\b/.test(ua)) {
                  data = parse2(ua.replace(/like iPhone OS/, ""));
                  manufacturer = data.manufacturer;
                  product = data.product;
                } else if (/^iP/.test(product)) {
                  name || (name = "Safari");
                  os = "iOS" + ((data = / OS ([\d_]+)/i.exec(ua)) ? " " + data[1].replace(/_/g, ".") : "");
                } else if (name == "Konqueror" && /^Linux\b/i.test(os)) {
                  os = "Kubuntu";
                } else if (manufacturer && manufacturer != "Google" && (/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua) || /\bVita\b/.test(product)) || /\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua)) {
                  name = "Android Browser";
                  os = /\bAndroid\b/.test(os) ? os : "Android";
                } else if (name == "Silk") {
                  if (!/\bMobi/i.test(ua)) {
                    os = "Android";
                    description.unshift("desktop mode");
                  }
                  if (/Accelerated *= *true/i.test(ua)) {
                    description.unshift("accelerated");
                  }
                } else if (name == "UC Browser" && /\bUCWEB\b/.test(ua)) {
                  description.push("speed mode");
                } else if (name == "PaleMoon" && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
                  description.push("identifying as Firefox " + data[1]);
                } else if (name == "Firefox" && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
                  os || (os = "Firefox OS");
                  product || (product = data[1]);
                } else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
                  if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + "/") + 8))) {
                    name = null;
                  }
                  if ((data = product || manufacturer || os) && (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
                    name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + " Browser";
                  }
                } else if (name == "Electron" && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
                  description.push("Chromium " + data);
                }
                if (!version2) {
                  version2 = getVersion([
                    "(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)",
                    "Version",
                    qualify(name),
                    "(?:Firefox|Minefield|NetFront)"
                  ]);
                }
                if (data = layout == "iCab" && parseFloat(version2) > 3 && "WebKit" || /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? "Blink" : "Presto") || /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && "WebKit" || !layout && /\bMSIE\b/i.test(ua) && (os == "Mac OS" ? "Tasman" : "Trident") || layout == "WebKit" && /\bPlayStation\b(?! Vita\b)/i.test(name) && "NetFront") {
                  layout = [data];
                }
                if (name == "IE" && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
                  name += " Mobile";
                  os = "Windows Phone " + (/\+$/.test(data) ? data : data + ".x");
                  description.unshift("desktop mode");
                } else if (/\bWPDesktop\b/i.test(ua)) {
                  name = "IE Mobile";
                  os = "Windows Phone 8.x";
                  description.unshift("desktop mode");
                  version2 || (version2 = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
                } else if (name != "IE" && layout == "Trident" && (data = /\brv:([\d.]+)/.exec(ua))) {
                  if (name) {
                    description.push("identifying as " + name + (version2 ? " " + version2 : ""));
                  }
                  name = "IE";
                  version2 = data[1];
                }
                if (useFeatures) {
                  if (isHostType(context, "global")) {
                    if (java) {
                      data = java.lang.System;
                      arch = data.getProperty("os.arch");
                      os = os || data.getProperty("os.name") + " " + data.getProperty("os.version");
                    }
                    if (rhino) {
                      try {
                        version2 = context.require("ringo/engine").version.join(".");
                        name = "RingoJS";
                      } catch (e2) {
                        if ((data = context.system) && data.global.system == context.system) {
                          name = "Narwhal";
                          os || (os = data[0].os || null);
                        }
                      }
                      if (!name) {
                        name = "Rhino";
                      }
                    } else if (typeof context.process == "object" && !context.process.browser && (data = context.process)) {
                      if (typeof data.versions == "object") {
                        if (typeof data.versions.electron == "string") {
                          description.push("Node " + data.versions.node);
                          name = "Electron";
                          version2 = data.versions.electron;
                        } else if (typeof data.versions.nw == "string") {
                          description.push("Chromium " + version2, "Node " + data.versions.node);
                          name = "NW.js";
                          version2 = data.versions.nw;
                        }
                      }
                      if (!name) {
                        name = "Node.js";
                        arch = data.arch;
                        os = data.platform;
                        version2 = /[\d.]+/.exec(data.version);
                        version2 = version2 ? version2[0] : null;
                      }
                    }
                  } else if (getClassOf(data = context.runtime) == airRuntimeClass) {
                    name = "Adobe AIR";
                    os = data.flash.system.Capabilities.os;
                  } else if (getClassOf(data = context.phantom) == phantomClass) {
                    name = "PhantomJS";
                    version2 = (data = data.version || null) && data.major + "." + data.minor + "." + data.patch;
                  } else if (typeof doc.documentMode == "number" && (data = /\bTrident\/(\d+)/i.exec(ua))) {
                    version2 = [version2, doc.documentMode];
                    if ((data = +data[1] + 4) != version2[1]) {
                      description.push("IE " + version2[1] + " mode");
                      layout && (layout[1] = "");
                      version2[1] = data;
                    }
                    version2 = name == "IE" ? String(version2[1].toFixed(1)) : version2[0];
                  } else if (typeof doc.documentMode == "number" && /^(?:Chrome|Firefox)\b/.test(name)) {
                    description.push("masking as " + name + " " + version2);
                    name = "IE";
                    version2 = "11.0";
                    layout = ["Trident"];
                    os = "Windows";
                  }
                  os = os && format(os);
                }
                if (version2 && (data = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version2) || /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ";" + (useFeatures && nav.appMinorVersion)) || /\bMinefield\b/i.test(ua) && "a")) {
                  prerelease = /b/i.test(data) ? "beta" : "alpha";
                  version2 = version2.replace(RegExp(data + "\\+?$"), "") + (prerelease == "beta" ? beta : alpha) + (/\d+\+?/.exec(data) || "");
                }
                if (name == "Fennec" || name == "Firefox" && /\b(?:Android|Firefox OS|KaiOS)\b/.test(os)) {
                  name = "Firefox Mobile";
                } else if (name == "Maxthon" && version2) {
                  version2 = version2.replace(/\.[\d.]+/, ".x");
                } else if (/\bXbox\b/i.test(product)) {
                  if (product == "Xbox 360") {
                    os = null;
                  }
                  if (product == "Xbox 360" && /\bIEMobile\b/.test(ua)) {
                    description.unshift("mobile mode");
                  }
                } else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) && (os == "Windows CE" || /Mobi/i.test(ua))) {
                  name += " Mobile";
                } else if (name == "IE" && useFeatures) {
                  try {
                    if (context.external === null) {
                      description.unshift("platform preview");
                    }
                  } catch (e2) {
                    description.unshift("embedded");
                  }
                } else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data = (RegExp(product.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(ua) || 0)[1] || version2)) {
                  data = [data, /BB10/.test(ua)];
                  os = (data[1] ? (product = null, manufacturer = "BlackBerry") : "Device Software") + " " + data[0];
                  version2 = null;
                } else if (this != forOwn && product != "Wii" && (useFeatures && opera || /Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua) || name == "Firefox" && /\bOS X (?:\d+\.){2,}/.test(os) || name == "IE" && (os && !/^Win/.test(os) && version2 > 5.5 || /\bWindows XP\b/.test(os) && version2 > 8 || version2 == 8 && !/\bTrident\b/.test(ua))) && !reOpera.test(data = parse2.call(forOwn, ua.replace(reOpera, "") + ";")) && data.name) {
                  data = "ing as " + data.name + ((data = data.version) ? " " + data : "");
                  if (reOpera.test(name)) {
                    if (/\bIE\b/.test(data) && os == "Mac OS") {
                      os = null;
                    }
                    data = "identify" + data;
                  } else {
                    data = "mask" + data;
                    if (operaClass) {
                      name = format(operaClass.replace(/([a-z])([A-Z])/g, "$1 $2"));
                    } else {
                      name = "Opera";
                    }
                    if (/\bIE\b/.test(data)) {
                      os = null;
                    }
                    if (!useFeatures) {
                      version2 = null;
                    }
                  }
                  layout = ["Presto"];
                  description.push(data);
                }
                if (data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1]) {
                  data = [parseFloat(data.replace(/\.(\d)$/, ".0$1")), data];
                  if (name == "Safari" && data[1].slice(-1) == "+") {
                    name = "WebKit Nightly";
                    prerelease = "alpha";
                    version2 = data[1].slice(0, -1);
                  } else if (version2 == data[1] || version2 == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
                    version2 = null;
                  }
                  data[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(ua) || 0)[1];
                  if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == "WebKit") {
                    layout = ["Blink"];
                  }
                  if (!useFeatures || !likeChrome && !data[1]) {
                    layout && (layout[1] = "like Safari");
                    data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? "4+" : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : "12");
                  } else {
                    layout && (layout[1] = "like Chrome");
                    data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.1 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.3 ? 11 : data < 535.01 ? 12 : data < 535.02 ? "13+" : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.1 ? 19 : data < 537.01 ? 20 : data < 537.11 ? "21+" : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != "Blink" ? "27" : "28");
                  }
                  layout && (layout[1] += " " + (data += typeof data == "number" ? ".x" : /[.+]/.test(data) ? "" : "+"));
                  if (name == "Safari" && (!version2 || parseInt(version2) > 45)) {
                    version2 = data;
                  } else if (name == "Chrome" && /\bHeadlessChrome/i.test(ua)) {
                    description.unshift("headless");
                  }
                }
                if (name == "Opera" && (data = /\bzbov|zvav$/.exec(os))) {
                  name += " ";
                  description.unshift("desktop mode");
                  if (data == "zvav") {
                    name += "Mini";
                    version2 = null;
                  } else {
                    name += "Mobile";
                  }
                  os = os.replace(RegExp(" *" + data + "$"), "");
                } else if (name == "Safari" && /\bChrome\b/.exec(layout && layout[1])) {
                  description.unshift("desktop mode");
                  name = "Chrome Mobile";
                  version2 = null;
                  if (/\bOS X\b/.test(os)) {
                    manufacturer = "Apple";
                    os = "iOS 4.3+";
                  } else {
                    os = null;
                  }
                } else if (/\bSRWare Iron\b/.test(name) && !version2) {
                  version2 = getVersion("Chrome");
                }
                if (version2 && version2.indexOf(data = /[\d.]+$/.exec(os)) == 0 && ua.indexOf("/" + data + "-") > -1) {
                  os = trim(os.replace(data, ""));
                }
                if (os && os.indexOf(name) != -1 && !RegExp(name + " OS").test(os)) {
                  os = os.replace(RegExp(" *" + qualify(name) + " *"), "");
                }
                if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (/Browser|Lunascape|Maxthon/.test(name) || name != "Safari" && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {
                  (data = layout[layout.length - 1]) && description.push(data);
                }
                if (description.length) {
                  description = ["(" + description.join("; ") + ")"];
                }
                if (manufacturer && product && product.indexOf(manufacturer) < 0) {
                  description.push("on " + manufacturer);
                }
                if (product) {
                  description.push((/^on /.test(description[description.length - 1]) ? "" : "on ") + product);
                }
                if (os) {
                  data = / ([\d.+]+)$/.exec(os);
                  isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == "/";
                  os = {
                    "architecture": 32,
                    "family": data && !isSpecialCasedOS ? os.replace(data[0], "") : os,
                    "version": data ? data[1] : null,
                    "toString": function() {
                      var version3 = this.version;
                      return this.family + (version3 && !isSpecialCasedOS ? " " + version3 : "") + (this.architecture == 64 ? " 64-bit" : "");
                    }
                  };
                }
                if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
                  if (os) {
                    os.architecture = 64;
                    os.family = os.family.replace(RegExp(" *" + data), "");
                  }
                  if (name && (/\bWOW64\b/i.test(ua) || useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua))) {
                    description.unshift("32-bit");
                  }
                } else if (os && /^OS X/.test(os.family) && name == "Chrome" && parseFloat(version2) >= 39) {
                  os.architecture = 64;
                }
                ua || (ua = null);
                var platform2 = {};
                platform2.description = ua;
                platform2.layout = layout && layout[0];
                platform2.manufacturer = manufacturer;
                platform2.name = name;
                platform2.prerelease = prerelease;
                platform2.product = product;
                platform2.ua = ua;
                platform2.version = name && version2;
                platform2.os = os || {
                  /**
                   * The CPU architecture the OS is built for.
                   *
                   * @memberOf platform.os
                   * @type number|null
                   */
                  "architecture": null,
                  /**
                   * The family of the OS.
                   *
                   * Common values include:
                   * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
                   * "Windows XP", "OS X", "Linux", "Ubuntu", "Debian", "Fedora", "Red Hat",
                   * "SuSE", "Android", "iOS" and "Windows Phone"
                   *
                   * @memberOf platform.os
                   * @type string|null
                   */
                  "family": null,
                  /**
                   * The version of the OS.
                   *
                   * @memberOf platform.os
                   * @type string|null
                   */
                  "version": null,
                  /**
                   * Returns the OS string.
                   *
                   * @memberOf platform.os
                   * @returns {string} The OS string.
                   */
                  "toString": function() {
                    return "null";
                  }
                };
                platform2.parse = parse2;
                platform2.toString = toStringPlatform;
                if (platform2.version) {
                  description.unshift(version2);
                }
                if (platform2.name) {
                  description.unshift(name);
                }
                if (os && name && !(os == String(os).split(" ")[0] && (os == name.split(" ")[0] || product))) {
                  description.push(product ? "(" + os + ")" : "on " + os);
                }
                if (description.length) {
                  platform2.description = description.join(" ");
                }
                return platform2;
              }
              var platform = parse2();
              if (freeExports && freeModule) {
                forOwn(platform, function(value, key) {
                  freeExports[key] = value;
                });
              } else {
                root.platform = platform;
              }
            }).call(this);
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 441: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
              module3.exports = { nextTick: nextTick2 };
            } else {
              module3.exports = process;
            }
            function nextTick2(fn, arg1, arg2, arg3) {
              if (typeof fn !== "function") {
                throw new TypeError('"callback" argument must be a function');
              }
              var len = arguments.length;
              var args, i;
              switch (len) {
                case 0:
                case 1:
                  return process.nextTick(fn);
                case 2:
                  return process.nextTick(function afterTickOne() {
                    fn.call(null, arg1);
                  });
                case 3:
                  return process.nextTick(function afterTickTwo() {
                    fn.call(null, arg1, arg2);
                  });
                case 4:
                  return process.nextTick(function afterTickThree() {
                    fn.call(null, arg1, arg2, arg3);
                  });
                default:
                  args = new Array(len - 1);
                  i = 0;
                  while (i < args.length) {
                    args[i++] = arguments[i];
                  }
                  return process.nextTick(function afterTick() {
                    fn.apply(null, args);
                  });
              }
            }
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 538 }], 442: [function(require2, module3, exports3) {
        var process = module3.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e2) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e2) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e2) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e3) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e2) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e3) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue2 = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue2 = currentQueue.concat(queue2);
          } else {
            queueIndex = -1;
          }
          if (queue2.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue2.length;
          while (len) {
            currentQueue = queue2;
            queue2 = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue2.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue2.push(new Item(fun, args));
          if (queue2.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop2() {
        }
        process.on = noop2;
        process.addListener = noop2;
        process.once = noop2;
        process.off = noop2;
        process.removeListener = noop2;
        process.removeAllListeners = noop2;
        process.emit = noop2;
        process.prependListener = noop2;
        process.prependOnceListener = noop2;
        process.listeners = function(name) {
          return [];
        };
        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };
      }, {}], 443: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            (function(root) {
              var freeExports = typeof exports3 == "object" && exports3 && !exports3.nodeType && exports3;
              var freeModule = typeof module3 == "object" && module3 && !module3.nodeType && module3;
              var freeGlobal = typeof global3 == "object" && global3;
              if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
                root = freeGlobal;
              }
              var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
                "overflow": "Overflow: input needs wider integers to process",
                "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                "invalid-input": "Invalid input"
              }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
              function error(type) {
                throw new RangeError(errors[type]);
              }
              function map(array, fn) {
                var length = array.length;
                var result = [];
                while (length--) {
                  result[length] = fn(array[length]);
                }
                return result;
              }
              function mapDomain(string, fn) {
                var parts = string.split("@");
                var result = "";
                if (parts.length > 1) {
                  result = parts[0] + "@";
                  string = parts[1];
                }
                string = string.replace(regexSeparators, ".");
                var labels = string.split(".");
                var encoded = map(labels, fn).join(".");
                return result + encoded;
              }
              function ucs2decode(string) {
                var output = [], counter = 0, length = string.length, value, extra;
                while (counter < length) {
                  value = string.charCodeAt(counter++);
                  if (value >= 55296 && value <= 56319 && counter < length) {
                    extra = string.charCodeAt(counter++);
                    if ((extra & 64512) == 56320) {
                      output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                    } else {
                      output.push(value);
                      counter--;
                    }
                  } else {
                    output.push(value);
                  }
                }
                return output;
              }
              function ucs2encode(array) {
                return map(array, function(value) {
                  var output = "";
                  if (value > 65535) {
                    value -= 65536;
                    output += stringFromCharCode(value >>> 10 & 1023 | 55296);
                    value = 56320 | value & 1023;
                  }
                  output += stringFromCharCode(value);
                  return output;
                }).join("");
              }
              function basicToDigit(codePoint) {
                if (codePoint - 48 < 10) {
                  return codePoint - 22;
                }
                if (codePoint - 65 < 26) {
                  return codePoint - 65;
                }
                if (codePoint - 97 < 26) {
                  return codePoint - 97;
                }
                return base;
              }
              function digitToBasic(digit, flag) {
                return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
              }
              function adapt(delta, numPoints, firstTime) {
                var k = 0;
                delta = firstTime ? floor(delta / damp) : delta >> 1;
                delta += floor(delta / numPoints);
                for (; delta > baseMinusTMin * tMax >> 1; k += base) {
                  delta = floor(delta / baseMinusTMin);
                }
                return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
              }
              function decode(input) {
                var output = [], inputLength = input.length, out, i = 0, n2 = initialN, bias = initialBias, basic, j, index2, oldi, w, k, digit, t2, baseMinusT;
                basic = input.lastIndexOf(delimiter);
                if (basic < 0) {
                  basic = 0;
                }
                for (j = 0; j < basic; ++j) {
                  if (input.charCodeAt(j) >= 128) {
                    error("not-basic");
                  }
                  output.push(input.charCodeAt(j));
                }
                for (index2 = basic > 0 ? basic + 1 : 0; index2 < inputLength; ) {
                  for (oldi = i, w = 1, k = base; ; k += base) {
                    if (index2 >= inputLength) {
                      error("invalid-input");
                    }
                    digit = basicToDigit(input.charCodeAt(index2++));
                    if (digit >= base || digit > floor((maxInt - i) / w)) {
                      error("overflow");
                    }
                    i += digit * w;
                    t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (digit < t2) {
                      break;
                    }
                    baseMinusT = base - t2;
                    if (w > floor(maxInt / baseMinusT)) {
                      error("overflow");
                    }
                    w *= baseMinusT;
                  }
                  out = output.length + 1;
                  bias = adapt(i - oldi, out, oldi == 0);
                  if (floor(i / out) > maxInt - n2) {
                    error("overflow");
                  }
                  n2 += floor(i / out);
                  i %= out;
                  output.splice(i++, 0, n2);
                }
                return ucs2encode(output);
              }
              function encode2(input) {
                var n2, delta, handledCPCount, basicLength, bias, j, m2, q, k, t2, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
                input = ucs2decode(input);
                inputLength = input.length;
                n2 = initialN;
                delta = 0;
                bias = initialBias;
                for (j = 0; j < inputLength; ++j) {
                  currentValue = input[j];
                  if (currentValue < 128) {
                    output.push(stringFromCharCode(currentValue));
                  }
                }
                handledCPCount = basicLength = output.length;
                if (basicLength) {
                  output.push(delimiter);
                }
                while (handledCPCount < inputLength) {
                  for (m2 = maxInt, j = 0; j < inputLength; ++j) {
                    currentValue = input[j];
                    if (currentValue >= n2 && currentValue < m2) {
                      m2 = currentValue;
                    }
                  }
                  handledCPCountPlusOne = handledCPCount + 1;
                  if (m2 - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
                    error("overflow");
                  }
                  delta += (m2 - n2) * handledCPCountPlusOne;
                  n2 = m2;
                  for (j = 0; j < inputLength; ++j) {
                    currentValue = input[j];
                    if (currentValue < n2 && ++delta > maxInt) {
                      error("overflow");
                    }
                    if (currentValue == n2) {
                      for (q = delta, k = base; ; k += base) {
                        t2 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t2) {
                          break;
                        }
                        qMinusT = q - t2;
                        baseMinusT = base - t2;
                        output.push(
                          stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0))
                        );
                        q = floor(qMinusT / baseMinusT);
                      }
                      output.push(stringFromCharCode(digitToBasic(q, 0)));
                      bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                      delta = 0;
                      ++handledCPCount;
                    }
                  }
                  ++delta;
                  ++n2;
                }
                return output.join("");
              }
              function toUnicode(input) {
                return mapDomain(input, function(string) {
                  return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
                });
              }
              function toASCII(input) {
                return mapDomain(input, function(string) {
                  return regexNonASCII.test(string) ? "xn--" + encode2(string) : string;
                });
              }
              punycode = {
                /**
                 * A string representing the current Punycode.js version number.
                 * @memberOf punycode
                 * @type String
                 */
                "version": "1.4.1",
                /**
                 * An object of methods to convert from JavaScript's internal character
                 * representation (UCS-2) to Unicode code points, and back.
                 * @see <https://mathiasbynens.be/notes/javascript-encoding>
                 * @memberOf punycode
                 * @type Object
                 */
                "ucs2": {
                  "decode": ucs2decode,
                  "encode": ucs2encode
                },
                "decode": decode,
                "encode": encode2,
                "toASCII": toASCII,
                "toUnicode": toUnicode
              };
              if (freeExports && freeModule) {
                if (module3.exports == freeExports) {
                  freeModule.exports = punycode;
                } else {
                  for (key in punycode) {
                    punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                  }
                }
              } else {
                root.punycode = punycode;
              }
            })(this);
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 444: [function(require2, module3, exports3) {
        var replace = String.prototype.replace;
        var percentTwenties = /%20/g;
        var Format = {
          RFC1738: "RFC1738",
          RFC3986: "RFC3986"
        };
        module3.exports = {
          "default": Format.RFC3986,
          formatters: {
            RFC1738: function(value) {
              return replace.call(value, percentTwenties, "+");
            },
            RFC3986: function(value) {
              return String(value);
            }
          },
          RFC1738: Format.RFC1738,
          RFC3986: Format.RFC3986
        };
      }, {}], 445: [function(require2, module3, exports3) {
        var stringify2 = require2("./stringify");
        var parse2 = require2("./parse");
        var formats = require2("./formats");
        module3.exports = {
          formats,
          parse: parse2,
          stringify: stringify2
        };
      }, { "./formats": 444, "./parse": 446, "./stringify": 447 }], 446: [function(require2, module3, exports3) {
        var utils = require2("./utils");
        var has2 = Object.prototype.hasOwnProperty;
        var isArray2 = Array.isArray;
        var defaults = {
          allowDots: false,
          allowPrototypes: false,
          allowSparse: false,
          arrayLimit: 20,
          charset: "utf-8",
          charsetSentinel: false,
          comma: false,
          decoder: utils.decode,
          delimiter: "&",
          depth: 5,
          ignoreQueryPrefix: false,
          interpretNumericEntities: false,
          parameterLimit: 1e3,
          parseArrays: true,
          plainObjects: false,
          strictNullHandling: false
        };
        var interpretNumericEntities = function(str) {
          return str.replace(/&#(\d+);/g, function($0, numberStr) {
            return String.fromCharCode(parseInt(numberStr, 10));
          });
        };
        var parseArrayValue = function(val, options) {
          if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
            return val.split(",");
          }
          return val;
        };
        var isoSentinel = "utf8=%26%2310003%3B";
        var charsetSentinel = "utf8=%E2%9C%93";
        var parseValues = function parseQueryStringValues(str, options) {
          var obj = { __proto__: null };
          var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
          var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
          var parts = cleanStr.split(options.delimiter, limit);
          var skipIndex = -1;
          var i;
          var charset = options.charset;
          if (options.charsetSentinel) {
            for (i = 0; i < parts.length; ++i) {
              if (parts[i].indexOf("utf8=") === 0) {
                if (parts[i] === charsetSentinel) {
                  charset = "utf-8";
                } else if (parts[i] === isoSentinel) {
                  charset = "iso-8859-1";
                }
                skipIndex = i;
                i = parts.length;
              }
            }
          }
          for (i = 0; i < parts.length; ++i) {
            if (i === skipIndex) {
              continue;
            }
            var part = parts[i];
            var bracketEqualsPos = part.indexOf("]=");
            var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
            var key, val;
            if (pos === -1) {
              key = options.decoder(part, defaults.decoder, charset, "key");
              val = options.strictNullHandling ? null : "";
            } else {
              key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
              val = utils.maybeMap(
                parseArrayValue(part.slice(pos + 1), options),
                function(encodedVal) {
                  return options.decoder(encodedVal, defaults.decoder, charset, "value");
                }
              );
            }
            if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
              val = interpretNumericEntities(val);
            }
            if (part.indexOf("[]=") > -1) {
              val = isArray2(val) ? [val] : val;
            }
            if (has2.call(obj, key)) {
              obj[key] = utils.combine(obj[key], val);
            } else {
              obj[key] = val;
            }
          }
          return obj;
        };
        var parseObject = function(chain, val, options, valuesParsed) {
          var leaf = valuesParsed ? val : parseArrayValue(val, options);
          for (var i = chain.length - 1; i >= 0; --i) {
            var obj;
            var root = chain[i];
            if (root === "[]" && options.parseArrays) {
              obj = [].concat(leaf);
            } else {
              obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
              var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
              var index2 = parseInt(cleanRoot, 10);
              if (!options.parseArrays && cleanRoot === "") {
                obj = { 0: leaf };
              } else if (!isNaN(index2) && root !== cleanRoot && String(index2) === cleanRoot && index2 >= 0 && (options.parseArrays && index2 <= options.arrayLimit)) {
                obj = [];
                obj[index2] = leaf;
              } else if (cleanRoot !== "__proto__") {
                obj[cleanRoot] = leaf;
              }
            }
            leaf = obj;
          }
          return leaf;
        };
        var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
          if (!givenKey) {
            return;
          }
          var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
          var brackets = /(\[[^[\]]*])/;
          var child = /(\[[^[\]]*])/g;
          var segment = options.depth > 0 && brackets.exec(key);
          var parent = segment ? key.slice(0, segment.index) : key;
          var keys = [];
          if (parent) {
            if (!options.plainObjects && has2.call(Object.prototype, parent)) {
              if (!options.allowPrototypes) {
                return;
              }
            }
            keys.push(parent);
          }
          var i = 0;
          while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
            i += 1;
            if (!options.plainObjects && has2.call(Object.prototype, segment[1].slice(1, -1))) {
              if (!options.allowPrototypes) {
                return;
              }
            }
            keys.push(segment[1]);
          }
          if (segment) {
            keys.push("[" + key.slice(segment.index) + "]");
          }
          return parseObject(keys, val, options, valuesParsed);
        };
        var normalizeParseOptions = function normalizeParseOptions2(opts) {
          if (!opts) {
            return defaults;
          }
          if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
            throw new TypeError("Decoder has to be a function.");
          }
          if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
            throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
          }
          var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
          return {
            allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
            allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
            allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
            arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
            charset,
            charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
            comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
            decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
            delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
            // eslint-disable-next-line no-implicit-coercion, no-extra-parens
            depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
            ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
            interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
            parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
            parseArrays: opts.parseArrays !== false,
            plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
            strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
          };
        };
        module3.exports = function(str, opts) {
          var options = normalizeParseOptions(opts);
          if (str === "" || str === null || typeof str === "undefined") {
            return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          }
          var tempObj = typeof str === "string" ? parseValues(str, options) : str;
          var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var keys = Object.keys(tempObj);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
            obj = utils.merge(obj, newObj, options);
          }
          if (options.allowSparse === true) {
            return obj;
          }
          return utils.compact(obj);
        };
      }, { "./utils": 448 }], 447: [function(require2, module3, exports3) {
        var getSideChannel = require2("side-channel");
        var utils = require2("./utils");
        var formats = require2("./formats");
        var has2 = Object.prototype.hasOwnProperty;
        var arrayPrefixGenerators = {
          brackets: function brackets(prefix) {
            return prefix + "[]";
          },
          comma: "comma",
          indices: function indices(prefix, key) {
            return prefix + "[" + key + "]";
          },
          repeat: function repeat(prefix) {
            return prefix;
          }
        };
        var isArray2 = Array.isArray;
        var push = Array.prototype.push;
        var pushToArray = function(arr, valueOrArray) {
          push.apply(arr, isArray2(valueOrArray) ? valueOrArray : [valueOrArray]);
        };
        var toISO = Date.prototype.toISOString;
        var defaultFormat = formats["default"];
        var defaults = {
          addQueryPrefix: false,
          allowDots: false,
          charset: "utf-8",
          charsetSentinel: false,
          delimiter: "&",
          encode: true,
          encoder: utils.encode,
          encodeValuesOnly: false,
          format: defaultFormat,
          formatter: formats.formatters[defaultFormat],
          // deprecated
          indices: false,
          serializeDate: function serializeDate(date) {
            return toISO.call(date);
          },
          skipNulls: false,
          strictNullHandling: false
        };
        var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
          return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
        };
        var sentinel = {};
        var stringify2 = function stringify3(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
          var obj = object;
          var tmpSc = sideChannel;
          var step = 0;
          var findFlag = false;
          while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
            var pos = tmpSc.get(object);
            step += 1;
            if (typeof pos !== "undefined") {
              if (pos === step) {
                throw new RangeError("Cyclic object value");
              } else {
                findFlag = true;
              }
            }
            if (typeof tmpSc.get(sentinel) === "undefined") {
              step = 0;
            }
          }
          if (typeof filter === "function") {
            obj = filter(prefix, obj);
          } else if (obj instanceof Date) {
            obj = serializeDate(obj);
          } else if (generateArrayPrefix === "comma" && isArray2(obj)) {
            obj = utils.maybeMap(obj, function(value2) {
              if (value2 instanceof Date) {
                return serializeDate(value2);
              }
              return value2;
            });
          }
          if (obj === null) {
            if (strictNullHandling) {
              return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
            }
            obj = "";
          }
          if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
            if (encoder) {
              var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
              return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
            }
            return [formatter(prefix) + "=" + formatter(String(obj))];
          }
          var values = [];
          if (typeof obj === "undefined") {
            return values;
          }
          var objKeys;
          if (generateArrayPrefix === "comma" && isArray2(obj)) {
            if (encodeValuesOnly && encoder) {
              obj = utils.maybeMap(obj, encoder);
            }
            objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
          } else if (isArray2(filter)) {
            objKeys = filter;
          } else {
            var keys = Object.keys(obj);
            objKeys = sort ? keys.sort(sort) : keys;
          }
          var adjustedPrefix = commaRoundTrip && isArray2(obj) && obj.length === 1 ? prefix + "[]" : prefix;
          for (var j = 0; j < objKeys.length; ++j) {
            var key = objKeys[j];
            var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
            if (skipNulls && value === null) {
              continue;
            }
            var keyPrefix = isArray2(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
            sideChannel.set(object, step);
            var valueSideChannel = getSideChannel();
            valueSideChannel.set(sentinel, sideChannel);
            pushToArray(values, stringify3(
              value,
              keyPrefix,
              generateArrayPrefix,
              commaRoundTrip,
              strictNullHandling,
              skipNulls,
              generateArrayPrefix === "comma" && encodeValuesOnly && isArray2(obj) ? null : encoder,
              filter,
              sort,
              allowDots,
              serializeDate,
              format,
              formatter,
              encodeValuesOnly,
              charset,
              valueSideChannel
            ));
          }
          return values;
        };
        var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
          if (!opts) {
            return defaults;
          }
          if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
            throw new TypeError("Encoder has to be a function.");
          }
          var charset = opts.charset || defaults.charset;
          if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
            throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
          }
          var format = formats["default"];
          if (typeof opts.format !== "undefined") {
            if (!has2.call(formats.formatters, opts.format)) {
              throw new TypeError("Unknown format option provided.");
            }
            format = opts.format;
          }
          var formatter = formats.formatters[format];
          var filter = defaults.filter;
          if (typeof opts.filter === "function" || isArray2(opts.filter)) {
            filter = opts.filter;
          }
          return {
            addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
            allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
            charset,
            charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
            delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
            encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
            encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
            encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
            filter,
            format,
            formatter,
            serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
            skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
            sort: typeof opts.sort === "function" ? opts.sort : null,
            strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
          };
        };
        module3.exports = function(object, opts) {
          var obj = object;
          var options = normalizeStringifyOptions(opts);
          var objKeys;
          var filter;
          if (typeof options.filter === "function") {
            filter = options.filter;
            obj = filter("", obj);
          } else if (isArray2(options.filter)) {
            filter = options.filter;
            objKeys = filter;
          }
          var keys = [];
          if (typeof obj !== "object" || obj === null) {
            return "";
          }
          var arrayFormat;
          if (opts && opts.arrayFormat in arrayPrefixGenerators) {
            arrayFormat = opts.arrayFormat;
          } else if (opts && "indices" in opts) {
            arrayFormat = opts.indices ? "indices" : "repeat";
          } else {
            arrayFormat = "indices";
          }
          var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
          if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
            throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
          }
          var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
          if (!objKeys) {
            objKeys = Object.keys(obj);
          }
          if (options.sort) {
            objKeys.sort(options.sort);
          }
          var sideChannel = getSideChannel();
          for (var i = 0; i < objKeys.length; ++i) {
            var key = objKeys[i];
            if (options.skipNulls && obj[key] === null) {
              continue;
            }
            pushToArray(keys, stringify2(
              obj[key],
              key,
              generateArrayPrefix,
              commaRoundTrip,
              options.strictNullHandling,
              options.skipNulls,
              options.encode ? options.encoder : null,
              options.filter,
              options.sort,
              options.allowDots,
              options.serializeDate,
              options.format,
              options.formatter,
              options.encodeValuesOnly,
              options.charset,
              sideChannel
            ));
          }
          var joined = keys.join(options.delimiter);
          var prefix = options.addQueryPrefix === true ? "?" : "";
          if (options.charsetSentinel) {
            if (options.charset === "iso-8859-1") {
              prefix += "utf8=%26%2310003%3B&";
            } else {
              prefix += "utf8=%E2%9C%93&";
            }
          }
          return joined.length > 0 ? prefix + joined : "";
        };
      }, { "./formats": 444, "./utils": 448, "side-channel": 467 }], 448: [function(require2, module3, exports3) {
        var formats = require2("./formats");
        var has2 = Object.prototype.hasOwnProperty;
        var isArray2 = Array.isArray;
        var hexTable = function() {
          var array = [];
          for (var i = 0; i < 256; ++i) {
            array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
          }
          return array;
        }();
        var compactQueue = function compactQueue2(queue2) {
          while (queue2.length > 1) {
            var item = queue2.pop();
            var obj = item.obj[item.prop];
            if (isArray2(obj)) {
              var compacted = [];
              for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== "undefined") {
                  compacted.push(obj[j]);
                }
              }
              item.obj[item.prop] = compacted;
            }
          }
        };
        var arrayToObject = function arrayToObject2(source, options) {
          var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          for (var i = 0; i < source.length; ++i) {
            if (typeof source[i] !== "undefined") {
              obj[i] = source[i];
            }
          }
          return obj;
        };
        var merge = function merge2(target, source, options) {
          if (!source) {
            return target;
          }
          if (typeof source !== "object") {
            if (isArray2(target)) {
              target.push(source);
            } else if (target && typeof target === "object") {
              if (options && (options.plainObjects || options.allowPrototypes) || !has2.call(Object.prototype, source)) {
                target[source] = true;
              }
            } else {
              return [target, source];
            }
            return target;
          }
          if (!target || typeof target !== "object") {
            return [target].concat(source);
          }
          var mergeTarget = target;
          if (isArray2(target) && !isArray2(source)) {
            mergeTarget = arrayToObject(target, options);
          }
          if (isArray2(target) && isArray2(source)) {
            source.forEach(function(item, i) {
              if (has2.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
                  target[i] = merge2(targetItem, item, options);
                } else {
                  target.push(item);
                }
              } else {
                target[i] = item;
              }
            });
            return target;
          }
          return Object.keys(source).reduce(function(acc, key) {
            var value = source[key];
            if (has2.call(acc, key)) {
              acc[key] = merge2(acc[key], value, options);
            } else {
              acc[key] = value;
            }
            return acc;
          }, mergeTarget);
        };
        var assign2 = function assignSingleSource(target, source) {
          return Object.keys(source).reduce(function(acc, key) {
            acc[key] = source[key];
            return acc;
          }, target);
        };
        var decode = function(str, decoder, charset) {
          var strWithoutPlus = str.replace(/\+/g, " ");
          if (charset === "iso-8859-1") {
            return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
          }
          try {
            return decodeURIComponent(strWithoutPlus);
          } catch (e2) {
            return strWithoutPlus;
          }
        };
        var encode2 = function encode3(str, defaultEncoder, charset, kind, format) {
          if (str.length === 0) {
            return str;
          }
          var string = str;
          if (typeof str === "symbol") {
            string = Symbol.prototype.toString.call(str);
          } else if (typeof str !== "string") {
            string = String(str);
          }
          if (charset === "iso-8859-1") {
            return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
              return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
            });
          }
          var out = "";
          for (var i = 0; i < string.length; ++i) {
            var c = string.charCodeAt(i);
            if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
              out += string.charAt(i);
              continue;
            }
            if (c < 128) {
              out = out + hexTable[c];
              continue;
            }
            if (c < 2048) {
              out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
              continue;
            }
            if (c < 55296 || c >= 57344) {
              out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
              continue;
            }
            i += 1;
            c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
            out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
          }
          return out;
        };
        var compact = function compact2(value) {
          var queue2 = [{ obj: { o: value }, prop: "o" }];
          var refs = [];
          for (var i = 0; i < queue2.length; ++i) {
            var item = queue2[i];
            var obj = item.obj[item.prop];
            var keys = Object.keys(obj);
            for (var j = 0; j < keys.length; ++j) {
              var key = keys[j];
              var val = obj[key];
              if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
                queue2.push({ obj, prop: key });
                refs.push(val);
              }
            }
          }
          compactQueue(queue2);
          return value;
        };
        var isRegExp = function isRegExp2(obj) {
          return Object.prototype.toString.call(obj) === "[object RegExp]";
        };
        var isBuffer = function isBuffer2(obj) {
          if (!obj || typeof obj !== "object") {
            return false;
          }
          return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
        };
        var combine = function combine2(a, b) {
          return [].concat(a, b);
        };
        var maybeMap = function maybeMap2(val, fn) {
          if (isArray2(val)) {
            var mapped = [];
            for (var i = 0; i < val.length; i += 1) {
              mapped.push(fn(val[i]));
            }
            return mapped;
          }
          return fn(val);
        };
        module3.exports = {
          arrayToObject,
          assign: assign2,
          combine,
          compact,
          decode,
          encode: encode2,
          isBuffer,
          isRegExp,
          maybeMap,
          merge
        };
      }, { "./formats": 444 }], 449: [function(require2, module3, exports3) {
        function hasOwnProperty2(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }
        module3.exports = function(qs2, sep, eq, options) {
          sep = sep || "&";
          eq = eq || "=";
          var obj = {};
          if (typeof qs2 !== "string" || qs2.length === 0) {
            return obj;
          }
          var regexp = /\+/g;
          qs2 = qs2.split(sep);
          var maxKeys = 1e3;
          if (options && typeof options.maxKeys === "number") {
            maxKeys = options.maxKeys;
          }
          var len = qs2.length;
          if (maxKeys > 0 && len > maxKeys) {
            len = maxKeys;
          }
          for (var i = 0; i < len; ++i) {
            var x = qs2[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
            if (idx >= 0) {
              kstr = x.substr(0, idx);
              vstr = x.substr(idx + 1);
            } else {
              kstr = x;
              vstr = "";
            }
            k = decodeURIComponent(kstr);
            v = decodeURIComponent(vstr);
            if (!hasOwnProperty2(obj, k)) {
              obj[k] = v;
            } else if (isArray2(obj[k])) {
              obj[k].push(v);
            } else {
              obj[k] = [obj[k], v];
            }
          }
          return obj;
        };
        var isArray2 = Array.isArray || function(xs) {
          return Object.prototype.toString.call(xs) === "[object Array]";
        };
      }, {}], 450: [function(require2, module3, exports3) {
        var stringifyPrimitive = function(v) {
          switch (typeof v) {
            case "string":
              return v;
            case "boolean":
              return v ? "true" : "false";
            case "number":
              return isFinite(v) ? v : "";
            default:
              return "";
          }
        };
        module3.exports = function(obj, sep, eq, name) {
          sep = sep || "&";
          eq = eq || "=";
          if (obj === null) {
            obj = void 0;
          }
          if (typeof obj === "object") {
            return map(objectKeys2(obj), function(k) {
              var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
              if (isArray2(obj[k])) {
                return map(obj[k], function(v) {
                  return ks + encodeURIComponent(stringifyPrimitive(v));
                }).join(sep);
              } else {
                return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
              }
            }).join(sep);
          }
          if (!name)
            return "";
          return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
        };
        var isArray2 = Array.isArray || function(xs) {
          return Object.prototype.toString.call(xs) === "[object Array]";
        };
        function map(xs, f2) {
          if (xs.map)
            return xs.map(f2);
          var res = [];
          for (var i = 0; i < xs.length; i++) {
            res.push(f2(xs[i], i));
          }
          return res;
        }
        var objectKeys2 = Object.keys || function(obj) {
          var res = [];
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key))
              res.push(key);
          }
          return res;
        };
      }, {}], 451: [function(require2, module3, exports3) {
        exports3.decode = exports3.parse = require2("./decode");
        exports3.encode = exports3.stringify = require2("./encode");
      }, { "./decode": 449, "./encode": 450 }], 452: [function(require2, module3, exports3) {
        var pna = require2("process-nextick-args");
        var objectKeys2 = Object.keys || function(obj) {
          var keys2 = [];
          for (var key in obj) {
            keys2.push(key);
          }
          return keys2;
        };
        module3.exports = Duplex;
        var util = Object.create(require2("core-util-is"));
        util.inherits = require2("inherits");
        var Readable = require2("./_stream_readable");
        var Writable = require2("./_stream_writable");
        util.inherits(Duplex, Readable);
        {
          var keys = objectKeys2(Writable.prototype);
          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method])
              Duplex.prototype[method] = Writable.prototype[method];
          }
        }
        function Duplex(options) {
          if (!(this instanceof Duplex))
            return new Duplex(options);
          Readable.call(this, options);
          Writable.call(this, options);
          if (options && options.readable === false)
            this.readable = false;
          if (options && options.writable === false)
            this.writable = false;
          this.allowHalfOpen = true;
          if (options && options.allowHalfOpen === false)
            this.allowHalfOpen = false;
          this.once("end", onend);
        }
        Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function() {
            return this._writableState.highWaterMark;
          }
        });
        function onend() {
          if (this.allowHalfOpen || this._writableState.ended)
            return;
          pna.nextTick(onEndNT, this);
        }
        function onEndNT(self2) {
          self2.end();
        }
        Object.defineProperty(Duplex.prototype, "destroyed", {
          get: function() {
            if (this._readableState === void 0 || this._writableState === void 0) {
              return false;
            }
            return this._readableState.destroyed && this._writableState.destroyed;
          },
          set: function(value) {
            if (this._readableState === void 0 || this._writableState === void 0) {
              return;
            }
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });
        Duplex.prototype._destroy = function(err, cb) {
          this.push(null);
          this.end();
          pna.nextTick(cb, err);
        };
      }, { "./_stream_readable": 454, "./_stream_writable": 456, "core-util-is": 382, "inherits": 407, "process-nextick-args": 441 }], 453: [function(require2, module3, exports3) {
        module3.exports = PassThrough;
        var Transform = require2("./_stream_transform");
        var util = Object.create(require2("core-util-is"));
        util.inherits = require2("inherits");
        util.inherits(PassThrough, Transform);
        function PassThrough(options) {
          if (!(this instanceof PassThrough))
            return new PassThrough(options);
          Transform.call(this, options);
        }
        PassThrough.prototype._transform = function(chunk, encoding, cb) {
          cb(null, chunk);
        };
      }, { "./_stream_transform": 455, "core-util-is": 382, "inherits": 407 }], 454: [function(require2, module3, exports3) {
        (function(process, global3) {
          (function() {
            var pna = require2("process-nextick-args");
            module3.exports = Readable;
            var isArray2 = require2("isarray");
            var Duplex;
            Readable.ReadableState = ReadableState;
            require2("events").EventEmitter;
            var EElistenerCount = function(emitter, type) {
              return emitter.listeners(type).length;
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("safe-buffer").Buffer;
            var OurUint8Array = (typeof global3 !== "undefined" ? global3 : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var util = Object.create(require2("core-util-is"));
            util.inherits = require2("inherits");
            var debugUtil = require2("util");
            var debug = void 0;
            if (debugUtil && debugUtil.debuglog) {
              debug = debugUtil.debuglog("stream");
            } else {
              debug = function() {
              };
            }
            var BufferList = require2("./internal/streams/BufferList");
            var destroyImpl = require2("./internal/streams/destroy");
            var StringDecoder;
            util.inherits(Readable, Stream);
            var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
            function prependListener(emitter, event, fn) {
              if (typeof emitter.prependListener === "function")
                return emitter.prependListener(event, fn);
              if (!emitter._events || !emitter._events[event])
                emitter.on(event, fn);
              else if (isArray2(emitter._events[event]))
                emitter._events[event].unshift(fn);
              else
                emitter._events[event] = [fn, emitter._events[event]];
            }
            function ReadableState(options, stream) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              var isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.readableObjectMode;
              var hwm = options.highWaterMark;
              var readableHwm = options.readableHighWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              if (hwm || hwm === 0)
                this.highWaterMark = hwm;
              else if (isDuplex && (readableHwm || readableHwm === 0))
                this.highWaterMark = readableHwm;
              else
                this.highWaterMark = defaultHwm;
              this.highWaterMark = Math.floor(this.highWaterMark);
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;
              this.sync = true;
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;
              this.destroyed = false;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.awaitDrain = 0;
              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;
              if (options.encoding) {
                if (!StringDecoder)
                  StringDecoder = require2("string_decoder/").StringDecoder;
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              if (!(this instanceof Readable))
                return new Readable(options);
              this._readableState = new ReadableState(options, this);
              this.readable = true;
              if (options) {
                if (typeof options.read === "function")
                  this._read = options.read;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
              }
              Stream.call(this);
            }
            Object.defineProperty(Readable.prototype, "destroyed", {
              get: function() {
                if (this._readableState === void 0) {
                  return false;
                }
                return this._readableState.destroyed;
              },
              set: function(value) {
                if (!this._readableState) {
                  return;
                }
                this._readableState.destroyed = value;
              }
            });
            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function(err, cb) {
              this.push(null);
              cb(err);
            };
            Readable.prototype.push = function(chunk, encoding) {
              var state = this._readableState;
              var skipChunkCheck;
              if (!state.objectMode) {
                if (typeof chunk === "string") {
                  encoding = encoding || state.defaultEncoding;
                  if (encoding !== state.encoding) {
                    chunk = Buffer2.from(chunk, encoding);
                    encoding = "";
                  }
                  skipChunkCheck = true;
                }
              } else {
                skipChunkCheck = true;
              }
              return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };
            Readable.prototype.unshift = function(chunk) {
              return readableAddChunk(this, chunk, null, true, false);
            };
            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
              var state = stream._readableState;
              if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else {
                var er;
                if (!skipChunkCheck)
                  er = chunkInvalid(state, chunk);
                if (er) {
                  stream.emit("error", er);
                } else if (state.objectMode || chunk && chunk.length > 0) {
                  if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
                    chunk = _uint8ArrayToBuffer(chunk);
                  }
                  if (addToFront) {
                    if (state.endEmitted)
                      stream.emit("error", new Error("stream.unshift() after end event"));
                    else
                      addChunk(stream, state, chunk, true);
                  } else if (state.ended) {
                    stream.emit("error", new Error("stream.push() after EOF"));
                  } else {
                    state.reading = false;
                    if (state.decoder && !encoding) {
                      chunk = state.decoder.write(chunk);
                      if (state.objectMode || chunk.length !== 0)
                        addChunk(stream, state, chunk, false);
                      else
                        maybeReadMore(stream, state);
                    } else {
                      addChunk(stream, state, chunk, false);
                    }
                  }
                } else if (!addToFront) {
                  state.reading = false;
                }
              }
              return needMoreData(state);
            }
            function addChunk(stream, state, chunk, addToFront) {
              if (state.flowing && state.length === 0 && !state.sync) {
                stream.emit("data", chunk);
                stream.read(0);
              } else {
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront)
                  state.buffer.unshift(chunk);
                else
                  state.buffer.push(chunk);
                if (state.needReadable)
                  emitReadable(stream);
              }
              maybeReadMore(stream, state);
            }
            function chunkInvalid(state, chunk) {
              var er;
              if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                er = new TypeError("Invalid non-string/buffer chunk");
              }
              return er;
            }
            function needMoreData(state) {
              return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }
            Readable.prototype.isPaused = function() {
              return this._readableState.flowing === false;
            };
            Readable.prototype.setEncoding = function(enc) {
              if (!StringDecoder)
                StringDecoder = require2("string_decoder/").StringDecoder;
              this._readableState.decoder = new StringDecoder(enc);
              this._readableState.encoding = enc;
              return this;
            };
            var MAX_HWM = 8388608;
            function computeNewHighWaterMark(n2) {
              if (n2 >= MAX_HWM) {
                n2 = MAX_HWM;
              } else {
                n2--;
                n2 |= n2 >>> 1;
                n2 |= n2 >>> 2;
                n2 |= n2 >>> 4;
                n2 |= n2 >>> 8;
                n2 |= n2 >>> 16;
                n2++;
              }
              return n2;
            }
            function howMuchToRead(n2, state) {
              if (n2 <= 0 || state.length === 0 && state.ended)
                return 0;
              if (state.objectMode)
                return 1;
              if (n2 !== n2) {
                if (state.flowing && state.length)
                  return state.buffer.head.data.length;
                else
                  return state.length;
              }
              if (n2 > state.highWaterMark)
                state.highWaterMark = computeNewHighWaterMark(n2);
              if (n2 <= state.length)
                return n2;
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }
            Readable.prototype.read = function(n2) {
              debug("read", n2);
              n2 = parseInt(n2, 10);
              var state = this._readableState;
              var nOrig = n2;
              if (n2 !== 0)
                state.emittedReadable = false;
              if (n2 === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug("read: emitReadable", state.length, state.ended);
                if (state.length === 0 && state.ended)
                  endReadable(this);
                else
                  emitReadable(this);
                return null;
              }
              n2 = howMuchToRead(n2, state);
              if (n2 === 0 && state.ended) {
                if (state.length === 0)
                  endReadable(this);
                return null;
              }
              var doRead = state.needReadable;
              debug("need readable", doRead);
              if (state.length === 0 || state.length - n2 < state.highWaterMark) {
                doRead = true;
                debug("length less than watermark", doRead);
              }
              if (state.ended || state.reading) {
                doRead = false;
                debug("reading or ended", doRead);
              } else if (doRead) {
                debug("do read");
                state.reading = true;
                state.sync = true;
                if (state.length === 0)
                  state.needReadable = true;
                this._read(state.highWaterMark);
                state.sync = false;
                if (!state.reading)
                  n2 = howMuchToRead(nOrig, state);
              }
              var ret;
              if (n2 > 0)
                ret = fromList(n2, state);
              else
                ret = null;
              if (ret === null) {
                state.needReadable = true;
                n2 = 0;
              } else {
                state.length -= n2;
              }
              if (state.length === 0) {
                if (!state.ended)
                  state.needReadable = true;
                if (nOrig !== n2 && state.ended)
                  endReadable(this);
              }
              if (ret !== null)
                this.emit("data", ret);
              return ret;
            };
            function onEofChunk(stream, state) {
              if (state.ended)
                return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;
              emitReadable(stream);
            }
            function emitReadable(stream) {
              var state = stream._readableState;
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug("emitReadable", state.flowing);
                state.emittedReadable = true;
                if (state.sync)
                  pna.nextTick(emitReadable_, stream);
                else
                  emitReadable_(stream);
              }
            }
            function emitReadable_(stream) {
              debug("emit readable");
              stream.emit("readable");
              flow(stream);
            }
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                pna.nextTick(maybeReadMore_, stream, state);
              }
            }
            function maybeReadMore_(stream, state) {
              var len = state.length;
              while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug("maybeReadMore read 0");
                stream.read(0);
                if (len === state.length)
                  break;
                else
                  len = state.length;
              }
              state.readingMore = false;
            }
            Readable.prototype._read = function(n2) {
              this.emit("error", new Error("_read() is not implemented"));
            };
            Readable.prototype.pipe = function(dest, pipeOpts) {
              var src = this;
              var state = this._readableState;
              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
              var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
              var endFn = doEnd ? onend : unpipe;
              if (state.endEmitted)
                pna.nextTick(endFn);
              else
                src.once("end", endFn);
              dest.on("unpipe", onunpipe);
              function onunpipe(readable, unpipeInfo) {
                debug("onunpipe");
                if (readable === src) {
                  if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                    unpipeInfo.hasUnpiped = true;
                    cleanup();
                  }
                }
              }
              function onend() {
                debug("onend");
                dest.end();
              }
              var ondrain = pipeOnDrain(src);
              dest.on("drain", ondrain);
              var cleanedUp = false;
              function cleanup() {
                debug("cleanup");
                dest.removeListener("close", onclose);
                dest.removeListener("finish", onfinish);
                dest.removeListener("drain", ondrain);
                dest.removeListener("error", onerror);
                dest.removeListener("unpipe", onunpipe);
                src.removeListener("end", onend);
                src.removeListener("end", unpipe);
                src.removeListener("data", ondata);
                cleanedUp = true;
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                  ondrain();
              }
              var increasedAwaitDrain = false;
              src.on("data", ondata);
              function ondata(chunk) {
                debug("ondata");
                increasedAwaitDrain = false;
                var ret = dest.write(chunk);
                if (false === ret && !increasedAwaitDrain) {
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug("false write response, pause", state.awaitDrain);
                    state.awaitDrain++;
                    increasedAwaitDrain = true;
                  }
                  src.pause();
                }
              }
              function onerror(er) {
                debug("onerror", er);
                unpipe();
                dest.removeListener("error", onerror);
                if (EElistenerCount(dest, "error") === 0)
                  dest.emit("error", er);
              }
              prependListener(dest, "error", onerror);
              function onclose() {
                dest.removeListener("finish", onfinish);
                unpipe();
              }
              dest.once("close", onclose);
              function onfinish() {
                debug("onfinish");
                dest.removeListener("close", onclose);
                unpipe();
              }
              dest.once("finish", onfinish);
              function unpipe() {
                debug("unpipe");
                src.unpipe(dest);
              }
              dest.emit("pipe", src);
              if (!state.flowing) {
                debug("pipe resume");
                src.resume();
              }
              return dest;
            };
            function pipeOnDrain(src) {
              return function() {
                var state = src._readableState;
                debug("pipeOnDrain", state.awaitDrain);
                if (state.awaitDrain)
                  state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }
            Readable.prototype.unpipe = function(dest) {
              var state = this._readableState;
              var unpipeInfo = { hasUnpiped: false };
              if (state.pipesCount === 0)
                return this;
              if (state.pipesCount === 1) {
                if (dest && dest !== state.pipes)
                  return this;
                if (!dest)
                  dest = state.pipes;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest)
                  dest.emit("unpipe", this, unpipeInfo);
                return this;
              }
              if (!dest) {
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                for (var i = 0; i < len; i++) {
                  dests[i].emit("unpipe", this, { hasUnpiped: false });
                }
                return this;
              }
              var index2 = indexOf(state.pipes, dest);
              if (index2 === -1)
                return this;
              state.pipes.splice(index2, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1)
                state.pipes = state.pipes[0];
              dest.emit("unpipe", this, unpipeInfo);
              return this;
            };
            Readable.prototype.on = function(ev, fn) {
              var res = Stream.prototype.on.call(this, ev, fn);
              if (ev === "data") {
                if (this._readableState.flowing !== false)
                  this.resume();
              } else if (ev === "readable") {
                var state = this._readableState;
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.emittedReadable = false;
                  if (!state.reading) {
                    pna.nextTick(nReadingNextTick, this);
                  } else if (state.length) {
                    emitReadable(this);
                  }
                }
              }
              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            function nReadingNextTick(self2) {
              debug("readable nexttick read 0");
              self2.read(0);
            }
            Readable.prototype.resume = function() {
              var state = this._readableState;
              if (!state.flowing) {
                debug("resume");
                state.flowing = true;
                resume(this, state);
              }
              return this;
            };
            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                pna.nextTick(resume_, stream, state);
              }
            }
            function resume_(stream, state) {
              if (!state.reading) {
                debug("resume read 0");
                stream.read(0);
              }
              state.resumeScheduled = false;
              state.awaitDrain = 0;
              stream.emit("resume");
              flow(stream);
              if (state.flowing && !state.reading)
                stream.read(0);
            }
            Readable.prototype.pause = function() {
              debug("call pause flowing=%j", this._readableState.flowing);
              if (false !== this._readableState.flowing) {
                debug("pause");
                this._readableState.flowing = false;
                this.emit("pause");
              }
              return this;
            };
            function flow(stream) {
              var state = stream._readableState;
              debug("flow", state.flowing);
              while (state.flowing && stream.read() !== null) {
              }
            }
            Readable.prototype.wrap = function(stream) {
              var _this = this;
              var state = this._readableState;
              var paused = false;
              stream.on("end", function() {
                debug("wrapped end");
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length)
                    _this.push(chunk);
                }
                _this.push(null);
              });
              stream.on("data", function(chunk) {
                debug("wrapped data");
                if (state.decoder)
                  chunk = state.decoder.write(chunk);
                if (state.objectMode && (chunk === null || chunk === void 0))
                  return;
                else if (!state.objectMode && (!chunk || !chunk.length))
                  return;
                var ret = _this.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });
              for (var i in stream) {
                if (this[i] === void 0 && typeof stream[i] === "function") {
                  this[i] = /* @__PURE__ */ function(method) {
                    return function() {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }
              for (var n2 = 0; n2 < kProxyEvents.length; n2++) {
                stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
              }
              this._read = function(n3) {
                debug("wrapped _read", n3);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };
              return this;
            };
            Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function() {
                return this._readableState.highWaterMark;
              }
            });
            Readable._fromList = fromList;
            function fromList(n2, state) {
              if (state.length === 0)
                return null;
              var ret;
              if (state.objectMode)
                ret = state.buffer.shift();
              else if (!n2 || n2 >= state.length) {
                if (state.decoder)
                  ret = state.buffer.join("");
                else if (state.buffer.length === 1)
                  ret = state.buffer.head.data;
                else
                  ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                ret = fromListPartial(n2, state.buffer, state.decoder);
              }
              return ret;
            }
            function fromListPartial(n2, list2, hasStrings) {
              var ret;
              if (n2 < list2.head.data.length) {
                ret = list2.head.data.slice(0, n2);
                list2.head.data = list2.head.data.slice(n2);
              } else if (n2 === list2.head.data.length) {
                ret = list2.shift();
              } else {
                ret = hasStrings ? copyFromBufferString(n2, list2) : copyFromBuffer(n2, list2);
              }
              return ret;
            }
            function copyFromBufferString(n2, list2) {
              var p2 = list2.head;
              var c = 1;
              var ret = p2.data;
              n2 -= ret.length;
              while (p2 = p2.next) {
                var str = p2.data;
                var nb = n2 > str.length ? str.length : n2;
                if (nb === str.length)
                  ret += str;
                else
                  ret += str.slice(0, n2);
                n2 -= nb;
                if (n2 === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p2.next)
                      list2.head = p2.next;
                    else
                      list2.head = list2.tail = null;
                  } else {
                    list2.head = p2;
                    p2.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list2.length -= c;
              return ret;
            }
            function copyFromBuffer(n2, list2) {
              var ret = Buffer2.allocUnsafe(n2);
              var p2 = list2.head;
              var c = 1;
              p2.data.copy(ret);
              n2 -= p2.data.length;
              while (p2 = p2.next) {
                var buf = p2.data;
                var nb = n2 > buf.length ? buf.length : n2;
                buf.copy(ret, ret.length - n2, 0, nb);
                n2 -= nb;
                if (n2 === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p2.next)
                      list2.head = p2.next;
                    else
                      list2.head = list2.tail = null;
                  } else {
                    list2.head = p2;
                    p2.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list2.length -= c;
              return ret;
            }
            function endReadable(stream) {
              var state = stream._readableState;
              if (state.length > 0)
                throw new Error('"endReadable()" called on non-empty stream');
              if (!state.endEmitted) {
                state.ended = true;
                pna.nextTick(endReadableNT, state, stream);
              }
            }
            function endReadableNT(state, stream) {
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit("end");
              }
            }
            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x)
                  return i;
              }
              return -1;
            }
          }).call(this);
        }).call(this, require2("_process"), typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "./_stream_duplex": 452, "./internal/streams/BufferList": 457, "./internal/streams/destroy": 458, "./internal/streams/stream": 459, "_process": 538, "core-util-is": 382, "events": 386, "inherits": 407, "isarray": 460, "process-nextick-args": 441, "safe-buffer": 461, "string_decoder/": 462, "util": 102 }], 455: [function(require2, module3, exports3) {
        module3.exports = Transform;
        var Duplex = require2("./_stream_duplex");
        var util = Object.create(require2("core-util-is"));
        util.inherits = require2("inherits");
        util.inherits(Transform, Duplex);
        function afterTransform(er, data) {
          var ts = this._transformState;
          ts.transforming = false;
          var cb = ts.writecb;
          if (!cb) {
            return this.emit("error", new Error("write callback called multiple times"));
          }
          ts.writechunk = null;
          ts.writecb = null;
          if (data != null)
            this.push(data);
          cb(er);
          var rs = this._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }
        function Transform(options) {
          if (!(this instanceof Transform))
            return new Transform(options);
          Duplex.call(this, options);
          this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
          };
          this._readableState.needReadable = true;
          this._readableState.sync = false;
          if (options) {
            if (typeof options.transform === "function")
              this._transform = options.transform;
            if (typeof options.flush === "function")
              this._flush = options.flush;
          }
          this.on("prefinish", prefinish);
        }
        function prefinish() {
          var _this = this;
          if (typeof this._flush === "function") {
            this._flush(function(er, data) {
              done(_this, er, data);
            });
          } else {
            done(this, null, null);
          }
        }
        Transform.prototype.push = function(chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };
        Transform.prototype._transform = function(chunk, encoding, cb) {
          throw new Error("_transform() is not implemented");
        };
        Transform.prototype._write = function(chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
              this._read(rs.highWaterMark);
          }
        };
        Transform.prototype._read = function(n2) {
          var ts = this._transformState;
          if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            ts.needTransform = true;
          }
        };
        Transform.prototype._destroy = function(err, cb) {
          var _this2 = this;
          Duplex.prototype._destroy.call(this, err, function(err2) {
            cb(err2);
            _this2.emit("close");
          });
        };
        function done(stream, er, data) {
          if (er)
            return stream.emit("error", er);
          if (data != null)
            stream.push(data);
          if (stream._writableState.length)
            throw new Error("Calling transform done when ws.length != 0");
          if (stream._transformState.transforming)
            throw new Error("Calling transform done when still transforming");
          return stream.push(null);
        }
      }, { "./_stream_duplex": 452, "core-util-is": 382, "inherits": 407 }], 456: [function(require2, module3, exports3) {
        (function(process, global3, setImmediate) {
          (function() {
            var pna = require2("process-nextick-args");
            module3.exports = Writable;
            function CorkedRequest(state) {
              var _this = this;
              this.next = null;
              this.entry = null;
              this.finish = function() {
                onCorkedFinish(_this, state);
              };
            }
            var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
            var Duplex;
            Writable.WritableState = WritableState;
            var util = Object.create(require2("core-util-is"));
            util.inherits = require2("inherits");
            var internalUtil = {
              deprecate: require2("util-deprecate")
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("safe-buffer").Buffer;
            var OurUint8Array = (typeof global3 !== "undefined" ? global3 : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var destroyImpl = require2("./internal/streams/destroy");
            util.inherits(Writable, Stream);
            function nop() {
            }
            function WritableState(options, stream) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              var isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.writableObjectMode;
              var hwm = options.highWaterMark;
              var writableHwm = options.writableHighWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              if (hwm || hwm === 0)
                this.highWaterMark = hwm;
              else if (isDuplex && (writableHwm || writableHwm === 0))
                this.highWaterMark = writableHwm;
              else
                this.highWaterMark = defaultHwm;
              this.highWaterMark = Math.floor(this.highWaterMark);
              this.finalCalled = false;
              this.needDrain = false;
              this.ending = false;
              this.ended = false;
              this.finished = false;
              this.destroyed = false;
              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.length = 0;
              this.writing = false;
              this.corked = 0;
              this.sync = true;
              this.bufferProcessing = false;
              this.onwrite = function(er) {
                onwrite(stream, er);
              };
              this.writecb = null;
              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null;
              this.pendingcb = 0;
              this.prefinished = false;
              this.errorEmitted = false;
              this.bufferedRequestCount = 0;
              this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            (function() {
              try {
                Object.defineProperty(WritableState.prototype, "buffer", {
                  get: internalUtil.deprecate(function() {
                    return this.getBuffer();
                  }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                });
              } catch (_) {
              }
            })();
            var realHasInstance;
            if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
              realHasInstance = Function.prototype[Symbol.hasInstance];
              Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function(object) {
                  if (realHasInstance.call(this, object))
                    return true;
                  if (this !== Writable)
                    return false;
                  return object && object._writableState instanceof WritableState;
                }
              });
            } else {
              realHasInstance = function(object) {
                return object instanceof this;
              };
            }
            function Writable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                return new Writable(options);
              }
              this._writableState = new WritableState(options, this);
              this.writable = true;
              if (options) {
                if (typeof options.write === "function")
                  this._write = options.write;
                if (typeof options.writev === "function")
                  this._writev = options.writev;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
                if (typeof options.final === "function")
                  this._final = options.final;
              }
              Stream.call(this);
            }
            Writable.prototype.pipe = function() {
              this.emit("error", new Error("Cannot pipe, not readable"));
            };
            function writeAfterEnd(stream, cb) {
              var er = new Error("write after end");
              stream.emit("error", er);
              pna.nextTick(cb, er);
            }
            function validChunk(stream, state, chunk, cb) {
              var valid = true;
              var er = false;
              if (chunk === null) {
                er = new TypeError("May not write null values to stream");
              } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                er = new TypeError("Invalid non-string/buffer chunk");
              }
              if (er) {
                stream.emit("error", er);
                pna.nextTick(cb, er);
                valid = false;
              }
              return valid;
            }
            Writable.prototype.write = function(chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;
              var isBuf = !state.objectMode && _isUint8Array(chunk);
              if (isBuf && !Buffer2.isBuffer(chunk)) {
                chunk = _uint8ArrayToBuffer(chunk);
              }
              if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (isBuf)
                encoding = "buffer";
              else if (!encoding)
                encoding = state.defaultEncoding;
              if (typeof cb !== "function")
                cb = nop;
              if (state.ended)
                writeAfterEnd(this, cb);
              else if (isBuf || validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
              }
              return ret;
            };
            Writable.prototype.cork = function() {
              var state = this._writableState;
              state.corked++;
            };
            Writable.prototype.uncork = function() {
              var state = this._writableState;
              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
                  clearBuffer(this, state);
              }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              if (typeof encoding === "string")
                encoding = encoding.toLowerCase();
              if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                throw new TypeError("Unknown encoding: " + encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };
            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                chunk = Buffer2.from(chunk, encoding);
              }
              return chunk;
            }
            Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function() {
                return this._writableState.highWaterMark;
              }
            });
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
              if (!isBuf) {
                var newChunk = decodeChunk(state, chunk, encoding);
                if (chunk !== newChunk) {
                  isBuf = true;
                  encoding = "buffer";
                  chunk = newChunk;
                }
              }
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret = state.length < state.highWaterMark;
              if (!ret)
                state.needDrain = true;
              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = {
                  chunk,
                  encoding,
                  isBuf,
                  callback: cb,
                  next: null
                };
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }
              return ret;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (writev)
                stream._writev(chunk, state.onwrite);
              else
                stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }
            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) {
                pna.nextTick(cb, er);
                pna.nextTick(finishMaybe, stream, state);
                stream._writableState.errorEmitted = true;
                stream.emit("error", er);
              } else {
                cb(er);
                stream._writableState.errorEmitted = true;
                stream.emit("error", er);
                finishMaybe(stream, state);
              }
            }
            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }
            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              onwriteStateUpdate(state);
              if (er)
                onwriteError(stream, state, sync, er, cb);
              else {
                var finished = needFinish(state);
                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }
                if (sync) {
                  asyncWrite(afterWrite, stream, state, finished, cb);
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }
            function afterWrite(stream, state, finished, cb) {
              if (!finished)
                onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit("drain");
              }
            }
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;
              if (stream._writev && entry && entry.next) {
                var l = state.bufferedRequestCount;
                var buffer2 = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;
                var allBuffers = true;
                while (entry) {
                  buffer2[count] = entry;
                  if (!entry.isBuf)
                    allBuffers = false;
                  entry = entry.next;
                  count += 1;
                }
                buffer2.allBuffers = allBuffers;
                doWrite(stream, state, true, state.length, buffer2, "", holder.finish);
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
                state.bufferedRequestCount = 0;
              } else {
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  state.bufferedRequestCount--;
                  if (state.writing) {
                    break;
                  }
                }
                if (entry === null)
                  state.lastBufferedRequest = null;
              }
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }
            Writable.prototype._write = function(chunk, encoding, cb) {
              cb(new Error("_write() is not implemented"));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(chunk, encoding, cb) {
              var state = this._writableState;
              if (typeof chunk === "function") {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (chunk !== null && chunk !== void 0)
                this.write(chunk, encoding);
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }
              if (!state.ending)
                endWritable(this, state, cb);
            };
            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
              stream._final(function(err) {
                state.pendingcb--;
                if (err) {
                  stream.emit("error", err);
                }
                state.prefinished = true;
                stream.emit("prefinish");
                finishMaybe(stream, state);
              });
            }
            function prefinish(stream, state) {
              if (!state.prefinished && !state.finalCalled) {
                if (typeof stream._final === "function") {
                  state.pendingcb++;
                  state.finalCalled = true;
                  pna.nextTick(callFinal, stream, state);
                } else {
                  state.prefinished = true;
                  stream.emit("prefinish");
                }
              }
            }
            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                prefinish(stream, state);
                if (state.pendingcb === 0) {
                  state.finished = true;
                  stream.emit("finish");
                }
              }
              return need;
            }
            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished)
                  pna.nextTick(cb);
                else
                  stream.once("finish", cb);
              }
              state.ended = true;
              stream.writable = false;
            }
            function onCorkedFinish(corkReq, state, err) {
              var entry = corkReq.entry;
              corkReq.entry = null;
              while (entry) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(err);
                entry = entry.next;
              }
              state.corkedRequestsFree.next = corkReq;
            }
            Object.defineProperty(Writable.prototype, "destroyed", {
              get: function() {
                if (this._writableState === void 0) {
                  return false;
                }
                return this._writableState.destroyed;
              },
              set: function(value) {
                if (!this._writableState) {
                  return;
                }
                this._writableState.destroyed = value;
              }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function(err, cb) {
              this.end();
              cb(err);
            };
          }).call(this);
        }).call(this, require2("_process"), typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require2("timers").setImmediate);
      }, { "./_stream_duplex": 452, "./internal/streams/destroy": 458, "./internal/streams/stream": 459, "_process": 538, "core-util-is": 382, "inherits": 407, "process-nextick-args": 441, "safe-buffer": 461, "timers": 484, "util-deprecate": 486 }], 457: [function(require2, module3, exports3) {
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var Buffer2 = require2("safe-buffer").Buffer;
        var util = require2("util");
        function copyBuffer(src, target, offset) {
          src.copy(target, offset);
        }
        module3.exports = function() {
          function BufferList() {
            _classCallCheck(this, BufferList);
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          BufferList.prototype.push = function push(v) {
            var entry = { data: v, next: null };
            if (this.length > 0)
              this.tail.next = entry;
            else
              this.head = entry;
            this.tail = entry;
            ++this.length;
          };
          BufferList.prototype.unshift = function unshift(v) {
            var entry = { data: v, next: this.head };
            if (this.length === 0)
              this.tail = entry;
            this.head = entry;
            ++this.length;
          };
          BufferList.prototype.shift = function shift() {
            if (this.length === 0)
              return;
            var ret = this.head.data;
            if (this.length === 1)
              this.head = this.tail = null;
            else
              this.head = this.head.next;
            --this.length;
            return ret;
          };
          BufferList.prototype.clear = function clear2() {
            this.head = this.tail = null;
            this.length = 0;
          };
          BufferList.prototype.join = function join(s2) {
            if (this.length === 0)
              return "";
            var p2 = this.head;
            var ret = "" + p2.data;
            while (p2 = p2.next) {
              ret += s2 + p2.data;
            }
            return ret;
          };
          BufferList.prototype.concat = function concat(n2) {
            if (this.length === 0)
              return Buffer2.alloc(0);
            var ret = Buffer2.allocUnsafe(n2 >>> 0);
            var p2 = this.head;
            var i = 0;
            while (p2) {
              copyBuffer(p2.data, ret, i);
              i += p2.data.length;
              p2 = p2.next;
            }
            return ret;
          };
          return BufferList;
        }();
        if (util && util.inspect && util.inspect.custom) {
          module3.exports.prototype[util.inspect.custom] = function() {
            var obj = util.inspect({ length: this.length });
            return this.constructor.name + " " + obj;
          };
        }
      }, { "safe-buffer": 461, "util": 102 }], 458: [function(require2, module3, exports3) {
        var pna = require2("process-nextick-args");
        function destroy(err, cb) {
          var _this = this;
          var readableDestroyed = this._readableState && this._readableState.destroyed;
          var writableDestroyed = this._writableState && this._writableState.destroyed;
          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (err) {
              if (!this._writableState) {
                pna.nextTick(emitErrorNT, this, err);
              } else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                pna.nextTick(emitErrorNT, this, err);
              }
            }
            return this;
          }
          if (this._readableState) {
            this._readableState.destroyed = true;
          }
          if (this._writableState) {
            this._writableState.destroyed = true;
          }
          this._destroy(err || null, function(err2) {
            if (!cb && err2) {
              if (!_this._writableState) {
                pna.nextTick(emitErrorNT, _this, err2);
              } else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                pna.nextTick(emitErrorNT, _this, err2);
              }
            } else if (cb) {
              cb(err2);
            }
          });
          return this;
        }
        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }
          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finalCalled = false;
            this._writableState.prefinished = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }
        function emitErrorNT(self2, err) {
          self2.emit("error", err);
        }
        module3.exports = {
          destroy,
          undestroy
        };
      }, { "process-nextick-args": 441 }], 459: [function(require2, module3, exports3) {
        module3.exports = require2("events").EventEmitter;
      }, { "events": 386 }], 460: [function(require2, module3, exports3) {
        var toString = {}.toString;
        module3.exports = Array.isArray || function(arr) {
          return toString.call(arr) == "[object Array]";
        };
      }, {}], 461: [function(require2, module3, exports3) {
        var buffer2 = require2("buffer");
        var Buffer2 = buffer2.Buffer;
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
          module3.exports = buffer2;
        } else {
          copyProps(buffer2, exports3);
          exports3.Buffer = SafeBuffer;
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer2(arg, encodingOrOffset, length);
        }
        copyProps(Buffer2, SafeBuffer);
        SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer2(arg, encodingOrOffset, length);
        };
        SafeBuffer.alloc = function(size2, fill, encoding) {
          if (typeof size2 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer2(size2);
          if (fill !== void 0) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };
        SafeBuffer.allocUnsafe = function(size2) {
          if (typeof size2 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer2(size2);
        };
        SafeBuffer.allocUnsafeSlow = function(size2) {
          if (typeof size2 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer2.SlowBuffer(size2);
        };
      }, { "buffer": 103 }], 462: [function(require2, module3, exports3) {
        var Buffer2 = require2("safe-buffer").Buffer;
        var isEncoding = Buffer2.isEncoding || function(encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };
        function _normalizeEncoding(enc) {
          if (!enc)
            return "utf8";
          var retried;
          while (true) {
            switch (enc) {
              case "utf8":
              case "utf-8":
                return "utf8";
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return "utf16le";
              case "latin1":
              case "binary":
                return "latin1";
              case "base64":
              case "ascii":
              case "hex":
                return enc;
              default:
                if (retried)
                  return;
                enc = ("" + enc).toLowerCase();
                retried = true;
            }
          }
        }
        function normalizeEncoding(enc) {
          var nenc = _normalizeEncoding(enc);
          if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
            throw new Error("Unknown encoding: " + enc);
          return nenc || enc;
        }
        exports3.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
          this.encoding = normalizeEncoding(encoding);
          var nb;
          switch (this.encoding) {
            case "utf16le":
              this.text = utf16Text;
              this.end = utf16End;
              nb = 4;
              break;
            case "utf8":
              this.fillLast = utf8FillLast;
              nb = 4;
              break;
            case "base64":
              this.text = base64Text;
              this.end = base64End;
              nb = 3;
              break;
            default:
              this.write = simpleWrite;
              this.end = simpleEnd;
              return;
          }
          this.lastNeed = 0;
          this.lastTotal = 0;
          this.lastChar = Buffer2.allocUnsafe(nb);
        }
        StringDecoder.prototype.write = function(buf) {
          if (buf.length === 0)
            return "";
          var r;
          var i;
          if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === void 0)
              return "";
            i = this.lastNeed;
            this.lastNeed = 0;
          } else {
            i = 0;
          }
          if (i < buf.length)
            return r ? r + this.text(buf, i) : this.text(buf, i);
          return r || "";
        };
        StringDecoder.prototype.end = utf8End;
        StringDecoder.prototype.text = utf8Text;
        StringDecoder.prototype.fillLast = function(buf) {
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
          this.lastNeed -= buf.length;
        };
        function utf8CheckByte(byte) {
          if (byte <= 127)
            return 0;
          else if (byte >> 5 === 6)
            return 2;
          else if (byte >> 4 === 14)
            return 3;
          else if (byte >> 3 === 30)
            return 4;
          return byte >> 6 === 2 ? -1 : -2;
        }
        function utf8CheckIncomplete(self2, buf, i) {
          var j = buf.length - 1;
          if (j < i)
            return 0;
          var nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self2.lastNeed = nb - 1;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self2.lastNeed = nb - 2;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) {
              if (nb === 2)
                nb = 0;
              else
                self2.lastNeed = nb - 3;
            }
            return nb;
          }
          return 0;
        }
        function utf8CheckExtraBytes(self2, buf, p2) {
          if ((buf[0] & 192) !== 128) {
            self2.lastNeed = 0;
            return "�";
          }
          if (self2.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 192) !== 128) {
              self2.lastNeed = 1;
              return "�";
            }
            if (self2.lastNeed > 2 && buf.length > 2) {
              if ((buf[2] & 192) !== 128) {
                self2.lastNeed = 2;
                return "�";
              }
            }
          }
        }
        function utf8FillLast(buf) {
          var p2 = this.lastTotal - this.lastNeed;
          var r = utf8CheckExtraBytes(this, buf);
          if (r !== void 0)
            return r;
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p2, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, p2, 0, buf.length);
          this.lastNeed -= buf.length;
        }
        function utf8Text(buf, i) {
          var total = utf8CheckIncomplete(this, buf, i);
          if (!this.lastNeed)
            return buf.toString("utf8", i);
          this.lastTotal = total;
          var end = buf.length - (total - this.lastNeed);
          buf.copy(this.lastChar, 0, end);
          return buf.toString("utf8", i, end);
        }
        function utf8End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + "�";
          return r;
        }
        function utf16Text(buf, i) {
          if ((buf.length - i) % 2 === 0) {
            var r = buf.toString("utf16le", i);
            if (r) {
              var c = r.charCodeAt(r.length - 1);
              if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
              }
            }
            return r;
          }
          this.lastNeed = 1;
          this.lastTotal = 2;
          this.lastChar[0] = buf[buf.length - 1];
          return buf.toString("utf16le", i, buf.length - 1);
        }
        function utf16End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString("utf16le", 0, end);
          }
          return r;
        }
        function base64Text(buf, i) {
          var n2 = (buf.length - i) % 3;
          if (n2 === 0)
            return buf.toString("base64", i);
          this.lastNeed = 3 - n2;
          this.lastTotal = 3;
          if (n2 === 1) {
            this.lastChar[0] = buf[buf.length - 1];
          } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
          }
          return buf.toString("base64", i, buf.length - n2);
        }
        function base64End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
          return r;
        }
        function simpleWrite(buf) {
          return buf.toString(this.encoding);
        }
        function simpleEnd(buf) {
          return buf && buf.length ? this.write(buf) : "";
        }
      }, { "safe-buffer": 461 }], 463: [function(require2, module3, exports3) {
        exports3 = module3.exports = require2("./lib/_stream_readable.js");
        exports3.Stream = exports3;
        exports3.Readable = exports3;
        exports3.Writable = require2("./lib/_stream_writable.js");
        exports3.Duplex = require2("./lib/_stream_duplex.js");
        exports3.Transform = require2("./lib/_stream_transform.js");
        exports3.PassThrough = require2("./lib/_stream_passthrough.js");
      }, { "./lib/_stream_duplex.js": 452, "./lib/_stream_passthrough.js": 453, "./lib/_stream_readable.js": 454, "./lib/_stream_transform.js": 455, "./lib/_stream_writable.js": 456 }], 464: [function(require2, module3, exports3) {
        /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
        var buffer2 = require2("buffer");
        var Buffer2 = buffer2.Buffer;
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
          module3.exports = buffer2;
        } else {
          copyProps(buffer2, exports3);
          exports3.Buffer = SafeBuffer;
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer2(arg, encodingOrOffset, length);
        }
        SafeBuffer.prototype = Object.create(Buffer2.prototype);
        copyProps(Buffer2, SafeBuffer);
        SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer2(arg, encodingOrOffset, length);
        };
        SafeBuffer.alloc = function(size2, fill, encoding) {
          if (typeof size2 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer2(size2);
          if (fill !== void 0) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };
        SafeBuffer.allocUnsafe = function(size2) {
          if (typeof size2 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer2(size2);
        };
        SafeBuffer.allocUnsafeSlow = function(size2) {
          if (typeof size2 !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer2.SlowBuffer(size2);
        };
      }, { "buffer": 103 }], 465: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            (function(sax) {
              sax.parser = function(strict, opt) {
                return new SAXParser(strict, opt);
              };
              sax.SAXParser = SAXParser;
              sax.SAXStream = SAXStream;
              sax.createStream = createStream;
              sax.MAX_BUFFER_LENGTH = 64 * 1024;
              var buffers = [
                "comment",
                "sgmlDecl",
                "textNode",
                "tagName",
                "doctype",
                "procInstName",
                "procInstBody",
                "entity",
                "attribName",
                "attribValue",
                "cdata",
                "script"
              ];
              sax.EVENTS = [
                "text",
                "processinginstruction",
                "sgmldeclaration",
                "doctype",
                "comment",
                "opentagstart",
                "attribute",
                "opentag",
                "closetag",
                "opencdata",
                "cdata",
                "closecdata",
                "error",
                "end",
                "ready",
                "script",
                "opennamespace",
                "closenamespace"
              ];
              function SAXParser(strict, opt) {
                if (!(this instanceof SAXParser)) {
                  return new SAXParser(strict, opt);
                }
                var parser = this;
                clearBuffers(parser);
                parser.q = parser.c = "";
                parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
                parser.opt = opt || {};
                parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
                parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
                parser.tags = [];
                parser.closed = parser.closedRoot = parser.sawRoot = false;
                parser.tag = parser.error = null;
                parser.strict = !!strict;
                parser.noscript = !!(strict || parser.opt.noscript);
                parser.state = S.BEGIN;
                parser.strictEntities = parser.opt.strictEntities;
                parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
                parser.attribList = [];
                if (parser.opt.xmlns) {
                  parser.ns = Object.create(rootNS);
                }
                parser.trackPosition = parser.opt.position !== false;
                if (parser.trackPosition) {
                  parser.position = parser.line = parser.column = 0;
                }
                emit2(parser, "onready");
              }
              if (!Object.create) {
                Object.create = function(o2) {
                  function F() {
                  }
                  F.prototype = o2;
                  var newf = new F();
                  return newf;
                };
              }
              if (!Object.keys) {
                Object.keys = function(o2) {
                  var a = [];
                  for (var i in o2)
                    if (o2.hasOwnProperty(i))
                      a.push(i);
                  return a;
                };
              }
              function checkBufferLength(parser) {
                var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
                var maxActual = 0;
                for (var i = 0, l = buffers.length; i < l; i++) {
                  var len = parser[buffers[i]].length;
                  if (len > maxAllowed) {
                    switch (buffers[i]) {
                      case "textNode":
                        closeText(parser);
                        break;
                      case "cdata":
                        emitNode(parser, "oncdata", parser.cdata);
                        parser.cdata = "";
                        break;
                      case "script":
                        emitNode(parser, "onscript", parser.script);
                        parser.script = "";
                        break;
                      default:
                        error(parser, "Max buffer length exceeded: " + buffers[i]);
                    }
                  }
                  maxActual = Math.max(maxActual, len);
                }
                var m2 = sax.MAX_BUFFER_LENGTH - maxActual;
                parser.bufferCheckPosition = m2 + parser.position;
              }
              function clearBuffers(parser) {
                for (var i = 0, l = buffers.length; i < l; i++) {
                  parser[buffers[i]] = "";
                }
              }
              function flushBuffers(parser) {
                closeText(parser);
                if (parser.cdata !== "") {
                  emitNode(parser, "oncdata", parser.cdata);
                  parser.cdata = "";
                }
                if (parser.script !== "") {
                  emitNode(parser, "onscript", parser.script);
                  parser.script = "";
                }
              }
              SAXParser.prototype = {
                end: function() {
                  end(this);
                },
                write,
                resume: function() {
                  this.error = null;
                  return this;
                },
                close: function() {
                  return this.write(null);
                },
                flush: function() {
                  flushBuffers(this);
                }
              };
              var Stream;
              try {
                Stream = require2("stream").Stream;
              } catch (ex) {
                Stream = function() {
                };
              }
              if (!Stream)
                Stream = function() {
                };
              var streamWraps = sax.EVENTS.filter(function(ev) {
                return ev !== "error" && ev !== "end";
              });
              function createStream(strict, opt) {
                return new SAXStream(strict, opt);
              }
              function SAXStream(strict, opt) {
                if (!(this instanceof SAXStream)) {
                  return new SAXStream(strict, opt);
                }
                Stream.apply(this);
                this._parser = new SAXParser(strict, opt);
                this.writable = true;
                this.readable = true;
                var me = this;
                this._parser.onend = function() {
                  me.emit("end");
                };
                this._parser.onerror = function(er) {
                  me.emit("error", er);
                  me._parser.error = null;
                };
                this._decoder = null;
                streamWraps.forEach(function(ev) {
                  Object.defineProperty(me, "on" + ev, {
                    get: function() {
                      return me._parser["on" + ev];
                    },
                    set: function(h) {
                      if (!h) {
                        me.removeAllListeners(ev);
                        me._parser["on" + ev] = h;
                        return h;
                      }
                      me.on(ev, h);
                    },
                    enumerable: true,
                    configurable: false
                  });
                });
              }
              SAXStream.prototype = Object.create(Stream.prototype, {
                constructor: {
                  value: SAXStream
                }
              });
              SAXStream.prototype.write = function(data) {
                if (typeof Buffer2 === "function" && typeof Buffer2.isBuffer === "function" && Buffer2.isBuffer(data)) {
                  if (!this._decoder) {
                    var SD = require2("string_decoder").StringDecoder;
                    this._decoder = new SD("utf8");
                  }
                  data = this._decoder.write(data);
                }
                this._parser.write(data.toString());
                this.emit("data", data);
                return true;
              };
              SAXStream.prototype.end = function(chunk) {
                if (chunk && chunk.length) {
                  this.write(chunk);
                }
                this._parser.end();
                return true;
              };
              SAXStream.prototype.on = function(ev, handler) {
                var me = this;
                if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
                  me._parser["on" + ev] = function() {
                    var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
                    args.splice(0, 0, ev);
                    me.emit.apply(me, args);
                  };
                }
                return Stream.prototype.on.call(me, ev, handler);
              };
              var CDATA = "[CDATA[";
              var DOCTYPE = "DOCTYPE";
              var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
              var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
              var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
              var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
              var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
              var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
              var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
              function isWhitespace(c) {
                return c === " " || c === "\n" || c === "\r" || c === "	";
              }
              function isQuote(c) {
                return c === '"' || c === "'";
              }
              function isAttribEnd(c) {
                return c === ">" || isWhitespace(c);
              }
              function isMatch(regex, c) {
                return regex.test(c);
              }
              function notMatch(regex, c) {
                return !isMatch(regex, c);
              }
              var S = 0;
              sax.STATE = {
                BEGIN: S++,
                // leading byte order mark or whitespace
                BEGIN_WHITESPACE: S++,
                // leading whitespace
                TEXT: S++,
                // general stuff
                TEXT_ENTITY: S++,
                // &amp and such.
                OPEN_WAKA: S++,
                // <
                SGML_DECL: S++,
                // <!BLARG
                SGML_DECL_QUOTED: S++,
                // <!BLARG foo "bar
                DOCTYPE: S++,
                // <!DOCTYPE
                DOCTYPE_QUOTED: S++,
                // <!DOCTYPE "//blah
                DOCTYPE_DTD: S++,
                // <!DOCTYPE "//blah" [ ...
                DOCTYPE_DTD_QUOTED: S++,
                // <!DOCTYPE "//blah" [ "foo
                COMMENT_STARTING: S++,
                // <!-
                COMMENT: S++,
                // <!--
                COMMENT_ENDING: S++,
                // <!-- blah -
                COMMENT_ENDED: S++,
                // <!-- blah --
                CDATA: S++,
                // <![CDATA[ something
                CDATA_ENDING: S++,
                // ]
                CDATA_ENDING_2: S++,
                // ]]
                PROC_INST: S++,
                // <?hi
                PROC_INST_BODY: S++,
                // <?hi there
                PROC_INST_ENDING: S++,
                // <?hi "there" ?
                OPEN_TAG: S++,
                // <strong
                OPEN_TAG_SLASH: S++,
                // <strong /
                ATTRIB: S++,
                // <a
                ATTRIB_NAME: S++,
                // <a foo
                ATTRIB_NAME_SAW_WHITE: S++,
                // <a foo _
                ATTRIB_VALUE: S++,
                // <a foo=
                ATTRIB_VALUE_QUOTED: S++,
                // <a foo="bar
                ATTRIB_VALUE_CLOSED: S++,
                // <a foo="bar"
                ATTRIB_VALUE_UNQUOTED: S++,
                // <a foo=bar
                ATTRIB_VALUE_ENTITY_Q: S++,
                // <foo bar="&quot;"
                ATTRIB_VALUE_ENTITY_U: S++,
                // <foo bar=&quot
                CLOSE_TAG: S++,
                // </a
                CLOSE_TAG_SAW_WHITE: S++,
                // </a   >
                SCRIPT: S++,
                // <script> ...
                SCRIPT_ENDING: S++
                // <script> ... <
              };
              sax.XML_ENTITIES = {
                "amp": "&",
                "gt": ">",
                "lt": "<",
                "quot": '"',
                "apos": "'"
              };
              sax.ENTITIES = {
                "amp": "&",
                "gt": ">",
                "lt": "<",
                "quot": '"',
                "apos": "'",
                "AElig": 198,
                "Aacute": 193,
                "Acirc": 194,
                "Agrave": 192,
                "Aring": 197,
                "Atilde": 195,
                "Auml": 196,
                "Ccedil": 199,
                "ETH": 208,
                "Eacute": 201,
                "Ecirc": 202,
                "Egrave": 200,
                "Euml": 203,
                "Iacute": 205,
                "Icirc": 206,
                "Igrave": 204,
                "Iuml": 207,
                "Ntilde": 209,
                "Oacute": 211,
                "Ocirc": 212,
                "Ograve": 210,
                "Oslash": 216,
                "Otilde": 213,
                "Ouml": 214,
                "THORN": 222,
                "Uacute": 218,
                "Ucirc": 219,
                "Ugrave": 217,
                "Uuml": 220,
                "Yacute": 221,
                "aacute": 225,
                "acirc": 226,
                "aelig": 230,
                "agrave": 224,
                "aring": 229,
                "atilde": 227,
                "auml": 228,
                "ccedil": 231,
                "eacute": 233,
                "ecirc": 234,
                "egrave": 232,
                "eth": 240,
                "euml": 235,
                "iacute": 237,
                "icirc": 238,
                "igrave": 236,
                "iuml": 239,
                "ntilde": 241,
                "oacute": 243,
                "ocirc": 244,
                "ograve": 242,
                "oslash": 248,
                "otilde": 245,
                "ouml": 246,
                "szlig": 223,
                "thorn": 254,
                "uacute": 250,
                "ucirc": 251,
                "ugrave": 249,
                "uuml": 252,
                "yacute": 253,
                "yuml": 255,
                "copy": 169,
                "reg": 174,
                "nbsp": 160,
                "iexcl": 161,
                "cent": 162,
                "pound": 163,
                "curren": 164,
                "yen": 165,
                "brvbar": 166,
                "sect": 167,
                "uml": 168,
                "ordf": 170,
                "laquo": 171,
                "not": 172,
                "shy": 173,
                "macr": 175,
                "deg": 176,
                "plusmn": 177,
                "sup1": 185,
                "sup2": 178,
                "sup3": 179,
                "acute": 180,
                "micro": 181,
                "para": 182,
                "middot": 183,
                "cedil": 184,
                "ordm": 186,
                "raquo": 187,
                "frac14": 188,
                "frac12": 189,
                "frac34": 190,
                "iquest": 191,
                "times": 215,
                "divide": 247,
                "OElig": 338,
                "oelig": 339,
                "Scaron": 352,
                "scaron": 353,
                "Yuml": 376,
                "fnof": 402,
                "circ": 710,
                "tilde": 732,
                "Alpha": 913,
                "Beta": 914,
                "Gamma": 915,
                "Delta": 916,
                "Epsilon": 917,
                "Zeta": 918,
                "Eta": 919,
                "Theta": 920,
                "Iota": 921,
                "Kappa": 922,
                "Lambda": 923,
                "Mu": 924,
                "Nu": 925,
                "Xi": 926,
                "Omicron": 927,
                "Pi": 928,
                "Rho": 929,
                "Sigma": 931,
                "Tau": 932,
                "Upsilon": 933,
                "Phi": 934,
                "Chi": 935,
                "Psi": 936,
                "Omega": 937,
                "alpha": 945,
                "beta": 946,
                "gamma": 947,
                "delta": 948,
                "epsilon": 949,
                "zeta": 950,
                "eta": 951,
                "theta": 952,
                "iota": 953,
                "kappa": 954,
                "lambda": 955,
                "mu": 956,
                "nu": 957,
                "xi": 958,
                "omicron": 959,
                "pi": 960,
                "rho": 961,
                "sigmaf": 962,
                "sigma": 963,
                "tau": 964,
                "upsilon": 965,
                "phi": 966,
                "chi": 967,
                "psi": 968,
                "omega": 969,
                "thetasym": 977,
                "upsih": 978,
                "piv": 982,
                "ensp": 8194,
                "emsp": 8195,
                "thinsp": 8201,
                "zwnj": 8204,
                "zwj": 8205,
                "lrm": 8206,
                "rlm": 8207,
                "ndash": 8211,
                "mdash": 8212,
                "lsquo": 8216,
                "rsquo": 8217,
                "sbquo": 8218,
                "ldquo": 8220,
                "rdquo": 8221,
                "bdquo": 8222,
                "dagger": 8224,
                "Dagger": 8225,
                "bull": 8226,
                "hellip": 8230,
                "permil": 8240,
                "prime": 8242,
                "Prime": 8243,
                "lsaquo": 8249,
                "rsaquo": 8250,
                "oline": 8254,
                "frasl": 8260,
                "euro": 8364,
                "image": 8465,
                "weierp": 8472,
                "real": 8476,
                "trade": 8482,
                "alefsym": 8501,
                "larr": 8592,
                "uarr": 8593,
                "rarr": 8594,
                "darr": 8595,
                "harr": 8596,
                "crarr": 8629,
                "lArr": 8656,
                "uArr": 8657,
                "rArr": 8658,
                "dArr": 8659,
                "hArr": 8660,
                "forall": 8704,
                "part": 8706,
                "exist": 8707,
                "empty": 8709,
                "nabla": 8711,
                "isin": 8712,
                "notin": 8713,
                "ni": 8715,
                "prod": 8719,
                "sum": 8721,
                "minus": 8722,
                "lowast": 8727,
                "radic": 8730,
                "prop": 8733,
                "infin": 8734,
                "ang": 8736,
                "and": 8743,
                "or": 8744,
                "cap": 8745,
                "cup": 8746,
                "int": 8747,
                "there4": 8756,
                "sim": 8764,
                "cong": 8773,
                "asymp": 8776,
                "ne": 8800,
                "equiv": 8801,
                "le": 8804,
                "ge": 8805,
                "sub": 8834,
                "sup": 8835,
                "nsub": 8836,
                "sube": 8838,
                "supe": 8839,
                "oplus": 8853,
                "otimes": 8855,
                "perp": 8869,
                "sdot": 8901,
                "lceil": 8968,
                "rceil": 8969,
                "lfloor": 8970,
                "rfloor": 8971,
                "lang": 9001,
                "rang": 9002,
                "loz": 9674,
                "spades": 9824,
                "clubs": 9827,
                "hearts": 9829,
                "diams": 9830
              };
              Object.keys(sax.ENTITIES).forEach(function(key) {
                var e2 = sax.ENTITIES[key];
                var s3 = typeof e2 === "number" ? String.fromCharCode(e2) : e2;
                sax.ENTITIES[key] = s3;
              });
              for (var s2 in sax.STATE) {
                sax.STATE[sax.STATE[s2]] = s2;
              }
              S = sax.STATE;
              function emit2(parser, event, data) {
                parser[event] && parser[event](data);
              }
              function emitNode(parser, nodeType, data) {
                if (parser.textNode)
                  closeText(parser);
                emit2(parser, nodeType, data);
              }
              function closeText(parser) {
                parser.textNode = textopts(parser.opt, parser.textNode);
                if (parser.textNode)
                  emit2(parser, "ontext", parser.textNode);
                parser.textNode = "";
              }
              function textopts(opt, text2) {
                if (opt.trim)
                  text2 = text2.trim();
                if (opt.normalize)
                  text2 = text2.replace(/\s+/g, " ");
                return text2;
              }
              function error(parser, er) {
                closeText(parser);
                if (parser.trackPosition) {
                  er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
                }
                er = new Error(er);
                parser.error = er;
                emit2(parser, "onerror", er);
                return parser;
              }
              function end(parser) {
                if (parser.sawRoot && !parser.closedRoot)
                  strictFail(parser, "Unclosed root tag");
                if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
                  error(parser, "Unexpected end");
                }
                closeText(parser);
                parser.c = "";
                parser.closed = true;
                emit2(parser, "onend");
                SAXParser.call(parser, parser.strict, parser.opt);
                return parser;
              }
              function strictFail(parser, message) {
                if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
                  throw new Error("bad call to strictFail");
                }
                if (parser.strict) {
                  error(parser, message);
                }
              }
              function newTag(parser) {
                if (!parser.strict)
                  parser.tagName = parser.tagName[parser.looseCase]();
                var parent = parser.tags[parser.tags.length - 1] || parser;
                var tag2 = parser.tag = { name: parser.tagName, attributes: {} };
                if (parser.opt.xmlns) {
                  tag2.ns = parent.ns;
                }
                parser.attribList.length = 0;
                emitNode(parser, "onopentagstart", tag2);
              }
              function qname(name, attribute) {
                var i = name.indexOf(":");
                var qualName = i < 0 ? ["", name] : name.split(":");
                var prefix = qualName[0];
                var local = qualName[1];
                if (attribute && name === "xmlns") {
                  prefix = "xmlns";
                  local = "";
                }
                return { prefix, local };
              }
              function attrib(parser) {
                if (!parser.strict) {
                  parser.attribName = parser.attribName[parser.looseCase]();
                }
                if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
                  parser.attribName = parser.attribValue = "";
                  return;
                }
                if (parser.opt.xmlns) {
                  var qn = qname(parser.attribName, true);
                  var prefix = qn.prefix;
                  var local = qn.local;
                  if (prefix === "xmlns") {
                    if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
                      strictFail(
                        parser,
                        "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
                      );
                    } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
                      strictFail(
                        parser,
                        "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
                      );
                    } else {
                      var tag2 = parser.tag;
                      var parent = parser.tags[parser.tags.length - 1] || parser;
                      if (tag2.ns === parent.ns) {
                        tag2.ns = Object.create(parent.ns);
                      }
                      tag2.ns[local] = parser.attribValue;
                    }
                  }
                  parser.attribList.push([parser.attribName, parser.attribValue]);
                } else {
                  parser.tag.attributes[parser.attribName] = parser.attribValue;
                  emitNode(parser, "onattribute", {
                    name: parser.attribName,
                    value: parser.attribValue
                  });
                }
                parser.attribName = parser.attribValue = "";
              }
              function openTag(parser, selfClosing) {
                if (parser.opt.xmlns) {
                  var tag2 = parser.tag;
                  var qn = qname(parser.tagName);
                  tag2.prefix = qn.prefix;
                  tag2.local = qn.local;
                  tag2.uri = tag2.ns[qn.prefix] || "";
                  if (tag2.prefix && !tag2.uri) {
                    strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
                    tag2.uri = qn.prefix;
                  }
                  var parent = parser.tags[parser.tags.length - 1] || parser;
                  if (tag2.ns && parent.ns !== tag2.ns) {
                    Object.keys(tag2.ns).forEach(function(p2) {
                      emitNode(parser, "onopennamespace", {
                        prefix: p2,
                        uri: tag2.ns[p2]
                      });
                    });
                  }
                  for (var i = 0, l = parser.attribList.length; i < l; i++) {
                    var nv = parser.attribList[i];
                    var name = nv[0];
                    var value = nv[1];
                    var qualName = qname(name, true);
                    var prefix = qualName.prefix;
                    var local = qualName.local;
                    var uri = prefix === "" ? "" : tag2.ns[prefix] || "";
                    var a = {
                      name,
                      value,
                      prefix,
                      local,
                      uri
                    };
                    if (prefix && prefix !== "xmlns" && !uri) {
                      strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                      a.uri = prefix;
                    }
                    parser.tag.attributes[name] = a;
                    emitNode(parser, "onattribute", a);
                  }
                  parser.attribList.length = 0;
                }
                parser.tag.isSelfClosing = !!selfClosing;
                parser.sawRoot = true;
                parser.tags.push(parser.tag);
                emitNode(parser, "onopentag", parser.tag);
                if (!selfClosing) {
                  if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
                    parser.state = S.SCRIPT;
                  } else {
                    parser.state = S.TEXT;
                  }
                  parser.tag = null;
                  parser.tagName = "";
                }
                parser.attribName = parser.attribValue = "";
                parser.attribList.length = 0;
              }
              function closeTag(parser) {
                if (!parser.tagName) {
                  strictFail(parser, "Weird empty close tag.");
                  parser.textNode += "</>";
                  parser.state = S.TEXT;
                  return;
                }
                if (parser.script) {
                  if (parser.tagName !== "script") {
                    parser.script += "</" + parser.tagName + ">";
                    parser.tagName = "";
                    parser.state = S.SCRIPT;
                    return;
                  }
                  emitNode(parser, "onscript", parser.script);
                  parser.script = "";
                }
                var t2 = parser.tags.length;
                var tagName = parser.tagName;
                if (!parser.strict) {
                  tagName = tagName[parser.looseCase]();
                }
                var closeTo = tagName;
                while (t2--) {
                  var close = parser.tags[t2];
                  if (close.name !== closeTo) {
                    strictFail(parser, "Unexpected close tag");
                  } else {
                    break;
                  }
                }
                if (t2 < 0) {
                  strictFail(parser, "Unmatched closing tag: " + parser.tagName);
                  parser.textNode += "</" + parser.tagName + ">";
                  parser.state = S.TEXT;
                  return;
                }
                parser.tagName = tagName;
                var s3 = parser.tags.length;
                while (s3-- > t2) {
                  var tag2 = parser.tag = parser.tags.pop();
                  parser.tagName = parser.tag.name;
                  emitNode(parser, "onclosetag", parser.tagName);
                  var x = {};
                  for (var i in tag2.ns) {
                    x[i] = tag2.ns[i];
                  }
                  var parent = parser.tags[parser.tags.length - 1] || parser;
                  if (parser.opt.xmlns && tag2.ns !== parent.ns) {
                    Object.keys(tag2.ns).forEach(function(p2) {
                      var n2 = tag2.ns[p2];
                      emitNode(parser, "onclosenamespace", { prefix: p2, uri: n2 });
                    });
                  }
                }
                if (t2 === 0)
                  parser.closedRoot = true;
                parser.tagName = parser.attribValue = parser.attribName = "";
                parser.attribList.length = 0;
                parser.state = S.TEXT;
              }
              function parseEntity(parser) {
                var entity = parser.entity;
                var entityLC = entity.toLowerCase();
                var num;
                var numStr = "";
                if (parser.ENTITIES[entity]) {
                  return parser.ENTITIES[entity];
                }
                if (parser.ENTITIES[entityLC]) {
                  return parser.ENTITIES[entityLC];
                }
                entity = entityLC;
                if (entity.charAt(0) === "#") {
                  if (entity.charAt(1) === "x") {
                    entity = entity.slice(2);
                    num = parseInt(entity, 16);
                    numStr = num.toString(16);
                  } else {
                    entity = entity.slice(1);
                    num = parseInt(entity, 10);
                    numStr = num.toString(10);
                  }
                }
                entity = entity.replace(/^0+/, "");
                if (isNaN(num) || numStr.toLowerCase() !== entity) {
                  strictFail(parser, "Invalid character entity");
                  return "&" + parser.entity + ";";
                }
                return String.fromCodePoint(num);
              }
              function beginWhiteSpace(parser, c) {
                if (c === "<") {
                  parser.state = S.OPEN_WAKA;
                  parser.startTagPosition = parser.position;
                } else if (!isWhitespace(c)) {
                  strictFail(parser, "Non-whitespace before first tag.");
                  parser.textNode = c;
                  parser.state = S.TEXT;
                }
              }
              function charAt(chunk, i) {
                var result = "";
                if (i < chunk.length) {
                  result = chunk.charAt(i);
                }
                return result;
              }
              function write(chunk) {
                var parser = this;
                if (this.error) {
                  throw this.error;
                }
                if (parser.closed) {
                  return error(
                    parser,
                    "Cannot write after close. Assign an onready handler."
                  );
                }
                if (chunk === null) {
                  return end(parser);
                }
                if (typeof chunk === "object") {
                  chunk = chunk.toString();
                }
                var i = 0;
                var c = "";
                while (true) {
                  c = charAt(chunk, i++);
                  parser.c = c;
                  if (!c) {
                    break;
                  }
                  if (parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                  switch (parser.state) {
                    case S.BEGIN:
                      parser.state = S.BEGIN_WHITESPACE;
                      if (c === "\uFEFF") {
                        continue;
                      }
                      beginWhiteSpace(parser, c);
                      continue;
                    case S.BEGIN_WHITESPACE:
                      beginWhiteSpace(parser, c);
                      continue;
                    case S.TEXT:
                      if (parser.sawRoot && !parser.closedRoot) {
                        var starti = i - 1;
                        while (c && c !== "<" && c !== "&") {
                          c = charAt(chunk, i++);
                          if (c && parser.trackPosition) {
                            parser.position++;
                            if (c === "\n") {
                              parser.line++;
                              parser.column = 0;
                            } else {
                              parser.column++;
                            }
                          }
                        }
                        parser.textNode += chunk.substring(starti, i - 1);
                      }
                      if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                        parser.state = S.OPEN_WAKA;
                        parser.startTagPosition = parser.position;
                      } else {
                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                          strictFail(parser, "Text data outside of root node.");
                        }
                        if (c === "&") {
                          parser.state = S.TEXT_ENTITY;
                        } else {
                          parser.textNode += c;
                        }
                      }
                      continue;
                    case S.SCRIPT:
                      if (c === "<") {
                        parser.state = S.SCRIPT_ENDING;
                      } else {
                        parser.script += c;
                      }
                      continue;
                    case S.SCRIPT_ENDING:
                      if (c === "/") {
                        parser.state = S.CLOSE_TAG;
                      } else {
                        parser.script += "<" + c;
                        parser.state = S.SCRIPT;
                      }
                      continue;
                    case S.OPEN_WAKA:
                      if (c === "!") {
                        parser.state = S.SGML_DECL;
                        parser.sgmlDecl = "";
                      } else if (isWhitespace(c))
                        ;
                      else if (isMatch(nameStart, c)) {
                        parser.state = S.OPEN_TAG;
                        parser.tagName = c;
                      } else if (c === "/") {
                        parser.state = S.CLOSE_TAG;
                        parser.tagName = "";
                      } else if (c === "?") {
                        parser.state = S.PROC_INST;
                        parser.procInstName = parser.procInstBody = "";
                      } else {
                        strictFail(parser, "Unencoded <");
                        if (parser.startTagPosition + 1 < parser.position) {
                          var pad = parser.position - parser.startTagPosition;
                          c = new Array(pad).join(" ") + c;
                        }
                        parser.textNode += "<" + c;
                        parser.state = S.TEXT;
                      }
                      continue;
                    case S.SGML_DECL:
                      if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                        emitNode(parser, "onopencdata");
                        parser.state = S.CDATA;
                        parser.sgmlDecl = "";
                        parser.cdata = "";
                      } else if (parser.sgmlDecl + c === "--") {
                        parser.state = S.COMMENT;
                        parser.comment = "";
                        parser.sgmlDecl = "";
                      } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                        parser.state = S.DOCTYPE;
                        if (parser.doctype || parser.sawRoot) {
                          strictFail(
                            parser,
                            "Inappropriately located doctype declaration"
                          );
                        }
                        parser.doctype = "";
                        parser.sgmlDecl = "";
                      } else if (c === ">") {
                        emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                        parser.sgmlDecl = "";
                        parser.state = S.TEXT;
                      } else if (isQuote(c)) {
                        parser.state = S.SGML_DECL_QUOTED;
                        parser.sgmlDecl += c;
                      } else {
                        parser.sgmlDecl += c;
                      }
                      continue;
                    case S.SGML_DECL_QUOTED:
                      if (c === parser.q) {
                        parser.state = S.SGML_DECL;
                        parser.q = "";
                      }
                      parser.sgmlDecl += c;
                      continue;
                    case S.DOCTYPE:
                      if (c === ">") {
                        parser.state = S.TEXT;
                        emitNode(parser, "ondoctype", parser.doctype);
                        parser.doctype = true;
                      } else {
                        parser.doctype += c;
                        if (c === "[") {
                          parser.state = S.DOCTYPE_DTD;
                        } else if (isQuote(c)) {
                          parser.state = S.DOCTYPE_QUOTED;
                          parser.q = c;
                        }
                      }
                      continue;
                    case S.DOCTYPE_QUOTED:
                      parser.doctype += c;
                      if (c === parser.q) {
                        parser.q = "";
                        parser.state = S.DOCTYPE;
                      }
                      continue;
                    case S.DOCTYPE_DTD:
                      parser.doctype += c;
                      if (c === "]") {
                        parser.state = S.DOCTYPE;
                      } else if (isQuote(c)) {
                        parser.state = S.DOCTYPE_DTD_QUOTED;
                        parser.q = c;
                      }
                      continue;
                    case S.DOCTYPE_DTD_QUOTED:
                      parser.doctype += c;
                      if (c === parser.q) {
                        parser.state = S.DOCTYPE_DTD;
                        parser.q = "";
                      }
                      continue;
                    case S.COMMENT:
                      if (c === "-") {
                        parser.state = S.COMMENT_ENDING;
                      } else {
                        parser.comment += c;
                      }
                      continue;
                    case S.COMMENT_ENDING:
                      if (c === "-") {
                        parser.state = S.COMMENT_ENDED;
                        parser.comment = textopts(parser.opt, parser.comment);
                        if (parser.comment) {
                          emitNode(parser, "oncomment", parser.comment);
                        }
                        parser.comment = "";
                      } else {
                        parser.comment += "-" + c;
                        parser.state = S.COMMENT;
                      }
                      continue;
                    case S.COMMENT_ENDED:
                      if (c !== ">") {
                        strictFail(parser, "Malformed comment");
                        parser.comment += "--" + c;
                        parser.state = S.COMMENT;
                      } else {
                        parser.state = S.TEXT;
                      }
                      continue;
                    case S.CDATA:
                      if (c === "]") {
                        parser.state = S.CDATA_ENDING;
                      } else {
                        parser.cdata += c;
                      }
                      continue;
                    case S.CDATA_ENDING:
                      if (c === "]") {
                        parser.state = S.CDATA_ENDING_2;
                      } else {
                        parser.cdata += "]" + c;
                        parser.state = S.CDATA;
                      }
                      continue;
                    case S.CDATA_ENDING_2:
                      if (c === ">") {
                        if (parser.cdata) {
                          emitNode(parser, "oncdata", parser.cdata);
                        }
                        emitNode(parser, "onclosecdata");
                        parser.cdata = "";
                        parser.state = S.TEXT;
                      } else if (c === "]") {
                        parser.cdata += "]";
                      } else {
                        parser.cdata += "]]" + c;
                        parser.state = S.CDATA;
                      }
                      continue;
                    case S.PROC_INST:
                      if (c === "?") {
                        parser.state = S.PROC_INST_ENDING;
                      } else if (isWhitespace(c)) {
                        parser.state = S.PROC_INST_BODY;
                      } else {
                        parser.procInstName += c;
                      }
                      continue;
                    case S.PROC_INST_BODY:
                      if (!parser.procInstBody && isWhitespace(c)) {
                        continue;
                      } else if (c === "?") {
                        parser.state = S.PROC_INST_ENDING;
                      } else {
                        parser.procInstBody += c;
                      }
                      continue;
                    case S.PROC_INST_ENDING:
                      if (c === ">") {
                        emitNode(parser, "onprocessinginstruction", {
                          name: parser.procInstName,
                          body: parser.procInstBody
                        });
                        parser.procInstName = parser.procInstBody = "";
                        parser.state = S.TEXT;
                      } else {
                        parser.procInstBody += "?" + c;
                        parser.state = S.PROC_INST_BODY;
                      }
                      continue;
                    case S.OPEN_TAG:
                      if (isMatch(nameBody, c)) {
                        parser.tagName += c;
                      } else {
                        newTag(parser);
                        if (c === ">") {
                          openTag(parser);
                        } else if (c === "/") {
                          parser.state = S.OPEN_TAG_SLASH;
                        } else {
                          if (!isWhitespace(c)) {
                            strictFail(parser, "Invalid character in tag name");
                          }
                          parser.state = S.ATTRIB;
                        }
                      }
                      continue;
                    case S.OPEN_TAG_SLASH:
                      if (c === ">") {
                        openTag(parser, true);
                        closeTag(parser);
                      } else {
                        strictFail(parser, "Forward-slash in opening tag not followed by >");
                        parser.state = S.ATTRIB;
                      }
                      continue;
                    case S.ATTRIB:
                      if (isWhitespace(c)) {
                        continue;
                      } else if (c === ">") {
                        openTag(parser);
                      } else if (c === "/") {
                        parser.state = S.OPEN_TAG_SLASH;
                      } else if (isMatch(nameStart, c)) {
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_NAME:
                      if (c === "=") {
                        parser.state = S.ATTRIB_VALUE;
                      } else if (c === ">") {
                        strictFail(parser, "Attribute without value");
                        parser.attribValue = parser.attribName;
                        attrib(parser);
                        openTag(parser);
                      } else if (isWhitespace(c)) {
                        parser.state = S.ATTRIB_NAME_SAW_WHITE;
                      } else if (isMatch(nameBody, c)) {
                        parser.attribName += c;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_NAME_SAW_WHITE:
                      if (c === "=") {
                        parser.state = S.ATTRIB_VALUE;
                      } else if (isWhitespace(c)) {
                        continue;
                      } else {
                        strictFail(parser, "Attribute without value");
                        parser.tag.attributes[parser.attribName] = "";
                        parser.attribValue = "";
                        emitNode(parser, "onattribute", {
                          name: parser.attribName,
                          value: ""
                        });
                        parser.attribName = "";
                        if (c === ">") {
                          openTag(parser);
                        } else if (isMatch(nameStart, c)) {
                          parser.attribName = c;
                          parser.state = S.ATTRIB_NAME;
                        } else {
                          strictFail(parser, "Invalid attribute name");
                          parser.state = S.ATTRIB;
                        }
                      }
                      continue;
                    case S.ATTRIB_VALUE:
                      if (isWhitespace(c)) {
                        continue;
                      } else if (isQuote(c)) {
                        parser.q = c;
                        parser.state = S.ATTRIB_VALUE_QUOTED;
                      } else {
                        strictFail(parser, "Unquoted attribute value");
                        parser.state = S.ATTRIB_VALUE_UNQUOTED;
                        parser.attribValue = c;
                      }
                      continue;
                    case S.ATTRIB_VALUE_QUOTED:
                      if (c !== parser.q) {
                        if (c === "&") {
                          parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                        } else {
                          parser.attribValue += c;
                        }
                        continue;
                      }
                      attrib(parser);
                      parser.q = "";
                      parser.state = S.ATTRIB_VALUE_CLOSED;
                      continue;
                    case S.ATTRIB_VALUE_CLOSED:
                      if (isWhitespace(c)) {
                        parser.state = S.ATTRIB;
                      } else if (c === ">") {
                        openTag(parser);
                      } else if (c === "/") {
                        parser.state = S.OPEN_TAG_SLASH;
                      } else if (isMatch(nameStart, c)) {
                        strictFail(parser, "No whitespace between attributes");
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_VALUE_UNQUOTED:
                      if (!isAttribEnd(c)) {
                        if (c === "&") {
                          parser.state = S.ATTRIB_VALUE_ENTITY_U;
                        } else {
                          parser.attribValue += c;
                        }
                        continue;
                      }
                      attrib(parser);
                      if (c === ">") {
                        openTag(parser);
                      } else {
                        parser.state = S.ATTRIB;
                      }
                      continue;
                    case S.CLOSE_TAG:
                      if (!parser.tagName) {
                        if (isWhitespace(c)) {
                          continue;
                        } else if (notMatch(nameStart, c)) {
                          if (parser.script) {
                            parser.script += "</" + c;
                            parser.state = S.SCRIPT;
                          } else {
                            strictFail(parser, "Invalid tagname in closing tag.");
                          }
                        } else {
                          parser.tagName = c;
                        }
                      } else if (c === ">") {
                        closeTag(parser);
                      } else if (isMatch(nameBody, c)) {
                        parser.tagName += c;
                      } else if (parser.script) {
                        parser.script += "</" + parser.tagName;
                        parser.tagName = "";
                        parser.state = S.SCRIPT;
                      } else {
                        if (!isWhitespace(c)) {
                          strictFail(parser, "Invalid tagname in closing tag");
                        }
                        parser.state = S.CLOSE_TAG_SAW_WHITE;
                      }
                      continue;
                    case S.CLOSE_TAG_SAW_WHITE:
                      if (isWhitespace(c)) {
                        continue;
                      }
                      if (c === ">") {
                        closeTag(parser);
                      } else {
                        strictFail(parser, "Invalid characters in closing tag");
                      }
                      continue;
                    case S.TEXT_ENTITY:
                    case S.ATTRIB_VALUE_ENTITY_Q:
                    case S.ATTRIB_VALUE_ENTITY_U:
                      var returnState;
                      var buffer2;
                      switch (parser.state) {
                        case S.TEXT_ENTITY:
                          returnState = S.TEXT;
                          buffer2 = "textNode";
                          break;
                        case S.ATTRIB_VALUE_ENTITY_Q:
                          returnState = S.ATTRIB_VALUE_QUOTED;
                          buffer2 = "attribValue";
                          break;
                        case S.ATTRIB_VALUE_ENTITY_U:
                          returnState = S.ATTRIB_VALUE_UNQUOTED;
                          buffer2 = "attribValue";
                          break;
                      }
                      if (c === ";") {
                        if (parser.opt.unparsedEntities) {
                          var parsedEntity = parseEntity(parser);
                          parser.entity = "";
                          parser.state = returnState;
                          parser.write(parsedEntity);
                        } else {
                          parser[buffer2] += parseEntity(parser);
                          parser.entity = "";
                          parser.state = returnState;
                        }
                      } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                        parser.entity += c;
                      } else {
                        strictFail(parser, "Invalid character in entity name");
                        parser[buffer2] += "&" + parser.entity + c;
                        parser.entity = "";
                        parser.state = returnState;
                      }
                      continue;
                    default: {
                      throw new Error(parser, "Unknown state: " + parser.state);
                    }
                  }
                }
                if (parser.position >= parser.bufferCheckPosition) {
                  checkBufferLength(parser);
                }
                return parser;
              }
              /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
              if (!String.fromCodePoint) {
                (function() {
                  var stringFromCharCode = String.fromCharCode;
                  var floor = Math.floor;
                  var fromCodePoint = function() {
                    var MAX_SIZE = 16384;
                    var codeUnits = [];
                    var highSurrogate;
                    var lowSurrogate;
                    var index2 = -1;
                    var length = arguments.length;
                    if (!length) {
                      return "";
                    }
                    var result = "";
                    while (++index2 < length) {
                      var codePoint = Number(arguments[index2]);
                      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                      codePoint < 0 || // not a valid Unicode code point
                      codePoint > 1114111 || // not a valid Unicode code point
                      floor(codePoint) !== codePoint) {
                        throw RangeError("Invalid code point: " + codePoint);
                      }
                      if (codePoint <= 65535) {
                        codeUnits.push(codePoint);
                      } else {
                        codePoint -= 65536;
                        highSurrogate = (codePoint >> 10) + 55296;
                        lowSurrogate = codePoint % 1024 + 56320;
                        codeUnits.push(highSurrogate, lowSurrogate);
                      }
                      if (index2 + 1 === length || codeUnits.length > MAX_SIZE) {
                        result += stringFromCharCode.apply(null, codeUnits);
                        codeUnits.length = 0;
                      }
                    }
                    return result;
                  };
                  if (Object.defineProperty) {
                    Object.defineProperty(String, "fromCodePoint", {
                      value: fromCodePoint,
                      configurable: true,
                      writable: true
                    });
                  } else {
                    String.fromCodePoint = fromCodePoint;
                  }
                })();
              }
            })(typeof exports3 === "undefined" ? this.sax = {} : exports3);
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "buffer": 103, "stream": 468, "string_decoder": 483 }], 466: [function(require2, module3, exports3) {
        var GetIntrinsic = require2("get-intrinsic");
        var define = require2("define-data-property");
        var hasDescriptors = require2("has-property-descriptors")();
        var gOPD = require2("gopd");
        var $TypeError = GetIntrinsic("%TypeError%");
        var $floor = GetIntrinsic("%Math.floor%");
        module3.exports = function setFunctionLength(fn, length) {
          if (typeof fn !== "function") {
            throw new $TypeError("`fn` is not a function");
          }
          if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
            throw new $TypeError("`length` must be a positive 32-bit integer");
          }
          var loose = arguments.length > 2 && !!arguments[2];
          var functionLengthIsConfigurable = true;
          var functionLengthIsWritable = true;
          if ("length" in fn && gOPD) {
            var desc = gOPD(fn, "length");
            if (desc && !desc.configurable) {
              functionLengthIsConfigurable = false;
            }
            if (desc && !desc.writable) {
              functionLengthIsWritable = false;
            }
          }
          if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
            if (hasDescriptors) {
              define(
                /** @type {Parameters<define>[0]} */
                fn,
                "length",
                length,
                true,
                true
              );
            } else {
              define(
                /** @type {Parameters<define>[0]} */
                fn,
                "length",
                length
              );
            }
          }
          return fn;
        };
      }, { "define-data-property": 384, "get-intrinsic": 390, "gopd": 391, "has-property-descriptors": 392 }], 467: [function(require2, module3, exports3) {
        var GetIntrinsic = require2("get-intrinsic");
        var callBound = require2("call-bind/callBound");
        var inspect = require2("object-inspect");
        var $TypeError = GetIntrinsic("%TypeError%");
        var $WeakMap = GetIntrinsic("%WeakMap%", true);
        var $Map = GetIntrinsic("%Map%", true);
        var $weakMapGet = callBound("WeakMap.prototype.get", true);
        var $weakMapSet = callBound("WeakMap.prototype.set", true);
        var $weakMapHas = callBound("WeakMap.prototype.has", true);
        var $mapGet = callBound("Map.prototype.get", true);
        var $mapSet = callBound("Map.prototype.set", true);
        var $mapHas = callBound("Map.prototype.has", true);
        var listGetNode = function(list2, key) {
          for (var prev = list2, curr; (curr = prev.next) !== null; prev = curr) {
            if (curr.key === key) {
              prev.next = curr.next;
              curr.next = list2.next;
              list2.next = curr;
              return curr;
            }
          }
        };
        var listGet = function(objects, key) {
          var node = listGetNode(objects, key);
          return node && node.value;
        };
        var listSet = function(objects, key, value) {
          var node = listGetNode(objects, key);
          if (node) {
            node.value = value;
          } else {
            objects.next = {
              // eslint-disable-line no-param-reassign
              key,
              next: objects.next,
              value
            };
          }
        };
        var listHas = function(objects, key) {
          return !!listGetNode(objects, key);
        };
        module3.exports = function getSideChannel() {
          var $wm;
          var $m;
          var $o;
          var channel = {
            assert: function(key) {
              if (!channel.has(key)) {
                throw new $TypeError("Side channel does not contain " + inspect(key));
              }
            },
            get: function(key) {
              if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) {
                  return $weakMapGet($wm, key);
                }
              } else if ($Map) {
                if ($m) {
                  return $mapGet($m, key);
                }
              } else {
                if ($o) {
                  return listGet($o, key);
                }
              }
            },
            has: function(key) {
              if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) {
                  return $weakMapHas($wm, key);
                }
              } else if ($Map) {
                if ($m) {
                  return $mapHas($m, key);
                }
              } else {
                if ($o) {
                  return listHas($o, key);
                }
              }
              return false;
            },
            set: function(key, value) {
              if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if (!$wm) {
                  $wm = new $WeakMap();
                }
                $weakMapSet($wm, key, value);
              } else if ($Map) {
                if (!$m) {
                  $m = new $Map();
                }
                $mapSet($m, key, value);
              } else {
                if (!$o) {
                  $o = { key: {}, next: null };
                }
                listSet($o, key, value);
              }
            }
          };
          return channel;
        };
      }, { "call-bind/callBound": 105, "get-intrinsic": 390, "object-inspect": 433 }], 468: [function(require2, module3, exports3) {
        module3.exports = Stream;
        var EE = require2("events").EventEmitter;
        var inherits = require2("inherits");
        inherits(Stream, EE);
        Stream.Readable = require2("readable-stream/lib/_stream_readable.js");
        Stream.Writable = require2("readable-stream/lib/_stream_writable.js");
        Stream.Duplex = require2("readable-stream/lib/_stream_duplex.js");
        Stream.Transform = require2("readable-stream/lib/_stream_transform.js");
        Stream.PassThrough = require2("readable-stream/lib/_stream_passthrough.js");
        Stream.finished = require2("readable-stream/lib/internal/streams/end-of-stream.js");
        Stream.pipeline = require2("readable-stream/lib/internal/streams/pipeline.js");
        Stream.Stream = Stream;
        function Stream() {
          EE.call(this);
        }
        Stream.prototype.pipe = function(dest, options) {
          var source = this;
          function ondata(chunk) {
            if (dest.writable) {
              if (false === dest.write(chunk) && source.pause) {
                source.pause();
              }
            }
          }
          source.on("data", ondata);
          function ondrain() {
            if (source.readable && source.resume) {
              source.resume();
            }
          }
          dest.on("drain", ondrain);
          if (!dest._isStdio && (!options || options.end !== false)) {
            source.on("end", onend);
            source.on("close", onclose);
          }
          var didOnEnd = false;
          function onend() {
            if (didOnEnd)
              return;
            didOnEnd = true;
            dest.end();
          }
          function onclose() {
            if (didOnEnd)
              return;
            didOnEnd = true;
            if (typeof dest.destroy === "function")
              dest.destroy();
          }
          function onerror(er) {
            cleanup();
            if (EE.listenerCount(this, "error") === 0) {
              throw er;
            }
          }
          source.on("error", onerror);
          dest.on("error", onerror);
          function cleanup() {
            source.removeListener("data", ondata);
            dest.removeListener("drain", ondrain);
            source.removeListener("end", onend);
            source.removeListener("close", onclose);
            source.removeListener("error", onerror);
            dest.removeListener("error", onerror);
            source.removeListener("end", cleanup);
            source.removeListener("close", cleanup);
            dest.removeListener("close", cleanup);
          }
          source.on("end", cleanup);
          source.on("close", cleanup);
          dest.on("close", cleanup);
          dest.emit("pipe", source);
          return dest;
        };
      }, { "events": 386, "inherits": 407, "readable-stream/lib/_stream_duplex.js": 470, "readable-stream/lib/_stream_passthrough.js": 471, "readable-stream/lib/_stream_readable.js": 472, "readable-stream/lib/_stream_transform.js": 473, "readable-stream/lib/_stream_writable.js": 474, "readable-stream/lib/internal/streams/end-of-stream.js": 478, "readable-stream/lib/internal/streams/pipeline.js": 480 }], 469: [function(require2, module3, exports3) {
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var codes = {};
        function createErrorType(code, message, Base) {
          if (!Base) {
            Base = Error;
          }
          function getMessage(arg1, arg2, arg3) {
            if (typeof message === "string") {
              return message;
            } else {
              return message(arg1, arg2, arg3);
            }
          }
          var NodeError = /* @__PURE__ */ function(_Base) {
            _inheritsLoose(NodeError2, _Base);
            function NodeError2(arg1, arg2, arg3) {
              return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
            }
            return NodeError2;
          }(Base);
          NodeError.prototype.name = Base.name;
          NodeError.prototype.code = code;
          codes[code] = NodeError;
        }
        function oneOf(expected, thing) {
          if (Array.isArray(expected)) {
            var len = expected.length;
            expected = expected.map(function(i) {
              return String(i);
            });
            if (len > 2) {
              return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
            } else if (len === 2) {
              return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
            } else {
              return "of ".concat(thing, " ").concat(expected[0]);
            }
          } else {
            return "of ".concat(thing, " ").concat(String(expected));
          }
        }
        function startsWith2(str, search, pos) {
          return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
        }
        function endsWith(str, search, this_len) {
          if (this_len === void 0 || this_len > str.length) {
            this_len = str.length;
          }
          return str.substring(this_len - search.length, this_len) === search;
        }
        function includes(str, search, start) {
          if (typeof start !== "number") {
            start = 0;
          }
          if (start + search.length > str.length) {
            return false;
          } else {
            return str.indexOf(search, start) !== -1;
          }
        }
        createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
          return 'The value "' + value + '" is invalid for option "' + name + '"';
        }, TypeError);
        createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
          var determiner;
          if (typeof expected === "string" && startsWith2(expected, "not ")) {
            determiner = "must not be";
            expected = expected.replace(/^not /, "");
          } else {
            determiner = "must be";
          }
          var msg;
          if (endsWith(name, " argument")) {
            msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          } else {
            var type = includes(name, ".") ? "property" : "argument";
            msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          }
          msg += ". Received type ".concat(typeof actual);
          return msg;
        }, TypeError);
        createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
        createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
          return "The " + name + " method is not implemented";
        });
        createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
        createErrorType("ERR_STREAM_DESTROYED", function(name) {
          return "Cannot call " + name + " after a stream was destroyed";
        });
        createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
        createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
        createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
        createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
        createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
          return "Unknown encoding: " + arg;
        }, TypeError);
        createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
        module3.exports.codes = codes;
      }, {}], 470: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            var objectKeys2 = Object.keys || function(obj) {
              var keys2 = [];
              for (var key in obj)
                keys2.push(key);
              return keys2;
            };
            module3.exports = Duplex;
            var Readable = require2("./_stream_readable");
            var Writable = require2("./_stream_writable");
            require2("inherits")(Duplex, Readable);
            {
              var keys = objectKeys2(Writable.prototype);
              for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method])
                  Duplex.prototype[method] = Writable.prototype[method];
              }
            }
            function Duplex(options) {
              if (!(this instanceof Duplex))
                return new Duplex(options);
              Readable.call(this, options);
              Writable.call(this, options);
              this.allowHalfOpen = true;
              if (options) {
                if (options.readable === false)
                  this.readable = false;
                if (options.writable === false)
                  this.writable = false;
                if (options.allowHalfOpen === false) {
                  this.allowHalfOpen = false;
                  this.once("end", onend);
                }
              }
            }
            Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._writableState.highWaterMark;
              }
            });
            Object.defineProperty(Duplex.prototype, "writableBuffer", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            Object.defineProperty(Duplex.prototype, "writableLength", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._writableState.length;
              }
            });
            function onend() {
              if (this._writableState.ended)
                return;
              process.nextTick(onEndNT, this);
            }
            function onEndNT(self2) {
              self2.end();
            }
            Object.defineProperty(Duplex.prototype, "destroyed", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                if (this._readableState === void 0 || this._writableState === void 0) {
                  return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
              },
              set: function set2(value) {
                if (this._readableState === void 0 || this._writableState === void 0) {
                  return;
                }
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
              }
            });
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./_stream_readable": 472, "./_stream_writable": 474, "_process": 538, "inherits": 407 }], 471: [function(require2, module3, exports3) {
        module3.exports = PassThrough;
        var Transform = require2("./_stream_transform");
        require2("inherits")(PassThrough, Transform);
        function PassThrough(options) {
          if (!(this instanceof PassThrough))
            return new PassThrough(options);
          Transform.call(this, options);
        }
        PassThrough.prototype._transform = function(chunk, encoding, cb) {
          cb(null, chunk);
        };
      }, { "./_stream_transform": 473, "inherits": 407 }], 472: [function(require2, module3, exports3) {
        (function(process, global3) {
          (function() {
            module3.exports = Readable;
            var Duplex;
            Readable.ReadableState = ReadableState;
            require2("events").EventEmitter;
            var EElistenerCount = function EElistenerCount2(emitter, type) {
              return emitter.listeners(type).length;
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("buffer").Buffer;
            var OurUint8Array = (typeof global3 !== "undefined" ? global3 : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var debugUtil = require2("util");
            var debug;
            if (debugUtil && debugUtil.debuglog) {
              debug = debugUtil.debuglog("stream");
            } else {
              debug = function debug2() {
              };
            }
            var BufferList = require2("./internal/streams/buffer_list");
            var destroyImpl = require2("./internal/streams/destroy");
            var _require = require2("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require2("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
            var StringDecoder;
            var createReadableStreamAsyncIterator;
            var from;
            require2("inherits")(Readable, Stream);
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
            function prependListener(emitter, event, fn) {
              if (typeof emitter.prependListener === "function")
                return emitter.prependListener(event, fn);
              if (!emitter._events || !emitter._events[event])
                emitter.on(event, fn);
              else if (Array.isArray(emitter._events[event]))
                emitter._events[event].unshift(fn);
              else
                emitter._events[event] = [fn, emitter._events[event]];
            }
            function ReadableState(options, stream, isDuplex) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              if (typeof isDuplex !== "boolean")
                isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.readableObjectMode;
              this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;
              this.sync = true;
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;
              this.paused = true;
              this.emitClose = options.emitClose !== false;
              this.autoDestroy = !!options.autoDestroy;
              this.destroyed = false;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.awaitDrain = 0;
              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;
              if (options.encoding) {
                if (!StringDecoder)
                  StringDecoder = require2("string_decoder/").StringDecoder;
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              if (!(this instanceof Readable))
                return new Readable(options);
              var isDuplex = this instanceof Duplex;
              this._readableState = new ReadableState(options, this, isDuplex);
              this.readable = true;
              if (options) {
                if (typeof options.read === "function")
                  this._read = options.read;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
              }
              Stream.call(this);
            }
            Object.defineProperty(Readable.prototype, "destroyed", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                if (this._readableState === void 0) {
                  return false;
                }
                return this._readableState.destroyed;
              },
              set: function set2(value) {
                if (!this._readableState) {
                  return;
                }
                this._readableState.destroyed = value;
              }
            });
            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function(err, cb) {
              cb(err);
            };
            Readable.prototype.push = function(chunk, encoding) {
              var state = this._readableState;
              var skipChunkCheck;
              if (!state.objectMode) {
                if (typeof chunk === "string") {
                  encoding = encoding || state.defaultEncoding;
                  if (encoding !== state.encoding) {
                    chunk = Buffer2.from(chunk, encoding);
                    encoding = "";
                  }
                  skipChunkCheck = true;
                }
              } else {
                skipChunkCheck = true;
              }
              return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };
            Readable.prototype.unshift = function(chunk) {
              return readableAddChunk(this, chunk, null, true, false);
            };
            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
              debug("readableAddChunk", chunk);
              var state = stream._readableState;
              if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else {
                var er;
                if (!skipChunkCheck)
                  er = chunkInvalid(state, chunk);
                if (er) {
                  errorOrDestroy(stream, er);
                } else if (state.objectMode || chunk && chunk.length > 0) {
                  if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
                    chunk = _uint8ArrayToBuffer(chunk);
                  }
                  if (addToFront) {
                    if (state.endEmitted)
                      errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                    else
                      addChunk(stream, state, chunk, true);
                  } else if (state.ended) {
                    errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                  } else if (state.destroyed) {
                    return false;
                  } else {
                    state.reading = false;
                    if (state.decoder && !encoding) {
                      chunk = state.decoder.write(chunk);
                      if (state.objectMode || chunk.length !== 0)
                        addChunk(stream, state, chunk, false);
                      else
                        maybeReadMore(stream, state);
                    } else {
                      addChunk(stream, state, chunk, false);
                    }
                  }
                } else if (!addToFront) {
                  state.reading = false;
                  maybeReadMore(stream, state);
                }
              }
              return !state.ended && (state.length < state.highWaterMark || state.length === 0);
            }
            function addChunk(stream, state, chunk, addToFront) {
              if (state.flowing && state.length === 0 && !state.sync) {
                state.awaitDrain = 0;
                stream.emit("data", chunk);
              } else {
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront)
                  state.buffer.unshift(chunk);
                else
                  state.buffer.push(chunk);
                if (state.needReadable)
                  emitReadable(stream);
              }
              maybeReadMore(stream, state);
            }
            function chunkInvalid(state, chunk) {
              var er;
              if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
              }
              return er;
            }
            Readable.prototype.isPaused = function() {
              return this._readableState.flowing === false;
            };
            Readable.prototype.setEncoding = function(enc) {
              if (!StringDecoder)
                StringDecoder = require2("string_decoder/").StringDecoder;
              var decoder = new StringDecoder(enc);
              this._readableState.decoder = decoder;
              this._readableState.encoding = this._readableState.decoder.encoding;
              var p2 = this._readableState.buffer.head;
              var content = "";
              while (p2 !== null) {
                content += decoder.write(p2.data);
                p2 = p2.next;
              }
              this._readableState.buffer.clear();
              if (content !== "")
                this._readableState.buffer.push(content);
              this._readableState.length = content.length;
              return this;
            };
            var MAX_HWM = 1073741824;
            function computeNewHighWaterMark(n2) {
              if (n2 >= MAX_HWM) {
                n2 = MAX_HWM;
              } else {
                n2--;
                n2 |= n2 >>> 1;
                n2 |= n2 >>> 2;
                n2 |= n2 >>> 4;
                n2 |= n2 >>> 8;
                n2 |= n2 >>> 16;
                n2++;
              }
              return n2;
            }
            function howMuchToRead(n2, state) {
              if (n2 <= 0 || state.length === 0 && state.ended)
                return 0;
              if (state.objectMode)
                return 1;
              if (n2 !== n2) {
                if (state.flowing && state.length)
                  return state.buffer.head.data.length;
                else
                  return state.length;
              }
              if (n2 > state.highWaterMark)
                state.highWaterMark = computeNewHighWaterMark(n2);
              if (n2 <= state.length)
                return n2;
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }
            Readable.prototype.read = function(n2) {
              debug("read", n2);
              n2 = parseInt(n2, 10);
              var state = this._readableState;
              var nOrig = n2;
              if (n2 !== 0)
                state.emittedReadable = false;
              if (n2 === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
                debug("read: emitReadable", state.length, state.ended);
                if (state.length === 0 && state.ended)
                  endReadable(this);
                else
                  emitReadable(this);
                return null;
              }
              n2 = howMuchToRead(n2, state);
              if (n2 === 0 && state.ended) {
                if (state.length === 0)
                  endReadable(this);
                return null;
              }
              var doRead = state.needReadable;
              debug("need readable", doRead);
              if (state.length === 0 || state.length - n2 < state.highWaterMark) {
                doRead = true;
                debug("length less than watermark", doRead);
              }
              if (state.ended || state.reading) {
                doRead = false;
                debug("reading or ended", doRead);
              } else if (doRead) {
                debug("do read");
                state.reading = true;
                state.sync = true;
                if (state.length === 0)
                  state.needReadable = true;
                this._read(state.highWaterMark);
                state.sync = false;
                if (!state.reading)
                  n2 = howMuchToRead(nOrig, state);
              }
              var ret;
              if (n2 > 0)
                ret = fromList(n2, state);
              else
                ret = null;
              if (ret === null) {
                state.needReadable = state.length <= state.highWaterMark;
                n2 = 0;
              } else {
                state.length -= n2;
                state.awaitDrain = 0;
              }
              if (state.length === 0) {
                if (!state.ended)
                  state.needReadable = true;
                if (nOrig !== n2 && state.ended)
                  endReadable(this);
              }
              if (ret !== null)
                this.emit("data", ret);
              return ret;
            };
            function onEofChunk(stream, state) {
              debug("onEofChunk");
              if (state.ended)
                return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;
              if (state.sync) {
                emitReadable(stream);
              } else {
                state.needReadable = false;
                if (!state.emittedReadable) {
                  state.emittedReadable = true;
                  emitReadable_(stream);
                }
              }
            }
            function emitReadable(stream) {
              var state = stream._readableState;
              debug("emitReadable", state.needReadable, state.emittedReadable);
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug("emitReadable", state.flowing);
                state.emittedReadable = true;
                process.nextTick(emitReadable_, stream);
              }
            }
            function emitReadable_(stream) {
              var state = stream._readableState;
              debug("emitReadable_", state.destroyed, state.length, state.ended);
              if (!state.destroyed && (state.length || state.ended)) {
                stream.emit("readable");
                state.emittedReadable = false;
              }
              state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
              flow(stream);
            }
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                process.nextTick(maybeReadMore_, stream, state);
              }
            }
            function maybeReadMore_(stream, state) {
              while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
                var len = state.length;
                debug("maybeReadMore read 0");
                stream.read(0);
                if (len === state.length)
                  break;
              }
              state.readingMore = false;
            }
            Readable.prototype._read = function(n2) {
              errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
            };
            Readable.prototype.pipe = function(dest, pipeOpts) {
              var src = this;
              var state = this._readableState;
              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
              var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
              var endFn = doEnd ? onend : unpipe;
              if (state.endEmitted)
                process.nextTick(endFn);
              else
                src.once("end", endFn);
              dest.on("unpipe", onunpipe);
              function onunpipe(readable, unpipeInfo) {
                debug("onunpipe");
                if (readable === src) {
                  if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                    unpipeInfo.hasUnpiped = true;
                    cleanup();
                  }
                }
              }
              function onend() {
                debug("onend");
                dest.end();
              }
              var ondrain = pipeOnDrain(src);
              dest.on("drain", ondrain);
              var cleanedUp = false;
              function cleanup() {
                debug("cleanup");
                dest.removeListener("close", onclose);
                dest.removeListener("finish", onfinish);
                dest.removeListener("drain", ondrain);
                dest.removeListener("error", onerror);
                dest.removeListener("unpipe", onunpipe);
                src.removeListener("end", onend);
                src.removeListener("end", unpipe);
                src.removeListener("data", ondata);
                cleanedUp = true;
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                  ondrain();
              }
              src.on("data", ondata);
              function ondata(chunk) {
                debug("ondata");
                var ret = dest.write(chunk);
                debug("dest.write", ret);
                if (ret === false) {
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug("false write response, pause", state.awaitDrain);
                    state.awaitDrain++;
                  }
                  src.pause();
                }
              }
              function onerror(er) {
                debug("onerror", er);
                unpipe();
                dest.removeListener("error", onerror);
                if (EElistenerCount(dest, "error") === 0)
                  errorOrDestroy(dest, er);
              }
              prependListener(dest, "error", onerror);
              function onclose() {
                dest.removeListener("finish", onfinish);
                unpipe();
              }
              dest.once("close", onclose);
              function onfinish() {
                debug("onfinish");
                dest.removeListener("close", onclose);
                unpipe();
              }
              dest.once("finish", onfinish);
              function unpipe() {
                debug("unpipe");
                src.unpipe(dest);
              }
              dest.emit("pipe", src);
              if (!state.flowing) {
                debug("pipe resume");
                src.resume();
              }
              return dest;
            };
            function pipeOnDrain(src) {
              return function pipeOnDrainFunctionResult() {
                var state = src._readableState;
                debug("pipeOnDrain", state.awaitDrain);
                if (state.awaitDrain)
                  state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }
            Readable.prototype.unpipe = function(dest) {
              var state = this._readableState;
              var unpipeInfo = {
                hasUnpiped: false
              };
              if (state.pipesCount === 0)
                return this;
              if (state.pipesCount === 1) {
                if (dest && dest !== state.pipes)
                  return this;
                if (!dest)
                  dest = state.pipes;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest)
                  dest.emit("unpipe", this, unpipeInfo);
                return this;
              }
              if (!dest) {
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                for (var i = 0; i < len; i++)
                  dests[i].emit("unpipe", this, {
                    hasUnpiped: false
                  });
                return this;
              }
              var index2 = indexOf(state.pipes, dest);
              if (index2 === -1)
                return this;
              state.pipes.splice(index2, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1)
                state.pipes = state.pipes[0];
              dest.emit("unpipe", this, unpipeInfo);
              return this;
            };
            Readable.prototype.on = function(ev, fn) {
              var res = Stream.prototype.on.call(this, ev, fn);
              var state = this._readableState;
              if (ev === "data") {
                state.readableListening = this.listenerCount("readable") > 0;
                if (state.flowing !== false)
                  this.resume();
              } else if (ev === "readable") {
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.flowing = false;
                  state.emittedReadable = false;
                  debug("on readable", state.length, state.reading);
                  if (state.length) {
                    emitReadable(this);
                  } else if (!state.reading) {
                    process.nextTick(nReadingNextTick, this);
                  }
                }
              }
              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            Readable.prototype.removeListener = function(ev, fn) {
              var res = Stream.prototype.removeListener.call(this, ev, fn);
              if (ev === "readable") {
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            Readable.prototype.removeAllListeners = function(ev) {
              var res = Stream.prototype.removeAllListeners.apply(this, arguments);
              if (ev === "readable" || ev === void 0) {
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            function updateReadableListening(self2) {
              var state = self2._readableState;
              state.readableListening = self2.listenerCount("readable") > 0;
              if (state.resumeScheduled && !state.paused) {
                state.flowing = true;
              } else if (self2.listenerCount("data") > 0) {
                self2.resume();
              }
            }
            function nReadingNextTick(self2) {
              debug("readable nexttick read 0");
              self2.read(0);
            }
            Readable.prototype.resume = function() {
              var state = this._readableState;
              if (!state.flowing) {
                debug("resume");
                state.flowing = !state.readableListening;
                resume(this, state);
              }
              state.paused = false;
              return this;
            };
            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                process.nextTick(resume_, stream, state);
              }
            }
            function resume_(stream, state) {
              debug("resume", state.reading);
              if (!state.reading) {
                stream.read(0);
              }
              state.resumeScheduled = false;
              stream.emit("resume");
              flow(stream);
              if (state.flowing && !state.reading)
                stream.read(0);
            }
            Readable.prototype.pause = function() {
              debug("call pause flowing=%j", this._readableState.flowing);
              if (this._readableState.flowing !== false) {
                debug("pause");
                this._readableState.flowing = false;
                this.emit("pause");
              }
              this._readableState.paused = true;
              return this;
            };
            function flow(stream) {
              var state = stream._readableState;
              debug("flow", state.flowing);
              while (state.flowing && stream.read() !== null)
                ;
            }
            Readable.prototype.wrap = function(stream) {
              var _this = this;
              var state = this._readableState;
              var paused = false;
              stream.on("end", function() {
                debug("wrapped end");
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length)
                    _this.push(chunk);
                }
                _this.push(null);
              });
              stream.on("data", function(chunk) {
                debug("wrapped data");
                if (state.decoder)
                  chunk = state.decoder.write(chunk);
                if (state.objectMode && (chunk === null || chunk === void 0))
                  return;
                else if (!state.objectMode && (!chunk || !chunk.length))
                  return;
                var ret = _this.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });
              for (var i in stream) {
                if (this[i] === void 0 && typeof stream[i] === "function") {
                  this[i] = /* @__PURE__ */ function methodWrap(method) {
                    return function methodWrapReturnFunction() {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }
              for (var n2 = 0; n2 < kProxyEvents.length; n2++) {
                stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
              }
              this._read = function(n3) {
                debug("wrapped _read", n3);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };
              return this;
            };
            if (typeof Symbol === "function") {
              Readable.prototype[Symbol.asyncIterator] = function() {
                if (createReadableStreamAsyncIterator === void 0) {
                  createReadableStreamAsyncIterator = require2("./internal/streams/async_iterator");
                }
                return createReadableStreamAsyncIterator(this);
              };
            }
            Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._readableState.highWaterMark;
              }
            });
            Object.defineProperty(Readable.prototype, "readableBuffer", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._readableState && this._readableState.buffer;
              }
            });
            Object.defineProperty(Readable.prototype, "readableFlowing", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._readableState.flowing;
              },
              set: function set2(state) {
                if (this._readableState) {
                  this._readableState.flowing = state;
                }
              }
            });
            Readable._fromList = fromList;
            Object.defineProperty(Readable.prototype, "readableLength", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._readableState.length;
              }
            });
            function fromList(n2, state) {
              if (state.length === 0)
                return null;
              var ret;
              if (state.objectMode)
                ret = state.buffer.shift();
              else if (!n2 || n2 >= state.length) {
                if (state.decoder)
                  ret = state.buffer.join("");
                else if (state.buffer.length === 1)
                  ret = state.buffer.first();
                else
                  ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                ret = state.buffer.consume(n2, state.decoder);
              }
              return ret;
            }
            function endReadable(stream) {
              var state = stream._readableState;
              debug("endReadable", state.endEmitted);
              if (!state.endEmitted) {
                state.ended = true;
                process.nextTick(endReadableNT, state, stream);
              }
            }
            function endReadableNT(state, stream) {
              debug("endReadableNT", state.endEmitted, state.length);
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit("end");
                if (state.autoDestroy) {
                  var wState = stream._writableState;
                  if (!wState || wState.autoDestroy && wState.finished) {
                    stream.destroy();
                  }
                }
              }
            }
            if (typeof Symbol === "function") {
              Readable.from = function(iterable, opts) {
                if (from === void 0) {
                  from = require2("./internal/streams/from");
                }
                return from(Readable, iterable, opts);
              };
            }
            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x)
                  return i;
              }
              return -1;
            }
          }).call(this);
        }).call(this, require2("_process"), typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "../errors": 469, "./_stream_duplex": 470, "./internal/streams/async_iterator": 475, "./internal/streams/buffer_list": 476, "./internal/streams/destroy": 477, "./internal/streams/from": 479, "./internal/streams/state": 481, "./internal/streams/stream": 482, "_process": 538, "buffer": 103, "events": 386, "inherits": 407, "string_decoder/": 483, "util": 102 }], 473: [function(require2, module3, exports3) {
        module3.exports = Transform;
        var _require$codes = require2("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
        var Duplex = require2("./_stream_duplex");
        require2("inherits")(Transform, Duplex);
        function afterTransform(er, data) {
          var ts = this._transformState;
          ts.transforming = false;
          var cb = ts.writecb;
          if (cb === null) {
            return this.emit("error", new ERR_MULTIPLE_CALLBACK());
          }
          ts.writechunk = null;
          ts.writecb = null;
          if (data != null)
            this.push(data);
          cb(er);
          var rs = this._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }
        function Transform(options) {
          if (!(this instanceof Transform))
            return new Transform(options);
          Duplex.call(this, options);
          this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
          };
          this._readableState.needReadable = true;
          this._readableState.sync = false;
          if (options) {
            if (typeof options.transform === "function")
              this._transform = options.transform;
            if (typeof options.flush === "function")
              this._flush = options.flush;
          }
          this.on("prefinish", prefinish);
        }
        function prefinish() {
          var _this = this;
          if (typeof this._flush === "function" && !this._readableState.destroyed) {
            this._flush(function(er, data) {
              done(_this, er, data);
            });
          } else {
            done(this, null, null);
          }
        }
        Transform.prototype.push = function(chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };
        Transform.prototype._transform = function(chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
        };
        Transform.prototype._write = function(chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
              this._read(rs.highWaterMark);
          }
        };
        Transform.prototype._read = function(n2) {
          var ts = this._transformState;
          if (ts.writechunk !== null && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            ts.needTransform = true;
          }
        };
        Transform.prototype._destroy = function(err, cb) {
          Duplex.prototype._destroy.call(this, err, function(err2) {
            cb(err2);
          });
        };
        function done(stream, er, data) {
          if (er)
            return stream.emit("error", er);
          if (data != null)
            stream.push(data);
          if (stream._writableState.length)
            throw new ERR_TRANSFORM_WITH_LENGTH_0();
          if (stream._transformState.transforming)
            throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
          return stream.push(null);
        }
      }, { "../errors": 469, "./_stream_duplex": 470, "inherits": 407 }], 474: [function(require2, module3, exports3) {
        (function(process, global3) {
          (function() {
            module3.exports = Writable;
            function CorkedRequest(state) {
              var _this = this;
              this.next = null;
              this.entry = null;
              this.finish = function() {
                onCorkedFinish(_this, state);
              };
            }
            var Duplex;
            Writable.WritableState = WritableState;
            var internalUtil = {
              deprecate: require2("util-deprecate")
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("buffer").Buffer;
            var OurUint8Array = (typeof global3 !== "undefined" ? global3 : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var destroyImpl = require2("./internal/streams/destroy");
            var _require = require2("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require2("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            require2("inherits")(Writable, Stream);
            function nop() {
            }
            function WritableState(options, stream, isDuplex) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              if (typeof isDuplex !== "boolean")
                isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.writableObjectMode;
              this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
              this.finalCalled = false;
              this.needDrain = false;
              this.ending = false;
              this.ended = false;
              this.finished = false;
              this.destroyed = false;
              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.length = 0;
              this.writing = false;
              this.corked = 0;
              this.sync = true;
              this.bufferProcessing = false;
              this.onwrite = function(er) {
                onwrite(stream, er);
              };
              this.writecb = null;
              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null;
              this.pendingcb = 0;
              this.prefinished = false;
              this.errorEmitted = false;
              this.emitClose = options.emitClose !== false;
              this.autoDestroy = !!options.autoDestroy;
              this.bufferedRequestCount = 0;
              this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            (function() {
              try {
                Object.defineProperty(WritableState.prototype, "buffer", {
                  get: internalUtil.deprecate(function writableStateBufferGetter() {
                    return this.getBuffer();
                  }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                });
              } catch (_) {
              }
            })();
            var realHasInstance;
            if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
              realHasInstance = Function.prototype[Symbol.hasInstance];
              Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function value(object) {
                  if (realHasInstance.call(this, object))
                    return true;
                  if (this !== Writable)
                    return false;
                  return object && object._writableState instanceof WritableState;
                }
              });
            } else {
              realHasInstance = function realHasInstance2(object) {
                return object instanceof this;
              };
            }
            function Writable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              var isDuplex = this instanceof Duplex;
              if (!isDuplex && !realHasInstance.call(Writable, this))
                return new Writable(options);
              this._writableState = new WritableState(options, this, isDuplex);
              this.writable = true;
              if (options) {
                if (typeof options.write === "function")
                  this._write = options.write;
                if (typeof options.writev === "function")
                  this._writev = options.writev;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
                if (typeof options.final === "function")
                  this._final = options.final;
              }
              Stream.call(this);
            }
            Writable.prototype.pipe = function() {
              errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
            };
            function writeAfterEnd(stream, cb) {
              var er = new ERR_STREAM_WRITE_AFTER_END();
              errorOrDestroy(stream, er);
              process.nextTick(cb, er);
            }
            function validChunk(stream, state, chunk, cb) {
              var er;
              if (chunk === null) {
                er = new ERR_STREAM_NULL_VALUES();
              } else if (typeof chunk !== "string" && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
              }
              if (er) {
                errorOrDestroy(stream, er);
                process.nextTick(cb, er);
                return false;
              }
              return true;
            }
            Writable.prototype.write = function(chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;
              var isBuf = !state.objectMode && _isUint8Array(chunk);
              if (isBuf && !Buffer2.isBuffer(chunk)) {
                chunk = _uint8ArrayToBuffer(chunk);
              }
              if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (isBuf)
                encoding = "buffer";
              else if (!encoding)
                encoding = state.defaultEncoding;
              if (typeof cb !== "function")
                cb = nop;
              if (state.ending)
                writeAfterEnd(this, cb);
              else if (isBuf || validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
              }
              return ret;
            };
            Writable.prototype.cork = function() {
              this._writableState.corked++;
            };
            Writable.prototype.uncork = function() {
              var state = this._writableState;
              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
                  clearBuffer(this, state);
              }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              if (typeof encoding === "string")
                encoding = encoding.toLowerCase();
              if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                throw new ERR_UNKNOWN_ENCODING(encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };
            Object.defineProperty(Writable.prototype, "writableBuffer", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                chunk = Buffer2.from(chunk, encoding);
              }
              return chunk;
            }
            Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._writableState.highWaterMark;
              }
            });
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
              if (!isBuf) {
                var newChunk = decodeChunk(state, chunk, encoding);
                if (chunk !== newChunk) {
                  isBuf = true;
                  encoding = "buffer";
                  chunk = newChunk;
                }
              }
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret = state.length < state.highWaterMark;
              if (!ret)
                state.needDrain = true;
              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = {
                  chunk,
                  encoding,
                  isBuf,
                  callback: cb,
                  next: null
                };
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }
              return ret;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (state.destroyed)
                state.onwrite(new ERR_STREAM_DESTROYED("write"));
              else if (writev)
                stream._writev(chunk, state.onwrite);
              else
                stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }
            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) {
                process.nextTick(cb, er);
                process.nextTick(finishMaybe, stream, state);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
              } else {
                cb(er);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
                finishMaybe(stream, state);
              }
            }
            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }
            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              if (typeof cb !== "function")
                throw new ERR_MULTIPLE_CALLBACK();
              onwriteStateUpdate(state);
              if (er)
                onwriteError(stream, state, sync, er, cb);
              else {
                var finished = needFinish(state) || stream.destroyed;
                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }
                if (sync) {
                  process.nextTick(afterWrite, stream, state, finished, cb);
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }
            function afterWrite(stream, state, finished, cb) {
              if (!finished)
                onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit("drain");
              }
            }
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;
              if (stream._writev && entry && entry.next) {
                var l = state.bufferedRequestCount;
                var buffer2 = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;
                var allBuffers = true;
                while (entry) {
                  buffer2[count] = entry;
                  if (!entry.isBuf)
                    allBuffers = false;
                  entry = entry.next;
                  count += 1;
                }
                buffer2.allBuffers = allBuffers;
                doWrite(stream, state, true, state.length, buffer2, "", holder.finish);
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
                state.bufferedRequestCount = 0;
              } else {
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  state.bufferedRequestCount--;
                  if (state.writing) {
                    break;
                  }
                }
                if (entry === null)
                  state.lastBufferedRequest = null;
              }
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }
            Writable.prototype._write = function(chunk, encoding, cb) {
              cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(chunk, encoding, cb) {
              var state = this._writableState;
              if (typeof chunk === "function") {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (chunk !== null && chunk !== void 0)
                this.write(chunk, encoding);
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }
              if (!state.ending)
                endWritable(this, state, cb);
              return this;
            };
            Object.defineProperty(Writable.prototype, "writableLength", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                return this._writableState.length;
              }
            });
            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
              stream._final(function(err) {
                state.pendingcb--;
                if (err) {
                  errorOrDestroy(stream, err);
                }
                state.prefinished = true;
                stream.emit("prefinish");
                finishMaybe(stream, state);
              });
            }
            function prefinish(stream, state) {
              if (!state.prefinished && !state.finalCalled) {
                if (typeof stream._final === "function" && !state.destroyed) {
                  state.pendingcb++;
                  state.finalCalled = true;
                  process.nextTick(callFinal, stream, state);
                } else {
                  state.prefinished = true;
                  stream.emit("prefinish");
                }
              }
            }
            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                prefinish(stream, state);
                if (state.pendingcb === 0) {
                  state.finished = true;
                  stream.emit("finish");
                  if (state.autoDestroy) {
                    var rState = stream._readableState;
                    if (!rState || rState.autoDestroy && rState.endEmitted) {
                      stream.destroy();
                    }
                  }
                }
              }
              return need;
            }
            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished)
                  process.nextTick(cb);
                else
                  stream.once("finish", cb);
              }
              state.ended = true;
              stream.writable = false;
            }
            function onCorkedFinish(corkReq, state, err) {
              var entry = corkReq.entry;
              corkReq.entry = null;
              while (entry) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(err);
                entry = entry.next;
              }
              state.corkedRequestsFree.next = corkReq;
            }
            Object.defineProperty(Writable.prototype, "destroyed", {
              // making it explicit this property is not enumerable
              // because otherwise some prototype manipulation in
              // userland will fail
              enumerable: false,
              get: function get2() {
                if (this._writableState === void 0) {
                  return false;
                }
                return this._writableState.destroyed;
              },
              set: function set2(value) {
                if (!this._writableState) {
                  return;
                }
                this._writableState.destroyed = value;
              }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function(err, cb) {
              cb(err);
            };
          }).call(this);
        }).call(this, require2("_process"), typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "../errors": 469, "./_stream_duplex": 470, "./internal/streams/destroy": 477, "./internal/streams/state": 481, "./internal/streams/stream": 482, "_process": 538, "buffer": 103, "inherits": 407, "util-deprecate": 486 }], 475: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            var _Object$setPrototypeO;
            function _defineProperty(obj, key, value) {
              key = _toPropertyKey(key);
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _toPropertyKey(arg) {
              var key = _toPrimitive(arg, "string");
              return typeof key === "symbol" ? key : String(key);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            var finished = require2("./end-of-stream");
            var kLastResolve = Symbol("lastResolve");
            var kLastReject = Symbol("lastReject");
            var kError = Symbol("error");
            var kEnded = Symbol("ended");
            var kLastPromise = Symbol("lastPromise");
            var kHandlePromise = Symbol("handlePromise");
            var kStream = Symbol("stream");
            function createIterResult(value, done) {
              return {
                value,
                done
              };
            }
            function readAndResolve(iter) {
              var resolve2 = iter[kLastResolve];
              if (resolve2 !== null) {
                var data = iter[kStream].read();
                if (data !== null) {
                  iter[kLastPromise] = null;
                  iter[kLastResolve] = null;
                  iter[kLastReject] = null;
                  resolve2(createIterResult(data, false));
                }
              }
            }
            function onReadable(iter) {
              process.nextTick(readAndResolve, iter);
            }
            function wrapForNext(lastPromise, iter) {
              return function(resolve2, reject) {
                lastPromise.then(function() {
                  if (iter[kEnded]) {
                    resolve2(createIterResult(void 0, true));
                    return;
                  }
                  iter[kHandlePromise](resolve2, reject);
                }, reject);
              };
            }
            var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
            });
            var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
              get stream() {
                return this[kStream];
              },
              next: function next() {
                var _this = this;
                var error = this[kError];
                if (error !== null) {
                  return Promise.reject(error);
                }
                if (this[kEnded]) {
                  return Promise.resolve(createIterResult(void 0, true));
                }
                if (this[kStream].destroyed) {
                  return new Promise(function(resolve2, reject) {
                    process.nextTick(function() {
                      if (_this[kError]) {
                        reject(_this[kError]);
                      } else {
                        resolve2(createIterResult(void 0, true));
                      }
                    });
                  });
                }
                var lastPromise = this[kLastPromise];
                var promise;
                if (lastPromise) {
                  promise = new Promise(wrapForNext(lastPromise, this));
                } else {
                  var data = this[kStream].read();
                  if (data !== null) {
                    return Promise.resolve(createIterResult(data, false));
                  }
                  promise = new Promise(this[kHandlePromise]);
                }
                this[kLastPromise] = promise;
                return promise;
              }
            }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
              return this;
            }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
              var _this2 = this;
              return new Promise(function(resolve2, reject) {
                _this2[kStream].destroy(null, function(err) {
                  if (err) {
                    reject(err);
                    return;
                  }
                  resolve2(createIterResult(void 0, true));
                });
              });
            }), _Object$setPrototypeO), AsyncIteratorPrototype);
            var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
              var _Object$create;
              var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
                value: stream,
                writable: true
              }), _defineProperty(_Object$create, kLastResolve, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kLastReject, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kError, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kEnded, {
                value: stream._readableState.endEmitted,
                writable: true
              }), _defineProperty(_Object$create, kHandlePromise, {
                value: function value(resolve2, reject) {
                  var data = iterator[kStream].read();
                  if (data) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    resolve2(createIterResult(data, false));
                  } else {
                    iterator[kLastResolve] = resolve2;
                    iterator[kLastReject] = reject;
                  }
                },
                writable: true
              }), _Object$create));
              iterator[kLastPromise] = null;
              finished(stream, function(err) {
                if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                  var reject = iterator[kLastReject];
                  if (reject !== null) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    reject(err);
                  }
                  iterator[kError] = err;
                  return;
                }
                var resolve2 = iterator[kLastResolve];
                if (resolve2 !== null) {
                  iterator[kLastPromise] = null;
                  iterator[kLastResolve] = null;
                  iterator[kLastReject] = null;
                  resolve2(createIterResult(void 0, true));
                }
                iterator[kEnded] = true;
              });
              stream.on("readable", onReadable.bind(null, iterator));
              return iterator;
            };
            module3.exports = createReadableStreamAsyncIterator;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./end-of-stream": 478, "_process": 538 }], 476: [function(require2, module3, exports3) {
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          key = _toPropertyKey(key);
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", { writable: false });
          return Constructor;
        }
        function _toPropertyKey(arg) {
          var key = _toPrimitive(arg, "string");
          return typeof key === "symbol" ? key : String(key);
        }
        function _toPrimitive(input, hint) {
          if (typeof input !== "object" || input === null)
            return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== void 0) {
            var res = prim.call(input, hint || "default");
            if (typeof res !== "object")
              return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return (hint === "string" ? String : Number)(input);
        }
        var _require = require2("buffer"), Buffer2 = _require.Buffer;
        var _require2 = require2("util"), inspect = _require2.inspect;
        var custom = inspect && inspect.custom || "inspect";
        function copyBuffer(src, target, offset) {
          Buffer2.prototype.copy.call(src, target, offset);
        }
        module3.exports = /* @__PURE__ */ function() {
          function BufferList() {
            _classCallCheck(this, BufferList);
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          _createClass(BufferList, [{
            key: "push",
            value: function push(v) {
              var entry = {
                data: v,
                next: null
              };
              if (this.length > 0)
                this.tail.next = entry;
              else
                this.head = entry;
              this.tail = entry;
              ++this.length;
            }
          }, {
            key: "unshift",
            value: function unshift(v) {
              var entry = {
                data: v,
                next: this.head
              };
              if (this.length === 0)
                this.tail = entry;
              this.head = entry;
              ++this.length;
            }
          }, {
            key: "shift",
            value: function shift() {
              if (this.length === 0)
                return;
              var ret = this.head.data;
              if (this.length === 1)
                this.head = this.tail = null;
              else
                this.head = this.head.next;
              --this.length;
              return ret;
            }
          }, {
            key: "clear",
            value: function clear2() {
              this.head = this.tail = null;
              this.length = 0;
            }
          }, {
            key: "join",
            value: function join(s2) {
              if (this.length === 0)
                return "";
              var p2 = this.head;
              var ret = "" + p2.data;
              while (p2 = p2.next)
                ret += s2 + p2.data;
              return ret;
            }
          }, {
            key: "concat",
            value: function concat(n2) {
              if (this.length === 0)
                return Buffer2.alloc(0);
              var ret = Buffer2.allocUnsafe(n2 >>> 0);
              var p2 = this.head;
              var i = 0;
              while (p2) {
                copyBuffer(p2.data, ret, i);
                i += p2.data.length;
                p2 = p2.next;
              }
              return ret;
            }
            // Consumes a specified amount of bytes or characters from the buffered data.
          }, {
            key: "consume",
            value: function consume(n2, hasStrings) {
              var ret;
              if (n2 < this.head.data.length) {
                ret = this.head.data.slice(0, n2);
                this.head.data = this.head.data.slice(n2);
              } else if (n2 === this.head.data.length) {
                ret = this.shift();
              } else {
                ret = hasStrings ? this._getString(n2) : this._getBuffer(n2);
              }
              return ret;
            }
          }, {
            key: "first",
            value: function first() {
              return this.head.data;
            }
            // Consumes a specified amount of characters from the buffered data.
          }, {
            key: "_getString",
            value: function _getString(n2) {
              var p2 = this.head;
              var c = 1;
              var ret = p2.data;
              n2 -= ret.length;
              while (p2 = p2.next) {
                var str = p2.data;
                var nb = n2 > str.length ? str.length : n2;
                if (nb === str.length)
                  ret += str;
                else
                  ret += str.slice(0, n2);
                n2 -= nb;
                if (n2 === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p2.next)
                      this.head = p2.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p2;
                    p2.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
            // Consumes a specified amount of bytes from the buffered data.
          }, {
            key: "_getBuffer",
            value: function _getBuffer(n2) {
              var ret = Buffer2.allocUnsafe(n2);
              var p2 = this.head;
              var c = 1;
              p2.data.copy(ret);
              n2 -= p2.data.length;
              while (p2 = p2.next) {
                var buf = p2.data;
                var nb = n2 > buf.length ? buf.length : n2;
                buf.copy(ret, ret.length - n2, 0, nb);
                n2 -= nb;
                if (n2 === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p2.next)
                      this.head = p2.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p2;
                    p2.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
            // Make sure the linked list only shows the minimal necessary information.
          }, {
            key: custom,
            value: function value(_, options) {
              return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                // Only inspect one level.
                depth: 0,
                // It should not recurse.
                customInspect: false
              }));
            }
          }]);
          return BufferList;
        }();
      }, { "buffer": 103, "util": 102 }], 477: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            function destroy(err, cb) {
              var _this = this;
              var readableDestroyed = this._readableState && this._readableState.destroyed;
              var writableDestroyed = this._writableState && this._writableState.destroyed;
              if (readableDestroyed || writableDestroyed) {
                if (cb) {
                  cb(err);
                } else if (err) {
                  if (!this._writableState) {
                    process.nextTick(emitErrorNT, this, err);
                  } else if (!this._writableState.errorEmitted) {
                    this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorNT, this, err);
                  }
                }
                return this;
              }
              if (this._readableState) {
                this._readableState.destroyed = true;
              }
              if (this._writableState) {
                this._writableState.destroyed = true;
              }
              this._destroy(err || null, function(err2) {
                if (!cb && err2) {
                  if (!_this._writableState) {
                    process.nextTick(emitErrorAndCloseNT, _this, err2);
                  } else if (!_this._writableState.errorEmitted) {
                    _this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorAndCloseNT, _this, err2);
                  } else {
                    process.nextTick(emitCloseNT, _this);
                  }
                } else if (cb) {
                  process.nextTick(emitCloseNT, _this);
                  cb(err2);
                } else {
                  process.nextTick(emitCloseNT, _this);
                }
              });
              return this;
            }
            function emitErrorAndCloseNT(self2, err) {
              emitErrorNT(self2, err);
              emitCloseNT(self2);
            }
            function emitCloseNT(self2) {
              if (self2._writableState && !self2._writableState.emitClose)
                return;
              if (self2._readableState && !self2._readableState.emitClose)
                return;
              self2.emit("close");
            }
            function undestroy() {
              if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
              }
              if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finalCalled = false;
                this._writableState.prefinished = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
              }
            }
            function emitErrorNT(self2, err) {
              self2.emit("error", err);
            }
            function errorOrDestroy(stream, err) {
              var rState = stream._readableState;
              var wState = stream._writableState;
              if (rState && rState.autoDestroy || wState && wState.autoDestroy)
                stream.destroy(err);
              else
                stream.emit("error", err);
            }
            module3.exports = {
              destroy,
              undestroy,
              errorOrDestroy
            };
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 538 }], 478: [function(require2, module3, exports3) {
        var ERR_STREAM_PREMATURE_CLOSE = require2("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
        function once2(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            callback.apply(this, args);
          };
        }
        function noop2() {
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function eos(stream, opts, callback) {
          if (typeof opts === "function")
            return eos(stream, null, opts);
          if (!opts)
            opts = {};
          callback = once2(callback || noop2);
          var readable = opts.readable || opts.readable !== false && stream.readable;
          var writable = opts.writable || opts.writable !== false && stream.writable;
          var onlegacyfinish = function onlegacyfinish2() {
            if (!stream.writable)
              onfinish();
          };
          var writableEnded = stream._writableState && stream._writableState.finished;
          var onfinish = function onfinish2() {
            writable = false;
            writableEnded = true;
            if (!readable)
              callback.call(stream);
          };
          var readableEnded = stream._readableState && stream._readableState.endEmitted;
          var onend = function onend2() {
            readable = false;
            readableEnded = true;
            if (!writable)
              callback.call(stream);
          };
          var onerror = function onerror2(err) {
            callback.call(stream, err);
          };
          var onclose = function onclose2() {
            var err;
            if (readable && !readableEnded) {
              if (!stream._readableState || !stream._readableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
            if (writable && !writableEnded) {
              if (!stream._writableState || !stream._writableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
          };
          var onrequest = function onrequest2() {
            stream.req.on("finish", onfinish);
          };
          if (isRequest(stream)) {
            stream.on("complete", onfinish);
            stream.on("abort", onclose);
            if (stream.req)
              onrequest();
            else
              stream.on("request", onrequest);
          } else if (writable && !stream._writableState) {
            stream.on("end", onlegacyfinish);
            stream.on("close", onlegacyfinish);
          }
          stream.on("end", onend);
          stream.on("finish", onfinish);
          if (opts.error !== false)
            stream.on("error", onerror);
          stream.on("close", onclose);
          return function() {
            stream.removeListener("complete", onfinish);
            stream.removeListener("abort", onclose);
            stream.removeListener("request", onrequest);
            if (stream.req)
              stream.req.removeListener("finish", onfinish);
            stream.removeListener("end", onlegacyfinish);
            stream.removeListener("close", onlegacyfinish);
            stream.removeListener("finish", onfinish);
            stream.removeListener("end", onend);
            stream.removeListener("error", onerror);
            stream.removeListener("close", onclose);
          };
        }
        module3.exports = eos;
      }, { "../../../errors": 469 }], 479: [function(require2, module3, exports3) {
        module3.exports = function() {
          throw new Error("Readable.from is not available in the browser");
        };
      }, {}], 480: [function(require2, module3, exports3) {
        var eos;
        function once2(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            callback.apply(void 0, arguments);
          };
        }
        var _require$codes = require2("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
        function noop2(err) {
          if (err)
            throw err;
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function destroyer(stream, reading, writing, callback) {
          callback = once2(callback);
          var closed = false;
          stream.on("close", function() {
            closed = true;
          });
          if (eos === void 0)
            eos = require2("./end-of-stream");
          eos(stream, {
            readable: reading,
            writable: writing
          }, function(err) {
            if (err)
              return callback(err);
            closed = true;
            callback();
          });
          var destroyed = false;
          return function(err) {
            if (closed)
              return;
            if (destroyed)
              return;
            destroyed = true;
            if (isRequest(stream))
              return stream.abort();
            if (typeof stream.destroy === "function")
              return stream.destroy();
            callback(err || new ERR_STREAM_DESTROYED("pipe"));
          };
        }
        function call(fn) {
          fn();
        }
        function pipe(from, to) {
          return from.pipe(to);
        }
        function popCallback(streams) {
          if (!streams.length)
            return noop2;
          if (typeof streams[streams.length - 1] !== "function")
            return noop2;
          return streams.pop();
        }
        function pipeline() {
          for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
            streams[_key] = arguments[_key];
          }
          var callback = popCallback(streams);
          if (Array.isArray(streams[0]))
            streams = streams[0];
          if (streams.length < 2) {
            throw new ERR_MISSING_ARGS("streams");
          }
          var error;
          var destroys = streams.map(function(stream, i) {
            var reading = i < streams.length - 1;
            var writing = i > 0;
            return destroyer(stream, reading, writing, function(err) {
              if (!error)
                error = err;
              if (err)
                destroys.forEach(call);
              if (reading)
                return;
              destroys.forEach(call);
              callback(error);
            });
          });
          return streams.reduce(pipe);
        }
        module3.exports = pipeline;
      }, { "../../../errors": 469, "./end-of-stream": 478 }], 481: [function(require2, module3, exports3) {
        var ERR_INVALID_OPT_VALUE = require2("../../../errors").codes.ERR_INVALID_OPT_VALUE;
        function highWaterMarkFrom(options, isDuplex, duplexKey) {
          return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
        }
        function getHighWaterMark(state, options, duplexKey, isDuplex) {
          var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
          if (hwm != null) {
            if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
              var name = isDuplex ? duplexKey : "highWaterMark";
              throw new ERR_INVALID_OPT_VALUE(name, hwm);
            }
            return Math.floor(hwm);
          }
          return state.objectMode ? 16 : 16 * 1024;
        }
        module3.exports = {
          getHighWaterMark
        };
      }, { "../../../errors": 469 }], 482: [function(require2, module3, exports3) {
        arguments[4][459][0].apply(exports3, arguments);
      }, { "dup": 459, "events": 386 }], 483: [function(require2, module3, exports3) {
        arguments[4][462][0].apply(exports3, arguments);
      }, { "dup": 462, "safe-buffer": 464 }], 484: [function(require2, module3, exports3) {
        (function(setImmediate, clearImmediate) {
          (function() {
            var nextTick2 = require2("process/browser.js").nextTick;
            var apply2 = Function.prototype.apply;
            var slice = Array.prototype.slice;
            var immediateIds = {};
            var nextImmediateId = 0;
            exports3.setTimeout = function() {
              return new Timeout(apply2.call(setTimeout, window, arguments), clearTimeout);
            };
            exports3.setInterval = function() {
              return new Timeout(apply2.call(setInterval, window, arguments), clearInterval);
            };
            exports3.clearTimeout = exports3.clearInterval = function(timeout) {
              timeout.close();
            };
            function Timeout(id, clearFn) {
              this._id = id;
              this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {
            };
            Timeout.prototype.close = function() {
              this._clearFn.call(window, this._id);
            };
            exports3.enroll = function(item, msecs) {
              clearTimeout(item._idleTimeoutId);
              item._idleTimeout = msecs;
            };
            exports3.unenroll = function(item) {
              clearTimeout(item._idleTimeoutId);
              item._idleTimeout = -1;
            };
            exports3._unrefActive = exports3.active = function(item) {
              clearTimeout(item._idleTimeoutId);
              var msecs = item._idleTimeout;
              if (msecs >= 0) {
                item._idleTimeoutId = setTimeout(function onTimeout() {
                  if (item._onTimeout)
                    item._onTimeout();
                }, msecs);
              }
            };
            exports3.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
              var id = nextImmediateId++;
              var args = arguments.length < 2 ? false : slice.call(arguments, 1);
              immediateIds[id] = true;
              nextTick2(function onNextTick() {
                if (immediateIds[id]) {
                  if (args) {
                    fn.apply(null, args);
                  } else {
                    fn.call(null);
                  }
                  exports3.clearImmediate(id);
                }
              });
              return id;
            };
            exports3.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
              delete immediateIds[id];
            };
          }).call(this);
        }).call(this, require2("timers").setImmediate, require2("timers").clearImmediate);
      }, { "process/browser.js": 442, "timers": 484 }], 485: [function(require2, module3, exports3) {
        var Buffer2 = require2("buffer").Buffer;
        module3.exports = function(buf) {
          if (buf instanceof Uint8Array) {
            if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
              return buf.buffer;
            } else if (typeof buf.buffer.slice === "function") {
              return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
            }
          }
          if (Buffer2.isBuffer(buf)) {
            var arrayCopy = new Uint8Array(buf.length);
            var len = buf.length;
            for (var i = 0; i < len; i++) {
              arrayCopy[i] = buf[i];
            }
            return arrayCopy.buffer;
          } else {
            throw new Error("Argument must be a Buffer");
          }
        };
      }, { "buffer": 103 }], 486: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            module3.exports = deprecate;
            function deprecate(fn, msg) {
              if (config("noDeprecation")) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (config("throwDeprecation")) {
                    throw new Error(msg);
                  } else if (config("traceDeprecation")) {
                    console.trace(msg);
                  } else {
                    console.warn(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            }
            function config(name) {
              try {
                if (!global3.localStorage)
                  return false;
              } catch (_) {
                return false;
              }
              var val = global3.localStorage[name];
              if (null == val)
                return false;
              return String(val).toLowerCase() === "true";
            }
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 487: [function(require2, module3, exports3) {
        arguments[4][97][0].apply(exports3, arguments);
      }, { "dup": 97 }], 488: [function(require2, module3, exports3) {
        var isArgumentsObject = require2("is-arguments");
        var isGeneratorFunction = require2("is-generator-function");
        var whichTypedArray = require2("which-typed-array");
        var isTypedArray = require2("is-typed-array");
        function uncurryThis(f2) {
          return f2.call.bind(f2);
        }
        var BigIntSupported = typeof BigInt !== "undefined";
        var SymbolSupported = typeof Symbol !== "undefined";
        var ObjectToString = uncurryThis(Object.prototype.toString);
        var numberValue = uncurryThis(Number.prototype.valueOf);
        var stringValue = uncurryThis(String.prototype.valueOf);
        var booleanValue = uncurryThis(Boolean.prototype.valueOf);
        if (BigIntSupported) {
          var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
        }
        if (SymbolSupported) {
          var symbolValue = uncurryThis(Symbol.prototype.valueOf);
        }
        function checkBoxedPrimitive(value, prototypeValueOf) {
          if (typeof value !== "object") {
            return false;
          }
          try {
            prototypeValueOf(value);
            return true;
          } catch (e2) {
            return false;
          }
        }
        exports3.isArgumentsObject = isArgumentsObject;
        exports3.isGeneratorFunction = isGeneratorFunction;
        exports3.isTypedArray = isTypedArray;
        function isPromise2(input) {
          return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
        }
        exports3.isPromise = isPromise2;
        function isArrayBufferView(value) {
          if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
            return ArrayBuffer.isView(value);
          }
          return isTypedArray(value) || isDataView(value);
        }
        exports3.isArrayBufferView = isArrayBufferView;
        function isUint8Array(value) {
          return whichTypedArray(value) === "Uint8Array";
        }
        exports3.isUint8Array = isUint8Array;
        function isUint8ClampedArray(value) {
          return whichTypedArray(value) === "Uint8ClampedArray";
        }
        exports3.isUint8ClampedArray = isUint8ClampedArray;
        function isUint16Array(value) {
          return whichTypedArray(value) === "Uint16Array";
        }
        exports3.isUint16Array = isUint16Array;
        function isUint32Array(value) {
          return whichTypedArray(value) === "Uint32Array";
        }
        exports3.isUint32Array = isUint32Array;
        function isInt8Array(value) {
          return whichTypedArray(value) === "Int8Array";
        }
        exports3.isInt8Array = isInt8Array;
        function isInt16Array(value) {
          return whichTypedArray(value) === "Int16Array";
        }
        exports3.isInt16Array = isInt16Array;
        function isInt32Array(value) {
          return whichTypedArray(value) === "Int32Array";
        }
        exports3.isInt32Array = isInt32Array;
        function isFloat32Array(value) {
          return whichTypedArray(value) === "Float32Array";
        }
        exports3.isFloat32Array = isFloat32Array;
        function isFloat64Array(value) {
          return whichTypedArray(value) === "Float64Array";
        }
        exports3.isFloat64Array = isFloat64Array;
        function isBigInt64Array(value) {
          return whichTypedArray(value) === "BigInt64Array";
        }
        exports3.isBigInt64Array = isBigInt64Array;
        function isBigUint64Array(value) {
          return whichTypedArray(value) === "BigUint64Array";
        }
        exports3.isBigUint64Array = isBigUint64Array;
        function isMapToString(value) {
          return ObjectToString(value) === "[object Map]";
        }
        isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
        function isMap2(value) {
          if (typeof Map === "undefined") {
            return false;
          }
          return isMapToString.working ? isMapToString(value) : value instanceof Map;
        }
        exports3.isMap = isMap2;
        function isSetToString(value) {
          return ObjectToString(value) === "[object Set]";
        }
        isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
        function isSet2(value) {
          if (typeof Set === "undefined") {
            return false;
          }
          return isSetToString.working ? isSetToString(value) : value instanceof Set;
        }
        exports3.isSet = isSet2;
        function isWeakMapToString(value) {
          return ObjectToString(value) === "[object WeakMap]";
        }
        isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
        function isWeakMap(value) {
          if (typeof WeakMap === "undefined") {
            return false;
          }
          return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
        }
        exports3.isWeakMap = isWeakMap;
        function isWeakSetToString(value) {
          return ObjectToString(value) === "[object WeakSet]";
        }
        isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
        function isWeakSet(value) {
          return isWeakSetToString(value);
        }
        exports3.isWeakSet = isWeakSet;
        function isArrayBufferToString(value) {
          return ObjectToString(value) === "[object ArrayBuffer]";
        }
        isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
        function isArrayBuffer(value) {
          if (typeof ArrayBuffer === "undefined") {
            return false;
          }
          return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
        }
        exports3.isArrayBuffer = isArrayBuffer;
        function isDataViewToString(value) {
          return ObjectToString(value) === "[object DataView]";
        }
        isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
        function isDataView(value) {
          if (typeof DataView === "undefined") {
            return false;
          }
          return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
        }
        exports3.isDataView = isDataView;
        var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
        function isSharedArrayBufferToString(value) {
          return ObjectToString(value) === "[object SharedArrayBuffer]";
        }
        function isSharedArrayBuffer(value) {
          if (typeof SharedArrayBufferCopy === "undefined") {
            return false;
          }
          if (typeof isSharedArrayBufferToString.working === "undefined") {
            isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
          }
          return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
        }
        exports3.isSharedArrayBuffer = isSharedArrayBuffer;
        function isAsyncFunction(value) {
          return ObjectToString(value) === "[object AsyncFunction]";
        }
        exports3.isAsyncFunction = isAsyncFunction;
        function isMapIterator(value) {
          return ObjectToString(value) === "[object Map Iterator]";
        }
        exports3.isMapIterator = isMapIterator;
        function isSetIterator(value) {
          return ObjectToString(value) === "[object Set Iterator]";
        }
        exports3.isSetIterator = isSetIterator;
        function isGeneratorObject(value) {
          return ObjectToString(value) === "[object Generator]";
        }
        exports3.isGeneratorObject = isGeneratorObject;
        function isWebAssemblyCompiledModule(value) {
          return ObjectToString(value) === "[object WebAssembly.Module]";
        }
        exports3.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
        function isNumberObject(value) {
          return checkBoxedPrimitive(value, numberValue);
        }
        exports3.isNumberObject = isNumberObject;
        function isStringObject(value) {
          return checkBoxedPrimitive(value, stringValue);
        }
        exports3.isStringObject = isStringObject;
        function isBooleanObject(value) {
          return checkBoxedPrimitive(value, booleanValue);
        }
        exports3.isBooleanObject = isBooleanObject;
        function isBigIntObject(value) {
          return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
        }
        exports3.isBigIntObject = isBigIntObject;
        function isSymbolObject(value) {
          return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
        }
        exports3.isSymbolObject = isSymbolObject;
        function isBoxedPrimitive(value) {
          return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
        }
        exports3.isBoxedPrimitive = isBoxedPrimitive;
        function isAnyArrayBuffer(value) {
          return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
        }
        exports3.isAnyArrayBuffer = isAnyArrayBuffer;
        ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
          Object.defineProperty(exports3, method, {
            enumerable: false,
            value: function() {
              throw new Error(method + " is not supported in userland");
            }
          });
        });
      }, { "is-arguments": 408, "is-generator-function": 411, "is-typed-array": 412, "which-typed-array": 490 }], 489: [function(require2, module3, exports3) {
        (function(process) {
          (function() {
            var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
              var keys = Object.keys(obj);
              var descriptors = {};
              for (var i = 0; i < keys.length; i++) {
                descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
              }
              return descriptors;
            };
            var formatRegExp = /%[sdj%]/g;
            exports3.format = function(f2) {
              if (!isString2(f2)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(" ");
              }
              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f2).replace(formatRegExp, function(x2) {
                if (x2 === "%%")
                  return "%";
                if (i >= len)
                  return x2;
                switch (x2) {
                  case "%s":
                    return String(args[i++]);
                  case "%d":
                    return Number(args[i++]);
                  case "%j":
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return "[Circular]";
                    }
                  default:
                    return x2;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject2(x)) {
                  str += " " + x;
                } else {
                  str += " " + inspect(x);
                }
              }
              return str;
            };
            exports3.deprecate = function(fn, msg) {
              if (typeof process !== "undefined" && process.noDeprecation === true) {
                return fn;
              }
              if (typeof process === "undefined") {
                return function() {
                  return exports3.deprecate(fn, msg).apply(this, arguments);
                };
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            };
            var debugs = {};
            var debugEnvRegex = /^$/;
            if (process.env.NODE_DEBUG) {
              var debugEnv = process.env.NODE_DEBUG;
              debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
              debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
            }
            exports3.debuglog = function(set2) {
              set2 = set2.toUpperCase();
              if (!debugs[set2]) {
                if (debugEnvRegex.test(set2)) {
                  var pid = process.pid;
                  debugs[set2] = function() {
                    var msg = exports3.format.apply(exports3, arguments);
                    console.error("%s %d: %s", set2, pid, msg);
                  };
                } else {
                  debugs[set2] = function() {
                  };
                }
              }
              return debugs[set2];
            };
            function inspect(obj, opts) {
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              };
              if (arguments.length >= 3)
                ctx.depth = arguments[2];
              if (arguments.length >= 4)
                ctx.colors = arguments[3];
              if (isBoolean2(opts)) {
                ctx.showHidden = opts;
              } else if (opts) {
                exports3._extend(ctx, opts);
              }
              if (isUndefined(ctx.showHidden))
                ctx.showHidden = false;
              if (isUndefined(ctx.depth))
                ctx.depth = 2;
              if (isUndefined(ctx.colors))
                ctx.colors = false;
              if (isUndefined(ctx.customInspect))
                ctx.customInspect = true;
              if (ctx.colors)
                ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }
            exports3.inspect = inspect;
            inspect.colors = {
              "bold": [1, 22],
              "italic": [3, 23],
              "underline": [4, 24],
              "inverse": [7, 27],
              "white": [37, 39],
              "grey": [90, 39],
              "black": [30, 39],
              "blue": [34, 39],
              "cyan": [36, 39],
              "green": [32, 39],
              "magenta": [35, 39],
              "red": [31, 39],
              "yellow": [33, 39]
            };
            inspect.styles = {
              "special": "cyan",
              "number": "yellow",
              "boolean": "yellow",
              "undefined": "grey",
              "null": "bold",
              "string": "green",
              "date": "magenta",
              // "name": intentionally not styling
              "regexp": "red"
            };
            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];
              if (style) {
                return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
              } else {
                return str;
              }
            }
            function stylizeNoColor(str, styleType) {
              return str;
            }
            function arrayToHash(array) {
              var hash = {};
              array.forEach(function(val, idx) {
                hash[val] = true;
              });
              return hash;
            }
            function formatValue(ctx, value, recurseTimes) {
              if (ctx.customInspect && value && isFunction2(value.inspect) && // Filter out the util module, it's inspect function is special
              value.inspect !== exports3.inspect && // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);
                if (!isString2(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }
                return ret;
              }
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);
              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }
              if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
                return formatError(value);
              }
              if (keys.length === 0) {
                if (isFunction2(value)) {
                  var name = value.name ? ": " + value.name : "";
                  return ctx.stylize("[Function" + name + "]", "special");
                }
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                }
                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), "date");
                }
                if (isError(value)) {
                  return formatError(value);
                }
              }
              var base = "", array = false, braces = ["{", "}"];
              if (isArray2(value)) {
                array = true;
                braces = ["[", "]"];
              }
              if (isFunction2(value)) {
                var n2 = value.name ? ": " + value.name : "";
                base = " [Function" + n2 + "]";
              }
              if (isRegExp(value)) {
                base = " " + RegExp.prototype.toString.call(value);
              }
              if (isDate(value)) {
                base = " " + Date.prototype.toUTCString.call(value);
              }
              if (isError(value)) {
                base = " " + formatError(value);
              }
              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }
              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                } else {
                  return ctx.stylize("[Object]", "special");
                }
              }
              ctx.seen.push(value);
              var output;
              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function(key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }
              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }
            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize("undefined", "undefined");
              if (isString2(value)) {
                var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return ctx.stylize(simple, "string");
              }
              if (isNumber(value))
                return ctx.stylize("" + value, "number");
              if (isBoolean2(value))
                return ctx.stylize("" + value, "boolean");
              if (isNull(value))
                return ctx.stylize("null", "null");
            }
            function formatError(value) {
              return "[" + Error.prototype.toString.call(value) + "]";
            }
            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty2(value, String(i))) {
                  output.push(formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    String(i),
                    true
                  ));
                } else {
                  output.push("");
                }
              }
              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    true
                  ));
                }
              });
              return output;
            }
            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize("[Getter/Setter]", "special");
                } else {
                  str = ctx.stylize("[Getter]", "special");
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize("[Setter]", "special");
                }
              }
              if (!hasOwnProperty2(visibleKeys, key)) {
                name = "[" + key + "]";
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf("\n") > -1) {
                    if (array) {
                      str = str.split("\n").map(function(line) {
                        return "  " + line;
                      }).join("\n").slice(2);
                    } else {
                      str = "\n" + str.split("\n").map(function(line) {
                        return "   " + line;
                      }).join("\n");
                    }
                  }
                } else {
                  str = ctx.stylize("[Circular]", "special");
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify("" + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.slice(1, -1);
                  name = ctx.stylize(name, "name");
                } else {
                  name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, "string");
                }
              }
              return name + ": " + str;
            }
            function reduceToSingleString(output, base, braces) {
              var length = output.reduce(function(prev, cur) {
                if (cur.indexOf("\n") >= 0)
                  ;
                return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0);
              if (length > 60) {
                return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
              }
              return braces[0] + base + " " + output.join(", ") + " " + braces[1];
            }
            exports3.types = require2("./support/types");
            function isArray2(ar) {
              return Array.isArray(ar);
            }
            exports3.isArray = isArray2;
            function isBoolean2(arg) {
              return typeof arg === "boolean";
            }
            exports3.isBoolean = isBoolean2;
            function isNull(arg) {
              return arg === null;
            }
            exports3.isNull = isNull;
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports3.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
              return typeof arg === "number";
            }
            exports3.isNumber = isNumber;
            function isString2(arg) {
              return typeof arg === "string";
            }
            exports3.isString = isString2;
            function isSymbol2(arg) {
              return typeof arg === "symbol";
            }
            exports3.isSymbol = isSymbol2;
            function isUndefined(arg) {
              return arg === void 0;
            }
            exports3.isUndefined = isUndefined;
            function isRegExp(re) {
              return isObject2(re) && objectToString2(re) === "[object RegExp]";
            }
            exports3.isRegExp = isRegExp;
            exports3.types.isRegExp = isRegExp;
            function isObject2(arg) {
              return typeof arg === "object" && arg !== null;
            }
            exports3.isObject = isObject2;
            function isDate(d) {
              return isObject2(d) && objectToString2(d) === "[object Date]";
            }
            exports3.isDate = isDate;
            exports3.types.isDate = isDate;
            function isError(e2) {
              return isObject2(e2) && (objectToString2(e2) === "[object Error]" || e2 instanceof Error);
            }
            exports3.isError = isError;
            exports3.types.isNativeError = isError;
            function isFunction2(arg) {
              return typeof arg === "function";
            }
            exports3.isFunction = isFunction2;
            function isPrimitive(arg) {
              return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
              typeof arg === "undefined";
            }
            exports3.isPrimitive = isPrimitive;
            exports3.isBuffer = require2("./support/isBuffer");
            function objectToString2(o2) {
              return Object.prototype.toString.call(o2);
            }
            function pad(n2) {
              return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
            }
            var months = [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec"
            ];
            function timestamp() {
              var d = /* @__PURE__ */ new Date();
              var time = [
                pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())
              ].join(":");
              return [d.getDate(), months[d.getMonth()], time].join(" ");
            }
            exports3.log = function() {
              console.log("%s - %s", timestamp(), exports3.format.apply(exports3, arguments));
            };
            exports3.inherits = require2("inherits");
            exports3._extend = function(origin, add2) {
              if (!add2 || !isObject2(add2))
                return origin;
              var keys = Object.keys(add2);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add2[keys[i]];
              }
              return origin;
            };
            function hasOwnProperty2(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
            var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
            exports3.promisify = function promisify2(original) {
              if (typeof original !== "function")
                throw new TypeError('The "original" argument must be of type Function');
              if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
                var fn = original[kCustomPromisifiedSymbol];
                if (typeof fn !== "function") {
                  throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                }
                Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                  value: fn,
                  enumerable: false,
                  writable: false,
                  configurable: true
                });
                return fn;
              }
              function fn() {
                var promiseResolve, promiseReject;
                var promise = new Promise(function(resolve2, reject) {
                  promiseResolve = resolve2;
                  promiseReject = reject;
                });
                var args = [];
                for (var i = 0; i < arguments.length; i++) {
                  args.push(arguments[i]);
                }
                args.push(function(err, value) {
                  if (err) {
                    promiseReject(err);
                  } else {
                    promiseResolve(value);
                  }
                });
                try {
                  original.apply(this, args);
                } catch (err) {
                  promiseReject(err);
                }
                return promise;
              }
              Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
              if (kCustomPromisifiedSymbol)
                Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                  value: fn,
                  enumerable: false,
                  writable: false,
                  configurable: true
                });
              return Object.defineProperties(
                fn,
                getOwnPropertyDescriptors(original)
              );
            };
            exports3.promisify.custom = kCustomPromisifiedSymbol;
            function callbackifyOnRejected(reason, cb) {
              if (!reason) {
                var newReason = new Error("Promise was rejected with a falsy value");
                newReason.reason = reason;
                reason = newReason;
              }
              return cb(reason);
            }
            function callbackify(original) {
              if (typeof original !== "function") {
                throw new TypeError('The "original" argument must be of type Function');
              }
              function callbackified() {
                var args = [];
                for (var i = 0; i < arguments.length; i++) {
                  args.push(arguments[i]);
                }
                var maybeCb = args.pop();
                if (typeof maybeCb !== "function") {
                  throw new TypeError("The last argument must be of type Function");
                }
                var self2 = this;
                var cb = function() {
                  return maybeCb.apply(self2, arguments);
                };
                original.apply(this, args).then(
                  function(ret) {
                    process.nextTick(cb.bind(null, null, ret));
                  },
                  function(rej) {
                    process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
                  }
                );
              }
              Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
              Object.defineProperties(
                callbackified,
                getOwnPropertyDescriptors(original)
              );
              return callbackified;
            }
            exports3.callbackify = callbackify;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./support/isBuffer": 487, "./support/types": 488, "_process": 538, "inherits": 407 }], 490: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            var forEach = require2("for-each");
            var availableTypedArrays = require2("available-typed-arrays");
            var callBind = require2("call-bind");
            var callBound = require2("call-bind/callBound");
            var gOPD = require2("gopd");
            var $toString = callBound("Object.prototype.toString");
            var hasToStringTag = require2("has-tostringtag/shams")();
            var g = typeof globalThis === "undefined" ? global3 : globalThis;
            var typedArrays = availableTypedArrays();
            var $slice = callBound("String.prototype.slice");
            var getPrototypeOf2 = Object.getPrototypeOf;
            var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
              for (var i = 0; i < array.length; i += 1) {
                if (array[i] === value) {
                  return i;
                }
              }
              return -1;
            };
            var cache = { __proto__: null };
            if (hasToStringTag && gOPD && getPrototypeOf2) {
              forEach(typedArrays, function(typedArray) {
                var arr = new g[typedArray]();
                if (Symbol.toStringTag in arr) {
                  var proto = getPrototypeOf2(arr);
                  var descriptor = gOPD(proto, Symbol.toStringTag);
                  if (!descriptor) {
                    var superProto = getPrototypeOf2(proto);
                    descriptor = gOPD(superProto, Symbol.toStringTag);
                  }
                  cache["$" + typedArray] = callBind(descriptor.get);
                }
              });
            } else {
              forEach(typedArrays, function(typedArray) {
                var arr = new g[typedArray]();
                var fn = arr.slice || arr.set;
                if (fn) {
                  cache["$" + typedArray] = callBind(fn);
                }
              });
            }
            var tryTypedArrays = function tryAllTypedArrays(value) {
              var found = false;
              forEach(cache, function(getter, typedArray) {
                if (!found) {
                  try {
                    if ("$" + getter(value) === typedArray) {
                      found = $slice(typedArray, 1);
                    }
                  } catch (e2) {
                  }
                }
              });
              return found;
            };
            var trySlices = function tryAllSlices(value) {
              var found = false;
              forEach(cache, function(getter, name) {
                if (!found) {
                  try {
                    getter(value);
                    found = $slice(name, 1);
                  } catch (e2) {
                  }
                }
              });
              return found;
            };
            module3.exports = function whichTypedArray(value) {
              if (!value || typeof value !== "object") {
                return false;
              }
              if (!hasToStringTag) {
                var tag2 = $slice($toString(value), 8, -1);
                if ($indexOf(typedArrays, tag2) > -1) {
                  return tag2;
                }
                if (tag2 !== "Object") {
                  return false;
                }
                return trySlices(value);
              }
              if (!gOPD) {
                return null;
              }
              return tryTypedArrays(value);
            };
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "available-typed-arrays": 99, "call-bind": 106, "call-bind/callBound": 105, "for-each": 387, "gopd": 391, "has-tostringtag/shams": 396 }], 491: [function(require2, module3, exports3) {
        (function() {
          exports3.stripBOM = function(str) {
            if (str[0] === "\uFEFF") {
              return str.substring(1);
            } else {
              return str;
            }
          };
        }).call(this);
      }, {}], 492: [function(require2, module3, exports3) {
        (function() {
          var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;
          builder = require2("xmlbuilder");
          defaults = require2("./defaults").defaults;
          requiresCDATA = function(entry) {
            return typeof entry === "string" && (entry.indexOf("&") >= 0 || entry.indexOf(">") >= 0 || entry.indexOf("<") >= 0);
          };
          wrapCDATA = function(entry) {
            return "<![CDATA[" + escapeCDATA(entry) + "]]>";
          };
          escapeCDATA = function(entry) {
            return entry.replace("]]>", "]]]]><![CDATA[>");
          };
          exports3.Builder = function() {
            function Builder(opts) {
              var key, ref2, value;
              this.options = {};
              ref2 = defaults["0.2"];
              for (key in ref2) {
                if (!hasProp.call(ref2, key))
                  continue;
                value = ref2[key];
                this.options[key] = value;
              }
              for (key in opts) {
                if (!hasProp.call(opts, key))
                  continue;
                value = opts[key];
                this.options[key] = value;
              }
            }
            Builder.prototype.buildObject = function(rootObj) {
              var attrkey, charkey, render, rootElement, rootName;
              attrkey = this.options.attrkey;
              charkey = this.options.charkey;
              if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults["0.2"].rootName) {
                rootName = Object.keys(rootObj)[0];
                rootObj = rootObj[rootName];
              } else {
                rootName = this.options.rootName;
              }
              render = /* @__PURE__ */ function(_this) {
                return function(element, obj) {
                  var attr, child, entry, index2, key, value;
                  if (typeof obj !== "object") {
                    if (_this.options.cdata && requiresCDATA(obj)) {
                      element.raw(wrapCDATA(obj));
                    } else {
                      element.txt(obj);
                    }
                  } else if (Array.isArray(obj)) {
                    for (index2 in obj) {
                      if (!hasProp.call(obj, index2))
                        continue;
                      child = obj[index2];
                      for (key in child) {
                        entry = child[key];
                        element = render(element.ele(key), entry).up();
                      }
                    }
                  } else {
                    for (key in obj) {
                      if (!hasProp.call(obj, key))
                        continue;
                      child = obj[key];
                      if (key === attrkey) {
                        if (typeof child === "object") {
                          for (attr in child) {
                            value = child[attr];
                            element = element.att(attr, value);
                          }
                        }
                      } else if (key === charkey) {
                        if (_this.options.cdata && requiresCDATA(child)) {
                          element = element.raw(wrapCDATA(child));
                        } else {
                          element = element.txt(child);
                        }
                      } else if (Array.isArray(child)) {
                        for (index2 in child) {
                          if (!hasProp.call(child, index2))
                            continue;
                          entry = child[index2];
                          if (typeof entry === "string") {
                            if (_this.options.cdata && requiresCDATA(entry)) {
                              element = element.ele(key).raw(wrapCDATA(entry)).up();
                            } else {
                              element = element.ele(key, entry).up();
                            }
                          } else {
                            element = render(element.ele(key), entry).up();
                          }
                        }
                      } else if (typeof child === "object") {
                        element = render(element.ele(key), child).up();
                      } else {
                        if (typeof child === "string" && _this.options.cdata && requiresCDATA(child)) {
                          element = element.ele(key).raw(wrapCDATA(child)).up();
                        } else {
                          if (child == null) {
                            child = "";
                          }
                          element = element.ele(key, child.toString()).up();
                        }
                      }
                    }
                  }
                  return element;
                };
              }(this);
              rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
                headless: this.options.headless,
                allowSurrogateChars: this.options.allowSurrogateChars
              });
              return render(rootElement, rootObj).end(this.options.renderOpts);
            };
            return Builder;
          }();
        }).call(this);
      }, { "./defaults": 493, "xmlbuilder": 529 }], 493: [function(require2, module3, exports3) {
        (function() {
          exports3.defaults = {
            "0.1": {
              explicitCharkey: false,
              trim: true,
              normalize: true,
              normalizeTags: false,
              attrkey: "@",
              charkey: "#",
              explicitArray: false,
              ignoreAttrs: false,
              mergeAttrs: false,
              explicitRoot: false,
              validator: null,
              xmlns: false,
              explicitChildren: false,
              childkey: "@@",
              charsAsChildren: false,
              includeWhiteChars: false,
              async: false,
              strict: true,
              attrNameProcessors: null,
              attrValueProcessors: null,
              tagNameProcessors: null,
              valueProcessors: null,
              emptyTag: ""
            },
            "0.2": {
              explicitCharkey: false,
              trim: false,
              normalize: false,
              normalizeTags: false,
              attrkey: "$",
              charkey: "_",
              explicitArray: true,
              ignoreAttrs: false,
              mergeAttrs: false,
              explicitRoot: true,
              validator: null,
              xmlns: false,
              explicitChildren: false,
              preserveChildrenOrder: false,
              childkey: "$$",
              charsAsChildren: false,
              includeWhiteChars: false,
              async: false,
              strict: true,
              attrNameProcessors: null,
              attrValueProcessors: null,
              tagNameProcessors: null,
              valueProcessors: null,
              rootName: "root",
              xmldec: {
                "version": "1.0",
                "encoding": "UTF-8",
                "standalone": true
              },
              doctype: null,
              renderOpts: {
                "pretty": true,
                "indent": "  ",
                "newline": "\n"
              },
              headless: false,
              chunkSize: 1e4,
              emptyTag: "",
              cdata: false
            }
          };
        }).call(this);
      }, {}], 494: [function(require2, module3, exports3) {
        (function() {
          var bom, defaults, defineProperty, events, isEmpty, processItem, processors, sax, setImmediate, bind = function(fn, me) {
            return function() {
              return fn.apply(me, arguments);
            };
          }, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          sax = require2("sax");
          events = require2("events");
          bom = require2("./bom");
          processors = require2("./processors");
          setImmediate = require2("timers").setImmediate;
          defaults = require2("./defaults").defaults;
          isEmpty = function(thing) {
            return typeof thing === "object" && thing != null && Object.keys(thing).length === 0;
          };
          processItem = function(processors2, item, key) {
            var i, len, process;
            for (i = 0, len = processors2.length; i < len; i++) {
              process = processors2[i];
              item = process(item, key);
            }
            return item;
          };
          defineProperty = function(obj, key, value) {
            var descriptor;
            descriptor = /* @__PURE__ */ Object.create(null);
            descriptor.value = value;
            descriptor.writable = true;
            descriptor.enumerable = true;
            descriptor.configurable = true;
            return Object.defineProperty(obj, key, descriptor);
          };
          exports3.Parser = function(superClass) {
            extend2(Parser, superClass);
            function Parser(opts) {
              this.parseStringPromise = bind(this.parseStringPromise, this);
              this.parseString = bind(this.parseString, this);
              this.reset = bind(this.reset, this);
              this.assignOrPush = bind(this.assignOrPush, this);
              this.processAsync = bind(this.processAsync, this);
              var key, ref2, value;
              if (!(this instanceof exports3.Parser)) {
                return new exports3.Parser(opts);
              }
              this.options = {};
              ref2 = defaults["0.2"];
              for (key in ref2) {
                if (!hasProp.call(ref2, key))
                  continue;
                value = ref2[key];
                this.options[key] = value;
              }
              for (key in opts) {
                if (!hasProp.call(opts, key))
                  continue;
                value = opts[key];
                this.options[key] = value;
              }
              if (this.options.xmlns) {
                this.options.xmlnskey = this.options.attrkey + "ns";
              }
              if (this.options.normalizeTags) {
                if (!this.options.tagNameProcessors) {
                  this.options.tagNameProcessors = [];
                }
                this.options.tagNameProcessors.unshift(processors.normalize);
              }
              this.reset();
            }
            Parser.prototype.processAsync = function() {
              var chunk, err;
              try {
                if (this.remaining.length <= this.options.chunkSize) {
                  chunk = this.remaining;
                  this.remaining = "";
                  this.saxParser = this.saxParser.write(chunk);
                  return this.saxParser.close();
                } else {
                  chunk = this.remaining.substr(0, this.options.chunkSize);
                  this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
                  this.saxParser = this.saxParser.write(chunk);
                  return setImmediate(this.processAsync);
                }
              } catch (error1) {
                err = error1;
                if (!this.saxParser.errThrown) {
                  this.saxParser.errThrown = true;
                  return this.emit(err);
                }
              }
            };
            Parser.prototype.assignOrPush = function(obj, key, newValue) {
              if (!(key in obj)) {
                if (!this.options.explicitArray) {
                  return defineProperty(obj, key, newValue);
                } else {
                  return defineProperty(obj, key, [newValue]);
                }
              } else {
                if (!(obj[key] instanceof Array)) {
                  defineProperty(obj, key, [obj[key]]);
                }
                return obj[key].push(newValue);
              }
            };
            Parser.prototype.reset = function() {
              var attrkey, charkey, ontext, stack2;
              this.removeAllListeners();
              this.saxParser = sax.parser(this.options.strict, {
                trim: false,
                normalize: false,
                xmlns: this.options.xmlns
              });
              this.saxParser.errThrown = false;
              this.saxParser.onerror = /* @__PURE__ */ function(_this) {
                return function(error) {
                  _this.saxParser.resume();
                  if (!_this.saxParser.errThrown) {
                    _this.saxParser.errThrown = true;
                    return _this.emit("error", error);
                  }
                };
              }(this);
              this.saxParser.onend = /* @__PURE__ */ function(_this) {
                return function() {
                  if (!_this.saxParser.ended) {
                    _this.saxParser.ended = true;
                    return _this.emit("end", _this.resultObject);
                  }
                };
              }(this);
              this.saxParser.ended = false;
              this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
              this.resultObject = null;
              stack2 = [];
              attrkey = this.options.attrkey;
              charkey = this.options.charkey;
              this.saxParser.onopentag = /* @__PURE__ */ function(_this) {
                return function(node) {
                  var key, newValue, obj, processedKey, ref2;
                  obj = {};
                  obj[charkey] = "";
                  if (!_this.options.ignoreAttrs) {
                    ref2 = node.attributes;
                    for (key in ref2) {
                      if (!hasProp.call(ref2, key))
                        continue;
                      if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                        obj[attrkey] = {};
                      }
                      newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
                      processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
                      if (_this.options.mergeAttrs) {
                        _this.assignOrPush(obj, processedKey, newValue);
                      } else {
                        defineProperty(obj[attrkey], processedKey, newValue);
                      }
                    }
                  }
                  obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
                  if (_this.options.xmlns) {
                    obj[_this.options.xmlnskey] = {
                      uri: node.uri,
                      local: node.local
                    };
                  }
                  return stack2.push(obj);
                };
              }(this);
              this.saxParser.onclosetag = /* @__PURE__ */ function(_this) {
                return function() {
                  var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s2, xpath;
                  obj = stack2.pop();
                  nodeName = obj["#name"];
                  if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
                    delete obj["#name"];
                  }
                  if (obj.cdata === true) {
                    cdata = obj.cdata;
                    delete obj.cdata;
                  }
                  s2 = stack2[stack2.length - 1];
                  if (obj[charkey].match(/^\s*$/) && !cdata) {
                    emptyStr = obj[charkey];
                    delete obj[charkey];
                  } else {
                    if (_this.options.trim) {
                      obj[charkey] = obj[charkey].trim();
                    }
                    if (_this.options.normalize) {
                      obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                    }
                    obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
                    if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                      obj = obj[charkey];
                    }
                  }
                  if (isEmpty(obj)) {
                    if (typeof _this.options.emptyTag === "function") {
                      obj = _this.options.emptyTag();
                    } else {
                      obj = _this.options.emptyTag !== "" ? _this.options.emptyTag : emptyStr;
                    }
                  }
                  if (_this.options.validator != null) {
                    xpath = "/" + function() {
                      var i, len, results;
                      results = [];
                      for (i = 0, len = stack2.length; i < len; i++) {
                        node = stack2[i];
                        results.push(node["#name"]);
                      }
                      return results;
                    }().concat(nodeName).join("/");
                    (function() {
                      var err;
                      try {
                        return obj = _this.options.validator(xpath, s2 && s2[nodeName], obj);
                      } catch (error1) {
                        err = error1;
                        return _this.emit("error", err);
                      }
                    })();
                  }
                  if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === "object") {
                    if (!_this.options.preserveChildrenOrder) {
                      node = {};
                      if (_this.options.attrkey in obj) {
                        node[_this.options.attrkey] = obj[_this.options.attrkey];
                        delete obj[_this.options.attrkey];
                      }
                      if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                        node[_this.options.charkey] = obj[_this.options.charkey];
                        delete obj[_this.options.charkey];
                      }
                      if (Object.getOwnPropertyNames(obj).length > 0) {
                        node[_this.options.childkey] = obj;
                      }
                      obj = node;
                    } else if (s2) {
                      s2[_this.options.childkey] = s2[_this.options.childkey] || [];
                      objClone = {};
                      for (key in obj) {
                        if (!hasProp.call(obj, key))
                          continue;
                        defineProperty(objClone, key, obj[key]);
                      }
                      s2[_this.options.childkey].push(objClone);
                      delete obj["#name"];
                      if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                        obj = obj[charkey];
                      }
                    }
                  }
                  if (stack2.length > 0) {
                    return _this.assignOrPush(s2, nodeName, obj);
                  } else {
                    if (_this.options.explicitRoot) {
                      old = obj;
                      obj = {};
                      defineProperty(obj, nodeName, old);
                    }
                    _this.resultObject = obj;
                    _this.saxParser.ended = true;
                    return _this.emit("end", _this.resultObject);
                  }
                };
              }(this);
              ontext = /* @__PURE__ */ function(_this) {
                return function(text2) {
                  var charChild, s2;
                  s2 = stack2[stack2.length - 1];
                  if (s2) {
                    s2[charkey] += text2;
                    if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text2.replace(/\\n/g, "").trim() !== "")) {
                      s2[_this.options.childkey] = s2[_this.options.childkey] || [];
                      charChild = {
                        "#name": "__text__"
                      };
                      charChild[charkey] = text2;
                      if (_this.options.normalize) {
                        charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
                      }
                      s2[_this.options.childkey].push(charChild);
                    }
                    return s2;
                  }
                };
              }(this);
              this.saxParser.ontext = ontext;
              return this.saxParser.oncdata = /* @__PURE__ */ function(_this) {
                return function(text2) {
                  var s2;
                  s2 = ontext(text2);
                  if (s2) {
                    return s2.cdata = true;
                  }
                };
              }();
            };
            Parser.prototype.parseString = function(str, cb) {
              var err;
              if (cb != null && typeof cb === "function") {
                this.on("end", function(result) {
                  this.reset();
                  return cb(null, result);
                });
                this.on("error", function(err2) {
                  this.reset();
                  return cb(err2);
                });
              }
              try {
                str = str.toString();
                if (str.trim() === "") {
                  this.emit("end", null);
                  return true;
                }
                str = bom.stripBOM(str);
                if (this.options.async) {
                  this.remaining = str;
                  setImmediate(this.processAsync);
                  return this.saxParser;
                }
                return this.saxParser.write(str).close();
              } catch (error1) {
                err = error1;
                if (!(this.saxParser.errThrown || this.saxParser.ended)) {
                  this.emit("error", err);
                  return this.saxParser.errThrown = true;
                } else if (this.saxParser.ended) {
                  throw err;
                }
              }
            };
            Parser.prototype.parseStringPromise = function(str) {
              return new Promise(/* @__PURE__ */ function(_this) {
                return function(resolve2, reject) {
                  return _this.parseString(str, function(err, value) {
                    if (err) {
                      return reject(err);
                    } else {
                      return resolve2(value);
                    }
                  });
                };
              }(this));
            };
            return Parser;
          }(events);
          exports3.parseString = function(str, a, b) {
            var cb, options, parser;
            if (b != null) {
              if (typeof b === "function") {
                cb = b;
              }
              if (typeof a === "object") {
                options = a;
              }
            } else {
              if (typeof a === "function") {
                cb = a;
              }
              options = {};
            }
            parser = new exports3.Parser(options);
            return parser.parseString(str, cb);
          };
          exports3.parseStringPromise = function(str, a) {
            var options, parser;
            if (typeof a === "object") {
              options = a;
            }
            parser = new exports3.Parser(options);
            return parser.parseStringPromise(str);
          };
        }).call(this);
      }, { "./bom": 491, "./defaults": 493, "./processors": 495, "events": 386, "sax": 465, "timers": 484 }], 495: [function(require2, module3, exports3) {
        (function() {
          var prefixMatch;
          prefixMatch = new RegExp(/(?!xmlns)^.*:/);
          exports3.normalize = function(str) {
            return str.toLowerCase();
          };
          exports3.firstCharLowerCase = function(str) {
            return str.charAt(0).toLowerCase() + str.slice(1);
          };
          exports3.stripPrefix = function(str) {
            return str.replace(prefixMatch, "");
          };
          exports3.parseNumbers = function(str) {
            if (!isNaN(str)) {
              str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
            }
            return str;
          };
          exports3.parseBooleans = function(str) {
            if (/^(?:true|false)$/i.test(str)) {
              str = str.toLowerCase() === "true";
            }
            return str;
          };
        }).call(this);
      }, {}], 496: [function(require2, module3, exports3) {
        (function() {
          var builder, defaults, parser, processors, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          defaults = require2("./defaults");
          builder = require2("./builder");
          parser = require2("./parser");
          processors = require2("./processors");
          exports3.defaults = defaults.defaults;
          exports3.processors = processors;
          exports3.ValidationError = function(superClass) {
            extend2(ValidationError, superClass);
            function ValidationError(message) {
              this.message = message;
            }
            return ValidationError;
          }(Error);
          exports3.Builder = builder.Builder;
          exports3.Parser = parser.Parser;
          exports3.parseString = parser.parseString;
          exports3.parseStringPromise = parser.parseStringPromise;
        }).call(this);
      }, { "./builder": 492, "./defaults": 493, "./parser": 494, "./processors": 495 }], 497: [function(require2, module3, exports3) {
        (function() {
          module3.exports = {
            Disconnected: 1,
            Preceding: 2,
            Following: 4,
            Contains: 8,
            ContainedBy: 16,
            ImplementationSpecific: 32
          };
        }).call(this);
      }, {}], 498: [function(require2, module3, exports3) {
        (function() {
          module3.exports = {
            Element: 1,
            Attribute: 2,
            Text: 3,
            CData: 4,
            EntityReference: 5,
            EntityDeclaration: 6,
            ProcessingInstruction: 7,
            Comment: 8,
            Document: 9,
            DocType: 10,
            DocumentFragment: 11,
            NotationDeclaration: 12,
            Declaration: 201,
            Raw: 202,
            AttributeDeclaration: 203,
            ElementDeclaration: 204,
            Dummy: 205
          };
        }).call(this);
      }, {}], 499: [function(require2, module3, exports3) {
        (function() {
          var assign2, getValue, isArray2, isEmpty, isFunction2, isObject2, isPlainObject2, slice = [].slice, hasProp = {}.hasOwnProperty;
          assign2 = function() {
            var i, key, len, source, sources, target;
            target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            if (isFunction2(Object.assign)) {
              Object.assign.apply(null, arguments);
            } else {
              for (i = 0, len = sources.length; i < len; i++) {
                source = sources[i];
                if (source != null) {
                  for (key in source) {
                    if (!hasProp.call(source, key))
                      continue;
                    target[key] = source[key];
                  }
                }
              }
            }
            return target;
          };
          isFunction2 = function(val) {
            return !!val && Object.prototype.toString.call(val) === "[object Function]";
          };
          isObject2 = function(val) {
            var ref2;
            return !!val && ((ref2 = typeof val) === "function" || ref2 === "object");
          };
          isArray2 = function(val) {
            if (isFunction2(Array.isArray)) {
              return Array.isArray(val);
            } else {
              return Object.prototype.toString.call(val) === "[object Array]";
            }
          };
          isEmpty = function(val) {
            var key;
            if (isArray2(val)) {
              return !val.length;
            } else {
              for (key in val) {
                if (!hasProp.call(val, key))
                  continue;
                return false;
              }
              return true;
            }
          };
          isPlainObject2 = function(val) {
            var ctor, proto;
            return isObject2(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
          };
          getValue = function(obj) {
            if (isFunction2(obj.valueOf)) {
              return obj.valueOf();
            } else {
              return obj;
            }
          };
          module3.exports.assign = assign2;
          module3.exports.isFunction = isFunction2;
          module3.exports.isObject = isObject2;
          module3.exports.isArray = isArray2;
          module3.exports.isEmpty = isEmpty;
          module3.exports.isPlainObject = isPlainObject2;
          module3.exports.getValue = getValue;
        }).call(this);
      }, {}], 500: [function(require2, module3, exports3) {
        (function() {
          module3.exports = {
            None: 0,
            OpenTag: 1,
            InsideTag: 2,
            CloseTag: 3
          };
        }).call(this);
      }, {}], 501: [function(require2, module3, exports3) {
        (function() {
          var NodeType;
          NodeType = require2("./NodeType");
          require2("./XMLNode");
          module3.exports = function() {
            function XMLAttribute(parent, name, value) {
              this.parent = parent;
              if (this.parent) {
                this.options = this.parent.options;
                this.stringify = this.parent.stringify;
              }
              if (name == null) {
                throw new Error("Missing attribute name. " + this.debugInfo(name));
              }
              this.name = this.stringify.name(name);
              this.value = this.stringify.attValue(value);
              this.type = NodeType.Attribute;
              this.isId = false;
              this.schemaTypeInfo = null;
            }
            Object.defineProperty(XMLAttribute.prototype, "nodeType", {
              get: function() {
                return this.type;
              }
            });
            Object.defineProperty(XMLAttribute.prototype, "ownerElement", {
              get: function() {
                return this.parent;
              }
            });
            Object.defineProperty(XMLAttribute.prototype, "textContent", {
              get: function() {
                return this.value;
              },
              set: function(value) {
                return this.value = value || "";
              }
            });
            Object.defineProperty(XMLAttribute.prototype, "namespaceURI", {
              get: function() {
                return "";
              }
            });
            Object.defineProperty(XMLAttribute.prototype, "prefix", {
              get: function() {
                return "";
              }
            });
            Object.defineProperty(XMLAttribute.prototype, "localName", {
              get: function() {
                return this.name;
              }
            });
            Object.defineProperty(XMLAttribute.prototype, "specified", {
              get: function() {
                return true;
              }
            });
            XMLAttribute.prototype.clone = function() {
              return Object.create(this);
            };
            XMLAttribute.prototype.toString = function(options) {
              return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
            };
            XMLAttribute.prototype.debugInfo = function(name) {
              name = name || this.name;
              if (name == null) {
                return "parent: <" + this.parent.name + ">";
              } else {
                return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
              }
            };
            XMLAttribute.prototype.isEqualNode = function(node) {
              if (node.namespaceURI !== this.namespaceURI) {
                return false;
              }
              if (node.prefix !== this.prefix) {
                return false;
              }
              if (node.localName !== this.localName) {
                return false;
              }
              if (node.value !== this.value) {
                return false;
              }
              return true;
            };
            return XMLAttribute;
          }();
        }).call(this);
      }, { "./NodeType": 498, "./XMLNode": 520 }], 502: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLCharacterData, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          NodeType = require2("./NodeType");
          XMLCharacterData = require2("./XMLCharacterData");
          module3.exports = function(superClass) {
            extend2(XMLCData, superClass);
            function XMLCData(parent, text2) {
              XMLCData.__super__.constructor.call(this, parent);
              if (text2 == null) {
                throw new Error("Missing CDATA text. " + this.debugInfo());
              }
              this.name = "#cdata-section";
              this.type = NodeType.CData;
              this.value = this.stringify.cdata(text2);
            }
            XMLCData.prototype.clone = function() {
              return Object.create(this);
            };
            XMLCData.prototype.toString = function(options) {
              return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
            };
            return XMLCData;
          }(XMLCharacterData);
        }).call(this);
      }, { "./NodeType": 498, "./XMLCharacterData": 503 }], 503: [function(require2, module3, exports3) {
        (function() {
          var XMLNode, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          XMLNode = require2("./XMLNode");
          module3.exports = function(superClass) {
            extend2(XMLCharacterData, superClass);
            function XMLCharacterData(parent) {
              XMLCharacterData.__super__.constructor.call(this, parent);
              this.value = "";
            }
            Object.defineProperty(XMLCharacterData.prototype, "data", {
              get: function() {
                return this.value;
              },
              set: function(value) {
                return this.value = value || "";
              }
            });
            Object.defineProperty(XMLCharacterData.prototype, "length", {
              get: function() {
                return this.value.length;
              }
            });
            Object.defineProperty(XMLCharacterData.prototype, "textContent", {
              get: function() {
                return this.value;
              },
              set: function(value) {
                return this.value = value || "";
              }
            });
            XMLCharacterData.prototype.clone = function() {
              return Object.create(this);
            };
            XMLCharacterData.prototype.substringData = function(offset, count) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLCharacterData.prototype.appendData = function(arg) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLCharacterData.prototype.insertData = function(offset, arg) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLCharacterData.prototype.deleteData = function(offset, count) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLCharacterData.prototype.replaceData = function(offset, count, arg) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLCharacterData.prototype.isEqualNode = function(node) {
              if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
                return false;
              }
              if (node.data !== this.data) {
                return false;
              }
              return true;
            };
            return XMLCharacterData;
          }(XMLNode);
        }).call(this);
      }, { "./XMLNode": 520 }], 504: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLCharacterData, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          NodeType = require2("./NodeType");
          XMLCharacterData = require2("./XMLCharacterData");
          module3.exports = function(superClass) {
            extend2(XMLComment, superClass);
            function XMLComment(parent, text2) {
              XMLComment.__super__.constructor.call(this, parent);
              if (text2 == null) {
                throw new Error("Missing comment text. " + this.debugInfo());
              }
              this.name = "#comment";
              this.type = NodeType.Comment;
              this.value = this.stringify.comment(text2);
            }
            XMLComment.prototype.clone = function() {
              return Object.create(this);
            };
            XMLComment.prototype.toString = function(options) {
              return this.options.writer.comment(this, this.options.writer.filterOptions(options));
            };
            return XMLComment;
          }(XMLCharacterData);
        }).call(this);
      }, { "./NodeType": 498, "./XMLCharacterData": 503 }], 505: [function(require2, module3, exports3) {
        (function() {
          var XMLDOMErrorHandler, XMLDOMStringList;
          XMLDOMErrorHandler = require2("./XMLDOMErrorHandler");
          XMLDOMStringList = require2("./XMLDOMStringList");
          module3.exports = function() {
            function XMLDOMConfiguration() {
              this.defaultParams = {
                "canonical-form": false,
                "cdata-sections": false,
                "comments": false,
                "datatype-normalization": false,
                "element-content-whitespace": true,
                "entities": true,
                "error-handler": new XMLDOMErrorHandler(),
                "infoset": true,
                "validate-if-schema": false,
                "namespaces": true,
                "namespace-declarations": true,
                "normalize-characters": false,
                "schema-location": "",
                "schema-type": "",
                "split-cdata-sections": true,
                "validate": false,
                "well-formed": true
              };
              this.params = Object.create(this.defaultParams);
            }
            Object.defineProperty(XMLDOMConfiguration.prototype, "parameterNames", {
              get: function() {
                return new XMLDOMStringList(Object.keys(this.defaultParams));
              }
            });
            XMLDOMConfiguration.prototype.getParameter = function(name) {
              if (this.params.hasOwnProperty(name)) {
                return this.params[name];
              } else {
                return null;
              }
            };
            XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {
              return true;
            };
            XMLDOMConfiguration.prototype.setParameter = function(name, value) {
              if (value != null) {
                return this.params[name] = value;
              } else {
                return delete this.params[name];
              }
            };
            return XMLDOMConfiguration;
          }();
        }).call(this);
      }, { "./XMLDOMErrorHandler": 506, "./XMLDOMStringList": 508 }], 506: [function(require2, module3, exports3) {
        (function() {
          module3.exports = function() {
            function XMLDOMErrorHandler() {
            }
            XMLDOMErrorHandler.prototype.handleError = function(error) {
              throw new Error(error);
            };
            return XMLDOMErrorHandler;
          }();
        }).call(this);
      }, {}], 507: [function(require2, module3, exports3) {
        (function() {
          module3.exports = function() {
            function XMLDOMImplementation() {
            }
            XMLDOMImplementation.prototype.hasFeature = function(feature, version2) {
              return true;
            };
            XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
              throw new Error("This DOM method is not implemented.");
            };
            XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
              throw new Error("This DOM method is not implemented.");
            };
            XMLDOMImplementation.prototype.createHTMLDocument = function(title) {
              throw new Error("This DOM method is not implemented.");
            };
            XMLDOMImplementation.prototype.getFeature = function(feature, version2) {
              throw new Error("This DOM method is not implemented.");
            };
            return XMLDOMImplementation;
          }();
        }).call(this);
      }, {}], 508: [function(require2, module3, exports3) {
        (function() {
          module3.exports = function() {
            function XMLDOMStringList(arr) {
              this.arr = arr || [];
            }
            Object.defineProperty(XMLDOMStringList.prototype, "length", {
              get: function() {
                return this.arr.length;
              }
            });
            XMLDOMStringList.prototype.item = function(index2) {
              return this.arr[index2] || null;
            };
            XMLDOMStringList.prototype.contains = function(str) {
              return this.arr.indexOf(str) !== -1;
            };
            return XMLDOMStringList;
          }();
        }).call(this);
      }, {}], 509: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLNode, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          module3.exports = function(superClass) {
            extend2(XMLDTDAttList, superClass);
            function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              XMLDTDAttList.__super__.constructor.call(this, parent);
              if (elementName == null) {
                throw new Error("Missing DTD element name. " + this.debugInfo());
              }
              if (attributeName == null) {
                throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
              }
              if (!attributeType) {
                throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
              }
              if (!defaultValueType) {
                throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
              }
              if (defaultValueType.indexOf("#") !== 0) {
                defaultValueType = "#" + defaultValueType;
              }
              if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
                throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
              }
              if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
                throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
              }
              this.elementName = this.stringify.name(elementName);
              this.type = NodeType.AttributeDeclaration;
              this.attributeName = this.stringify.name(attributeName);
              this.attributeType = this.stringify.dtdAttType(attributeType);
              if (defaultValue) {
                this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
              }
              this.defaultValueType = defaultValueType;
            }
            XMLDTDAttList.prototype.toString = function(options) {
              return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
            };
            return XMLDTDAttList;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./XMLNode": 520 }], 510: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLNode, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          module3.exports = function(superClass) {
            extend2(XMLDTDElement, superClass);
            function XMLDTDElement(parent, name, value) {
              XMLDTDElement.__super__.constructor.call(this, parent);
              if (name == null) {
                throw new Error("Missing DTD element name. " + this.debugInfo());
              }
              if (!value) {
                value = "(#PCDATA)";
              }
              if (Array.isArray(value)) {
                value = "(" + value.join(",") + ")";
              }
              this.name = this.stringify.name(name);
              this.type = NodeType.ElementDeclaration;
              this.value = this.stringify.dtdElementValue(value);
            }
            XMLDTDElement.prototype.toString = function(options) {
              return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
            };
            return XMLDTDElement;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./XMLNode": 520 }], 511: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLNode, isObject2, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          isObject2 = require2("./Utility").isObject;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          module3.exports = function(superClass) {
            extend2(XMLDTDEntity, superClass);
            function XMLDTDEntity(parent, pe, name, value) {
              XMLDTDEntity.__super__.constructor.call(this, parent);
              if (name == null) {
                throw new Error("Missing DTD entity name. " + this.debugInfo(name));
              }
              if (value == null) {
                throw new Error("Missing DTD entity value. " + this.debugInfo(name));
              }
              this.pe = !!pe;
              this.name = this.stringify.name(name);
              this.type = NodeType.EntityDeclaration;
              if (!isObject2(value)) {
                this.value = this.stringify.dtdEntityValue(value);
                this.internal = true;
              } else {
                if (!value.pubID && !value.sysID) {
                  throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
                }
                if (value.pubID && !value.sysID) {
                  throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
                }
                this.internal = false;
                if (value.pubID != null) {
                  this.pubID = this.stringify.dtdPubID(value.pubID);
                }
                if (value.sysID != null) {
                  this.sysID = this.stringify.dtdSysID(value.sysID);
                }
                if (value.nData != null) {
                  this.nData = this.stringify.dtdNData(value.nData);
                }
                if (this.pe && this.nData) {
                  throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
                }
              }
            }
            Object.defineProperty(XMLDTDEntity.prototype, "publicId", {
              get: function() {
                return this.pubID;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, "systemId", {
              get: function() {
                return this.sysID;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, "notationName", {
              get: function() {
                return this.nData || null;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, "inputEncoding", {
              get: function() {
                return null;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, "xmlEncoding", {
              get: function() {
                return null;
              }
            });
            Object.defineProperty(XMLDTDEntity.prototype, "xmlVersion", {
              get: function() {
                return null;
              }
            });
            XMLDTDEntity.prototype.toString = function(options) {
              return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
            };
            return XMLDTDEntity;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./XMLNode": 520 }], 512: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLNode, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          module3.exports = function(superClass) {
            extend2(XMLDTDNotation, superClass);
            function XMLDTDNotation(parent, name, value) {
              XMLDTDNotation.__super__.constructor.call(this, parent);
              if (name == null) {
                throw new Error("Missing DTD notation name. " + this.debugInfo(name));
              }
              if (!value.pubID && !value.sysID) {
                throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
              }
              this.name = this.stringify.name(name);
              this.type = NodeType.NotationDeclaration;
              if (value.pubID != null) {
                this.pubID = this.stringify.dtdPubID(value.pubID);
              }
              if (value.sysID != null) {
                this.sysID = this.stringify.dtdSysID(value.sysID);
              }
            }
            Object.defineProperty(XMLDTDNotation.prototype, "publicId", {
              get: function() {
                return this.pubID;
              }
            });
            Object.defineProperty(XMLDTDNotation.prototype, "systemId", {
              get: function() {
                return this.sysID;
              }
            });
            XMLDTDNotation.prototype.toString = function(options) {
              return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
            };
            return XMLDTDNotation;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./XMLNode": 520 }], 513: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLNode, isObject2, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          isObject2 = require2("./Utility").isObject;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          module3.exports = function(superClass) {
            extend2(XMLDeclaration, superClass);
            function XMLDeclaration(parent, version2, encoding, standalone) {
              var ref2;
              XMLDeclaration.__super__.constructor.call(this, parent);
              if (isObject2(version2)) {
                ref2 = version2, version2 = ref2.version, encoding = ref2.encoding, standalone = ref2.standalone;
              }
              if (!version2) {
                version2 = "1.0";
              }
              this.type = NodeType.Declaration;
              this.version = this.stringify.xmlVersion(version2);
              if (encoding != null) {
                this.encoding = this.stringify.xmlEncoding(encoding);
              }
              if (standalone != null) {
                this.standalone = this.stringify.xmlStandalone(standalone);
              }
            }
            XMLDeclaration.prototype.toString = function(options) {
              return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
            };
            return XMLDeclaration;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./XMLNode": 520 }], 514: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLNamedNodeMap, XMLNode, isObject2, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          isObject2 = require2("./Utility").isObject;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          XMLDTDAttList = require2("./XMLDTDAttList");
          XMLDTDEntity = require2("./XMLDTDEntity");
          XMLDTDElement = require2("./XMLDTDElement");
          XMLDTDNotation = require2("./XMLDTDNotation");
          XMLNamedNodeMap = require2("./XMLNamedNodeMap");
          module3.exports = function(superClass) {
            extend2(XMLDocType, superClass);
            function XMLDocType(parent, pubID, sysID) {
              var child, i, len, ref2, ref1, ref22;
              XMLDocType.__super__.constructor.call(this, parent);
              this.type = NodeType.DocType;
              if (parent.children) {
                ref2 = parent.children;
                for (i = 0, len = ref2.length; i < len; i++) {
                  child = ref2[i];
                  if (child.type === NodeType.Element) {
                    this.name = child.name;
                    break;
                  }
                }
              }
              this.documentObject = parent;
              if (isObject2(pubID)) {
                ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
              }
              if (sysID == null) {
                ref22 = [pubID, sysID], sysID = ref22[0], pubID = ref22[1];
              }
              if (pubID != null) {
                this.pubID = this.stringify.dtdPubID(pubID);
              }
              if (sysID != null) {
                this.sysID = this.stringify.dtdSysID(sysID);
              }
            }
            Object.defineProperty(XMLDocType.prototype, "entities", {
              get: function() {
                var child, i, len, nodes, ref2;
                nodes = {};
                ref2 = this.children;
                for (i = 0, len = ref2.length; i < len; i++) {
                  child = ref2[i];
                  if (child.type === NodeType.EntityDeclaration && !child.pe) {
                    nodes[child.name] = child;
                  }
                }
                return new XMLNamedNodeMap(nodes);
              }
            });
            Object.defineProperty(XMLDocType.prototype, "notations", {
              get: function() {
                var child, i, len, nodes, ref2;
                nodes = {};
                ref2 = this.children;
                for (i = 0, len = ref2.length; i < len; i++) {
                  child = ref2[i];
                  if (child.type === NodeType.NotationDeclaration) {
                    nodes[child.name] = child;
                  }
                }
                return new XMLNamedNodeMap(nodes);
              }
            });
            Object.defineProperty(XMLDocType.prototype, "publicId", {
              get: function() {
                return this.pubID;
              }
            });
            Object.defineProperty(XMLDocType.prototype, "systemId", {
              get: function() {
                return this.sysID;
              }
            });
            Object.defineProperty(XMLDocType.prototype, "internalSubset", {
              get: function() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });
            XMLDocType.prototype.element = function(name, value) {
              var child;
              child = new XMLDTDElement(this, name, value);
              this.children.push(child);
              return this;
            };
            XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              var child;
              child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
              this.children.push(child);
              return this;
            };
            XMLDocType.prototype.entity = function(name, value) {
              var child;
              child = new XMLDTDEntity(this, false, name, value);
              this.children.push(child);
              return this;
            };
            XMLDocType.prototype.pEntity = function(name, value) {
              var child;
              child = new XMLDTDEntity(this, true, name, value);
              this.children.push(child);
              return this;
            };
            XMLDocType.prototype.notation = function(name, value) {
              var child;
              child = new XMLDTDNotation(this, name, value);
              this.children.push(child);
              return this;
            };
            XMLDocType.prototype.toString = function(options) {
              return this.options.writer.docType(this, this.options.writer.filterOptions(options));
            };
            XMLDocType.prototype.ele = function(name, value) {
              return this.element(name, value);
            };
            XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
            };
            XMLDocType.prototype.ent = function(name, value) {
              return this.entity(name, value);
            };
            XMLDocType.prototype.pent = function(name, value) {
              return this.pEntity(name, value);
            };
            XMLDocType.prototype.not = function(name, value) {
              return this.notation(name, value);
            };
            XMLDocType.prototype.up = function() {
              return this.root() || this.documentObject;
            };
            XMLDocType.prototype.isEqualNode = function(node) {
              if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
                return false;
              }
              if (node.name !== this.name) {
                return false;
              }
              if (node.publicId !== this.publicId) {
                return false;
              }
              if (node.systemId !== this.systemId) {
                return false;
              }
              return true;
            };
            return XMLDocType;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./XMLDTDAttList": 509, "./XMLDTDElement": 510, "./XMLDTDEntity": 511, "./XMLDTDNotation": 512, "./XMLNamedNodeMap": 519, "./XMLNode": 520 }], 515: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject2, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          isPlainObject2 = require2("./Utility").isPlainObject;
          XMLDOMImplementation = require2("./XMLDOMImplementation");
          XMLDOMConfiguration = require2("./XMLDOMConfiguration");
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          XMLStringifier = require2("./XMLStringifier");
          XMLStringWriter = require2("./XMLStringWriter");
          module3.exports = function(superClass) {
            extend2(XMLDocument, superClass);
            function XMLDocument(options) {
              XMLDocument.__super__.constructor.call(this, null);
              this.name = "#document";
              this.type = NodeType.Document;
              this.documentURI = null;
              this.domConfig = new XMLDOMConfiguration();
              options || (options = {});
              if (!options.writer) {
                options.writer = new XMLStringWriter();
              }
              this.options = options;
              this.stringify = new XMLStringifier(options);
            }
            Object.defineProperty(XMLDocument.prototype, "implementation", {
              value: new XMLDOMImplementation()
            });
            Object.defineProperty(XMLDocument.prototype, "doctype", {
              get: function() {
                var child, i, len, ref2;
                ref2 = this.children;
                for (i = 0, len = ref2.length; i < len; i++) {
                  child = ref2[i];
                  if (child.type === NodeType.DocType) {
                    return child;
                  }
                }
                return null;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "documentElement", {
              get: function() {
                return this.rootObject || null;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "inputEncoding", {
              get: function() {
                return null;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "strictErrorChecking", {
              get: function() {
                return false;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "xmlEncoding", {
              get: function() {
                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
                  return this.children[0].encoding;
                } else {
                  return null;
                }
              }
            });
            Object.defineProperty(XMLDocument.prototype, "xmlStandalone", {
              get: function() {
                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
                  return this.children[0].standalone === "yes";
                } else {
                  return false;
                }
              }
            });
            Object.defineProperty(XMLDocument.prototype, "xmlVersion", {
              get: function() {
                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
                  return this.children[0].version;
                } else {
                  return "1.0";
                }
              }
            });
            Object.defineProperty(XMLDocument.prototype, "URL", {
              get: function() {
                return this.documentURI;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "origin", {
              get: function() {
                return null;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "compatMode", {
              get: function() {
                return null;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "characterSet", {
              get: function() {
                return null;
              }
            });
            Object.defineProperty(XMLDocument.prototype, "contentType", {
              get: function() {
                return null;
              }
            });
            XMLDocument.prototype.end = function(writer) {
              var writerOptions;
              writerOptions = {};
              if (!writer) {
                writer = this.options.writer;
              } else if (isPlainObject2(writer)) {
                writerOptions = writer;
                writer = this.options.writer;
              }
              return writer.document(this, writer.filterOptions(writerOptions));
            };
            XMLDocument.prototype.toString = function(options) {
              return this.options.writer.document(this, this.options.writer.filterOptions(options));
            };
            XMLDocument.prototype.createElement = function(tagName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createDocumentFragment = function() {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createTextNode = function(data) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createComment = function(data) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createCDATASection = function(data) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createProcessingInstruction = function(target, data) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createAttribute = function(name) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createEntityReference = function(name) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.getElementsByTagName = function(tagname) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.importNode = function(importedNode, deep) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.getElementById = function(elementId) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.adoptNode = function(source) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.normalizeDocument = function() {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.getElementsByClassName = function(classNames) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createEvent = function(eventInterface) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createRange = function() {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            return XMLDocument;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./XMLDOMConfiguration": 505, "./XMLDOMImplementation": 507, "./XMLNode": 520, "./XMLStringWriter": 525, "./XMLStringifier": 526 }], 516: [function(require2, module3, exports3) {
        (function() {
          var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction2, isObject2, isPlainObject2, ref2, hasProp = {}.hasOwnProperty;
          ref2 = require2("./Utility"), isObject2 = ref2.isObject, isFunction2 = ref2.isFunction, isPlainObject2 = ref2.isPlainObject, getValue = ref2.getValue;
          NodeType = require2("./NodeType");
          XMLDocument = require2("./XMLDocument");
          XMLElement = require2("./XMLElement");
          XMLCData = require2("./XMLCData");
          XMLComment = require2("./XMLComment");
          XMLRaw = require2("./XMLRaw");
          XMLText = require2("./XMLText");
          XMLProcessingInstruction = require2("./XMLProcessingInstruction");
          XMLDeclaration = require2("./XMLDeclaration");
          XMLDocType = require2("./XMLDocType");
          XMLDTDAttList = require2("./XMLDTDAttList");
          XMLDTDEntity = require2("./XMLDTDEntity");
          XMLDTDElement = require2("./XMLDTDElement");
          XMLDTDNotation = require2("./XMLDTDNotation");
          XMLAttribute = require2("./XMLAttribute");
          XMLStringifier = require2("./XMLStringifier");
          XMLStringWriter = require2("./XMLStringWriter");
          WriterState = require2("./WriterState");
          module3.exports = function() {
            function XMLDocumentCB(options, onData, onEnd) {
              var writerOptions;
              this.name = "?xml";
              this.type = NodeType.Document;
              options || (options = {});
              writerOptions = {};
              if (!options.writer) {
                options.writer = new XMLStringWriter();
              } else if (isPlainObject2(options.writer)) {
                writerOptions = options.writer;
                options.writer = new XMLStringWriter();
              }
              this.options = options;
              this.writer = options.writer;
              this.writerOptions = this.writer.filterOptions(writerOptions);
              this.stringify = new XMLStringifier(options);
              this.onDataCallback = onData || function() {
              };
              this.onEndCallback = onEnd || function() {
              };
              this.currentNode = null;
              this.currentLevel = -1;
              this.openTags = {};
              this.documentStarted = false;
              this.documentCompleted = false;
              this.root = null;
            }
            XMLDocumentCB.prototype.createChildNode = function(node) {
              var att, attName, attributes, child, i, len, ref1, ref22;
              switch (node.type) {
                case NodeType.CData:
                  this.cdata(node.value);
                  break;
                case NodeType.Comment:
                  this.comment(node.value);
                  break;
                case NodeType.Element:
                  attributes = {};
                  ref1 = node.attribs;
                  for (attName in ref1) {
                    if (!hasProp.call(ref1, attName))
                      continue;
                    att = ref1[attName];
                    attributes[attName] = att.value;
                  }
                  this.node(node.name, attributes);
                  break;
                case NodeType.Dummy:
                  this.dummy();
                  break;
                case NodeType.Raw:
                  this.raw(node.value);
                  break;
                case NodeType.Text:
                  this.text(node.value);
                  break;
                case NodeType.ProcessingInstruction:
                  this.instruction(node.target, node.value);
                  break;
                default:
                  throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
              }
              ref22 = node.children;
              for (i = 0, len = ref22.length; i < len; i++) {
                child = ref22[i];
                this.createChildNode(child);
                if (child.type === NodeType.Element) {
                  this.up();
                }
              }
              return this;
            };
            XMLDocumentCB.prototype.dummy = function() {
              return this;
            };
            XMLDocumentCB.prototype.node = function(name, attributes, text2) {
              var ref1;
              if (name == null) {
                throw new Error("Missing node name.");
              }
              if (this.root && this.currentLevel === -1) {
                throw new Error("Document can only have one root node. " + this.debugInfo(name));
              }
              this.openCurrent();
              name = getValue(name);
              if (attributes == null) {
                attributes = {};
              }
              attributes = getValue(attributes);
              if (!isObject2(attributes)) {
                ref1 = [attributes, text2], text2 = ref1[0], attributes = ref1[1];
              }
              this.currentNode = new XMLElement(this, name, attributes);
              this.currentNode.children = false;
              this.currentLevel++;
              this.openTags[this.currentLevel] = this.currentNode;
              if (text2 != null) {
                this.text(text2);
              }
              return this;
            };
            XMLDocumentCB.prototype.element = function(name, attributes, text2) {
              var child, i, len, oldValidationFlag, ref1, root;
              if (this.currentNode && this.currentNode.type === NodeType.DocType) {
                this.dtdElement.apply(this, arguments);
              } else {
                if (Array.isArray(name) || isObject2(name) || isFunction2(name)) {
                  oldValidationFlag = this.options.noValidation;
                  this.options.noValidation = true;
                  root = new XMLDocument(this.options).element("TEMP_ROOT");
                  root.element(name);
                  this.options.noValidation = oldValidationFlag;
                  ref1 = root.children;
                  for (i = 0, len = ref1.length; i < len; i++) {
                    child = ref1[i];
                    this.createChildNode(child);
                    if (child.type === NodeType.Element) {
                      this.up();
                    }
                  }
                } else {
                  this.node(name, attributes, text2);
                }
              }
              return this;
            };
            XMLDocumentCB.prototype.attribute = function(name, value) {
              var attName, attValue;
              if (!this.currentNode || this.currentNode.children) {
                throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
              }
              if (name != null) {
                name = getValue(name);
              }
              if (isObject2(name)) {
                for (attName in name) {
                  if (!hasProp.call(name, attName))
                    continue;
                  attValue = name[attName];
                  this.attribute(attName, attValue);
                }
              } else {
                if (isFunction2(value)) {
                  value = value.apply();
                }
                if (this.options.keepNullAttributes && value == null) {
                  this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
                } else if (value != null) {
                  this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
                }
              }
              return this;
            };
            XMLDocumentCB.prototype.text = function(value) {
              var node;
              this.openCurrent();
              node = new XMLText(this, value);
              this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.cdata = function(value) {
              var node;
              this.openCurrent();
              node = new XMLCData(this, value);
              this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.comment = function(value) {
              var node;
              this.openCurrent();
              node = new XMLComment(this, value);
              this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.raw = function(value) {
              var node;
              this.openCurrent();
              node = new XMLRaw(this, value);
              this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.instruction = function(target, value) {
              var i, insTarget, insValue, len, node;
              this.openCurrent();
              if (target != null) {
                target = getValue(target);
              }
              if (value != null) {
                value = getValue(value);
              }
              if (Array.isArray(target)) {
                for (i = 0, len = target.length; i < len; i++) {
                  insTarget = target[i];
                  this.instruction(insTarget);
                }
              } else if (isObject2(target)) {
                for (insTarget in target) {
                  if (!hasProp.call(target, insTarget))
                    continue;
                  insValue = target[insTarget];
                  this.instruction(insTarget, insValue);
                }
              } else {
                if (isFunction2(value)) {
                  value = value.apply();
                }
                node = new XMLProcessingInstruction(this, target, value);
                this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              }
              return this;
            };
            XMLDocumentCB.prototype.declaration = function(version2, encoding, standalone) {
              var node;
              this.openCurrent();
              if (this.documentStarted) {
                throw new Error("declaration() must be the first node.");
              }
              node = new XMLDeclaration(this, version2, encoding, standalone);
              this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
              this.openCurrent();
              if (root == null) {
                throw new Error("Missing root node name.");
              }
              if (this.root) {
                throw new Error("dtd() must come before the root node.");
              }
              this.currentNode = new XMLDocType(this, pubID, sysID);
              this.currentNode.rootNodeName = root;
              this.currentNode.children = false;
              this.currentLevel++;
              this.openTags[this.currentLevel] = this.currentNode;
              return this;
            };
            XMLDocumentCB.prototype.dtdElement = function(name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDElement(this, name, value);
              this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
              var node;
              this.openCurrent();
              node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
              this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.entity = function(name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDEntity(this, false, name, value);
              this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.pEntity = function(name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDEntity(this, true, name, value);
              this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.notation = function(name, value) {
              var node;
              this.openCurrent();
              node = new XMLDTDNotation(this, name, value);
              this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
              return this;
            };
            XMLDocumentCB.prototype.up = function() {
              if (this.currentLevel < 0) {
                throw new Error("The document node has no parent.");
              }
              if (this.currentNode) {
                if (this.currentNode.children) {
                  this.closeNode(this.currentNode);
                } else {
                  this.openNode(this.currentNode);
                }
                this.currentNode = null;
              } else {
                this.closeNode(this.openTags[this.currentLevel]);
              }
              delete this.openTags[this.currentLevel];
              this.currentLevel--;
              return this;
            };
            XMLDocumentCB.prototype.end = function() {
              while (this.currentLevel >= 0) {
                this.up();
              }
              return this.onEnd();
            };
            XMLDocumentCB.prototype.openCurrent = function() {
              if (this.currentNode) {
                this.currentNode.children = true;
                return this.openNode(this.currentNode);
              }
            };
            XMLDocumentCB.prototype.openNode = function(node) {
              var att, chunk, name, ref1;
              if (!node.isOpen) {
                if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
                  this.root = node;
                }
                chunk = "";
                if (node.type === NodeType.Element) {
                  this.writerOptions.state = WriterState.OpenTag;
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<" + node.name;
                  ref1 = node.attribs;
                  for (name in ref1) {
                    if (!hasProp.call(ref1, name))
                      continue;
                    att = ref1[name];
                    chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
                  }
                  chunk += (node.children ? ">" : "/>") + this.writer.endline(node, this.writerOptions, this.currentLevel);
                  this.writerOptions.state = WriterState.InsideTag;
                } else {
                  this.writerOptions.state = WriterState.OpenTag;
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<!DOCTYPE " + node.rootNodeName;
                  if (node.pubID && node.sysID) {
                    chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                  } else if (node.sysID) {
                    chunk += ' SYSTEM "' + node.sysID + '"';
                  }
                  if (node.children) {
                    chunk += " [";
                    this.writerOptions.state = WriterState.InsideTag;
                  } else {
                    this.writerOptions.state = WriterState.CloseTag;
                    chunk += ">";
                  }
                  chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
                }
                this.onData(chunk, this.currentLevel);
                return node.isOpen = true;
              }
            };
            XMLDocumentCB.prototype.closeNode = function(node) {
              var chunk;
              if (!node.isClosed) {
                chunk = "";
                this.writerOptions.state = WriterState.CloseTag;
                if (node.type === NodeType.Element) {
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "</" + node.name + ">" + this.writer.endline(node, this.writerOptions, this.currentLevel);
                } else {
                  chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "]>" + this.writer.endline(node, this.writerOptions, this.currentLevel);
                }
                this.writerOptions.state = WriterState.None;
                this.onData(chunk, this.currentLevel);
                return node.isClosed = true;
              }
            };
            XMLDocumentCB.prototype.onData = function(chunk, level) {
              this.documentStarted = true;
              return this.onDataCallback(chunk, level + 1);
            };
            XMLDocumentCB.prototype.onEnd = function() {
              this.documentCompleted = true;
              return this.onEndCallback();
            };
            XMLDocumentCB.prototype.debugInfo = function(name) {
              if (name == null) {
                return "";
              } else {
                return "node: <" + name + ">";
              }
            };
            XMLDocumentCB.prototype.ele = function() {
              return this.element.apply(this, arguments);
            };
            XMLDocumentCB.prototype.nod = function(name, attributes, text2) {
              return this.node(name, attributes, text2);
            };
            XMLDocumentCB.prototype.txt = function(value) {
              return this.text(value);
            };
            XMLDocumentCB.prototype.dat = function(value) {
              return this.cdata(value);
            };
            XMLDocumentCB.prototype.com = function(value) {
              return this.comment(value);
            };
            XMLDocumentCB.prototype.ins = function(target, value) {
              return this.instruction(target, value);
            };
            XMLDocumentCB.prototype.dec = function(version2, encoding, standalone) {
              return this.declaration(version2, encoding, standalone);
            };
            XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
              return this.doctype(root, pubID, sysID);
            };
            XMLDocumentCB.prototype.e = function(name, attributes, text2) {
              return this.element(name, attributes, text2);
            };
            XMLDocumentCB.prototype.n = function(name, attributes, text2) {
              return this.node(name, attributes, text2);
            };
            XMLDocumentCB.prototype.t = function(value) {
              return this.text(value);
            };
            XMLDocumentCB.prototype.d = function(value) {
              return this.cdata(value);
            };
            XMLDocumentCB.prototype.c = function(value) {
              return this.comment(value);
            };
            XMLDocumentCB.prototype.r = function(value) {
              return this.raw(value);
            };
            XMLDocumentCB.prototype.i = function(target, value) {
              return this.instruction(target, value);
            };
            XMLDocumentCB.prototype.att = function() {
              if (this.currentNode && this.currentNode.type === NodeType.DocType) {
                return this.attList.apply(this, arguments);
              } else {
                return this.attribute.apply(this, arguments);
              }
            };
            XMLDocumentCB.prototype.a = function() {
              if (this.currentNode && this.currentNode.type === NodeType.DocType) {
                return this.attList.apply(this, arguments);
              } else {
                return this.attribute.apply(this, arguments);
              }
            };
            XMLDocumentCB.prototype.ent = function(name, value) {
              return this.entity(name, value);
            };
            XMLDocumentCB.prototype.pent = function(name, value) {
              return this.pEntity(name, value);
            };
            XMLDocumentCB.prototype.not = function(name, value) {
              return this.notation(name, value);
            };
            return XMLDocumentCB;
          }();
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./WriterState": 500, "./XMLAttribute": 501, "./XMLCData": 502, "./XMLComment": 504, "./XMLDTDAttList": 509, "./XMLDTDElement": 510, "./XMLDTDEntity": 511, "./XMLDTDNotation": 512, "./XMLDeclaration": 513, "./XMLDocType": 514, "./XMLDocument": 515, "./XMLElement": 518, "./XMLProcessingInstruction": 522, "./XMLRaw": 523, "./XMLStringWriter": 525, "./XMLStringifier": 526, "./XMLText": 527 }], 517: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLNode, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          module3.exports = function(superClass) {
            extend2(XMLDummy, superClass);
            function XMLDummy(parent) {
              XMLDummy.__super__.constructor.call(this, parent);
              this.type = NodeType.Dummy;
            }
            XMLDummy.prototype.clone = function() {
              return Object.create(this);
            };
            XMLDummy.prototype.toString = function(options) {
              return "";
            };
            return XMLDummy;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./XMLNode": 520 }], 518: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLAttribute, XMLNamedNodeMap, XMLNode, getValue, isFunction2, isObject2, ref2, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          ref2 = require2("./Utility"), isObject2 = ref2.isObject, isFunction2 = ref2.isFunction, getValue = ref2.getValue;
          XMLNode = require2("./XMLNode");
          NodeType = require2("./NodeType");
          XMLAttribute = require2("./XMLAttribute");
          XMLNamedNodeMap = require2("./XMLNamedNodeMap");
          module3.exports = function(superClass) {
            extend2(XMLElement, superClass);
            function XMLElement(parent, name, attributes) {
              var child, j, len, ref1;
              XMLElement.__super__.constructor.call(this, parent);
              if (name == null) {
                throw new Error("Missing element name. " + this.debugInfo());
              }
              this.name = this.stringify.name(name);
              this.type = NodeType.Element;
              this.attribs = {};
              this.schemaTypeInfo = null;
              if (attributes != null) {
                this.attribute(attributes);
              }
              if (parent.type === NodeType.Document) {
                this.isRoot = true;
                this.documentObject = parent;
                parent.rootObject = this;
                if (parent.children) {
                  ref1 = parent.children;
                  for (j = 0, len = ref1.length; j < len; j++) {
                    child = ref1[j];
                    if (child.type === NodeType.DocType) {
                      child.name = this.name;
                      break;
                    }
                  }
                }
              }
            }
            Object.defineProperty(XMLElement.prototype, "tagName", {
              get: function() {
                return this.name;
              }
            });
            Object.defineProperty(XMLElement.prototype, "namespaceURI", {
              get: function() {
                return "";
              }
            });
            Object.defineProperty(XMLElement.prototype, "prefix", {
              get: function() {
                return "";
              }
            });
            Object.defineProperty(XMLElement.prototype, "localName", {
              get: function() {
                return this.name;
              }
            });
            Object.defineProperty(XMLElement.prototype, "id", {
              get: function() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });
            Object.defineProperty(XMLElement.prototype, "className", {
              get: function() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });
            Object.defineProperty(XMLElement.prototype, "classList", {
              get: function() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });
            Object.defineProperty(XMLElement.prototype, "attributes", {
              get: function() {
                if (!this.attributeMap || !this.attributeMap.nodes) {
                  this.attributeMap = new XMLNamedNodeMap(this.attribs);
                }
                return this.attributeMap;
              }
            });
            XMLElement.prototype.clone = function() {
              var att, attName, clonedSelf, ref1;
              clonedSelf = Object.create(this);
              if (clonedSelf.isRoot) {
                clonedSelf.documentObject = null;
              }
              clonedSelf.attribs = {};
              ref1 = this.attribs;
              for (attName in ref1) {
                if (!hasProp.call(ref1, attName))
                  continue;
                att = ref1[attName];
                clonedSelf.attribs[attName] = att.clone();
              }
              clonedSelf.children = [];
              this.children.forEach(function(child) {
                var clonedChild;
                clonedChild = child.clone();
                clonedChild.parent = clonedSelf;
                return clonedSelf.children.push(clonedChild);
              });
              return clonedSelf;
            };
            XMLElement.prototype.attribute = function(name, value) {
              var attName, attValue;
              if (name != null) {
                name = getValue(name);
              }
              if (isObject2(name)) {
                for (attName in name) {
                  if (!hasProp.call(name, attName))
                    continue;
                  attValue = name[attName];
                  this.attribute(attName, attValue);
                }
              } else {
                if (isFunction2(value)) {
                  value = value.apply();
                }
                if (this.options.keepNullAttributes && value == null) {
                  this.attribs[name] = new XMLAttribute(this, name, "");
                } else if (value != null) {
                  this.attribs[name] = new XMLAttribute(this, name, value);
                }
              }
              return this;
            };
            XMLElement.prototype.removeAttribute = function(name) {
              var attName, j, len;
              if (name == null) {
                throw new Error("Missing attribute name. " + this.debugInfo());
              }
              name = getValue(name);
              if (Array.isArray(name)) {
                for (j = 0, len = name.length; j < len; j++) {
                  attName = name[j];
                  delete this.attribs[attName];
                }
              } else {
                delete this.attribs[name];
              }
              return this;
            };
            XMLElement.prototype.toString = function(options) {
              return this.options.writer.element(this, this.options.writer.filterOptions(options));
            };
            XMLElement.prototype.att = function(name, value) {
              return this.attribute(name, value);
            };
            XMLElement.prototype.a = function(name, value) {
              return this.attribute(name, value);
            };
            XMLElement.prototype.getAttribute = function(name) {
              if (this.attribs.hasOwnProperty(name)) {
                return this.attribs[name].value;
              } else {
                return null;
              }
            };
            XMLElement.prototype.setAttribute = function(name, value) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getAttributeNode = function(name) {
              if (this.attribs.hasOwnProperty(name)) {
                return this.attribs[name];
              } else {
                return null;
              }
            };
            XMLElement.prototype.setAttributeNode = function(newAttr) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.removeAttributeNode = function(oldAttr) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getElementsByTagName = function(name) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.setAttributeNodeNS = function(newAttr) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.hasAttribute = function(name) {
              return this.attribs.hasOwnProperty(name);
            };
            XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.setIdAttribute = function(name, isId) {
              if (this.attribs.hasOwnProperty(name)) {
                return this.attribs[name].isId;
              } else {
                return isId;
              }
            };
            XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getElementsByTagName = function(tagname) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.getElementsByClassName = function(classNames) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLElement.prototype.isEqualNode = function(node) {
              var i, j, ref1;
              if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
                return false;
              }
              if (node.namespaceURI !== this.namespaceURI) {
                return false;
              }
              if (node.prefix !== this.prefix) {
                return false;
              }
              if (node.localName !== this.localName) {
                return false;
              }
              if (node.attribs.length !== this.attribs.length) {
                return false;
              }
              for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
                if (!this.attribs[i].isEqualNode(node.attribs[i])) {
                  return false;
                }
              }
              return true;
            };
            return XMLElement;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./XMLAttribute": 501, "./XMLNamedNodeMap": 519, "./XMLNode": 520 }], 519: [function(require2, module3, exports3) {
        (function() {
          module3.exports = function() {
            function XMLNamedNodeMap(nodes) {
              this.nodes = nodes;
            }
            Object.defineProperty(XMLNamedNodeMap.prototype, "length", {
              get: function() {
                return Object.keys(this.nodes).length || 0;
              }
            });
            XMLNamedNodeMap.prototype.clone = function() {
              return this.nodes = null;
            };
            XMLNamedNodeMap.prototype.getNamedItem = function(name) {
              return this.nodes[name];
            };
            XMLNamedNodeMap.prototype.setNamedItem = function(node) {
              var oldNode;
              oldNode = this.nodes[node.nodeName];
              this.nodes[node.nodeName] = node;
              return oldNode || null;
            };
            XMLNamedNodeMap.prototype.removeNamedItem = function(name) {
              var oldNode;
              oldNode = this.nodes[name];
              delete this.nodes[name];
              return oldNode || null;
            };
            XMLNamedNodeMap.prototype.item = function(index2) {
              return this.nodes[Object.keys(this.nodes)[index2]] || null;
            };
            XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented.");
            };
            XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {
              throw new Error("This DOM method is not implemented.");
            };
            XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {
              throw new Error("This DOM method is not implemented.");
            };
            return XMLNamedNodeMap;
          }();
        }).call(this);
      }, {}], 520: [function(require2, module3, exports3) {
        (function() {
          var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction2, isObject2, ref1, hasProp = {}.hasOwnProperty;
          ref1 = require2("./Utility"), isObject2 = ref1.isObject, isFunction2 = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;
          XMLElement = null;
          XMLCData = null;
          XMLComment = null;
          XMLDeclaration = null;
          XMLDocType = null;
          XMLRaw = null;
          XMLText = null;
          XMLProcessingInstruction = null;
          XMLDummy = null;
          NodeType = null;
          XMLNodeList = null;
          DocumentPosition = null;
          module3.exports = function() {
            function XMLNode(parent1) {
              this.parent = parent1;
              if (this.parent) {
                this.options = this.parent.options;
                this.stringify = this.parent.stringify;
              }
              this.value = null;
              this.children = [];
              this.baseURI = null;
              if (!XMLElement) {
                XMLElement = require2("./XMLElement");
                XMLCData = require2("./XMLCData");
                XMLComment = require2("./XMLComment");
                XMLDeclaration = require2("./XMLDeclaration");
                XMLDocType = require2("./XMLDocType");
                XMLRaw = require2("./XMLRaw");
                XMLText = require2("./XMLText");
                XMLProcessingInstruction = require2("./XMLProcessingInstruction");
                XMLDummy = require2("./XMLDummy");
                NodeType = require2("./NodeType");
                XMLNodeList = require2("./XMLNodeList");
                require2("./XMLNamedNodeMap");
                DocumentPosition = require2("./DocumentPosition");
              }
            }
            Object.defineProperty(XMLNode.prototype, "nodeName", {
              get: function() {
                return this.name;
              }
            });
            Object.defineProperty(XMLNode.prototype, "nodeType", {
              get: function() {
                return this.type;
              }
            });
            Object.defineProperty(XMLNode.prototype, "nodeValue", {
              get: function() {
                return this.value;
              }
            });
            Object.defineProperty(XMLNode.prototype, "parentNode", {
              get: function() {
                return this.parent;
              }
            });
            Object.defineProperty(XMLNode.prototype, "childNodes", {
              get: function() {
                if (!this.childNodeList || !this.childNodeList.nodes) {
                  this.childNodeList = new XMLNodeList(this.children);
                }
                return this.childNodeList;
              }
            });
            Object.defineProperty(XMLNode.prototype, "firstChild", {
              get: function() {
                return this.children[0] || null;
              }
            });
            Object.defineProperty(XMLNode.prototype, "lastChild", {
              get: function() {
                return this.children[this.children.length - 1] || null;
              }
            });
            Object.defineProperty(XMLNode.prototype, "previousSibling", {
              get: function() {
                var i;
                i = this.parent.children.indexOf(this);
                return this.parent.children[i - 1] || null;
              }
            });
            Object.defineProperty(XMLNode.prototype, "nextSibling", {
              get: function() {
                var i;
                i = this.parent.children.indexOf(this);
                return this.parent.children[i + 1] || null;
              }
            });
            Object.defineProperty(XMLNode.prototype, "ownerDocument", {
              get: function() {
                return this.document() || null;
              }
            });
            Object.defineProperty(XMLNode.prototype, "textContent", {
              get: function() {
                var child, j, len, ref2, str;
                if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
                  str = "";
                  ref2 = this.children;
                  for (j = 0, len = ref2.length; j < len; j++) {
                    child = ref2[j];
                    if (child.textContent) {
                      str += child.textContent;
                    }
                  }
                  return str;
                } else {
                  return null;
                }
              },
              set: function(value) {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });
            XMLNode.prototype.setParent = function(parent) {
              var child, j, len, ref2, results;
              this.parent = parent;
              if (parent) {
                this.options = parent.options;
                this.stringify = parent.stringify;
              }
              ref2 = this.children;
              results = [];
              for (j = 0, len = ref2.length; j < len; j++) {
                child = ref2[j];
                results.push(child.setParent(this));
              }
              return results;
            };
            XMLNode.prototype.element = function(name, attributes, text2) {
              var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;
              lastChild = null;
              if (attributes === null && text2 == null) {
                ref2 = [{}, null], attributes = ref2[0], text2 = ref2[1];
              }
              if (attributes == null) {
                attributes = {};
              }
              attributes = getValue(attributes);
              if (!isObject2(attributes)) {
                ref3 = [attributes, text2], text2 = ref3[0], attributes = ref3[1];
              }
              if (name != null) {
                name = getValue(name);
              }
              if (Array.isArray(name)) {
                for (j = 0, len = name.length; j < len; j++) {
                  item = name[j];
                  lastChild = this.element(item);
                }
              } else if (isFunction2(name)) {
                lastChild = this.element(name.apply());
              } else if (isObject2(name)) {
                for (key in name) {
                  if (!hasProp.call(name, key))
                    continue;
                  val = name[key];
                  if (isFunction2(val)) {
                    val = val.apply();
                  }
                  if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                    lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
                  } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
                    lastChild = this.dummy();
                  } else if (isObject2(val) && isEmpty(val)) {
                    lastChild = this.element(key);
                  } else if (!this.options.keepNullNodes && val == null) {
                    lastChild = this.dummy();
                  } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                    for (k = 0, len1 = val.length; k < len1; k++) {
                      item = val[k];
                      childNode = {};
                      childNode[key] = item;
                      lastChild = this.element(childNode);
                    }
                  } else if (isObject2(val)) {
                    if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {
                      lastChild = this.element(val);
                    } else {
                      lastChild = this.element(key);
                      lastChild.element(val);
                    }
                  } else {
                    lastChild = this.element(key, val);
                  }
                }
              } else if (!this.options.keepNullNodes && text2 === null) {
                lastChild = this.dummy();
              } else {
                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
                  lastChild = this.text(text2);
                } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
                  lastChild = this.cdata(text2);
                } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
                  lastChild = this.comment(text2);
                } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
                  lastChild = this.raw(text2);
                } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
                  lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text2);
                } else {
                  lastChild = this.node(name, attributes, text2);
                }
              }
              if (lastChild == null) {
                throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
              }
              return lastChild;
            };
            XMLNode.prototype.insertBefore = function(name, attributes, text2) {
              var child, i, newChild, refChild, removed;
              if (name != null ? name.type : void 0) {
                newChild = name;
                refChild = attributes;
                newChild.setParent(this);
                if (refChild) {
                  i = children.indexOf(refChild);
                  removed = children.splice(i);
                  children.push(newChild);
                  Array.prototype.push.apply(children, removed);
                } else {
                  children.push(newChild);
                }
                return newChild;
              } else {
                if (this.isRoot) {
                  throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
                }
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i);
                child = this.parent.element(name, attributes, text2);
                Array.prototype.push.apply(this.parent.children, removed);
                return child;
              }
            };
            XMLNode.prototype.insertAfter = function(name, attributes, text2) {
              var child, i, removed;
              if (this.isRoot) {
                throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
              }
              i = this.parent.children.indexOf(this);
              removed = this.parent.children.splice(i + 1);
              child = this.parent.element(name, attributes, text2);
              Array.prototype.push.apply(this.parent.children, removed);
              return child;
            };
            XMLNode.prototype.remove = function() {
              var i;
              if (this.isRoot) {
                throw new Error("Cannot remove the root element. " + this.debugInfo());
              }
              i = this.parent.children.indexOf(this);
              [].splice.apply(this.parent.children, [i, i - i + 1].concat([]));
              return this.parent;
            };
            XMLNode.prototype.node = function(name, attributes, text2) {
              var child, ref2;
              if (name != null) {
                name = getValue(name);
              }
              attributes || (attributes = {});
              attributes = getValue(attributes);
              if (!isObject2(attributes)) {
                ref2 = [attributes, text2], text2 = ref2[0], attributes = ref2[1];
              }
              child = new XMLElement(this, name, attributes);
              if (text2 != null) {
                child.text(text2);
              }
              this.children.push(child);
              return child;
            };
            XMLNode.prototype.text = function(value) {
              var child;
              if (isObject2(value)) {
                this.element(value);
              }
              child = new XMLText(this, value);
              this.children.push(child);
              return this;
            };
            XMLNode.prototype.cdata = function(value) {
              var child;
              child = new XMLCData(this, value);
              this.children.push(child);
              return this;
            };
            XMLNode.prototype.comment = function(value) {
              var child;
              child = new XMLComment(this, value);
              this.children.push(child);
              return this;
            };
            XMLNode.prototype.commentBefore = function(value) {
              var i, removed;
              i = this.parent.children.indexOf(this);
              removed = this.parent.children.splice(i);
              this.parent.comment(value);
              Array.prototype.push.apply(this.parent.children, removed);
              return this;
            };
            XMLNode.prototype.commentAfter = function(value) {
              var i, removed;
              i = this.parent.children.indexOf(this);
              removed = this.parent.children.splice(i + 1);
              this.parent.comment(value);
              Array.prototype.push.apply(this.parent.children, removed);
              return this;
            };
            XMLNode.prototype.raw = function(value) {
              var child;
              child = new XMLRaw(this, value);
              this.children.push(child);
              return this;
            };
            XMLNode.prototype.dummy = function() {
              var child;
              child = new XMLDummy(this);
              return child;
            };
            XMLNode.prototype.instruction = function(target, value) {
              var insTarget, insValue, instruction, j, len;
              if (target != null) {
                target = getValue(target);
              }
              if (value != null) {
                value = getValue(value);
              }
              if (Array.isArray(target)) {
                for (j = 0, len = target.length; j < len; j++) {
                  insTarget = target[j];
                  this.instruction(insTarget);
                }
              } else if (isObject2(target)) {
                for (insTarget in target) {
                  if (!hasProp.call(target, insTarget))
                    continue;
                  insValue = target[insTarget];
                  this.instruction(insTarget, insValue);
                }
              } else {
                if (isFunction2(value)) {
                  value = value.apply();
                }
                instruction = new XMLProcessingInstruction(this, target, value);
                this.children.push(instruction);
              }
              return this;
            };
            XMLNode.prototype.instructionBefore = function(target, value) {
              var i, removed;
              i = this.parent.children.indexOf(this);
              removed = this.parent.children.splice(i);
              this.parent.instruction(target, value);
              Array.prototype.push.apply(this.parent.children, removed);
              return this;
            };
            XMLNode.prototype.instructionAfter = function(target, value) {
              var i, removed;
              i = this.parent.children.indexOf(this);
              removed = this.parent.children.splice(i + 1);
              this.parent.instruction(target, value);
              Array.prototype.push.apply(this.parent.children, removed);
              return this;
            };
            XMLNode.prototype.declaration = function(version2, encoding, standalone) {
              var doc, xmldec;
              doc = this.document();
              xmldec = new XMLDeclaration(doc, version2, encoding, standalone);
              if (doc.children.length === 0) {
                doc.children.unshift(xmldec);
              } else if (doc.children[0].type === NodeType.Declaration) {
                doc.children[0] = xmldec;
              } else {
                doc.children.unshift(xmldec);
              }
              return doc.root() || doc;
            };
            XMLNode.prototype.dtd = function(pubID, sysID) {
              var child, doc, doctype, i, j, k, len, len1, ref2, ref3;
              doc = this.document();
              doctype = new XMLDocType(doc, pubID, sysID);
              ref2 = doc.children;
              for (i = j = 0, len = ref2.length; j < len; i = ++j) {
                child = ref2[i];
                if (child.type === NodeType.DocType) {
                  doc.children[i] = doctype;
                  return doctype;
                }
              }
              ref3 = doc.children;
              for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {
                child = ref3[i];
                if (child.isRoot) {
                  doc.children.splice(i, 0, doctype);
                  return doctype;
                }
              }
              doc.children.push(doctype);
              return doctype;
            };
            XMLNode.prototype.up = function() {
              if (this.isRoot) {
                throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
              }
              return this.parent;
            };
            XMLNode.prototype.root = function() {
              var node;
              node = this;
              while (node) {
                if (node.type === NodeType.Document) {
                  return node.rootObject;
                } else if (node.isRoot) {
                  return node;
                } else {
                  node = node.parent;
                }
              }
            };
            XMLNode.prototype.document = function() {
              var node;
              node = this;
              while (node) {
                if (node.type === NodeType.Document) {
                  return node;
                } else {
                  node = node.parent;
                }
              }
            };
            XMLNode.prototype.end = function(options) {
              return this.document().end(options);
            };
            XMLNode.prototype.prev = function() {
              var i;
              i = this.parent.children.indexOf(this);
              if (i < 1) {
                throw new Error("Already at the first node. " + this.debugInfo());
              }
              return this.parent.children[i - 1];
            };
            XMLNode.prototype.next = function() {
              var i;
              i = this.parent.children.indexOf(this);
              if (i === -1 || i === this.parent.children.length - 1) {
                throw new Error("Already at the last node. " + this.debugInfo());
              }
              return this.parent.children[i + 1];
            };
            XMLNode.prototype.importDocument = function(doc) {
              var clonedRoot;
              clonedRoot = doc.root().clone();
              clonedRoot.parent = this;
              clonedRoot.isRoot = false;
              this.children.push(clonedRoot);
              return this;
            };
            XMLNode.prototype.debugInfo = function(name) {
              var ref2, ref3;
              name = name || this.name;
              if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
                return "";
              } else if (name == null) {
                return "parent: <" + this.parent.name + ">";
              } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
                return "node: <" + name + ">";
              } else {
                return "node: <" + name + ">, parent: <" + this.parent.name + ">";
              }
            };
            XMLNode.prototype.ele = function(name, attributes, text2) {
              return this.element(name, attributes, text2);
            };
            XMLNode.prototype.nod = function(name, attributes, text2) {
              return this.node(name, attributes, text2);
            };
            XMLNode.prototype.txt = function(value) {
              return this.text(value);
            };
            XMLNode.prototype.dat = function(value) {
              return this.cdata(value);
            };
            XMLNode.prototype.com = function(value) {
              return this.comment(value);
            };
            XMLNode.prototype.ins = function(target, value) {
              return this.instruction(target, value);
            };
            XMLNode.prototype.doc = function() {
              return this.document();
            };
            XMLNode.prototype.dec = function(version2, encoding, standalone) {
              return this.declaration(version2, encoding, standalone);
            };
            XMLNode.prototype.e = function(name, attributes, text2) {
              return this.element(name, attributes, text2);
            };
            XMLNode.prototype.n = function(name, attributes, text2) {
              return this.node(name, attributes, text2);
            };
            XMLNode.prototype.t = function(value) {
              return this.text(value);
            };
            XMLNode.prototype.d = function(value) {
              return this.cdata(value);
            };
            XMLNode.prototype.c = function(value) {
              return this.comment(value);
            };
            XMLNode.prototype.r = function(value) {
              return this.raw(value);
            };
            XMLNode.prototype.i = function(target, value) {
              return this.instruction(target, value);
            };
            XMLNode.prototype.u = function() {
              return this.up();
            };
            XMLNode.prototype.importXMLBuilder = function(doc) {
              return this.importDocument(doc);
            };
            XMLNode.prototype.replaceChild = function(newChild, oldChild) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.removeChild = function(oldChild) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.appendChild = function(newChild) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.hasChildNodes = function() {
              return this.children.length !== 0;
            };
            XMLNode.prototype.cloneNode = function(deep) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.normalize = function() {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.isSupported = function(feature, version2) {
              return true;
            };
            XMLNode.prototype.hasAttributes = function() {
              return this.attribs.length !== 0;
            };
            XMLNode.prototype.compareDocumentPosition = function(other2) {
              var ref2, res;
              ref2 = this;
              if (ref2 === other2) {
                return 0;
              } else if (this.document() !== other2.document()) {
                res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
                if (Math.random() < 0.5) {
                  res |= DocumentPosition.Preceding;
                } else {
                  res |= DocumentPosition.Following;
                }
                return res;
              } else if (ref2.isAncestor(other2)) {
                return DocumentPosition.Contains | DocumentPosition.Preceding;
              } else if (ref2.isDescendant(other2)) {
                return DocumentPosition.Contains | DocumentPosition.Following;
              } else if (ref2.isPreceding(other2)) {
                return DocumentPosition.Preceding;
              } else {
                return DocumentPosition.Following;
              }
            };
            XMLNode.prototype.isSameNode = function(other2) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.lookupPrefix = function(namespaceURI) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.lookupNamespaceURI = function(prefix) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.isEqualNode = function(node) {
              var i, j, ref2;
              if (node.nodeType !== this.nodeType) {
                return false;
              }
              if (node.children.length !== this.children.length) {
                return false;
              }
              for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
                if (!this.children[i].isEqualNode(node.children[i])) {
                  return false;
                }
              }
              return true;
            };
            XMLNode.prototype.getFeature = function(feature, version2) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.setUserData = function(key, data, handler) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.getUserData = function(key) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLNode.prototype.contains = function(other2) {
              if (!other2) {
                return false;
              }
              return other2 === this || this.isDescendant(other2);
            };
            XMLNode.prototype.isDescendant = function(node) {
              var child, isDescendantChild, j, len, ref2;
              ref2 = this.children;
              for (j = 0, len = ref2.length; j < len; j++) {
                child = ref2[j];
                if (node === child) {
                  return true;
                }
                isDescendantChild = child.isDescendant(node);
                if (isDescendantChild) {
                  return true;
                }
              }
              return false;
            };
            XMLNode.prototype.isAncestor = function(node) {
              return node.isDescendant(this);
            };
            XMLNode.prototype.isPreceding = function(node) {
              var nodePos, thisPos;
              nodePos = this.treePosition(node);
              thisPos = this.treePosition(this);
              if (nodePos === -1 || thisPos === -1) {
                return false;
              } else {
                return nodePos < thisPos;
              }
            };
            XMLNode.prototype.isFollowing = function(node) {
              var nodePos, thisPos;
              nodePos = this.treePosition(node);
              thisPos = this.treePosition(this);
              if (nodePos === -1 || thisPos === -1) {
                return false;
              } else {
                return nodePos > thisPos;
              }
            };
            XMLNode.prototype.treePosition = function(node) {
              var found, pos;
              pos = 0;
              found = false;
              this.foreachTreeNode(this.document(), function(childNode) {
                pos++;
                if (!found && childNode === node) {
                  return found = true;
                }
              });
              if (found) {
                return pos;
              } else {
                return -1;
              }
            };
            XMLNode.prototype.foreachTreeNode = function(node, func) {
              var child, j, len, ref2, res;
              node || (node = this.document());
              ref2 = node.children;
              for (j = 0, len = ref2.length; j < len; j++) {
                child = ref2[j];
                if (res = func(child)) {
                  return res;
                } else {
                  res = this.foreachTreeNode(child, func);
                  if (res) {
                    return res;
                  }
                }
              }
            };
            return XMLNode;
          }();
        }).call(this);
      }, { "./DocumentPosition": 497, "./NodeType": 498, "./Utility": 499, "./XMLCData": 502, "./XMLComment": 504, "./XMLDeclaration": 513, "./XMLDocType": 514, "./XMLDummy": 517, "./XMLElement": 518, "./XMLNamedNodeMap": 519, "./XMLNodeList": 521, "./XMLProcessingInstruction": 522, "./XMLRaw": 523, "./XMLText": 527 }], 521: [function(require2, module3, exports3) {
        (function() {
          module3.exports = function() {
            function XMLNodeList(nodes) {
              this.nodes = nodes;
            }
            Object.defineProperty(XMLNodeList.prototype, "length", {
              get: function() {
                return this.nodes.length || 0;
              }
            });
            XMLNodeList.prototype.clone = function() {
              return this.nodes = null;
            };
            XMLNodeList.prototype.item = function(index2) {
              return this.nodes[index2] || null;
            };
            return XMLNodeList;
          }();
        }).call(this);
      }, {}], 522: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLCharacterData, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          NodeType = require2("./NodeType");
          XMLCharacterData = require2("./XMLCharacterData");
          module3.exports = function(superClass) {
            extend2(XMLProcessingInstruction, superClass);
            function XMLProcessingInstruction(parent, target, value) {
              XMLProcessingInstruction.__super__.constructor.call(this, parent);
              if (target == null) {
                throw new Error("Missing instruction target. " + this.debugInfo());
              }
              this.type = NodeType.ProcessingInstruction;
              this.target = this.stringify.insTarget(target);
              this.name = this.target;
              if (value) {
                this.value = this.stringify.insValue(value);
              }
            }
            XMLProcessingInstruction.prototype.clone = function() {
              return Object.create(this);
            };
            XMLProcessingInstruction.prototype.toString = function(options) {
              return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
            };
            XMLProcessingInstruction.prototype.isEqualNode = function(node) {
              if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
                return false;
              }
              if (node.target !== this.target) {
                return false;
              }
              return true;
            };
            return XMLProcessingInstruction;
          }(XMLCharacterData);
        }).call(this);
      }, { "./NodeType": 498, "./XMLCharacterData": 503 }], 523: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLNode, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          NodeType = require2("./NodeType");
          XMLNode = require2("./XMLNode");
          module3.exports = function(superClass) {
            extend2(XMLRaw, superClass);
            function XMLRaw(parent, text2) {
              XMLRaw.__super__.constructor.call(this, parent);
              if (text2 == null) {
                throw new Error("Missing raw text. " + this.debugInfo());
              }
              this.type = NodeType.Raw;
              this.value = this.stringify.raw(text2);
            }
            XMLRaw.prototype.clone = function() {
              return Object.create(this);
            };
            XMLRaw.prototype.toString = function(options) {
              return this.options.writer.raw(this, this.options.writer.filterOptions(options));
            };
            return XMLRaw;
          }(XMLNode);
        }).call(this);
      }, { "./NodeType": 498, "./XMLNode": 520 }], 524: [function(require2, module3, exports3) {
        (function() {
          var NodeType, WriterState, XMLWriterBase, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          NodeType = require2("./NodeType");
          XMLWriterBase = require2("./XMLWriterBase");
          WriterState = require2("./WriterState");
          module3.exports = function(superClass) {
            extend2(XMLStreamWriter, superClass);
            function XMLStreamWriter(stream, options) {
              this.stream = stream;
              XMLStreamWriter.__super__.constructor.call(this, options);
            }
            XMLStreamWriter.prototype.endline = function(node, options, level) {
              if (node.isLastRootNode && options.state === WriterState.CloseTag) {
                return "";
              } else {
                return XMLStreamWriter.__super__.endline.call(this, node, options, level);
              }
            };
            XMLStreamWriter.prototype.document = function(doc, options) {
              var child, i, j, k, len, len1, ref2, ref1, results;
              ref2 = doc.children;
              for (i = j = 0, len = ref2.length; j < len; i = ++j) {
                child = ref2[i];
                child.isLastRootNode = i === doc.children.length - 1;
              }
              options = this.filterOptions(options);
              ref1 = doc.children;
              results = [];
              for (k = 0, len1 = ref1.length; k < len1; k++) {
                child = ref1[k];
                results.push(this.writeChildNode(child, options, 0));
              }
              return results;
            };
            XMLStreamWriter.prototype.attribute = function(att, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));
            };
            XMLStreamWriter.prototype.cdata = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.comment = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.declaration = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.docType = function(node, options, level) {
              var child, j, len, ref2;
              level || (level = 0);
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              this.stream.write(this.indent(node, options, level));
              this.stream.write("<!DOCTYPE " + node.root().name);
              if (node.pubID && node.sysID) {
                this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
              } else if (node.sysID) {
                this.stream.write(' SYSTEM "' + node.sysID + '"');
              }
              if (node.children.length > 0) {
                this.stream.write(" [");
                this.stream.write(this.endline(node, options, level));
                options.state = WriterState.InsideTag;
                ref2 = node.children;
                for (j = 0, len = ref2.length; j < len; j++) {
                  child = ref2[j];
                  this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                this.stream.write("]");
              }
              options.state = WriterState.CloseTag;
              this.stream.write(options.spaceBeforeSlash + ">");
              this.stream.write(this.endline(node, options, level));
              options.state = WriterState.None;
              return this.closeNode(node, options, level);
            };
            XMLStreamWriter.prototype.element = function(node, options, level) {
              var att, child, childNodeCount, firstChildNode, j, len, name, ref2, ref1;
              level || (level = 0);
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              this.stream.write(this.indent(node, options, level) + "<" + node.name);
              ref2 = node.attribs;
              for (name in ref2) {
                if (!hasProp.call(ref2, name))
                  continue;
                att = ref2[name];
                this.attribute(att, options, level);
              }
              childNodeCount = node.children.length;
              firstChildNode = childNodeCount === 0 ? null : node.children[0];
              if (childNodeCount === 0 || node.children.every(function(e2) {
                return (e2.type === NodeType.Text || e2.type === NodeType.Raw) && e2.value === "";
              })) {
                if (options.allowEmpty) {
                  this.stream.write(">");
                  options.state = WriterState.CloseTag;
                  this.stream.write("</" + node.name + ">");
                } else {
                  options.state = WriterState.CloseTag;
                  this.stream.write(options.spaceBeforeSlash + "/>");
                }
              } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
                this.stream.write(">");
                options.state = WriterState.InsideTag;
                options.suppressPrettyCount++;
                this.writeChildNode(firstChildNode, options, level + 1);
                options.suppressPrettyCount--;
                options.state = WriterState.CloseTag;
                this.stream.write("</" + node.name + ">");
              } else {
                this.stream.write(">" + this.endline(node, options, level));
                options.state = WriterState.InsideTag;
                ref1 = node.children;
                for (j = 0, len = ref1.length; j < len; j++) {
                  child = ref1[j];
                  this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                this.stream.write(this.indent(node, options, level) + "</" + node.name + ">");
              }
              this.stream.write(this.endline(node, options, level));
              options.state = WriterState.None;
              return this.closeNode(node, options, level);
            };
            XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.raw = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.text = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.dtdElement = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));
            };
            XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {
              return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));
            };
            return XMLStreamWriter;
          }(XMLWriterBase);
        }).call(this);
      }, { "./NodeType": 498, "./WriterState": 500, "./XMLWriterBase": 528 }], 525: [function(require2, module3, exports3) {
        (function() {
          var XMLWriterBase, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          XMLWriterBase = require2("./XMLWriterBase");
          module3.exports = function(superClass) {
            extend2(XMLStringWriter, superClass);
            function XMLStringWriter(options) {
              XMLStringWriter.__super__.constructor.call(this, options);
            }
            XMLStringWriter.prototype.document = function(doc, options) {
              var child, i, len, r, ref2;
              options = this.filterOptions(options);
              r = "";
              ref2 = doc.children;
              for (i = 0, len = ref2.length; i < len; i++) {
                child = ref2[i];
                r += this.writeChildNode(child, options, 0);
              }
              if (options.pretty && r.slice(-options.newline.length) === options.newline) {
                r = r.slice(0, -options.newline.length);
              }
              return r;
            };
            return XMLStringWriter;
          }(XMLWriterBase);
        }).call(this);
      }, { "./XMLWriterBase": 528 }], 526: [function(require2, module3, exports3) {
        (function() {
          var bind = function(fn, me) {
            return function() {
              return fn.apply(me, arguments);
            };
          }, hasProp = {}.hasOwnProperty;
          module3.exports = function() {
            function XMLStringifier(options) {
              this.assertLegalName = bind(this.assertLegalName, this);
              this.assertLegalChar = bind(this.assertLegalChar, this);
              var key, ref2, value;
              options || (options = {});
              this.options = options;
              if (!this.options.version) {
                this.options.version = "1.0";
              }
              ref2 = options.stringify || {};
              for (key in ref2) {
                if (!hasProp.call(ref2, key))
                  continue;
                value = ref2[key];
                this[key] = value;
              }
            }
            XMLStringifier.prototype.name = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalName("" + val || "");
            };
            XMLStringifier.prototype.text = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar(this.textEscape("" + val || ""));
            };
            XMLStringifier.prototype.cdata = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              val = "" + val || "";
              val = val.replace("]]>", "]]]]><![CDATA[>");
              return this.assertLegalChar(val);
            };
            XMLStringifier.prototype.comment = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              val = "" + val || "";
              if (val.match(/--/)) {
                throw new Error("Comment text cannot contain double-hypen: " + val);
              }
              return this.assertLegalChar(val);
            };
            XMLStringifier.prototype.raw = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return "" + val || "";
            };
            XMLStringifier.prototype.attValue = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar(this.attEscape(val = "" + val || ""));
            };
            XMLStringifier.prototype.insTarget = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.insValue = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              val = "" + val || "";
              if (val.match(/\?>/)) {
                throw new Error("Invalid processing instruction value: " + val);
              }
              return this.assertLegalChar(val);
            };
            XMLStringifier.prototype.xmlVersion = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              val = "" + val || "";
              if (!val.match(/1\.[0-9]+/)) {
                throw new Error("Invalid version number: " + val);
              }
              return val;
            };
            XMLStringifier.prototype.xmlEncoding = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              val = "" + val || "";
              if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
                throw new Error("Invalid encoding: " + val);
              }
              return this.assertLegalChar(val);
            };
            XMLStringifier.prototype.xmlStandalone = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              if (val) {
                return "yes";
              } else {
                return "no";
              }
            };
            XMLStringifier.prototype.dtdPubID = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.dtdSysID = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.dtdElementValue = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.dtdAttType = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.dtdAttDefault = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.dtdEntityValue = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.dtdNData = function(val) {
              if (this.options.noValidation) {
                return val;
              }
              return this.assertLegalChar("" + val || "");
            };
            XMLStringifier.prototype.convertAttKey = "@";
            XMLStringifier.prototype.convertPIKey = "?";
            XMLStringifier.prototype.convertTextKey = "#text";
            XMLStringifier.prototype.convertCDataKey = "#cdata";
            XMLStringifier.prototype.convertCommentKey = "#comment";
            XMLStringifier.prototype.convertRawKey = "#raw";
            XMLStringifier.prototype.assertLegalChar = function(str) {
              var regex, res;
              if (this.options.noValidation) {
                return str;
              }
              regex = "";
              if (this.options.version === "1.0") {
                regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
                if (res = str.match(regex)) {
                  throw new Error("Invalid character in string: " + str + " at index " + res.index);
                }
              } else if (this.options.version === "1.1") {
                regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
                if (res = str.match(regex)) {
                  throw new Error("Invalid character in string: " + str + " at index " + res.index);
                }
              }
              return str;
            };
            XMLStringifier.prototype.assertLegalName = function(str) {
              var regex;
              if (this.options.noValidation) {
                return str;
              }
              this.assertLegalChar(str);
              regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
              if (!str.match(regex)) {
                throw new Error("Invalid character in name");
              }
              return str;
            };
            XMLStringifier.prototype.textEscape = function(str) {
              var ampregex;
              if (this.options.noValidation) {
                return str;
              }
              ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
              return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
            };
            XMLStringifier.prototype.attEscape = function(str) {
              var ampregex;
              if (this.options.noValidation) {
                return str;
              }
              ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
              return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
            };
            return XMLStringifier;
          }();
        }).call(this);
      }, {}], 527: [function(require2, module3, exports3) {
        (function() {
          var NodeType, XMLCharacterData, extend2 = function(child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          }, hasProp = {}.hasOwnProperty;
          NodeType = require2("./NodeType");
          XMLCharacterData = require2("./XMLCharacterData");
          module3.exports = function(superClass) {
            extend2(XMLText, superClass);
            function XMLText(parent, text2) {
              XMLText.__super__.constructor.call(this, parent);
              if (text2 == null) {
                throw new Error("Missing element text. " + this.debugInfo());
              }
              this.name = "#text";
              this.type = NodeType.Text;
              this.value = this.stringify.text(text2);
            }
            Object.defineProperty(XMLText.prototype, "isElementContentWhitespace", {
              get: function() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
              }
            });
            Object.defineProperty(XMLText.prototype, "wholeText", {
              get: function() {
                var next, prev, str;
                str = "";
                prev = this.previousSibling;
                while (prev) {
                  str = prev.data + str;
                  prev = prev.previousSibling;
                }
                str += this.data;
                next = this.nextSibling;
                while (next) {
                  str = str + next.data;
                  next = next.nextSibling;
                }
                return str;
              }
            });
            XMLText.prototype.clone = function() {
              return Object.create(this);
            };
            XMLText.prototype.toString = function(options) {
              return this.options.writer.text(this, this.options.writer.filterOptions(options));
            };
            XMLText.prototype.splitText = function(offset) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            XMLText.prototype.replaceWholeText = function(content) {
              throw new Error("This DOM method is not implemented." + this.debugInfo());
            };
            return XMLText;
          }(XMLCharacterData);
        }).call(this);
      }, { "./NodeType": 498, "./XMLCharacterData": 503 }], 528: [function(require2, module3, exports3) {
        (function() {
          var NodeType, WriterState, assign2, hasProp = {}.hasOwnProperty;
          assign2 = require2("./Utility").assign;
          NodeType = require2("./NodeType");
          require2("./XMLDeclaration");
          require2("./XMLDocType");
          require2("./XMLCData");
          require2("./XMLComment");
          require2("./XMLElement");
          require2("./XMLRaw");
          require2("./XMLText");
          require2("./XMLProcessingInstruction");
          require2("./XMLDummy");
          require2("./XMLDTDAttList");
          require2("./XMLDTDElement");
          require2("./XMLDTDEntity");
          require2("./XMLDTDNotation");
          WriterState = require2("./WriterState");
          module3.exports = function() {
            function XMLWriterBase(options) {
              var key, ref2, value;
              options || (options = {});
              this.options = options;
              ref2 = options.writer || {};
              for (key in ref2) {
                if (!hasProp.call(ref2, key))
                  continue;
                value = ref2[key];
                this["_" + key] = this[key];
                this[key] = value;
              }
            }
            XMLWriterBase.prototype.filterOptions = function(options) {
              var filteredOptions, ref2, ref1, ref22, ref3, ref4, ref5, ref6;
              options || (options = {});
              options = assign2({}, this.options, options);
              filteredOptions = {
                writer: this
              };
              filteredOptions.pretty = options.pretty || false;
              filteredOptions.allowEmpty = options.allowEmpty || false;
              filteredOptions.indent = (ref2 = options.indent) != null ? ref2 : "  ";
              filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : "\n";
              filteredOptions.offset = (ref22 = options.offset) != null ? ref22 : 0;
              filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
              filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : "";
              if (filteredOptions.spaceBeforeSlash === true) {
                filteredOptions.spaceBeforeSlash = " ";
              }
              filteredOptions.suppressPrettyCount = 0;
              filteredOptions.user = {};
              filteredOptions.state = WriterState.None;
              return filteredOptions;
            };
            XMLWriterBase.prototype.indent = function(node, options, level) {
              var indentLevel;
              if (!options.pretty || options.suppressPrettyCount) {
                return "";
              } else if (options.pretty) {
                indentLevel = (level || 0) + options.offset + 1;
                if (indentLevel > 0) {
                  return new Array(indentLevel).join(options.indent);
                }
              }
              return "";
            };
            XMLWriterBase.prototype.endline = function(node, options, level) {
              if (!options.pretty || options.suppressPrettyCount) {
                return "";
              } else {
                return options.newline;
              }
            };
            XMLWriterBase.prototype.attribute = function(att, options, level) {
              var r;
              this.openAttribute(att, options, level);
              r = " " + att.name + '="' + att.value + '"';
              this.closeAttribute(att, options, level);
              return r;
            };
            XMLWriterBase.prototype.cdata = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<![CDATA[";
              options.state = WriterState.InsideTag;
              r += node.value;
              options.state = WriterState.CloseTag;
              r += "]]>" + this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.comment = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<!-- ";
              options.state = WriterState.InsideTag;
              r += node.value;
              options.state = WriterState.CloseTag;
              r += " -->" + this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.declaration = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<?xml";
              options.state = WriterState.InsideTag;
              r += ' version="' + node.version + '"';
              if (node.encoding != null) {
                r += ' encoding="' + node.encoding + '"';
              }
              if (node.standalone != null) {
                r += ' standalone="' + node.standalone + '"';
              }
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + "?>";
              r += this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.docType = function(node, options, level) {
              var child, i, len, r, ref2;
              level || (level = 0);
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level);
              r += "<!DOCTYPE " + node.root().name;
              if (node.pubID && node.sysID) {
                r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.sysID) {
                r += ' SYSTEM "' + node.sysID + '"';
              }
              if (node.children.length > 0) {
                r += " [";
                r += this.endline(node, options, level);
                options.state = WriterState.InsideTag;
                ref2 = node.children;
                for (i = 0, len = ref2.length; i < len; i++) {
                  child = ref2[i];
                  r += this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                r += "]";
              }
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + ">";
              r += this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.element = function(node, options, level) {
              var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref2, ref1, ref22;
              level || (level = 0);
              prettySuppressed = false;
              r = "";
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r += this.indent(node, options, level) + "<" + node.name;
              ref2 = node.attribs;
              for (name in ref2) {
                if (!hasProp.call(ref2, name))
                  continue;
                att = ref2[name];
                r += this.attribute(att, options, level);
              }
              childNodeCount = node.children.length;
              firstChildNode = childNodeCount === 0 ? null : node.children[0];
              if (childNodeCount === 0 || node.children.every(function(e2) {
                return (e2.type === NodeType.Text || e2.type === NodeType.Raw) && e2.value === "";
              })) {
                if (options.allowEmpty) {
                  r += ">";
                  options.state = WriterState.CloseTag;
                  r += "</" + node.name + ">" + this.endline(node, options, level);
                } else {
                  options.state = WriterState.CloseTag;
                  r += options.spaceBeforeSlash + "/>" + this.endline(node, options, level);
                }
              } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
                r += ">";
                options.state = WriterState.InsideTag;
                options.suppressPrettyCount++;
                prettySuppressed = true;
                r += this.writeChildNode(firstChildNode, options, level + 1);
                options.suppressPrettyCount--;
                prettySuppressed = false;
                options.state = WriterState.CloseTag;
                r += "</" + node.name + ">" + this.endline(node, options, level);
              } else {
                if (options.dontPrettyTextNodes) {
                  ref1 = node.children;
                  for (i = 0, len = ref1.length; i < len; i++) {
                    child = ref1[i];
                    if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {
                      options.suppressPrettyCount++;
                      prettySuppressed = true;
                      break;
                    }
                  }
                }
                r += ">" + this.endline(node, options, level);
                options.state = WriterState.InsideTag;
                ref22 = node.children;
                for (j = 0, len1 = ref22.length; j < len1; j++) {
                  child = ref22[j];
                  r += this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                r += this.indent(node, options, level) + "</" + node.name + ">";
                if (prettySuppressed) {
                  options.suppressPrettyCount--;
                }
                r += this.endline(node, options, level);
                options.state = WriterState.None;
              }
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.writeChildNode = function(node, options, level) {
              switch (node.type) {
                case NodeType.CData:
                  return this.cdata(node, options, level);
                case NodeType.Comment:
                  return this.comment(node, options, level);
                case NodeType.Element:
                  return this.element(node, options, level);
                case NodeType.Raw:
                  return this.raw(node, options, level);
                case NodeType.Text:
                  return this.text(node, options, level);
                case NodeType.ProcessingInstruction:
                  return this.processingInstruction(node, options, level);
                case NodeType.Dummy:
                  return "";
                case NodeType.Declaration:
                  return this.declaration(node, options, level);
                case NodeType.DocType:
                  return this.docType(node, options, level);
                case NodeType.AttributeDeclaration:
                  return this.dtdAttList(node, options, level);
                case NodeType.ElementDeclaration:
                  return this.dtdElement(node, options, level);
                case NodeType.EntityDeclaration:
                  return this.dtdEntity(node, options, level);
                case NodeType.NotationDeclaration:
                  return this.dtdNotation(node, options, level);
                default:
                  throw new Error("Unknown XML node type: " + node.constructor.name);
              }
            };
            XMLWriterBase.prototype.processingInstruction = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<?";
              options.state = WriterState.InsideTag;
              r += node.target;
              if (node.value) {
                r += " " + node.value;
              }
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + "?>";
              r += this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.raw = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level);
              options.state = WriterState.InsideTag;
              r += node.value;
              options.state = WriterState.CloseTag;
              r += this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.text = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level);
              options.state = WriterState.InsideTag;
              r += node.value;
              options.state = WriterState.CloseTag;
              r += this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.dtdAttList = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<!ATTLIST";
              options.state = WriterState.InsideTag;
              r += " " + node.elementName + " " + node.attributeName + " " + node.attributeType;
              if (node.defaultValueType !== "#DEFAULT") {
                r += " " + node.defaultValueType;
              }
              if (node.defaultValue) {
                r += ' "' + node.defaultValue + '"';
              }
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.dtdElement = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<!ELEMENT";
              options.state = WriterState.InsideTag;
              r += " " + node.name + " " + node.value;
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.dtdEntity = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<!ENTITY";
              options.state = WriterState.InsideTag;
              if (node.pe) {
                r += " %";
              }
              r += " " + node.name;
              if (node.value) {
                r += ' "' + node.value + '"';
              } else {
                if (node.pubID && node.sysID) {
                  r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                } else if (node.sysID) {
                  r += ' SYSTEM "' + node.sysID + '"';
                }
                if (node.nData) {
                  r += " NDATA " + node.nData;
                }
              }
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.dtdNotation = function(node, options, level) {
              var r;
              this.openNode(node, options, level);
              options.state = WriterState.OpenTag;
              r = this.indent(node, options, level) + "<!NOTATION";
              options.state = WriterState.InsideTag;
              r += " " + node.name;
              if (node.pubID && node.sysID) {
                r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.pubID) {
                r += ' PUBLIC "' + node.pubID + '"';
              } else if (node.sysID) {
                r += ' SYSTEM "' + node.sysID + '"';
              }
              options.state = WriterState.CloseTag;
              r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
              options.state = WriterState.None;
              this.closeNode(node, options, level);
              return r;
            };
            XMLWriterBase.prototype.openNode = function(node, options, level) {
            };
            XMLWriterBase.prototype.closeNode = function(node, options, level) {
            };
            XMLWriterBase.prototype.openAttribute = function(att, options, level) {
            };
            XMLWriterBase.prototype.closeAttribute = function(att, options, level) {
            };
            return XMLWriterBase;
          }();
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./WriterState": 500, "./XMLCData": 502, "./XMLComment": 504, "./XMLDTDAttList": 509, "./XMLDTDElement": 510, "./XMLDTDEntity": 511, "./XMLDTDNotation": 512, "./XMLDeclaration": 513, "./XMLDocType": 514, "./XMLDummy": 517, "./XMLElement": 518, "./XMLProcessingInstruction": 522, "./XMLRaw": 523, "./XMLText": 527 }], 529: [function(require2, module3, exports3) {
        (function() {
          var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign2, isFunction2, ref2;
          ref2 = require2("./Utility"), assign2 = ref2.assign, isFunction2 = ref2.isFunction;
          XMLDOMImplementation = require2("./XMLDOMImplementation");
          XMLDocument = require2("./XMLDocument");
          XMLDocumentCB = require2("./XMLDocumentCB");
          XMLStringWriter = require2("./XMLStringWriter");
          XMLStreamWriter = require2("./XMLStreamWriter");
          NodeType = require2("./NodeType");
          WriterState = require2("./WriterState");
          module3.exports.create = function(name, xmldec, doctype, options) {
            var doc, root;
            if (name == null) {
              throw new Error("Root element needs a name.");
            }
            options = assign2({}, xmldec, doctype, options);
            doc = new XMLDocument(options);
            root = doc.element(name);
            if (!options.headless) {
              doc.declaration(options);
              if (options.pubID != null || options.sysID != null) {
                doc.dtd(options);
              }
            }
            return root;
          };
          module3.exports.begin = function(options, onData, onEnd) {
            var ref1;
            if (isFunction2(options)) {
              ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
              options = {};
            }
            if (onData) {
              return new XMLDocumentCB(options, onData, onEnd);
            } else {
              return new XMLDocument(options);
            }
          };
          module3.exports.stringWriter = function(options) {
            return new XMLStringWriter(options);
          };
          module3.exports.streamWriter = function(stream, options) {
            return new XMLStreamWriter(stream, options);
          };
          module3.exports.implementation = new XMLDOMImplementation();
          module3.exports.nodeType = NodeType;
          module3.exports.writerState = WriterState;
        }).call(this);
      }, { "./NodeType": 498, "./Utility": 499, "./WriterState": 500, "./XMLDOMImplementation": 507, "./XMLDocument": 515, "./XMLDocumentCB": 516, "./XMLStreamWriter": 524, "./XMLStringWriter": 525 }], 530: [function(require2, module3, exports3) {
        module3.exports = extend2;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function extend2() {
          var target = {};
          for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (hasOwnProperty2.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }
      }, {}], 531: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.fill.js");
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.object.to-string.js");
        require2("core-js/modules/es.regexp.to-string.js");
        require2("core-js/modules/es.array.join.js");
        require2("core-js/modules/es.array.slice.js");
        var Buffer2 = require2("buffer").Buffer;
        var sha = require2("./sha");
        var sha2562 = require2("./sha256");
        var md52 = require2("./md5");
        var algorithms = {
          sha1: sha,
          sha256: sha2562,
          md5: md52
        };
        var blocksize = 64;
        var zeroBuffer = Buffer2.alloc(blocksize);
        zeroBuffer.fill(0);
        function hmac2(fn, key, data) {
          if (!Buffer2.isBuffer(key))
            key = Buffer2.from(key);
          if (!Buffer2.isBuffer(data))
            data = Buffer2.from(data);
          if (key.length > blocksize) {
            key = fn(key);
          } else if (key.length < blocksize) {
            key = Buffer2.concat([key, zeroBuffer], blocksize);
          }
          var ipad = Buffer2.alloc(blocksize), opad = Buffer2.alloc(blocksize);
          for (var i = 0; i < blocksize; i++) {
            ipad[i] = key[i] ^ 54;
            opad[i] = key[i] ^ 92;
          }
          var hash2 = fn(Buffer2.concat([ipad, data]));
          return fn(Buffer2.concat([opad, hash2]));
        }
        function hash(alg, key) {
          alg = alg || "sha1";
          var fn = algorithms[alg];
          var bufs = [];
          var length = 0;
          if (!fn)
            error("algorithm:", alg, "is not yet supported");
          return {
            update: function update(data) {
              if (!Buffer2.isBuffer(data))
                data = Buffer2.from(data);
              bufs.push(data);
              length += data.length;
              return this;
            },
            digest: function digest(enc) {
              var buf = Buffer2.concat(bufs);
              var r = key ? hmac2(fn, key, buf) : fn(buf);
              bufs = null;
              return enc ? r.toString(enc) : r;
            }
          };
        }
        function error() {
          var m2 = [].slice.call(arguments).join(" ");
          throw new Error([m2, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join("\n"));
        }
        exports3.createHash = function(alg) {
          return hash(alg);
        };
        exports3.createHmac = function(alg, key) {
          return hash(alg, key);
        };
        exports3.createCredentials = function() {
          error("sorry,createCredentials is not implemented yet");
        };
        exports3.createCipher = function() {
          error("sorry,createCipher is not implemented yet");
        };
        exports3.createCipheriv = function() {
          error("sorry,createCipheriv is not implemented yet");
        };
        exports3.createDecipher = function() {
          error("sorry,createDecipher is not implemented yet");
        };
        exports3.createDecipheriv = function() {
          error("sorry,createDecipheriv is not implemented yet");
        };
        exports3.createSign = function() {
          error("sorry,createSign is not implemented yet");
        };
        exports3.createVerify = function() {
          error("sorry,createVerify is not implemented yet");
        };
        exports3.createDiffieHellman = function() {
          error("sorry,createDiffieHellman is not implemented yet");
        };
        exports3.pbkdf2 = function() {
          error("sorry,pbkdf2 is not implemented yet");
        };
      }, { "./md5": 533, "./sha": 534, "./sha256": 535, "buffer": 103, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.fill.js": 311, "core-js/modules/es.array.join.js": 317, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.regexp.to-string.js": 339 }], 532: [function(require2, module3, exports3) {
        require2("core-js/modules/es.array.fill.js");
        require2("core-js/modules/es.array.concat.js");
        var Buffer2 = require2("buffer").Buffer;
        var intSize = 4;
        var zeroBuffer = Buffer2.alloc(intSize);
        zeroBuffer.fill(0);
        var chrsz = 8;
        function toArray(buf, bigEndian) {
          if (buf.length % intSize !== 0) {
            var len = buf.length + (intSize - buf.length % intSize);
            buf = Buffer2.concat([buf, zeroBuffer], len);
          }
          var arr = [];
          var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
          for (var i = 0; i < buf.length; i += intSize) {
            arr.push(fn.call(buf, i));
          }
          return arr;
        }
        function toBuffer(arr, size2, bigEndian) {
          var buf = Buffer2.alloc(size2);
          var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
          for (var i = 0; i < arr.length; i++) {
            fn.call(buf, arr[i], i * 4, true);
          }
          return buf;
        }
        function hash(buf, fn, hashSize, bigEndian) {
          if (!Buffer2.isBuffer(buf))
            buf = Buffer2.from(buf);
          var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
          return toBuffer(arr, hashSize, bigEndian);
        }
        module3.exports = {
          hash
        };
      }, { "buffer": 103, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.fill.js": 311 }], 533: [function(require2, module3, exports3) {
        var helpers = require2("./helpers");
        function core_md5(x, len) {
          x[len >> 5] |= 128 << len % 32;
          x[(len + 64 >>> 9 << 4) + 14] = len;
          var a = 1732584193;
          var b = -271733879;
          var c = -1732584194;
          var d = 271733878;
          for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
            d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
          }
          return Array(a, b, c, d);
        }
        function md5_cmn(q, a, b, x, s2, t2) {
          return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t2)), s2), b);
        }
        function md5_ff(a, b, c, d, x, s2, t2) {
          return md5_cmn(b & c | ~b & d, a, b, x, s2, t2);
        }
        function md5_gg(a, b, c, d, x, s2, t2) {
          return md5_cmn(b & d | c & ~d, a, b, x, s2, t2);
        }
        function md5_hh(a, b, c, d, x, s2, t2) {
          return md5_cmn(b ^ c ^ d, a, b, x, s2, t2);
        }
        function md5_ii(a, b, c, d, x, s2, t2) {
          return md5_cmn(c ^ (b | ~d), a, b, x, s2, t2);
        }
        function safe_add(x, y) {
          var lsw = (x & 65535) + (y & 65535);
          var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return msw << 16 | lsw & 65535;
        }
        function bit_rol(num, cnt) {
          return num << cnt | num >>> 32 - cnt;
        }
        module3.exports = function md52(buf) {
          return helpers.hash(buf, core_md5, 16);
        };
      }, { "./helpers": 532 }], 534: [function(require2, module3, exports3) {
        var helpers = require2("./helpers");
        function core_sha1(x, len) {
          x[len >> 5] |= 128 << 24 - len % 32;
          x[(len + 64 >> 9 << 4) + 15] = len;
          var w = Array(80);
          var a = 1732584193;
          var b = -271733879;
          var c = -1732584194;
          var d = 271733878;
          var e2 = -1009589776;
          for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            var olde = e2;
            for (var j = 0; j < 80; j++) {
              if (j < 16)
                w[j] = x[i + j];
              else
                w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
              var t2 = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e2, w[j]), sha1_kt(j)));
              e2 = d;
              d = c;
              c = rol(b, 30);
              b = a;
              a = t2;
            }
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
            e2 = safe_add(e2, olde);
          }
          return Array(a, b, c, d, e2);
        }
        function sha1_ft(t2, b, c, d) {
          if (t2 < 20)
            return b & c | ~b & d;
          if (t2 < 40)
            return b ^ c ^ d;
          if (t2 < 60)
            return b & c | b & d | c & d;
          return b ^ c ^ d;
        }
        function sha1_kt(t2) {
          return t2 < 20 ? 1518500249 : t2 < 40 ? 1859775393 : t2 < 60 ? -1894007588 : -899497514;
        }
        function safe_add(x, y) {
          var lsw = (x & 65535) + (y & 65535);
          var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return msw << 16 | lsw & 65535;
        }
        function rol(num, cnt) {
          return num << cnt | num >>> 32 - cnt;
        }
        module3.exports = function sha12(buf) {
          return helpers.hash(buf, core_sha1, 20, true);
        };
      }, { "./helpers": 532 }], 535: [function(require2, module3, exports3) {
        var helpers = require2("./helpers");
        var safe_add = function safe_add2(x, y) {
          var lsw = (x & 65535) + (y & 65535);
          var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return msw << 16 | lsw & 65535;
        };
        var S = function S2(X, n2) {
          return X >>> n2 | X << 32 - n2;
        };
        var R = function R2(X, n2) {
          return X >>> n2;
        };
        var Ch = function Ch2(x, y, z) {
          return x & y ^ ~x & z;
        };
        var Maj = function Maj2(x, y, z) {
          return x & y ^ x & z ^ y & z;
        };
        var Sigma0256 = function Sigma02562(x) {
          return S(x, 2) ^ S(x, 13) ^ S(x, 22);
        };
        var Sigma1256 = function Sigma12562(x) {
          return S(x, 6) ^ S(x, 11) ^ S(x, 25);
        };
        var Gamma0256 = function Gamma02562(x) {
          return S(x, 7) ^ S(x, 18) ^ R(x, 3);
        };
        var Gamma1256 = function Gamma12562(x) {
          return S(x, 17) ^ S(x, 19) ^ R(x, 10);
        };
        var core_sha256 = function core_sha2562(m2, l) {
          var K = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298);
          var HASH = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225);
          var W = new Array(64);
          var a, b, c, d, e2, f2, g, h, i, j;
          var T1, T2;
          m2[l >> 5] |= 128 << 24 - l % 32;
          m2[(l + 64 >> 9 << 4) + 15] = l;
          for (var i = 0; i < m2.length; i += 16) {
            a = HASH[0];
            b = HASH[1];
            c = HASH[2];
            d = HASH[3];
            e2 = HASH[4];
            f2 = HASH[5];
            g = HASH[6];
            h = HASH[7];
            for (var j = 0; j < 64; j++) {
              if (j < 16) {
                W[j] = m2[j + i];
              } else {
                W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);
              }
              T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e2)), Ch(e2, f2, g)), K[j]), W[j]);
              T2 = safe_add(Sigma0256(a), Maj(a, b, c));
              h = g;
              g = f2;
              f2 = e2;
              e2 = safe_add(d, T1);
              d = c;
              c = b;
              b = a;
              a = safe_add(T1, T2);
            }
            HASH[0] = safe_add(a, HASH[0]);
            HASH[1] = safe_add(b, HASH[1]);
            HASH[2] = safe_add(c, HASH[2]);
            HASH[3] = safe_add(d, HASH[3]);
            HASH[4] = safe_add(e2, HASH[4]);
            HASH[5] = safe_add(f2, HASH[5]);
            HASH[6] = safe_add(g, HASH[6]);
            HASH[7] = safe_add(h, HASH[7]);
          }
          return HASH;
        };
        module3.exports = function sha2562(buf) {
          return helpers.hash(buf, core_sha256, 32, true);
        };
      }, { "./helpers": 532 }], 536: [function(require2, module3, exports3) {
        module3.exports = function() {
          return function() {
          };
        };
      }, {}], 537: [function(require2, module3, exports3) {
        (function(Buffer2) {
          (function() {
            var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
            var _typeof2 = _interopRequireDefault(require2("@babel/runtime/helpers/typeof"));
            var _require = require2("stream"), Stream = _require.Stream;
            var _require2 = require2("../lib/common/utils/isArray"), isArray2 = _require2.isArray;
            module3.exports.string = function isString2(obj) {
              return typeof obj === "string";
            };
            module3.exports.array = isArray2;
            module3.exports.buffer = Buffer2.isBuffer;
            function isStream(obj) {
              return obj instanceof Stream;
            }
            module3.exports.writableStream = function isWritableStream(obj) {
              return isStream(obj) && typeof obj._write === "function" && (0, _typeof2.default)(obj._writableState) === "object";
            };
          }).call(this);
        }).call(this, { "isBuffer": require2("../node_modules/is-buffer/index.js") });
      }, { "../lib/common/utils/isArray": 67, "../node_modules/is-buffer/index.js": 409, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/typeof": 91, "stream": 468 }], 538: [function(require2, module3, exports3) {
        var immediate = require2("immediate");
        var process = module3.exports = {};
        process.nextTick = immediate;
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop2() {
        }
        process.on = noop2;
        process.addListener = noop2;
        process.once = noop2;
        process.off = noop2;
        process.removeListener = noop2;
        process.removeAllListeners = noop2;
        process.emit = noop2;
        process.prependListener = noop2;
        process.prependOnceListener = noop2;
        process.listeners = function(name) {
          return [];
        };
        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };
      }, { "immediate": 401 }], 539: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            require2("core-js/modules/es.regexp.exec.js");
            require2("core-js/modules/es.string.search.js");
            var ClientRequest = require2("./lib/request");
            var response = require2("./lib/response");
            var extend2 = require2("xtend");
            var statusCodes = require2("builtin-status-codes");
            var url = require2("url");
            var http = exports3;
            http.request = function(opts, cb) {
              if (typeof opts === "string")
                opts = url.parse(opts);
              else
                opts = extend2(opts);
              var defaultProtocol = global3.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
              var protocol = opts.protocol || defaultProtocol;
              var host2 = opts.hostname || opts.host;
              var port = opts.port;
              var path = opts.path || "/";
              if (host2 && host2.indexOf(":") !== -1)
                host2 = "[" + host2 + "]";
              opts.url = (host2 ? protocol + "//" + host2 : "") + (port ? ":" + port : "") + path;
              opts.method = (opts.method || "GET").toUpperCase();
              opts.headers = opts.headers || {};
              var req = new ClientRequest(opts);
              if (cb)
                req.on("response", cb);
              return req;
            };
            http.get = function get2(opts, cb) {
              var req = http.request(opts, cb);
              req.end();
              return req;
            };
            http.ClientRequest = ClientRequest;
            http.IncomingMessage = response.IncomingMessage;
            http.Agent = function() {
            };
            http.Agent.defaultMaxSockets = 4;
            http.globalAgent = new http.Agent();
            http.STATUS_CODES = statusCodes;
            http.METHODS = ["CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE"];
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "./lib/request": 541, "./lib/response": 542, "builtin-status-codes": 104, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.search.js": 346, "url": 543, "xtend": 530 }], 540: [function(require2, module3, exports3) {
        (function(global3) {
          (function() {
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.promise.js");
            require2("core-js/modules/es.array-buffer.constructor.js");
            require2("core-js/modules/es.array-buffer.slice.js");
            require2("core-js/modules/es.array.slice.js");
            exports3.fetch = isFunction2(global3.fetch) && isFunction2(global3.ReadableStream);
            exports3.writableStream = isFunction2(global3.WritableStream);
            exports3.abortController = isFunction2(global3.AbortController);
            exports3.blobConstructor = false;
            try {
              new Blob([new ArrayBuffer(1)]);
              exports3.blobConstructor = true;
            } catch (e2) {
            }
            var xhr;
            function getXHR() {
              if (xhr !== void 0)
                return xhr;
              if (global3.XMLHttpRequest) {
                xhr = new global3.XMLHttpRequest();
                try {
                  xhr.open("GET", global3.XDomainRequest ? "/" : "https://example.com");
                } catch (e2) {
                  xhr = null;
                }
              } else {
                xhr = null;
              }
              return xhr;
            }
            function checkTypeSupport(type) {
              var xhr2 = getXHR();
              if (!xhr2)
                return false;
              try {
                xhr2.responseType = type;
                return xhr2.responseType === type;
              } catch (e2) {
              }
              return false;
            }
            var haveArrayBuffer = typeof global3.ArrayBuffer !== "undefined";
            var haveSlice = haveArrayBuffer && isFunction2(global3.ArrayBuffer.prototype.slice);
            exports3.arraybuffer = exports3.fetch || haveArrayBuffer && checkTypeSupport("arraybuffer");
            exports3.msstream = !exports3.fetch && haveSlice && checkTypeSupport("ms-stream");
            exports3.mozchunkedarraybuffer = !exports3.fetch && haveArrayBuffer && checkTypeSupport("moz-chunked-arraybuffer");
            exports3.overrideMimeType = exports3.fetch || (getXHR() ? isFunction2(getXHR().overrideMimeType) : false);
            exports3.vbArray = isFunction2(global3.VBArray);
            function isFunction2(value) {
              return typeof value === "function";
            }
            xhr = null;
          }).call(this);
        }).call(this, typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "core-js/modules/es.array-buffer.constructor.js": 308, "core-js/modules/es.array-buffer.slice.js": 309, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333 }], 541: [function(require2, module3, exports3) {
        (function(process, global3, Buffer2) {
          (function() {
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.regexp.to-string.js");
            require2("core-js/modules/web.dom-collections.for-each.js");
            require2("core-js/modules/es.object.keys.js");
            require2("core-js/modules/es.array.concat.js");
            require2("core-js/modules/es.array.map.js");
            require2("core-js/modules/es.function.name.js");
            require2("core-js/modules/es.promise.js");
            var capability = require2("./capability");
            var inherits = require2("inherits");
            var response = require2("./response");
            var stream = require2("readable-stream");
            var toArrayBuffer = require2("to-arraybuffer");
            var IncomingMessage = response.IncomingMessage;
            var rStates = response.readyStates;
            function decideMode(preferBinary, useFetch) {
              if (capability.fetch && useFetch) {
                return "fetch";
              } else if (capability.mozchunkedarraybuffer) {
                return "moz-chunked-arraybuffer";
              } else if (capability.msstream) {
                return "ms-stream";
              } else if (capability.arraybuffer && preferBinary) {
                return "arraybuffer";
              } else if (capability.vbArray && preferBinary) {
                return "text:vbarray";
              } else {
                return "text";
              }
            }
            var ClientRequest = module3.exports = function(opts) {
              var self2 = this;
              stream.Writable.call(self2);
              self2._opts = opts;
              self2._body = [];
              self2._headers = {};
              if (opts.auth)
                self2.setHeader("Authorization", "Basic " + new Buffer2(opts.auth).toString("base64"));
              Object.keys(opts.headers).forEach(function(name) {
                self2.setHeader(name, opts.headers[name]);
              });
              var preferBinary;
              var useFetch = true;
              if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !capability.abortController) {
                useFetch = false;
                preferBinary = true;
              } else if (opts.mode === "prefer-streaming") {
                preferBinary = false;
              } else if (opts.mode === "allow-wrong-content-type") {
                preferBinary = !capability.overrideMimeType;
              } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
                preferBinary = true;
              } else {
                throw new Error("Invalid value for opts.mode");
              }
              self2._mode = decideMode(preferBinary, useFetch);
              self2._fetchTimer = null;
              self2.on("finish", function() {
                self2._onFinish();
              });
            };
            inherits(ClientRequest, stream.Writable);
            ClientRequest.prototype.setHeader = function(name, value) {
              var self2 = this;
              var lowerName = name.toLowerCase();
              if (unsafeHeaders.indexOf(lowerName) !== -1)
                return;
              self2._headers[lowerName] = {
                name,
                value
              };
            };
            ClientRequest.prototype.getHeader = function(name) {
              var header = this._headers[name.toLowerCase()];
              if (header)
                return header.value;
              return null;
            };
            ClientRequest.prototype.removeHeader = function(name) {
              var self2 = this;
              delete self2._headers[name.toLowerCase()];
            };
            ClientRequest.prototype._onFinish = function() {
              var self2 = this;
              if (self2._destroyed)
                return;
              var opts = self2._opts;
              var headersObj = self2._headers;
              var body = null;
              if (opts.method !== "GET" && opts.method !== "HEAD") {
                if (capability.arraybuffer) {
                  body = toArrayBuffer(Buffer2.concat(self2._body));
                } else if (capability.blobConstructor) {
                  body = new global3.Blob(self2._body.map(function(buffer2) {
                    return toArrayBuffer(buffer2);
                  }), {
                    type: (headersObj["content-type"] || {}).value || ""
                  });
                } else {
                  body = Buffer2.concat(self2._body).toString();
                }
              }
              var headersList = [];
              Object.keys(headersObj).forEach(function(keyName) {
                var name = headersObj[keyName].name;
                var value = headersObj[keyName].value;
                if (Array.isArray(value)) {
                  value.forEach(function(v) {
                    headersList.push([name, v]);
                  });
                } else {
                  headersList.push([name, value]);
                }
              });
              if (self2._mode === "fetch") {
                var signal = null;
                if (capability.abortController) {
                  var controller = new AbortController();
                  signal = controller.signal;
                  self2._fetchAbortController = controller;
                  if ("requestTimeout" in opts && opts.requestTimeout !== 0) {
                    self2._fetchTimer = global3.setTimeout(function() {
                      self2.emit("requestTimeout");
                      if (self2._fetchAbortController)
                        self2._fetchAbortController.abort();
                    }, opts.requestTimeout);
                  }
                }
                global3.fetch(self2._opts.url, {
                  method: self2._opts.method,
                  headers: headersList,
                  body: body || void 0,
                  mode: "cors",
                  credentials: opts.withCredentials ? "include" : "same-origin",
                  signal
                }).then(function(response2) {
                  self2._fetchResponse = response2;
                  self2._connect();
                }, function(reason) {
                  global3.clearTimeout(self2._fetchTimer);
                  if (!self2._destroyed)
                    self2.emit("error", reason);
                });
              } else {
                var xhr = self2._xhr = new global3.XMLHttpRequest();
                try {
                  xhr.open(self2._opts.method, self2._opts.url, true);
                } catch (err) {
                  process.nextTick(function() {
                    self2.emit("error", err);
                  });
                  return;
                }
                if ("responseType" in xhr)
                  xhr.responseType = self2._mode.split(":")[0];
                if ("withCredentials" in xhr)
                  xhr.withCredentials = !!opts.withCredentials;
                if (self2._mode === "text" && "overrideMimeType" in xhr)
                  xhr.overrideMimeType("text/plain; charset=x-user-defined");
                if ("requestTimeout" in opts) {
                  xhr.timeout = opts.requestTimeout;
                  xhr.ontimeout = function() {
                    self2.emit("requestTimeout");
                  };
                }
                headersList.forEach(function(header) {
                  xhr.setRequestHeader(header[0], header[1]);
                });
                self2._response = null;
                xhr.onreadystatechange = function() {
                  switch (xhr.readyState) {
                    case rStates.LOADING:
                    case rStates.DONE:
                      self2._onXHRProgress();
                      break;
                  }
                };
                if (self2._mode === "moz-chunked-arraybuffer") {
                  xhr.onprogress = function() {
                    self2._onXHRProgress();
                  };
                }
                xhr.onerror = function() {
                  if (self2._destroyed)
                    return;
                  self2.emit("error", new Error("XHR error"));
                };
                try {
                  xhr.send(body);
                } catch (err) {
                  process.nextTick(function() {
                    self2.emit("error", err);
                  });
                  return;
                }
              }
            };
            function statusValid(xhr) {
              try {
                var status = xhr.status;
                return status !== null && status !== 0;
              } catch (e2) {
                return false;
              }
            }
            ClientRequest.prototype._onXHRProgress = function() {
              var self2 = this;
              if (!statusValid(self2._xhr) || self2._destroyed)
                return;
              if (!self2._response)
                self2._connect();
              self2._response._onXHRProgress();
            };
            ClientRequest.prototype._connect = function() {
              var self2 = this;
              if (self2._destroyed)
                return;
              self2._response = new IncomingMessage(self2._xhr, self2._fetchResponse, self2._mode, self2._fetchTimer);
              self2._response.on("error", function(err) {
                self2.emit("error", err);
              });
              self2.emit("response", self2._response);
            };
            ClientRequest.prototype._write = function(chunk, encoding, cb) {
              var self2 = this;
              self2._body.push(chunk);
              cb();
            };
            ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
              var self2 = this;
              self2._destroyed = true;
              global3.clearTimeout(self2._fetchTimer);
              if (self2._response)
                self2._response._destroyed = true;
              if (self2._xhr)
                self2._xhr.abort();
              else if (self2._fetchAbortController)
                self2._fetchAbortController.abort();
            };
            ClientRequest.prototype.end = function(data, encoding, cb) {
              var self2 = this;
              if (typeof data === "function") {
                cb = data;
                data = void 0;
              }
              stream.Writable.prototype.end.call(self2, data, encoding, cb);
            };
            ClientRequest.prototype.flushHeaders = function() {
            };
            ClientRequest.prototype.setTimeout = function() {
            };
            ClientRequest.prototype.setNoDelay = function() {
            };
            ClientRequest.prototype.setSocketKeepAlive = function() {
            };
            var unsafeHeaders = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "user-agent", "via"];
          }).call(this);
        }).call(this, require2("_process"), typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require2("buffer").Buffer);
      }, { "./capability": 540, "./response": 542, "_process": 538, "buffer": 103, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.map.js": 318, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.regexp.to-string.js": 339, "core-js/modules/web.dom-collections.for-each.js": 380, "inherits": 407, "readable-stream": 463, "to-arraybuffer": 485 }], 542: [function(require2, module3, exports3) {
        (function(process, global3, Buffer2) {
          (function() {
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/web.dom-collections.for-each.js");
            require2("core-js/modules/es.promise.js");
            require2("core-js/modules/es.regexp.exec.js");
            require2("core-js/modules/es.string.split.js");
            require2("core-js/modules/es.string.match.js");
            require2("core-js/modules/es.array.iterator.js");
            require2("core-js/modules/es.array-buffer.slice.js");
            require2("core-js/modules/es.typed-array.uint8-array.js");
            require2("core-js/modules/es.typed-array.copy-within.js");
            require2("core-js/modules/es.typed-array.every.js");
            require2("core-js/modules/es.typed-array.fill.js");
            require2("core-js/modules/es.typed-array.filter.js");
            require2("core-js/modules/es.typed-array.find.js");
            require2("core-js/modules/es.typed-array.find-index.js");
            require2("core-js/modules/es.typed-array.for-each.js");
            require2("core-js/modules/es.typed-array.includes.js");
            require2("core-js/modules/es.typed-array.index-of.js");
            require2("core-js/modules/es.typed-array.iterator.js");
            require2("core-js/modules/es.typed-array.join.js");
            require2("core-js/modules/es.typed-array.last-index-of.js");
            require2("core-js/modules/es.typed-array.map.js");
            require2("core-js/modules/es.typed-array.reduce.js");
            require2("core-js/modules/es.typed-array.reduce-right.js");
            require2("core-js/modules/es.typed-array.reverse.js");
            require2("core-js/modules/es.typed-array.set.js");
            require2("core-js/modules/es.typed-array.slice.js");
            require2("core-js/modules/es.typed-array.some.js");
            require2("core-js/modules/es.typed-array.sort.js");
            require2("core-js/modules/es.typed-array.subarray.js");
            require2("core-js/modules/es.typed-array.to-locale-string.js");
            require2("core-js/modules/es.typed-array.to-string.js");
            require2("core-js/modules/es.array.slice.js");
            var capability = require2("./capability");
            var inherits = require2("inherits");
            var stream = require2("readable-stream");
            var rStates = exports3.readyStates = {
              UNSENT: 0,
              OPENED: 1,
              HEADERS_RECEIVED: 2,
              LOADING: 3,
              DONE: 4
            };
            var IncomingMessage = exports3.IncomingMessage = function(xhr, response, mode, fetchTimer) {
              var self2 = this;
              stream.Readable.call(self2);
              self2._mode = mode;
              self2.headers = {};
              self2.rawHeaders = [];
              self2.trailers = {};
              self2.rawTrailers = [];
              self2.on("end", function() {
                process.nextTick(function() {
                  self2.emit("close");
                });
              });
              if (mode === "fetch") {
                var read = function read2() {
                  reader.read().then(function(result) {
                    if (self2._destroyed)
                      return;
                    if (result.done) {
                      global3.clearTimeout(fetchTimer);
                      self2.push(null);
                      return;
                    }
                    self2.push(new Buffer2(result.value));
                    read2();
                  }).catch(function(err) {
                    global3.clearTimeout(fetchTimer);
                    if (!self2._destroyed)
                      self2.emit("error", err);
                  });
                };
                self2._fetchResponse = response;
                self2.url = response.url;
                self2.statusCode = response.status;
                self2.statusMessage = response.statusText;
                response.headers.forEach(function(header, key) {
                  self2.headers[key.toLowerCase()] = header;
                  self2.rawHeaders.push(key, header);
                });
                if (capability.writableStream) {
                  var writable = new WritableStream({
                    write: function write(chunk) {
                      return new Promise(function(resolve2, reject) {
                        if (self2._destroyed) {
                          reject();
                        } else if (self2.push(new Buffer2(chunk))) {
                          resolve2();
                        } else {
                          self2._resumeFetch = resolve2;
                        }
                      });
                    },
                    close: function close() {
                      global3.clearTimeout(fetchTimer);
                      if (!self2._destroyed)
                        self2.push(null);
                    },
                    abort: function abort(err) {
                      if (!self2._destroyed)
                        self2.emit("error", err);
                    }
                  });
                  try {
                    response.body.pipeTo(writable).catch(function(err) {
                      global3.clearTimeout(fetchTimer);
                      if (!self2._destroyed)
                        self2.emit("error", err);
                    });
                    return;
                  } catch (e2) {
                  }
                }
                var reader = response.body.getReader();
                read();
              } else {
                self2._xhr = xhr;
                self2._pos = 0;
                self2.url = xhr.responseURL;
                self2.statusCode = xhr.status;
                self2.statusMessage = xhr.statusText;
                var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
                headers.forEach(function(header) {
                  var matches = header.match(/^([^:]+):\s*(.*)/);
                  if (matches) {
                    var key = matches[1].toLowerCase();
                    if (key === "set-cookie") {
                      if (self2.headers[key] === void 0) {
                        self2.headers[key] = [];
                      }
                      self2.headers[key].push(matches[2]);
                    } else if (self2.headers[key] !== void 0) {
                      self2.headers[key] += ", " + matches[2];
                    } else {
                      self2.headers[key] = matches[2];
                    }
                    self2.rawHeaders.push(matches[1], matches[2]);
                  }
                });
                self2._charset = "x-user-defined";
                if (!capability.overrideMimeType) {
                  var mimeType = self2.rawHeaders["mime-type"];
                  if (mimeType) {
                    var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
                    if (charsetMatch) {
                      self2._charset = charsetMatch[1].toLowerCase();
                    }
                  }
                  if (!self2._charset)
                    self2._charset = "utf-8";
                }
              }
            };
            inherits(IncomingMessage, stream.Readable);
            IncomingMessage.prototype._read = function() {
              var self2 = this;
              var resolve2 = self2._resumeFetch;
              if (resolve2) {
                self2._resumeFetch = null;
                resolve2();
              }
            };
            IncomingMessage.prototype._onXHRProgress = function() {
              var self2 = this;
              var xhr = self2._xhr;
              var response = null;
              switch (self2._mode) {
                case "text:vbarray":
                  if (xhr.readyState !== rStates.DONE)
                    break;
                  try {
                    response = new global3.VBArray(xhr.responseBody).toArray();
                  } catch (e2) {
                  }
                  if (response !== null) {
                    self2.push(new Buffer2(response));
                    break;
                  }
                case "text":
                  try {
                    response = xhr.responseText;
                  } catch (e2) {
                    self2._mode = "text:vbarray";
                    break;
                  }
                  if (response.length > self2._pos) {
                    var newData = response.substr(self2._pos);
                    if (self2._charset === "x-user-defined") {
                      var buffer2 = new Buffer2(newData.length);
                      for (var i = 0; i < newData.length; i++)
                        buffer2[i] = newData.charCodeAt(i) & 255;
                      self2.push(buffer2);
                    } else {
                      self2.push(newData, self2._charset);
                    }
                    self2._pos = response.length;
                  }
                  break;
                case "arraybuffer":
                  if (xhr.readyState !== rStates.DONE || !xhr.response)
                    break;
                  response = xhr.response;
                  self2.push(new Buffer2(new Uint8Array(response)));
                  break;
                case "moz-chunked-arraybuffer":
                  response = xhr.response;
                  if (xhr.readyState !== rStates.LOADING || !response)
                    break;
                  self2.push(new Buffer2(new Uint8Array(response)));
                  break;
                case "ms-stream":
                  response = xhr.response;
                  if (xhr.readyState !== rStates.LOADING)
                    break;
                  var reader = new global3.MSStreamReader();
                  reader.onprogress = function() {
                    if (reader.result.byteLength > self2._pos) {
                      self2.push(new Buffer2(new Uint8Array(reader.result.slice(self2._pos))));
                      self2._pos = reader.result.byteLength;
                    }
                  };
                  reader.onload = function() {
                    self2.push(null);
                  };
                  reader.readAsArrayBuffer(response);
                  break;
              }
              if (self2._xhr.readyState === rStates.DONE && self2._mode !== "ms-stream") {
                self2.push(null);
              }
            };
          }).call(this);
        }).call(this, require2("_process"), typeof global2 !== "undefined" ? global2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require2("buffer").Buffer);
      }, { "./capability": 540, "_process": 538, "buffer": 103, "core-js/modules/es.array-buffer.slice.js": 309, "core-js/modules/es.array.iterator.js": 316, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.match.js": 344, "core-js/modules/es.string.split.js": 347, "core-js/modules/es.typed-array.copy-within.js": 356, "core-js/modules/es.typed-array.every.js": 357, "core-js/modules/es.typed-array.fill.js": 358, "core-js/modules/es.typed-array.filter.js": 359, "core-js/modules/es.typed-array.find-index.js": 360, "core-js/modules/es.typed-array.find.js": 361, "core-js/modules/es.typed-array.for-each.js": 362, "core-js/modules/es.typed-array.includes.js": 363, "core-js/modules/es.typed-array.index-of.js": 364, "core-js/modules/es.typed-array.iterator.js": 365, "core-js/modules/es.typed-array.join.js": 366, "core-js/modules/es.typed-array.last-index-of.js": 367, "core-js/modules/es.typed-array.map.js": 368, "core-js/modules/es.typed-array.reduce-right.js": 369, "core-js/modules/es.typed-array.reduce.js": 370, "core-js/modules/es.typed-array.reverse.js": 371, "core-js/modules/es.typed-array.set.js": 372, "core-js/modules/es.typed-array.slice.js": 373, "core-js/modules/es.typed-array.some.js": 374, "core-js/modules/es.typed-array.sort.js": 375, "core-js/modules/es.typed-array.subarray.js": 376, "core-js/modules/es.typed-array.to-locale-string.js": 377, "core-js/modules/es.typed-array.to-string.js": 378, "core-js/modules/es.typed-array.uint8-array.js": 379, "core-js/modules/web.dom-collections.for-each.js": 380, "inherits": 407, "readable-stream": 463 }], 543: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _typeof2 = _interopRequireDefault(require2("@babel/runtime/helpers/typeof"));
        require2("core-js/modules/es.regexp.exec.js");
        require2("core-js/modules/es.string.search.js");
        require2("core-js/modules/es.array.concat.js");
        require2("core-js/modules/es.string.split.js");
        require2("core-js/modules/es.string.replace.js");
        require2("core-js/modules/es.array.join.js");
        require2("core-js/modules/es.string.trim.js");
        require2("core-js/modules/es.string.match.js");
        require2("core-js/modules/es.array.slice.js");
        require2("core-js/modules/es.object.keys.js");
        require2("core-js/modules/es.array.splice.js");
        var punycode = require2("punycode");
        var util = require2("./util");
        exports3.parse = urlParse;
        exports3.resolve = urlResolve;
        exports3.resolveObject = urlResolveObject;
        exports3.format = urlFormat;
        exports3.Url = Url;
        function Url() {
          this.protocol = null;
          this.slashes = null;
          this.auth = null;
          this.host = null;
          this.port = null;
          this.hostname = null;
          this.hash = null;
          this.search = null;
          this.query = null;
          this.pathname = null;
          this.path = null;
          this.href = null;
        }
        var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"], unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims), autoEscape = ["'"].concat(unwise), nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape), hostEndingChars = ["/", "?", "#"], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
          javascript: true,
          "javascript:": true
        }, hostlessProtocol = {
          javascript: true,
          "javascript:": true
        }, slashedProtocol = {
          http: true,
          https: true,
          ftp: true,
          gopher: true,
          file: true,
          "http:": true,
          "https:": true,
          "ftp:": true,
          "gopher:": true,
          "file:": true
        }, querystring2 = require2("querystring");
        function urlParse(url, parseQueryString, slashesDenoteHost) {
          if (url && util.isObject(url) && url instanceof Url)
            return url;
          var u = new Url();
          u.parse(url, parseQueryString, slashesDenoteHost);
          return u;
        }
        Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
          if (!util.isString(url)) {
            throw new TypeError("Parameter 'url' must be a string, not " + (0, _typeof2.default)(url));
          }
          var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
          uSplit[0] = uSplit[0].replace(slashRegex, "/");
          url = uSplit.join(splitter);
          var rest = url;
          rest = rest.trim();
          if (!slashesDenoteHost && url.split("#").length === 1) {
            var simplePath = simplePathPattern.exec(rest);
            if (simplePath) {
              this.path = rest;
              this.href = rest;
              this.pathname = simplePath[1];
              if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) {
                  this.query = querystring2.parse(this.search.substr(1));
                } else {
                  this.query = this.search.substr(1);
                }
              } else if (parseQueryString) {
                this.search = "";
                this.query = {};
              }
              return this;
            }
          }
          var proto = protocolPattern.exec(rest);
          if (proto) {
            proto = proto[0];
            var lowerProto = proto.toLowerCase();
            this.protocol = lowerProto;
            rest = rest.substr(proto.length);
          }
          if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var slashes = rest.substr(0, 2) === "//";
            if (slashes && !(proto && hostlessProtocol[proto])) {
              rest = rest.substr(2);
              this.slashes = true;
            }
          }
          if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
            var hostEnd = -1;
            for (var i = 0; i < hostEndingChars.length; i++) {
              var hec = rest.indexOf(hostEndingChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                hostEnd = hec;
            }
            var auth, atSign;
            if (hostEnd === -1) {
              atSign = rest.lastIndexOf("@");
            } else {
              atSign = rest.lastIndexOf("@", hostEnd);
            }
            if (atSign !== -1) {
              auth = rest.slice(0, atSign);
              rest = rest.slice(atSign + 1);
              this.auth = decodeURIComponent(auth);
            }
            hostEnd = -1;
            for (var i = 0; i < nonHostChars.length; i++) {
              var hec = rest.indexOf(nonHostChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                hostEnd = hec;
            }
            if (hostEnd === -1)
              hostEnd = rest.length;
            this.host = rest.slice(0, hostEnd);
            rest = rest.slice(hostEnd);
            this.parseHost();
            this.hostname = this.hostname || "";
            var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
            if (!ipv6Hostname) {
              var hostparts = this.hostname.split(".");
              for (var i = 0, l = hostparts.length; i < l; i++) {
                var part = hostparts[i];
                if (!part)
                  continue;
                if (!part.match(hostnamePartPattern)) {
                  var newpart = "";
                  for (var j = 0, k = part.length; j < k; j++) {
                    if (part.charCodeAt(j) > 127) {
                      newpart += "x";
                    } else {
                      newpart += part[j];
                    }
                  }
                  if (!newpart.match(hostnamePartPattern)) {
                    var validParts = hostparts.slice(0, i);
                    var notHost = hostparts.slice(i + 1);
                    var bit = part.match(hostnamePartStart);
                    if (bit) {
                      validParts.push(bit[1]);
                      notHost.unshift(bit[2]);
                    }
                    if (notHost.length) {
                      rest = "/" + notHost.join(".") + rest;
                    }
                    this.hostname = validParts.join(".");
                    break;
                  }
                }
              }
            }
            if (this.hostname.length > hostnameMaxLen) {
              this.hostname = "";
            } else {
              this.hostname = this.hostname.toLowerCase();
            }
            if (!ipv6Hostname) {
              this.hostname = punycode.toASCII(this.hostname);
            }
            var p2 = this.port ? ":" + this.port : "";
            var h = this.hostname || "";
            this.host = h + p2;
            this.href += this.host;
            if (ipv6Hostname) {
              this.hostname = this.hostname.substr(1, this.hostname.length - 2);
              if (rest[0] !== "/") {
                rest = "/" + rest;
              }
            }
          }
          if (!unsafeProtocol[lowerProto]) {
            for (var i = 0, l = autoEscape.length; i < l; i++) {
              var ae = autoEscape[i];
              if (rest.indexOf(ae) === -1)
                continue;
              var esc = encodeURIComponent(ae);
              if (esc === ae) {
                esc = escape(ae);
              }
              rest = rest.split(ae).join(esc);
            }
          }
          var hash = rest.indexOf("#");
          if (hash !== -1) {
            this.hash = rest.substr(hash);
            rest = rest.slice(0, hash);
          }
          var qm = rest.indexOf("?");
          if (qm !== -1) {
            this.search = rest.substr(qm);
            this.query = rest.substr(qm + 1);
            if (parseQueryString) {
              this.query = querystring2.parse(this.query);
            }
            rest = rest.slice(0, qm);
          } else if (parseQueryString) {
            this.search = "";
            this.query = {};
          }
          if (rest)
            this.pathname = rest;
          if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
            this.pathname = "/";
          }
          if (this.pathname || this.search) {
            var p2 = this.pathname || "";
            var s2 = this.search || "";
            this.path = p2 + s2;
          }
          this.href = this.format();
          return this;
        };
        function urlFormat(obj) {
          if (util.isString(obj))
            obj = urlParse(obj);
          if (!(obj instanceof Url))
            return Url.prototype.format.call(obj);
          return obj.format();
        }
        Url.prototype.format = function() {
          var auth = this.auth || "";
          if (auth) {
            auth = encodeURIComponent(auth);
            auth = auth.replace(/%3A/i, ":");
            auth += "@";
          }
          var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host2 = false, query = "";
          if (this.host) {
            host2 = auth + this.host;
          } else if (this.hostname) {
            host2 = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
            if (this.port) {
              host2 += ":" + this.port;
            }
          }
          if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
            query = querystring2.stringify(this.query);
          }
          var search = this.search || query && "?" + query || "";
          if (protocol && protocol.substr(-1) !== ":")
            protocol += ":";
          if (this.slashes || (!protocol || slashedProtocol[protocol]) && host2 !== false) {
            host2 = "//" + (host2 || "");
            if (pathname && pathname.charAt(0) !== "/")
              pathname = "/" + pathname;
          } else if (!host2) {
            host2 = "";
          }
          if (hash && hash.charAt(0) !== "#")
            hash = "#" + hash;
          if (search && search.charAt(0) !== "?")
            search = "?" + search;
          pathname = pathname.replace(/[?#]/g, function(match) {
            return encodeURIComponent(match);
          });
          search = search.replace("#", "%23");
          return protocol + host2 + pathname + search + hash;
        };
        function urlResolve(source, relative) {
          return urlParse(source, false, true).resolve(relative);
        }
        Url.prototype.resolve = function(relative) {
          return this.resolveObject(urlParse(relative, false, true)).format();
        };
        function urlResolveObject(source, relative) {
          if (!source)
            return relative;
          return urlParse(source, false, true).resolveObject(relative);
        }
        Url.prototype.resolveObject = function(relative) {
          if (util.isString(relative)) {
            var rel = new Url();
            rel.parse(relative, false, true);
            relative = rel;
          }
          var result = new Url();
          var tkeys = Object.keys(this);
          for (var tk = 0; tk < tkeys.length; tk++) {
            var tkey = tkeys[tk];
            result[tkey] = this[tkey];
          }
          result.hash = relative.hash;
          if (relative.href === "") {
            result.href = result.format();
            return result;
          }
          if (relative.slashes && !relative.protocol) {
            var rkeys = Object.keys(relative);
            for (var rk = 0; rk < rkeys.length; rk++) {
              var rkey = rkeys[rk];
              if (rkey !== "protocol")
                result[rkey] = relative[rkey];
            }
            if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
              result.path = result.pathname = "/";
            }
            result.href = result.format();
            return result;
          }
          if (relative.protocol && relative.protocol !== result.protocol) {
            if (!slashedProtocol[relative.protocol]) {
              var keys = Object.keys(relative);
              for (var v = 0; v < keys.length; v++) {
                var k = keys[v];
                result[k] = relative[k];
              }
              result.href = result.format();
              return result;
            }
            result.protocol = relative.protocol;
            if (!relative.host && !hostlessProtocol[relative.protocol]) {
              var relPath = (relative.pathname || "").split("/");
              while (relPath.length && !(relative.host = relPath.shift()))
                ;
              if (!relative.host)
                relative.host = "";
              if (!relative.hostname)
                relative.hostname = "";
              if (relPath[0] !== "")
                relPath.unshift("");
              if (relPath.length < 2)
                relPath.unshift("");
              result.pathname = relPath.join("/");
            } else {
              result.pathname = relative.pathname;
            }
            result.search = relative.search;
            result.query = relative.query;
            result.host = relative.host || "";
            result.auth = relative.auth;
            result.hostname = relative.hostname || relative.host;
            result.port = relative.port;
            if (result.pathname || result.search) {
              var p2 = result.pathname || "";
              var s2 = result.search || "";
              result.path = p2 + s2;
            }
            result.slashes = result.slashes || relative.slashes;
            result.href = result.format();
            return result;
          }
          var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
          if (psychotic) {
            result.hostname = "";
            result.port = null;
            if (result.host) {
              if (srcPath[0] === "")
                srcPath[0] = result.host;
              else
                srcPath.unshift(result.host);
            }
            result.host = "";
            if (relative.protocol) {
              relative.hostname = null;
              relative.port = null;
              if (relative.host) {
                if (relPath[0] === "")
                  relPath[0] = relative.host;
                else
                  relPath.unshift(relative.host);
              }
              relative.host = null;
            }
            mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
          }
          if (isRelAbs) {
            result.host = relative.host || relative.host === "" ? relative.host : result.host;
            result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
            result.search = relative.search;
            result.query = relative.query;
            srcPath = relPath;
          } else if (relPath.length) {
            if (!srcPath)
              srcPath = [];
            srcPath.pop();
            srcPath = srcPath.concat(relPath);
            result.search = relative.search;
            result.query = relative.query;
          } else if (!util.isNullOrUndefined(relative.search)) {
            if (psychotic) {
              result.hostname = result.host = srcPath.shift();
              var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
              if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
              }
            }
            result.search = relative.search;
            result.query = relative.query;
            if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
              result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
            }
            result.href = result.format();
            return result;
          }
          if (!srcPath.length) {
            result.pathname = null;
            if (result.search) {
              result.path = "/" + result.search;
            } else {
              result.path = null;
            }
            result.href = result.format();
            return result;
          }
          var last = srcPath.slice(-1)[0];
          var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
          var up = 0;
          for (var i = srcPath.length; i >= 0; i--) {
            last = srcPath[i];
            if (last === ".") {
              srcPath.splice(i, 1);
            } else if (last === "..") {
              srcPath.splice(i, 1);
              up++;
            } else if (up) {
              srcPath.splice(i, 1);
              up--;
            }
          }
          if (!mustEndAbs && !removeAllDots) {
            for (; up--; up) {
              srcPath.unshift("..");
            }
          }
          if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
            srcPath.unshift("");
          }
          if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
            srcPath.push("");
          }
          var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
          if (psychotic) {
            result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }
          mustEndAbs = mustEndAbs || result.host && srcPath.length;
          if (mustEndAbs && !isAbsolute) {
            srcPath.unshift("");
          }
          if (!srcPath.length) {
            result.pathname = null;
            result.path = null;
          } else {
            result.pathname = srcPath.join("/");
          }
          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
          }
          result.auth = relative.auth || result.auth;
          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        };
        Url.prototype.parseHost = function() {
          var host2 = this.host;
          var port = portPattern.exec(host2);
          if (port) {
            port = port[0];
            if (port !== ":") {
              this.port = port.substr(1);
            }
            host2 = host2.substr(0, host2.length - port.length);
          }
          if (host2)
            this.hostname = host2;
        };
      }, { "./util": 544, "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/typeof": 91, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.array.join.js": 317, "core-js/modules/es.array.slice.js": 319, "core-js/modules/es.array.splice.js": 321, "core-js/modules/es.object.keys.js": 328, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.match.js": 344, "core-js/modules/es.string.replace.js": 345, "core-js/modules/es.string.search.js": 346, "core-js/modules/es.string.split.js": 347, "core-js/modules/es.string.trim.js": 349, "punycode": 443, "querystring": 451 }], 544: [function(require2, module3, exports3) {
        var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
        var _typeof2 = _interopRequireDefault(require2("@babel/runtime/helpers/typeof"));
        module3.exports = {
          isString: function isString2(arg) {
            return typeof arg === "string";
          },
          isObject: function isObject2(arg) {
            return (0, _typeof2.default)(arg) === "object" && arg !== null;
          },
          isNull: function isNull(arg) {
            return arg === null;
          },
          isNullOrUndefined: function isNullOrUndefined(arg) {
            return arg == null;
          }
        };
      }, { "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/typeof": 91 }], 545: [function(require2, module3, exports3) {
        require2("core-js/modules/es.number.constructor.js");
        exports3.encodeURIComponent = function(text2) {
          try {
            return encodeURIComponent(text2);
          } catch (e2) {
            return text2;
          }
        };
        exports3.escape = require2("escape-html");
        exports3.timestamp = function timestamp(t2) {
          if (t2) {
            var v = t2;
            if (typeof v === "string") {
              v = Number(v);
            }
            if (String(t2).length === 10) {
              v *= 1e3;
            }
            return new Date(v);
          }
          return Math.round(Date.now() / 1e3);
        };
      }, { "core-js/modules/es.number.constructor.js": 324, "escape-html": 385 }], 546: [function(require2, module3, exports3) {
        (function(process, Buffer2) {
          (function() {
            var _interopRequireDefault = require2("@babel/runtime/helpers/interopRequireDefault");
            var _typeof2 = _interopRequireDefault(require2("@babel/runtime/helpers/typeof"));
            require2("core-js/modules/es.string.trim.js");
            require2("core-js/modules/es.object.to-string.js");
            require2("core-js/modules/es.promise.js");
            require2("core-js/modules/es.regexp.exec.js");
            require2("core-js/modules/es.function.name.js");
            require2("core-js/modules/es.array.concat.js");
            var util = require2("util");
            var urlutil = require2("url");
            var http = require2("http");
            var https = require2("https");
            var debug = require2("debug")("urllib");
            var ms = require2("humanize-ms");
            var REQUEST_ID = 0;
            var MAX_VALUE = Math.pow(2, 31) - 10;
            var PROTO_RE = /^https?:\/\//i;
            function getAgent(agent, defaultAgent) {
              return agent === void 0 ? defaultAgent : agent;
            }
            function parseContentType(str) {
              if (!str) {
                return "";
              }
              return str.split(";")[0].trim().toLowerCase();
            }
            function makeCallback(resolve2, reject) {
              return function(err, data, res) {
                if (err) {
                  return reject(err);
                }
                resolve2({
                  data,
                  status: res.statusCode,
                  headers: res.headers,
                  res
                });
              };
            }
            exports3.TIMEOUTS = [ms("300s"), ms("300s")];
            var TEXT_DATA_TYPES = ["json", "text"];
            exports3.request = function request(url, args, callback) {
              if (arguments.length === 2 && typeof args === "function") {
                callback = args;
                args = null;
              }
              if (typeof callback === "function") {
                return exports3.requestWithCallback(url, args, callback);
              }
              return new Promise(function(resolve2, reject) {
                exports3.requestWithCallback(url, args, makeCallback(resolve2, reject));
              });
            };
            exports3.requestWithCallback = function requestWithCallback(url, args, callback) {
              if (!url || typeof url !== "string" && (0, _typeof2.default)(url) !== "object") {
                var msg = util.format("expect request url to be a string or a http request options, but got %j", url);
                throw new Error(msg);
              }
              if (arguments.length === 2 && typeof args === "function") {
                callback = args;
                args = null;
              }
              args = args || {};
              if (REQUEST_ID >= MAX_VALUE) {
                REQUEST_ID = 0;
              }
              var reqId = ++REQUEST_ID;
              args.requestUrls = args.requestUrls || [];
              var reqMeta = {
                requestId: reqId,
                url,
                args,
                ctx: args.ctx
              };
              if (args.emitter) {
                args.emitter.emit("request", reqMeta);
              }
              args.timeout = args.timeout || exports3.TIMEOUTS;
              args.maxRedirects = args.maxRedirects || 10;
              args.streaming = args.streaming || args.customResponse;
              var requestStartTime = Date.now();
              var parsedUrl;
              if (typeof url === "string") {
                if (!PROTO_RE.test(url)) {
                  url = "https://" + url;
                }
                parsedUrl = urlutil.parse(url);
              } else {
                parsedUrl = url;
              }
              var method = (args.type || args.method || parsedUrl.method || "GET").toUpperCase();
              var port = parsedUrl.port || 80;
              var httplib = http;
              var agent = getAgent(args.agent, exports3.agent);
              var fixJSONCtlChars = args.fixJSONCtlChars;
              if (parsedUrl.protocol === "https:") {
                httplib = https;
                agent = getAgent(args.httpsAgent, exports3.httpsAgent);
                if (!parsedUrl.port) {
                  port = 443;
                }
              }
              var options = {
                host: parsedUrl.hostname || parsedUrl.host || "localhost",
                path: parsedUrl.path || "/",
                method,
                port,
                agent,
                headers: args.headers || {},
                // default is dns.lookup
                // https://github.com/nodejs/node/blob/master/lib/net.js#L986
                // custom dnslookup require node >= 4.0.0
                // https://github.com/nodejs/node/blob/archived-io.js-v0.12/lib/net.js#L952
                lookup: args.lookup
              };
              if (Array.isArray(args.timeout)) {
                options.requestTimeout = args.timeout[args.timeout.length - 1];
              } else if (typeof args.timeout !== "undefined") {
                options.requestTimeout = args.timeout;
              }
              var auth = args.auth || parsedUrl.auth;
              if (auth) {
                options.auth = auth;
              }
              var body = args.content || args.data;
              var dataAsQueryString = method === "GET" || method === "HEAD" || args.dataAsQueryString;
              if (!args.content) {
                if (body && !(typeof body === "string" || Buffer2.isBuffer(body))) {
                  if (dataAsQueryString) {
                    body = args.nestedQuerystring ? qs.stringify(body) : querystring.stringify(body);
                  } else {
                    var contentType = options.headers["Content-Type"] || options.headers["content-type"];
                    if (!contentType) {
                      if (args.contentType === "json") {
                        contentType = "application/json";
                      } else {
                        contentType = "application/x-www-form-urlencoded";
                      }
                      options.headers["Content-Type"] = contentType;
                    }
                    if (parseContentType(contentType) === "application/json") {
                      body = JSON.stringify(body);
                    } else {
                      body = args.nestedQuerystring ? qs.stringify(body) : querystring.stringify(body);
                    }
                  }
                }
              }
              if (dataAsQueryString && body) {
                options.path += (parsedUrl.query ? "&" : "?") + body;
                body = null;
              }
              var requestSize = 0;
              if (body) {
                var length = body.length;
                if (!Buffer2.isBuffer(body)) {
                  length = Buffer2.byteLength(body);
                }
                requestSize = options.headers["Content-Length"] = length;
              }
              if (args.dataType === "json") {
                options.headers.Accept = "application/json";
              }
              if (typeof args.beforeRequest === "function") {
                args.beforeRequest(options);
              }
              var connectTimer = null;
              var responseTimer = null;
              var __err = null;
              var connected = false;
              var keepAliveSocket = false;
              var responseSize = 0;
              var statusCode = -1;
              var responseAborted = false;
              var remoteAddress = "";
              var remotePort = "";
              var timing = null;
              if (args.timing) {
                timing = {
                  // socket assigned
                  queuing: 0,
                  // dns lookup time
                  dnslookup: 0,
                  // socket connected
                  connected: 0,
                  // request sent
                  requestSent: 0,
                  // Time to first byte (TTFB)
                  waiting: 0,
                  contentDownload: 0
                };
              }
              function cancelConnectTimer() {
                if (connectTimer) {
                  clearTimeout(connectTimer);
                  connectTimer = null;
                }
              }
              function cancelResponseTimer() {
                if (responseTimer) {
                  clearTimeout(responseTimer);
                  responseTimer = null;
                }
              }
              function done(err, data, res) {
                cancelResponseTimer();
                if (!callback) {
                  console.warn("[urllib:warn] [%s] [%s] [worker:%s] %s %s callback twice!!!", Date(), reqId, process.pid, options.method, url);
                  if (err) {
                    console.warn("[urllib:warn] [%s] [%s] [worker:%s] %s: %s\nstack: %s", Date(), reqId, process.pid, err.name, err.message, err.stack);
                  }
                  return;
                }
                var cb = callback;
                callback = null;
                var headers = {};
                if (res) {
                  statusCode = res.statusCode;
                  headers = res.headers;
                }
                var requestUseTime = Date.now() - requestStartTime;
                if (timing) {
                  timing.contentDownload = requestUseTime;
                }
                debug("[%sms] done, %s bytes HTTP %s %s %s %s, keepAliveSocket: %s, timing: %j", requestUseTime, responseSize, statusCode, options.method, options.host, options.path, keepAliveSocket, timing);
                var response = {
                  status: statusCode,
                  statusCode,
                  headers,
                  size: responseSize,
                  aborted: responseAborted,
                  rt: requestUseTime,
                  keepAliveSocket,
                  data,
                  requestUrls: args.requestUrls,
                  timing,
                  remoteAddress,
                  remotePort
                };
                if (err) {
                  var agentStatus = "";
                  if (agent && typeof agent.getCurrentStatus === "function") {
                    agentStatus = ", agent status: " + JSON.stringify(agent.getCurrentStatus());
                  }
                  err.message += ", " + options.method + " " + url + " " + statusCode + " (connected: " + connected + ", keepalive socket: " + keepAliveSocket + agentStatus + ")\nheaders: " + JSON.stringify(headers);
                  err.data = data;
                  err.path = options.path;
                  err.status = statusCode;
                  err.headers = headers;
                  err.res = response;
                }
                cb(err, data, args.streaming ? res : response);
                if (args.emitter) {
                  reqMeta.url = url;
                  reqMeta.socket = req && req.connection;
                  reqMeta.options = options;
                  reqMeta.size = requestSize;
                  args.emitter.emit("response", {
                    requestId: reqId,
                    error: err,
                    ctx: args.ctx,
                    req: reqMeta,
                    res: response
                  });
                }
              }
              function handleRedirect(res) {
                var err = null;
                if (args.followRedirect && statuses.redirect[res.statusCode]) {
                  args._followRedirectCount = (args._followRedirectCount || 0) + 1;
                  var location2 = res.headers.location;
                  if (!location2) {
                    err = new Error("Got statusCode " + res.statusCode + " but cannot resolve next location from headers");
                    err.name = "FollowRedirectError";
                  } else if (args._followRedirectCount > args.maxRedirects) {
                    err = new Error("Exceeded maxRedirects. Probably stuck in a redirect loop " + url);
                    err.name = "MaxRedirectError";
                  } else {
                    var newUrl = args.formatRedirectUrl ? args.formatRedirectUrl(url, location2) : urlutil.resolve(url, location2);
                    debug("Request#%d %s: `redirected` from %s to %s", reqId, options.path, url, newUrl);
                    cancelResponseTimer();
                    if (args.headers && args.headers.Host && PROTO_RE.test(location2)) {
                      args.headers.Host = null;
                    }
                    var cb = callback;
                    callback = null;
                    exports3.requestWithCallback(newUrl, args, cb);
                    return {
                      redirect: true,
                      error: null
                    };
                  }
                }
                return {
                  redirect: false,
                  error: err
                };
              }
              if (args.gzip) {
                if (!options.headers["Accept-Encoding"] && !options.headers["accept-encoding"]) {
                  options.headers["Accept-Encoding"] = "gzip";
                }
              }
              function decodeContent(res, body2, cb) {
                var encoding = res.headers["content-encoding"];
                return cb(null, body2, encoding);
              }
              var writeStream = args.writeStream;
              debug("Request#%d %s %s with headers %j, options.path: %s", reqId, method, url, options.headers, options.path);
              args.requestUrls.push(url);
              function onResponse(res) {
                if (timing) {
                  timing.waiting = Date.now() - requestStartTime;
                }
                debug("Request#%d %s `req response` event emit: status %d, headers: %j", reqId, url, res.statusCode, res.headers);
                if (args.streaming) {
                  var result = handleRedirect(res);
                  if (result.redirect) {
                    res.resume();
                    return;
                  }
                  if (result.error) {
                    res.resume();
                    return done(result.error, null, res);
                  }
                  return done(null, null, res);
                }
                res.on("close", function() {
                  debug("Request#%d %s: `res close` event emit, total size %d", reqId, url, responseSize);
                });
                res.on("error", function() {
                  debug("Request#%d %s: `res error` event emit, total size %d", reqId, url, responseSize);
                });
                res.on("aborted", function() {
                  responseAborted = true;
                  debug("Request#%d %s: `res aborted` event emit, total size %d", reqId, url, responseSize);
                });
                if (writeStream) {
                  var _result = handleRedirect(res);
                  if (_result.redirect) {
                    res.resume();
                    return;
                  }
                  if (_result.error) {
                    res.resume();
                    writeStream.end();
                    return done(_result.error, null, res);
                  }
                  if (args.consumeWriteStream === false) {
                    res.on("end", done.bind(null, null, null, res));
                  } else {
                    {
                      writeStream.on("close", function() {
                        debug("Request#%d %s: writeStream close event emitted", reqId, url);
                        done(__err || null, null, res);
                      });
                    }
                  }
                  return res.pipe(writeStream);
                }
                var chunks = [];
                res.on("data", function(chunk) {
                  debug("Request#%d %s: `res data` event emit, size %d", reqId, url, chunk.length);
                  responseSize += chunk.length;
                  chunks.push(chunk);
                });
                res.on("end", function() {
                  var body2 = Buffer2.concat(chunks, responseSize);
                  debug("Request#%d %s: `res end` event emit, total size %d, _dumped: %s", reqId, url, responseSize, res._dumped);
                  if (__err) {
                    return done(__err, body2, res);
                  }
                  var result2 = handleRedirect(res);
                  if (result2.error) {
                    return done(result2.error, body2, res);
                  }
                  if (result2.redirect) {
                    return;
                  }
                  decodeContent(res, body2, function(err, data, encoding) {
                    if (err) {
                      return done(err, body2, res);
                    }
                    if (!encoding && TEXT_DATA_TYPES.indexOf(args.dataType) >= 0) {
                      try {
                        data = decodeBodyByCharset(data, res);
                      } catch (e2) {
                        debug("decodeBodyByCharset error: %s", e2);
                        return done(null, data, res);
                      }
                      if (args.dataType === "json") {
                        if (responseSize === 0) {
                          data = null;
                        } else {
                          var r = parseJSON(data, fixJSONCtlChars);
                          if (r.error) {
                            err = r.error;
                          } else {
                            data = r.data;
                          }
                        }
                      }
                    }
                    if (responseAborted) {
                      debug("Request#%d %s: Remote socket was terminated before `response.end()` was called", reqId, url);
                    }
                    done(err, data, res);
                  });
                });
              }
              var connectTimeout, responseTimeout;
              if (Array.isArray(args.timeout)) {
                connectTimeout = ms(args.timeout[0]);
                responseTimeout = ms(args.timeout[1]);
              } else {
                connectTimeout = responseTimeout = ms(args.timeout);
              }
              debug("ConnectTimeout: %d, ResponseTimeout: %d", connectTimeout, responseTimeout);
              function startConnectTimer() {
                debug("Connect timer ticking, timeout: %d", connectTimeout);
                connectTimer = setTimeout(function() {
                  connectTimer = null;
                  if (statusCode === -1) {
                    statusCode = -2;
                  }
                  var msg2 = "Connect timeout for " + connectTimeout + "ms";
                  var errorName = "ConnectionTimeoutError";
                  if (!req.socket) {
                    errorName = "SocketAssignTimeoutError";
                    msg2 += ", working sockets is full";
                  }
                  __err = new Error(msg2);
                  __err.name = errorName;
                  __err.requestId = reqId;
                  debug("ConnectTimeout: Request#%d %s %s: %s, connected: %s", reqId, url, __err.name, msg2, connected);
                  abortRequest();
                }, connectTimeout);
              }
              function startResposneTimer() {
                debug("Response timer ticking, timeout: %d", responseTimeout);
                responseTimer = setTimeout(function() {
                  responseTimer = null;
                  var msg2 = "Response timeout for " + responseTimeout + "ms";
                  var errorName = "ResponseTimeoutError";
                  __err = new Error(msg2);
                  __err.name = errorName;
                  __err.requestId = reqId;
                  debug("ResponseTimeout: Request#%d %s %s: %s, connected: %s", reqId, url, __err.name, msg2, connected);
                  abortRequest();
                }, responseTimeout);
              }
              var req;
              options.mode = args.mode ? args.mode : "";
              try {
                req = httplib.request(options, onResponse);
              } catch (err) {
                return done(err);
              }
              if (typeof window === "undefined") {
                startConnectTimer();
              } else {
                req.on("requestTimeout", function() {
                  if (statusCode === -1) {
                    statusCode = -2;
                  }
                  var msg2 = "Connect timeout for " + connectTimeout + "ms";
                  var errorName = "ConnectionTimeoutError";
                  __err = new Error(msg2);
                  __err.name = errorName;
                  __err.requestId = reqId;
                  abortRequest();
                });
              }
              function abortRequest() {
                debug("Request#%d %s abort, connected: %s", reqId, url, connected);
                if (!req.socket) {
                  __err.noSocket = true;
                  done(__err);
                }
                req.abort();
              }
              if (timing) {
                req.on("finish", function() {
                  timing.requestSent = Date.now() - requestStartTime;
                });
              }
              req.once("socket", function(socket) {
                if (timing) {
                  timing.queuing = Date.now() - requestStartTime;
                }
                var readyState = socket.readyState;
                if (readyState === "opening") {
                  socket.once("lookup", function(err, ip, addressType) {
                    debug("Request#%d %s lookup: %s, %s, %s", reqId, url, err, ip, addressType);
                    if (timing) {
                      timing.dnslookup = Date.now() - requestStartTime;
                    }
                    if (ip) {
                      remoteAddress = ip;
                    }
                  });
                  socket.once("connect", function() {
                    if (timing) {
                      timing.connected = Date.now() - requestStartTime;
                    }
                    cancelConnectTimer();
                    startResposneTimer();
                    debug("Request#%d %s new socket connected", reqId, url);
                    connected = true;
                    if (!remoteAddress) {
                      remoteAddress = socket.remoteAddress;
                    }
                    remotePort = socket.remotePort;
                  });
                  return;
                }
                debug("Request#%d %s reuse socket connected, readyState: %s", reqId, url, readyState);
                connected = true;
                keepAliveSocket = true;
                if (!remoteAddress) {
                  remoteAddress = socket.remoteAddress;
                }
                remotePort = socket.remotePort;
                cancelConnectTimer();
                startResposneTimer();
              });
              req.on("error", function(err) {
                if (err.name === "Error" || err.name === "TypeError") {
                  err.name = connected ? "ResponseError" : "RequestError";
                }
                err.message += ' (req "error")';
                debug("Request#%d %s `req error` event emit, %s: %s", reqId, url, err.name, err.message);
                done(__err || err);
              });
              if (writeStream) {
                writeStream.once("error", function(err) {
                  err.message += ' (writeStream "error")';
                  __err = err;
                  debug("Request#%d %s `writeStream error` event emit, %s: %s", reqId, url, err.name, err.message);
                  abortRequest();
                });
              }
              if (args.stream) {
                args.stream.pipe(req);
                args.stream.once("error", function(err) {
                  err.message += ' (stream "error")';
                  __err = err;
                  debug("Request#%d %s `readStream error` event emit, %s: %s", reqId, url, err.name, err.message);
                  abortRequest();
                });
              } else {
                req.end(body);
              }
              req.requestId = reqId;
              return req;
            };
          }).call(this);
        }).call(this, require2("_process"), require2("buffer").Buffer);
      }, { "@babel/runtime/helpers/interopRequireDefault": 86, "@babel/runtime/helpers/typeof": 91, "_process": 538, "buffer": 103, "core-js/modules/es.array.concat.js": 310, "core-js/modules/es.function.name.js": 322, "core-js/modules/es.object.to-string.js": 329, "core-js/modules/es.promise.js": 333, "core-js/modules/es.regexp.exec.js": 338, "core-js/modules/es.string.trim.js": 349, "debug": 536, "http": 539, "https": 398, "humanize-ms": 399, "url": 543, "util": 489 }] }, {}, [1])(1);
    });
  })(window);
})(aliyunOssSdk);
var aliyunOssSdkExports = aliyunOssSdk.exports;
const OSS = /* @__PURE__ */ getDefaultExportFromCjs(aliyunOssSdkExports);
exports.CryptoJS = CryptoJS;
exports.OSS = OSS;
exports._export_sfc = _export_sfc;
exports.computed = computed;
exports.createPersistedState = createPersistedState;
exports.createPinia = createPinia;
exports.createSSRApp = createSSRApp;
exports.dayjs = dayjs;
exports.defineStore = defineStore;
exports.e = e;
exports.f = f;
exports.index = index;
exports.initVueI18n = initVueI18n;
exports.m = m;
exports.marked = marked;
exports.n = n;
exports.nextTick$1 = nextTick$1;
exports.o = o;
exports.onBeforeMount = onBeforeMount;
exports.onLaunch = onLaunch;
exports.onLoad = onLoad;
exports.onMounted = onMounted;
exports.p = p;
exports.purify = purify;
exports.reactive = reactive;
exports.ref = ref;
exports.resolveComponent = resolveComponent;
exports.s = s;
exports.sr = sr;
exports.storeToRefs = storeToRefs;
exports.t = t;
exports.unref = unref;
exports.watch = watch;
